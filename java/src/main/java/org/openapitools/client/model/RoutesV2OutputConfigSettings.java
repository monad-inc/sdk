/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CriblHttpSettingsConfig;
import org.openapitools.client.model.ElasticsearchSettingsConfig;
import org.openapitools.client.model.FormatterFormatConfig;
import org.openapitools.client.model.HttpSettingsConfig;
import org.openapitools.client.model.OpensearchSettingsConfig;
import org.openapitools.client.model.S3SettingsConfig;
import org.openapitools.client.model.SentinelSettingsConfig;
import org.openapitools.client.model.SnowflakeSettingsConfig;
import org.openapitools.client.model.SplunkSettingsConfig;
import org.openapitools.client.model.SumologicSettingsConfig;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-26T22:00:29.175050968Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class RoutesV2OutputConfigSettings extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RoutesV2OutputConfigSettings.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RoutesV2OutputConfigSettings.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RoutesV2OutputConfigSettings' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CriblHttpSettingsConfig> adapterCriblHttpSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CriblHttpSettingsConfig.class));
            final TypeAdapter<ElasticsearchSettingsConfig> adapterElasticsearchSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(ElasticsearchSettingsConfig.class));
            final TypeAdapter<HttpSettingsConfig> adapterHttpSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(HttpSettingsConfig.class));
            final TypeAdapter<OpensearchSettingsConfig> adapterOpensearchSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(OpensearchSettingsConfig.class));
            final TypeAdapter<S3SettingsConfig> adapterS3SettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(S3SettingsConfig.class));
            final TypeAdapter<SentinelSettingsConfig> adapterSentinelSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SentinelSettingsConfig.class));
            final TypeAdapter<SnowflakeSettingsConfig> adapterSnowflakeSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnowflakeSettingsConfig.class));
            final TypeAdapter<SplunkSettingsConfig> adapterSplunkSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SplunkSettingsConfig.class));
            final TypeAdapter<SumologicSettingsConfig> adapterSumologicSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SumologicSettingsConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<RoutesV2OutputConfigSettings>() {
                @Override
                public void write(JsonWriter out, RoutesV2OutputConfigSettings value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CriblHttpSettingsConfig`
                    if (value.getActualInstance() instanceof CriblHttpSettingsConfig) {
                        JsonElement element = adapterCriblHttpSettingsConfig.toJsonTree((CriblHttpSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ElasticsearchSettingsConfig`
                    if (value.getActualInstance() instanceof ElasticsearchSettingsConfig) {
                        JsonElement element = adapterElasticsearchSettingsConfig.toJsonTree((ElasticsearchSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `HttpSettingsConfig`
                    if (value.getActualInstance() instanceof HttpSettingsConfig) {
                        JsonElement element = adapterHttpSettingsConfig.toJsonTree((HttpSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OpensearchSettingsConfig`
                    if (value.getActualInstance() instanceof OpensearchSettingsConfig) {
                        JsonElement element = adapterOpensearchSettingsConfig.toJsonTree((OpensearchSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `S3SettingsConfig`
                    if (value.getActualInstance() instanceof S3SettingsConfig) {
                        JsonElement element = adapterS3SettingsConfig.toJsonTree((S3SettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SentinelSettingsConfig`
                    if (value.getActualInstance() instanceof SentinelSettingsConfig) {
                        JsonElement element = adapterSentinelSettingsConfig.toJsonTree((SentinelSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnowflakeSettingsConfig`
                    if (value.getActualInstance() instanceof SnowflakeSettingsConfig) {
                        JsonElement element = adapterSnowflakeSettingsConfig.toJsonTree((SnowflakeSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SplunkSettingsConfig`
                    if (value.getActualInstance() instanceof SplunkSettingsConfig) {
                        JsonElement element = adapterSplunkSettingsConfig.toJsonTree((SplunkSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SumologicSettingsConfig`
                    if (value.getActualInstance() instanceof SumologicSettingsConfig) {
                        JsonElement element = adapterSumologicSettingsConfig.toJsonTree((SumologicSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig");
                }

                @Override
                public RoutesV2OutputConfigSettings read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CriblHttpSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CriblHttpSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCriblHttpSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CriblHttpSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CriblHttpSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CriblHttpSettingsConfig'", e);
                    }
                    // deserialize ElasticsearchSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ElasticsearchSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterElasticsearchSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ElasticsearchSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ElasticsearchSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ElasticsearchSettingsConfig'", e);
                    }
                    // deserialize HttpSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HttpSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterHttpSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HttpSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HttpSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HttpSettingsConfig'", e);
                    }
                    // deserialize OpensearchSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OpensearchSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterOpensearchSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OpensearchSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OpensearchSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OpensearchSettingsConfig'", e);
                    }
                    // deserialize S3SettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        S3SettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterS3SettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'S3SettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for S3SettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'S3SettingsConfig'", e);
                    }
                    // deserialize SentinelSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SentinelSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSentinelSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SentinelSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SentinelSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SentinelSettingsConfig'", e);
                    }
                    // deserialize SnowflakeSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnowflakeSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnowflakeSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnowflakeSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnowflakeSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnowflakeSettingsConfig'", e);
                    }
                    // deserialize SplunkSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SplunkSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSplunkSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SplunkSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SplunkSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SplunkSettingsConfig'", e);
                    }
                    // deserialize SumologicSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SumologicSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSumologicSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SumologicSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SumologicSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SumologicSettingsConfig'", e);
                    }

                    if (match == 1) {
                        RoutesV2OutputConfigSettings ret = new RoutesV2OutputConfigSettings();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RoutesV2OutputConfigSettings: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public RoutesV2OutputConfigSettings() {
        super("oneOf", Boolean.FALSE);
    }

    public RoutesV2OutputConfigSettings(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CriblHttpSettingsConfig", CriblHttpSettingsConfig.class);
        schemas.put("ElasticsearchSettingsConfig", ElasticsearchSettingsConfig.class);
        schemas.put("HttpSettingsConfig", HttpSettingsConfig.class);
        schemas.put("OpensearchSettingsConfig", OpensearchSettingsConfig.class);
        schemas.put("S3SettingsConfig", S3SettingsConfig.class);
        schemas.put("SentinelSettingsConfig", SentinelSettingsConfig.class);
        schemas.put("SnowflakeSettingsConfig", SnowflakeSettingsConfig.class);
        schemas.put("SplunkSettingsConfig", SplunkSettingsConfig.class);
        schemas.put("SumologicSettingsConfig", SumologicSettingsConfig.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return RoutesV2OutputConfigSettings.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CriblHttpSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ElasticsearchSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HttpSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OpensearchSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof S3SettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SentinelSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnowflakeSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SplunkSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SumologicSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig");
    }

    /**
     * Get the actual instance, which can be the following:
     * CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig
     *
     * @return The actual instance (CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CriblHttpSettingsConfig`. If the actual instance is not `CriblHttpSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CriblHttpSettingsConfig`
     * @throws ClassCastException if the instance is not `CriblHttpSettingsConfig`
     */
    public CriblHttpSettingsConfig getCriblHttpSettingsConfig() throws ClassCastException {
        return (CriblHttpSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ElasticsearchSettingsConfig`. If the actual instance is not `ElasticsearchSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ElasticsearchSettingsConfig`
     * @throws ClassCastException if the instance is not `ElasticsearchSettingsConfig`
     */
    public ElasticsearchSettingsConfig getElasticsearchSettingsConfig() throws ClassCastException {
        return (ElasticsearchSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `HttpSettingsConfig`. If the actual instance is not `HttpSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HttpSettingsConfig`
     * @throws ClassCastException if the instance is not `HttpSettingsConfig`
     */
    public HttpSettingsConfig getHttpSettingsConfig() throws ClassCastException {
        return (HttpSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OpensearchSettingsConfig`. If the actual instance is not `OpensearchSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OpensearchSettingsConfig`
     * @throws ClassCastException if the instance is not `OpensearchSettingsConfig`
     */
    public OpensearchSettingsConfig getOpensearchSettingsConfig() throws ClassCastException {
        return (OpensearchSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `S3SettingsConfig`. If the actual instance is not `S3SettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `S3SettingsConfig`
     * @throws ClassCastException if the instance is not `S3SettingsConfig`
     */
    public S3SettingsConfig getS3SettingsConfig() throws ClassCastException {
        return (S3SettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SentinelSettingsConfig`. If the actual instance is not `SentinelSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SentinelSettingsConfig`
     * @throws ClassCastException if the instance is not `SentinelSettingsConfig`
     */
    public SentinelSettingsConfig getSentinelSettingsConfig() throws ClassCastException {
        return (SentinelSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnowflakeSettingsConfig`. If the actual instance is not `SnowflakeSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnowflakeSettingsConfig`
     * @throws ClassCastException if the instance is not `SnowflakeSettingsConfig`
     */
    public SnowflakeSettingsConfig getSnowflakeSettingsConfig() throws ClassCastException {
        return (SnowflakeSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SplunkSettingsConfig`. If the actual instance is not `SplunkSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SplunkSettingsConfig`
     * @throws ClassCastException if the instance is not `SplunkSettingsConfig`
     */
    public SplunkSettingsConfig getSplunkSettingsConfig() throws ClassCastException {
        return (SplunkSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SumologicSettingsConfig`. If the actual instance is not `SumologicSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SumologicSettingsConfig`
     * @throws ClassCastException if the instance is not `SumologicSettingsConfig`
     */
    public SumologicSettingsConfig getSumologicSettingsConfig() throws ClassCastException {
        return (SumologicSettingsConfig)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RoutesV2OutputConfigSettings
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with CriblHttpSettingsConfig
        try {
            CriblHttpSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CriblHttpSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ElasticsearchSettingsConfig
        try {
            ElasticsearchSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ElasticsearchSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with HttpSettingsConfig
        try {
            HttpSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HttpSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OpensearchSettingsConfig
        try {
            OpensearchSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OpensearchSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with S3SettingsConfig
        try {
            S3SettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for S3SettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SentinelSettingsConfig
        try {
            SentinelSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SentinelSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnowflakeSettingsConfig
        try {
            SnowflakeSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnowflakeSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SplunkSettingsConfig
        try {
            SplunkSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SplunkSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SumologicSettingsConfig
        try {
            SumologicSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SumologicSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for RoutesV2OutputConfigSettings with oneOf schemas: CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of RoutesV2OutputConfigSettings given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RoutesV2OutputConfigSettings
     * @throws IOException if the JSON string is invalid with respect to RoutesV2OutputConfigSettings
     */
    public static RoutesV2OutputConfigSettings fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RoutesV2OutputConfigSettings.class);
    }

    /**
     * Convert an instance of RoutesV2OutputConfigSettings to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

