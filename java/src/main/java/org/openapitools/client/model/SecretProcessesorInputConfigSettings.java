/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ActivityLogsSettingsConfig;
import org.openapitools.client.model.ActorsInfoSettingsConfig;
import org.openapitools.client.model.AdminActivitySettingsConfig;
import org.openapitools.client.model.AdminLogsSettingsConfig;
import org.openapitools.client.model.AuditLogsSettingsConfig;
import org.openapitools.client.model.AuthLogsSettingsConfig;
import org.openapitools.client.model.AwsGuarddutySettingsConfig;
import org.openapitools.client.model.AwsS3SettingsConfig;
import org.openapitools.client.model.AwssqsSettingsConfig;
import org.openapitools.client.model.AzureActivityLogsSettingsConfig;
import org.openapitools.client.model.AzureBlobStorageSettingsConfig;
import org.openapitools.client.model.AzureVirtualMachineSettingsConfig;
import org.openapitools.client.model.AzureVnetFlowLogsSettingsConfig;
import org.openapitools.client.model.BigqueryInputSettingsConfig;
import org.openapitools.client.model.BoxEventsSettingsConfig;
import org.openapitools.client.model.BoxUsersSettingsConfig;
import org.openapitools.client.model.CisaUserSettingsConfig;
import org.openapitools.client.model.CloudAssetInventorySettingsConfig;
import org.openapitools.client.model.CloudConfigurationFindingsSettingsConfig;
import org.openapitools.client.model.CloudLogsSettingsConfig;
import org.openapitools.client.model.CloudResourceInventorySettingsConfig;
import org.openapitools.client.model.CloudtrailSettingsConfig;
import org.openapitools.client.model.CognitoUsersFilter;
import org.openapitools.client.model.CognitoUsersSettingsConfig;
import org.openapitools.client.model.CrowdstrikeFdrSettingsConfig;
import org.openapitools.client.model.DefenderForEndpointAlertsSettingsConfig;
import org.openapitools.client.model.DetectSummariesSettingsConfig;
import org.openapitools.client.model.DeviceActivitySettingsConfig;
import org.openapitools.client.model.DeviceDetailsSettingsConfig;
import org.openapitools.client.model.DevicesSettingsConfig;
import org.openapitools.client.model.DriveActivitySettingsConfig;
import org.openapitools.client.model.EntraIdSettingsConfig;
import org.openapitools.client.model.EventSettingsConfig;
import org.openapitools.client.model.EventsLogsSettingsConfig;
import org.openapitools.client.model.EventsSettingsConfig;
import org.openapitools.client.model.FullScansSettingsConfig;
import org.openapitools.client.model.GithubAdvisoryUserSettingsConfig;
import org.openapitools.client.model.GitlabIssuesSettingsConfig;
import org.openapitools.client.model.GoogleCloudStorageSettingsConfig;
import org.openapitools.client.model.IamAccessAnalyzerSettingsConfig;
import org.openapitools.client.model.IssuesSettingsConfig;
import org.openapitools.client.model.KmsSettingsConfig;
import org.openapitools.client.model.LogAnalyticsQuerySettingsConfig;
import org.openapitools.client.model.LoginActivitySettingsConfig;
import org.openapitools.client.model.LoginSessionsSettingsConfig;
import org.openapitools.client.model.MonadLogSettingsConfig;
import org.openapitools.client.model.OauthActivitySettingsConfig;
import org.openapitools.client.model.ObjectStorageInputSettingsConfig;
import org.openapitools.client.model.OneloginEventsSettingsConfig;
import org.openapitools.client.model.OpenaiSettingsConfig;
import org.openapitools.client.model.OrganizationsSettingsConfig;
import org.openapitools.client.model.PaloAltoDataSecurityAlertsSettingsConfig;
import org.openapitools.client.model.ResourceEvaluationsSettingsConfig;
import org.openapitools.client.model.RolesInfoSettingsConfig;
import org.openapitools.client.model.SecretsmanagerSettingsConfig;
import org.openapitools.client.model.SecurityGroupsFilter;
import org.openapitools.client.model.SecurityGroupsSettingsConfig;
import org.openapitools.client.model.SemgrepCodeFindingsSettingsConfig;
import org.openapitools.client.model.SemgrepDeploymentsSettingsConfig;
import org.openapitools.client.model.SemgrepProjectDetailsSettingsConfig;
import org.openapitools.client.model.SemgrepProjectsSettingsConfig;
import org.openapitools.client.model.SemgrepSupplyChainFindingsSettingsConfig;
import org.openapitools.client.model.SentryOrgAuditLogsSettingsConfig;
import org.openapitools.client.model.SlackUsersSettingsConfig;
import org.openapitools.client.model.SlackgroupsSettingsConfig;
import org.openapitools.client.model.SnowflakeInputSettingsConfig;
import org.openapitools.client.model.SnykIssuesSettingsConfig;
import org.openapitools.client.model.SnykOrganizationsSettingsConfig;
import org.openapitools.client.model.SnykProjectsSettingsConfig;
import org.openapitools.client.model.SnykTargetsSettingsConfig;
import org.openapitools.client.model.SyntheticDataCustomSettingsConfig;
import org.openapitools.client.model.SyntheticDataSettingsConfig;
import org.openapitools.client.model.SystemlogSettingsConfig;
import org.openapitools.client.model.TailscaleUsersSettingsConfig;
import org.openapitools.client.model.TenableAssetsCronSettingsConfig;
import org.openapitools.client.model.TenableAssetsSettingsConfig;
import org.openapitools.client.model.TenableVulnerabilitiesCronSettingsConfig;
import org.openapitools.client.model.TenableVulnerabilitiesSettingsConfig;
import org.openapitools.client.model.UsersInfoSettingsConfig;
import org.openapitools.client.model.UsersSettingsConfig;
import org.openapitools.client.model.VulnerabilitiesCronSettingsConfig;
import org.openapitools.client.model.VulnerabilitiesSettingsConfig;
import org.openapitools.client.model.VulnerabilityFindingsSettingsConfig;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-04T17:06:39.899064382Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class SecretProcessesorInputConfigSettings extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(SecretProcessesorInputConfigSettings.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!SecretProcessesorInputConfigSettings.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'SecretProcessesorInputConfigSettings' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ActivityLogsSettingsConfig> adapterActivityLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(ActivityLogsSettingsConfig.class));
            final TypeAdapter<ActorsInfoSettingsConfig> adapterActorsInfoSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(ActorsInfoSettingsConfig.class));
            final TypeAdapter<AdminActivitySettingsConfig> adapterAdminActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AdminActivitySettingsConfig.class));
            final TypeAdapter<AdminLogsSettingsConfig> adapterAdminLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AdminLogsSettingsConfig.class));
            final TypeAdapter<AuditLogsSettingsConfig> adapterAuditLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AuditLogsSettingsConfig.class));
            final TypeAdapter<AuthLogsSettingsConfig> adapterAuthLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AuthLogsSettingsConfig.class));
            final TypeAdapter<AwsGuarddutySettingsConfig> adapterAwsGuarddutySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AwsGuarddutySettingsConfig.class));
            final TypeAdapter<AwsS3SettingsConfig> adapterAwsS3SettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AwsS3SettingsConfig.class));
            final TypeAdapter<AwssqsSettingsConfig> adapterAwssqsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AwssqsSettingsConfig.class));
            final TypeAdapter<AzureActivityLogsSettingsConfig> adapterAzureActivityLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AzureActivityLogsSettingsConfig.class));
            final TypeAdapter<AzureBlobStorageSettingsConfig> adapterAzureBlobStorageSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AzureBlobStorageSettingsConfig.class));
            final TypeAdapter<AzureVirtualMachineSettingsConfig> adapterAzureVirtualMachineSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AzureVirtualMachineSettingsConfig.class));
            final TypeAdapter<AzureVnetFlowLogsSettingsConfig> adapterAzureVnetFlowLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AzureVnetFlowLogsSettingsConfig.class));
            final TypeAdapter<BigqueryInputSettingsConfig> adapterBigqueryInputSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(BigqueryInputSettingsConfig.class));
            final TypeAdapter<BoxEventsSettingsConfig> adapterBoxEventsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(BoxEventsSettingsConfig.class));
            final TypeAdapter<BoxUsersSettingsConfig> adapterBoxUsersSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(BoxUsersSettingsConfig.class));
            final TypeAdapter<CisaUserSettingsConfig> adapterCisaUserSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CisaUserSettingsConfig.class));
            final TypeAdapter<CloudAssetInventorySettingsConfig> adapterCloudAssetInventorySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudAssetInventorySettingsConfig.class));
            final TypeAdapter<CloudConfigurationFindingsSettingsConfig> adapterCloudConfigurationFindingsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudConfigurationFindingsSettingsConfig.class));
            final TypeAdapter<CloudLogsSettingsConfig> adapterCloudLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudLogsSettingsConfig.class));
            final TypeAdapter<CloudResourceInventorySettingsConfig> adapterCloudResourceInventorySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudResourceInventorySettingsConfig.class));
            final TypeAdapter<CloudtrailSettingsConfig> adapterCloudtrailSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudtrailSettingsConfig.class));
            final TypeAdapter<CognitoUsersSettingsConfig> adapterCognitoUsersSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CognitoUsersSettingsConfig.class));
            final TypeAdapter<CrowdstrikeFdrSettingsConfig> adapterCrowdstrikeFdrSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CrowdstrikeFdrSettingsConfig.class));
            final TypeAdapter<DefenderForEndpointAlertsSettingsConfig> adapterDefenderForEndpointAlertsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DefenderForEndpointAlertsSettingsConfig.class));
            final TypeAdapter<DetectSummariesSettingsConfig> adapterDetectSummariesSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DetectSummariesSettingsConfig.class));
            final TypeAdapter<DeviceActivitySettingsConfig> adapterDeviceActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DeviceActivitySettingsConfig.class));
            final TypeAdapter<DeviceDetailsSettingsConfig> adapterDeviceDetailsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DeviceDetailsSettingsConfig.class));
            final TypeAdapter<DevicesSettingsConfig> adapterDevicesSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DevicesSettingsConfig.class));
            final TypeAdapter<DriveActivitySettingsConfig> adapterDriveActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DriveActivitySettingsConfig.class));
            final TypeAdapter<EntraIdSettingsConfig> adapterEntraIdSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(EntraIdSettingsConfig.class));
            final TypeAdapter<EventSettingsConfig> adapterEventSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(EventSettingsConfig.class));
            final TypeAdapter<EventsSettingsConfig> adapterEventsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(EventsSettingsConfig.class));
            final TypeAdapter<EventsLogsSettingsConfig> adapterEventsLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(EventsLogsSettingsConfig.class));
            final TypeAdapter<FullScansSettingsConfig> adapterFullScansSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(FullScansSettingsConfig.class));
            final TypeAdapter<GithubAdvisoryUserSettingsConfig> adapterGithubAdvisoryUserSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(GithubAdvisoryUserSettingsConfig.class));
            final TypeAdapter<GitlabIssuesSettingsConfig> adapterGitlabIssuesSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(GitlabIssuesSettingsConfig.class));
            final TypeAdapter<GoogleCloudStorageSettingsConfig> adapterGoogleCloudStorageSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(GoogleCloudStorageSettingsConfig.class));
            final TypeAdapter<IamAccessAnalyzerSettingsConfig> adapterIamAccessAnalyzerSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(IamAccessAnalyzerSettingsConfig.class));
            final TypeAdapter<IssuesSettingsConfig> adapterIssuesSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(IssuesSettingsConfig.class));
            final TypeAdapter<KmsSettingsConfig> adapterKmsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(KmsSettingsConfig.class));
            final TypeAdapter<LogAnalyticsQuerySettingsConfig> adapterLogAnalyticsQuerySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(LogAnalyticsQuerySettingsConfig.class));
            final TypeAdapter<LoginActivitySettingsConfig> adapterLoginActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(LoginActivitySettingsConfig.class));
            final TypeAdapter<LoginSessionsSettingsConfig> adapterLoginSessionsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(LoginSessionsSettingsConfig.class));
            final Type typeInstanceMapStringObject = new TypeToken<Map<String, Object>>(){}.getType();
            final TypeAdapter<Map<String, Object>> adapterMapStringObject = (TypeAdapter<Map<String, Object>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstanceMapStringObject));
            final TypeAdapter<Object> adapterObject = gson.getDelegateAdapter(this, TypeToken.get(Object.class));
            final TypeAdapter<MonadLogSettingsConfig> adapterMonadLogSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(MonadLogSettingsConfig.class));
            final TypeAdapter<OauthActivitySettingsConfig> adapterOauthActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(OauthActivitySettingsConfig.class));
            final TypeAdapter<ObjectStorageInputSettingsConfig> adapterObjectStorageInputSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(ObjectStorageInputSettingsConfig.class));
            final TypeAdapter<OneloginEventsSettingsConfig> adapterOneloginEventsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(OneloginEventsSettingsConfig.class));
            final TypeAdapter<OpenaiSettingsConfig> adapterOpenaiSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(OpenaiSettingsConfig.class));
            final TypeAdapter<OrganizationsSettingsConfig> adapterOrganizationsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(OrganizationsSettingsConfig.class));
            final TypeAdapter<PaloAltoDataSecurityAlertsSettingsConfig> adapterPaloAltoDataSecurityAlertsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(PaloAltoDataSecurityAlertsSettingsConfig.class));
            final TypeAdapter<ResourceEvaluationsSettingsConfig> adapterResourceEvaluationsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(ResourceEvaluationsSettingsConfig.class));
            final TypeAdapter<RolesInfoSettingsConfig> adapterRolesInfoSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(RolesInfoSettingsConfig.class));
            final TypeAdapter<SecretsmanagerSettingsConfig> adapterSecretsmanagerSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SecretsmanagerSettingsConfig.class));
            final TypeAdapter<SecurityGroupsSettingsConfig> adapterSecurityGroupsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SecurityGroupsSettingsConfig.class));
            final TypeAdapter<SemgrepCodeFindingsSettingsConfig> adapterSemgrepCodeFindingsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepCodeFindingsSettingsConfig.class));
            final TypeAdapter<SemgrepDeploymentsSettingsConfig> adapterSemgrepDeploymentsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepDeploymentsSettingsConfig.class));
            final TypeAdapter<SemgrepProjectDetailsSettingsConfig> adapterSemgrepProjectDetailsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepProjectDetailsSettingsConfig.class));
            final TypeAdapter<SemgrepProjectsSettingsConfig> adapterSemgrepProjectsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepProjectsSettingsConfig.class));
            final TypeAdapter<SemgrepSupplyChainFindingsSettingsConfig> adapterSemgrepSupplyChainFindingsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepSupplyChainFindingsSettingsConfig.class));
            final TypeAdapter<SentryOrgAuditLogsSettingsConfig> adapterSentryOrgAuditLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SentryOrgAuditLogsSettingsConfig.class));
            final TypeAdapter<SlackUsersSettingsConfig> adapterSlackUsersSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SlackUsersSettingsConfig.class));
            final TypeAdapter<SlackgroupsSettingsConfig> adapterSlackgroupsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SlackgroupsSettingsConfig.class));
            final TypeAdapter<SnowflakeInputSettingsConfig> adapterSnowflakeInputSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnowflakeInputSettingsConfig.class));
            final TypeAdapter<SnykIssuesSettingsConfig> adapterSnykIssuesSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykIssuesSettingsConfig.class));
            final TypeAdapter<SnykOrganizationsSettingsConfig> adapterSnykOrganizationsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykOrganizationsSettingsConfig.class));
            final TypeAdapter<SnykProjectsSettingsConfig> adapterSnykProjectsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykProjectsSettingsConfig.class));
            final TypeAdapter<SnykTargetsSettingsConfig> adapterSnykTargetsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykTargetsSettingsConfig.class));
            final TypeAdapter<SyntheticDataSettingsConfig> adapterSyntheticDataSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SyntheticDataSettingsConfig.class));
            final TypeAdapter<SyntheticDataCustomSettingsConfig> adapterSyntheticDataCustomSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SyntheticDataCustomSettingsConfig.class));
            final TypeAdapter<SystemlogSettingsConfig> adapterSystemlogSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SystemlogSettingsConfig.class));
            final TypeAdapter<TailscaleUsersSettingsConfig> adapterTailscaleUsersSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(TailscaleUsersSettingsConfig.class));
            final TypeAdapter<TenableAssetsSettingsConfig> adapterTenableAssetsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(TenableAssetsSettingsConfig.class));
            final TypeAdapter<TenableAssetsCronSettingsConfig> adapterTenableAssetsCronSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(TenableAssetsCronSettingsConfig.class));
            final TypeAdapter<TenableVulnerabilitiesSettingsConfig> adapterTenableVulnerabilitiesSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(TenableVulnerabilitiesSettingsConfig.class));
            final TypeAdapter<TenableVulnerabilitiesCronSettingsConfig> adapterTenableVulnerabilitiesCronSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(TenableVulnerabilitiesCronSettingsConfig.class));
            final TypeAdapter<UsersSettingsConfig> adapterUsersSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(UsersSettingsConfig.class));
            final TypeAdapter<UsersInfoSettingsConfig> adapterUsersInfoSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(UsersInfoSettingsConfig.class));
            final TypeAdapter<VulnerabilitiesSettingsConfig> adapterVulnerabilitiesSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilitiesSettingsConfig.class));
            final TypeAdapter<VulnerabilitiesCronSettingsConfig> adapterVulnerabilitiesCronSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilitiesCronSettingsConfig.class));
            final TypeAdapter<VulnerabilityFindingsSettingsConfig> adapterVulnerabilityFindingsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityFindingsSettingsConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<SecretProcessesorInputConfigSettings>() {
                @Override
                public void write(JsonWriter out, SecretProcessesorInputConfigSettings value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ActivityLogsSettingsConfig`
                    if (value.getActualInstance() instanceof ActivityLogsSettingsConfig) {
                        JsonElement element = adapterActivityLogsSettingsConfig.toJsonTree((ActivityLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ActorsInfoSettingsConfig`
                    if (value.getActualInstance() instanceof ActorsInfoSettingsConfig) {
                        JsonElement element = adapterActorsInfoSettingsConfig.toJsonTree((ActorsInfoSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdminActivitySettingsConfig`
                    if (value.getActualInstance() instanceof AdminActivitySettingsConfig) {
                        JsonElement element = adapterAdminActivitySettingsConfig.toJsonTree((AdminActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdminLogsSettingsConfig`
                    if (value.getActualInstance() instanceof AdminLogsSettingsConfig) {
                        JsonElement element = adapterAdminLogsSettingsConfig.toJsonTree((AdminLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuditLogsSettingsConfig`
                    if (value.getActualInstance() instanceof AuditLogsSettingsConfig) {
                        JsonElement element = adapterAuditLogsSettingsConfig.toJsonTree((AuditLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthLogsSettingsConfig`
                    if (value.getActualInstance() instanceof AuthLogsSettingsConfig) {
                        JsonElement element = adapterAuthLogsSettingsConfig.toJsonTree((AuthLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsGuarddutySettingsConfig`
                    if (value.getActualInstance() instanceof AwsGuarddutySettingsConfig) {
                        JsonElement element = adapterAwsGuarddutySettingsConfig.toJsonTree((AwsGuarddutySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsS3SettingsConfig`
                    if (value.getActualInstance() instanceof AwsS3SettingsConfig) {
                        JsonElement element = adapterAwsS3SettingsConfig.toJsonTree((AwsS3SettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwssqsSettingsConfig`
                    if (value.getActualInstance() instanceof AwssqsSettingsConfig) {
                        JsonElement element = adapterAwssqsSettingsConfig.toJsonTree((AwssqsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AzureActivityLogsSettingsConfig`
                    if (value.getActualInstance() instanceof AzureActivityLogsSettingsConfig) {
                        JsonElement element = adapterAzureActivityLogsSettingsConfig.toJsonTree((AzureActivityLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AzureBlobStorageSettingsConfig`
                    if (value.getActualInstance() instanceof AzureBlobStorageSettingsConfig) {
                        JsonElement element = adapterAzureBlobStorageSettingsConfig.toJsonTree((AzureBlobStorageSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AzureVirtualMachineSettingsConfig`
                    if (value.getActualInstance() instanceof AzureVirtualMachineSettingsConfig) {
                        JsonElement element = adapterAzureVirtualMachineSettingsConfig.toJsonTree((AzureVirtualMachineSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AzureVnetFlowLogsSettingsConfig`
                    if (value.getActualInstance() instanceof AzureVnetFlowLogsSettingsConfig) {
                        JsonElement element = adapterAzureVnetFlowLogsSettingsConfig.toJsonTree((AzureVnetFlowLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BigqueryInputSettingsConfig`
                    if (value.getActualInstance() instanceof BigqueryInputSettingsConfig) {
                        JsonElement element = adapterBigqueryInputSettingsConfig.toJsonTree((BigqueryInputSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BoxEventsSettingsConfig`
                    if (value.getActualInstance() instanceof BoxEventsSettingsConfig) {
                        JsonElement element = adapterBoxEventsSettingsConfig.toJsonTree((BoxEventsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BoxUsersSettingsConfig`
                    if (value.getActualInstance() instanceof BoxUsersSettingsConfig) {
                        JsonElement element = adapterBoxUsersSettingsConfig.toJsonTree((BoxUsersSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CisaUserSettingsConfig`
                    if (value.getActualInstance() instanceof CisaUserSettingsConfig) {
                        JsonElement element = adapterCisaUserSettingsConfig.toJsonTree((CisaUserSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudAssetInventorySettingsConfig`
                    if (value.getActualInstance() instanceof CloudAssetInventorySettingsConfig) {
                        JsonElement element = adapterCloudAssetInventorySettingsConfig.toJsonTree((CloudAssetInventorySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudConfigurationFindingsSettingsConfig`
                    if (value.getActualInstance() instanceof CloudConfigurationFindingsSettingsConfig) {
                        JsonElement element = adapterCloudConfigurationFindingsSettingsConfig.toJsonTree((CloudConfigurationFindingsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudLogsSettingsConfig`
                    if (value.getActualInstance() instanceof CloudLogsSettingsConfig) {
                        JsonElement element = adapterCloudLogsSettingsConfig.toJsonTree((CloudLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudResourceInventorySettingsConfig`
                    if (value.getActualInstance() instanceof CloudResourceInventorySettingsConfig) {
                        JsonElement element = adapterCloudResourceInventorySettingsConfig.toJsonTree((CloudResourceInventorySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudtrailSettingsConfig`
                    if (value.getActualInstance() instanceof CloudtrailSettingsConfig) {
                        JsonElement element = adapterCloudtrailSettingsConfig.toJsonTree((CloudtrailSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CognitoUsersSettingsConfig`
                    if (value.getActualInstance() instanceof CognitoUsersSettingsConfig) {
                        JsonElement element = adapterCognitoUsersSettingsConfig.toJsonTree((CognitoUsersSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CrowdstrikeFdrSettingsConfig`
                    if (value.getActualInstance() instanceof CrowdstrikeFdrSettingsConfig) {
                        JsonElement element = adapterCrowdstrikeFdrSettingsConfig.toJsonTree((CrowdstrikeFdrSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DefenderForEndpointAlertsSettingsConfig`
                    if (value.getActualInstance() instanceof DefenderForEndpointAlertsSettingsConfig) {
                        JsonElement element = adapterDefenderForEndpointAlertsSettingsConfig.toJsonTree((DefenderForEndpointAlertsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DetectSummariesSettingsConfig`
                    if (value.getActualInstance() instanceof DetectSummariesSettingsConfig) {
                        JsonElement element = adapterDetectSummariesSettingsConfig.toJsonTree((DetectSummariesSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DeviceActivitySettingsConfig`
                    if (value.getActualInstance() instanceof DeviceActivitySettingsConfig) {
                        JsonElement element = adapterDeviceActivitySettingsConfig.toJsonTree((DeviceActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DeviceDetailsSettingsConfig`
                    if (value.getActualInstance() instanceof DeviceDetailsSettingsConfig) {
                        JsonElement element = adapterDeviceDetailsSettingsConfig.toJsonTree((DeviceDetailsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DevicesSettingsConfig`
                    if (value.getActualInstance() instanceof DevicesSettingsConfig) {
                        JsonElement element = adapterDevicesSettingsConfig.toJsonTree((DevicesSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DriveActivitySettingsConfig`
                    if (value.getActualInstance() instanceof DriveActivitySettingsConfig) {
                        JsonElement element = adapterDriveActivitySettingsConfig.toJsonTree((DriveActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EntraIdSettingsConfig`
                    if (value.getActualInstance() instanceof EntraIdSettingsConfig) {
                        JsonElement element = adapterEntraIdSettingsConfig.toJsonTree((EntraIdSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EventSettingsConfig`
                    if (value.getActualInstance() instanceof EventSettingsConfig) {
                        JsonElement element = adapterEventSettingsConfig.toJsonTree((EventSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EventsSettingsConfig`
                    if (value.getActualInstance() instanceof EventsSettingsConfig) {
                        JsonElement element = adapterEventsSettingsConfig.toJsonTree((EventsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EventsLogsSettingsConfig`
                    if (value.getActualInstance() instanceof EventsLogsSettingsConfig) {
                        JsonElement element = adapterEventsLogsSettingsConfig.toJsonTree((EventsLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `FullScansSettingsConfig`
                    if (value.getActualInstance() instanceof FullScansSettingsConfig) {
                        JsonElement element = adapterFullScansSettingsConfig.toJsonTree((FullScansSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GithubAdvisoryUserSettingsConfig`
                    if (value.getActualInstance() instanceof GithubAdvisoryUserSettingsConfig) {
                        JsonElement element = adapterGithubAdvisoryUserSettingsConfig.toJsonTree((GithubAdvisoryUserSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GitlabIssuesSettingsConfig`
                    if (value.getActualInstance() instanceof GitlabIssuesSettingsConfig) {
                        JsonElement element = adapterGitlabIssuesSettingsConfig.toJsonTree((GitlabIssuesSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `GoogleCloudStorageSettingsConfig`
                    if (value.getActualInstance() instanceof GoogleCloudStorageSettingsConfig) {
                        JsonElement element = adapterGoogleCloudStorageSettingsConfig.toJsonTree((GoogleCloudStorageSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IamAccessAnalyzerSettingsConfig`
                    if (value.getActualInstance() instanceof IamAccessAnalyzerSettingsConfig) {
                        JsonElement element = adapterIamAccessAnalyzerSettingsConfig.toJsonTree((IamAccessAnalyzerSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `IssuesSettingsConfig`
                    if (value.getActualInstance() instanceof IssuesSettingsConfig) {
                        JsonElement element = adapterIssuesSettingsConfig.toJsonTree((IssuesSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `KmsSettingsConfig`
                    if (value.getActualInstance() instanceof KmsSettingsConfig) {
                        JsonElement element = adapterKmsSettingsConfig.toJsonTree((KmsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LogAnalyticsQuerySettingsConfig`
                    if (value.getActualInstance() instanceof LogAnalyticsQuerySettingsConfig) {
                        JsonElement element = adapterLogAnalyticsQuerySettingsConfig.toJsonTree((LogAnalyticsQuerySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LoginActivitySettingsConfig`
                    if (value.getActualInstance() instanceof LoginActivitySettingsConfig) {
                        JsonElement element = adapterLoginActivitySettingsConfig.toJsonTree((LoginActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LoginSessionsSettingsConfig`
                    if (value.getActualInstance() instanceof LoginSessionsSettingsConfig) {
                        JsonElement element = adapterLoginSessionsSettingsConfig.toJsonTree((LoginSessionsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Map<String, Object>`
                    if (value.getActualInstance() instanceof Map<?, ?>) {
                        JsonObject object = adapterMapStringObject.toJsonTree((Map<String, Object>)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, object);
                        return;
                    }
                    // check if the actual instance is of the type `Object`
                    if (value.getActualInstance() instanceof Object) {
                        JsonPrimitive primitive = adapterObject.toJsonTree((Object)value.getActualInstance()).getAsJsonPrimitive();
                        elementAdapter.write(out, primitive);
                        return;
                    }
                    // check if the actual instance is of the type `MonadLogSettingsConfig`
                    if (value.getActualInstance() instanceof MonadLogSettingsConfig) {
                        JsonElement element = adapterMonadLogSettingsConfig.toJsonTree((MonadLogSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OauthActivitySettingsConfig`
                    if (value.getActualInstance() instanceof OauthActivitySettingsConfig) {
                        JsonElement element = adapterOauthActivitySettingsConfig.toJsonTree((OauthActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ObjectStorageInputSettingsConfig`
                    if (value.getActualInstance() instanceof ObjectStorageInputSettingsConfig) {
                        JsonElement element = adapterObjectStorageInputSettingsConfig.toJsonTree((ObjectStorageInputSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OneloginEventsSettingsConfig`
                    if (value.getActualInstance() instanceof OneloginEventsSettingsConfig) {
                        JsonElement element = adapterOneloginEventsSettingsConfig.toJsonTree((OneloginEventsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OpenaiSettingsConfig`
                    if (value.getActualInstance() instanceof OpenaiSettingsConfig) {
                        JsonElement element = adapterOpenaiSettingsConfig.toJsonTree((OpenaiSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OrganizationsSettingsConfig`
                    if (value.getActualInstance() instanceof OrganizationsSettingsConfig) {
                        JsonElement element = adapterOrganizationsSettingsConfig.toJsonTree((OrganizationsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `PaloAltoDataSecurityAlertsSettingsConfig`
                    if (value.getActualInstance() instanceof PaloAltoDataSecurityAlertsSettingsConfig) {
                        JsonElement element = adapterPaloAltoDataSecurityAlertsSettingsConfig.toJsonTree((PaloAltoDataSecurityAlertsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ResourceEvaluationsSettingsConfig`
                    if (value.getActualInstance() instanceof ResourceEvaluationsSettingsConfig) {
                        JsonElement element = adapterResourceEvaluationsSettingsConfig.toJsonTree((ResourceEvaluationsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RolesInfoSettingsConfig`
                    if (value.getActualInstance() instanceof RolesInfoSettingsConfig) {
                        JsonElement element = adapterRolesInfoSettingsConfig.toJsonTree((RolesInfoSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SecretsmanagerSettingsConfig`
                    if (value.getActualInstance() instanceof SecretsmanagerSettingsConfig) {
                        JsonElement element = adapterSecretsmanagerSettingsConfig.toJsonTree((SecretsmanagerSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SecurityGroupsSettingsConfig`
                    if (value.getActualInstance() instanceof SecurityGroupsSettingsConfig) {
                        JsonElement element = adapterSecurityGroupsSettingsConfig.toJsonTree((SecurityGroupsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepCodeFindingsSettingsConfig`
                    if (value.getActualInstance() instanceof SemgrepCodeFindingsSettingsConfig) {
                        JsonElement element = adapterSemgrepCodeFindingsSettingsConfig.toJsonTree((SemgrepCodeFindingsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepDeploymentsSettingsConfig`
                    if (value.getActualInstance() instanceof SemgrepDeploymentsSettingsConfig) {
                        JsonElement element = adapterSemgrepDeploymentsSettingsConfig.toJsonTree((SemgrepDeploymentsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepProjectDetailsSettingsConfig`
                    if (value.getActualInstance() instanceof SemgrepProjectDetailsSettingsConfig) {
                        JsonElement element = adapterSemgrepProjectDetailsSettingsConfig.toJsonTree((SemgrepProjectDetailsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepProjectsSettingsConfig`
                    if (value.getActualInstance() instanceof SemgrepProjectsSettingsConfig) {
                        JsonElement element = adapterSemgrepProjectsSettingsConfig.toJsonTree((SemgrepProjectsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepSupplyChainFindingsSettingsConfig`
                    if (value.getActualInstance() instanceof SemgrepSupplyChainFindingsSettingsConfig) {
                        JsonElement element = adapterSemgrepSupplyChainFindingsSettingsConfig.toJsonTree((SemgrepSupplyChainFindingsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SentryOrgAuditLogsSettingsConfig`
                    if (value.getActualInstance() instanceof SentryOrgAuditLogsSettingsConfig) {
                        JsonElement element = adapterSentryOrgAuditLogsSettingsConfig.toJsonTree((SentryOrgAuditLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SlackUsersSettingsConfig`
                    if (value.getActualInstance() instanceof SlackUsersSettingsConfig) {
                        JsonElement element = adapterSlackUsersSettingsConfig.toJsonTree((SlackUsersSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SlackgroupsSettingsConfig`
                    if (value.getActualInstance() instanceof SlackgroupsSettingsConfig) {
                        JsonElement element = adapterSlackgroupsSettingsConfig.toJsonTree((SlackgroupsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnowflakeInputSettingsConfig`
                    if (value.getActualInstance() instanceof SnowflakeInputSettingsConfig) {
                        JsonElement element = adapterSnowflakeInputSettingsConfig.toJsonTree((SnowflakeInputSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykIssuesSettingsConfig`
                    if (value.getActualInstance() instanceof SnykIssuesSettingsConfig) {
                        JsonElement element = adapterSnykIssuesSettingsConfig.toJsonTree((SnykIssuesSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykOrganizationsSettingsConfig`
                    if (value.getActualInstance() instanceof SnykOrganizationsSettingsConfig) {
                        JsonElement element = adapterSnykOrganizationsSettingsConfig.toJsonTree((SnykOrganizationsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykProjectsSettingsConfig`
                    if (value.getActualInstance() instanceof SnykProjectsSettingsConfig) {
                        JsonElement element = adapterSnykProjectsSettingsConfig.toJsonTree((SnykProjectsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykTargetsSettingsConfig`
                    if (value.getActualInstance() instanceof SnykTargetsSettingsConfig) {
                        JsonElement element = adapterSnykTargetsSettingsConfig.toJsonTree((SnykTargetsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SyntheticDataSettingsConfig`
                    if (value.getActualInstance() instanceof SyntheticDataSettingsConfig) {
                        JsonElement element = adapterSyntheticDataSettingsConfig.toJsonTree((SyntheticDataSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SyntheticDataCustomSettingsConfig`
                    if (value.getActualInstance() instanceof SyntheticDataCustomSettingsConfig) {
                        JsonElement element = adapterSyntheticDataCustomSettingsConfig.toJsonTree((SyntheticDataCustomSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SystemlogSettingsConfig`
                    if (value.getActualInstance() instanceof SystemlogSettingsConfig) {
                        JsonElement element = adapterSystemlogSettingsConfig.toJsonTree((SystemlogSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TailscaleUsersSettingsConfig`
                    if (value.getActualInstance() instanceof TailscaleUsersSettingsConfig) {
                        JsonElement element = adapterTailscaleUsersSettingsConfig.toJsonTree((TailscaleUsersSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TenableAssetsSettingsConfig`
                    if (value.getActualInstance() instanceof TenableAssetsSettingsConfig) {
                        JsonElement element = adapterTenableAssetsSettingsConfig.toJsonTree((TenableAssetsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TenableAssetsCronSettingsConfig`
                    if (value.getActualInstance() instanceof TenableAssetsCronSettingsConfig) {
                        JsonElement element = adapterTenableAssetsCronSettingsConfig.toJsonTree((TenableAssetsCronSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TenableVulnerabilitiesSettingsConfig`
                    if (value.getActualInstance() instanceof TenableVulnerabilitiesSettingsConfig) {
                        JsonElement element = adapterTenableVulnerabilitiesSettingsConfig.toJsonTree((TenableVulnerabilitiesSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TenableVulnerabilitiesCronSettingsConfig`
                    if (value.getActualInstance() instanceof TenableVulnerabilitiesCronSettingsConfig) {
                        JsonElement element = adapterTenableVulnerabilitiesCronSettingsConfig.toJsonTree((TenableVulnerabilitiesCronSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UsersSettingsConfig`
                    if (value.getActualInstance() instanceof UsersSettingsConfig) {
                        JsonElement element = adapterUsersSettingsConfig.toJsonTree((UsersSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UsersInfoSettingsConfig`
                    if (value.getActualInstance() instanceof UsersInfoSettingsConfig) {
                        JsonElement element = adapterUsersInfoSettingsConfig.toJsonTree((UsersInfoSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VulnerabilitiesSettingsConfig`
                    if (value.getActualInstance() instanceof VulnerabilitiesSettingsConfig) {
                        JsonElement element = adapterVulnerabilitiesSettingsConfig.toJsonTree((VulnerabilitiesSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VulnerabilitiesCronSettingsConfig`
                    if (value.getActualInstance() instanceof VulnerabilitiesCronSettingsConfig) {
                        JsonElement element = adapterVulnerabilitiesCronSettingsConfig.toJsonTree((VulnerabilitiesCronSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VulnerabilityFindingsSettingsConfig`
                    if (value.getActualInstance() instanceof VulnerabilityFindingsSettingsConfig) {
                        JsonElement element = adapterVulnerabilityFindingsSettingsConfig.toJsonTree((VulnerabilityFindingsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsGuarddutySettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, AzureBlobStorageSettingsConfig, AzureVirtualMachineSettingsConfig, AzureVnetFlowLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CisaUserSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CognitoUsersSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, EventsSettingsConfig, FullScansSettingsConfig, GithubAdvisoryUserSettingsConfig, GitlabIssuesSettingsConfig, GoogleCloudStorageSettingsConfig, IamAccessAnalyzerSettingsConfig, IssuesSettingsConfig, KmsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, Map<String, Object>, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, OpenaiSettingsConfig, OrganizationsSettingsConfig, PaloAltoDataSecurityAlertsSettingsConfig, ResourceEvaluationsSettingsConfig, RolesInfoSettingsConfig, SecretsmanagerSettingsConfig, SecurityGroupsSettingsConfig, SemgrepCodeFindingsSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SemgrepSupplyChainFindingsSettingsConfig, SentryOrgAuditLogsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykIssuesSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, SnykTargetsSettingsConfig, SyntheticDataCustomSettingsConfig, SyntheticDataSettingsConfig, SystemlogSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableAssetsSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, TenableVulnerabilitiesSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig");
                }

                @Override
                public SecretProcessesorInputConfigSettings read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ActivityLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ActivityLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterActivityLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ActivityLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ActivityLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ActivityLogsSettingsConfig'", e);
                    }
                    // deserialize ActorsInfoSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ActorsInfoSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterActorsInfoSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ActorsInfoSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ActorsInfoSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ActorsInfoSettingsConfig'", e);
                    }
                    // deserialize AdminActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminActivitySettingsConfig'", e);
                    }
                    // deserialize AdminLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminLogsSettingsConfig'", e);
                    }
                    // deserialize AuditLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuditLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuditLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuditLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuditLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuditLogsSettingsConfig'", e);
                    }
                    // deserialize AuthLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthLogsSettingsConfig'", e);
                    }
                    // deserialize AwsGuarddutySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsGuarddutySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsGuarddutySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsGuarddutySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsGuarddutySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsGuarddutySettingsConfig'", e);
                    }
                    // deserialize AwsS3SettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsS3SettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsS3SettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsS3SettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsS3SettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsS3SettingsConfig'", e);
                    }
                    // deserialize AwssqsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwssqsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwssqsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwssqsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwssqsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwssqsSettingsConfig'", e);
                    }
                    // deserialize AzureActivityLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AzureActivityLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAzureActivityLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AzureActivityLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AzureActivityLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AzureActivityLogsSettingsConfig'", e);
                    }
                    // deserialize AzureBlobStorageSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AzureBlobStorageSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAzureBlobStorageSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AzureBlobStorageSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AzureBlobStorageSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AzureBlobStorageSettingsConfig'", e);
                    }
                    // deserialize AzureVirtualMachineSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AzureVirtualMachineSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAzureVirtualMachineSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AzureVirtualMachineSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AzureVirtualMachineSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AzureVirtualMachineSettingsConfig'", e);
                    }
                    // deserialize AzureVnetFlowLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AzureVnetFlowLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAzureVnetFlowLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AzureVnetFlowLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AzureVnetFlowLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AzureVnetFlowLogsSettingsConfig'", e);
                    }
                    // deserialize BigqueryInputSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BigqueryInputSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterBigqueryInputSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BigqueryInputSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BigqueryInputSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BigqueryInputSettingsConfig'", e);
                    }
                    // deserialize BoxEventsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BoxEventsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterBoxEventsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BoxEventsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BoxEventsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BoxEventsSettingsConfig'", e);
                    }
                    // deserialize BoxUsersSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BoxUsersSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterBoxUsersSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BoxUsersSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BoxUsersSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BoxUsersSettingsConfig'", e);
                    }
                    // deserialize CisaUserSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CisaUserSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCisaUserSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CisaUserSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CisaUserSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CisaUserSettingsConfig'", e);
                    }
                    // deserialize CloudAssetInventorySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudAssetInventorySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudAssetInventorySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudAssetInventorySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudAssetInventorySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudAssetInventorySettingsConfig'", e);
                    }
                    // deserialize CloudConfigurationFindingsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudConfigurationFindingsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudConfigurationFindingsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudConfigurationFindingsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudConfigurationFindingsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudConfigurationFindingsSettingsConfig'", e);
                    }
                    // deserialize CloudLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudLogsSettingsConfig'", e);
                    }
                    // deserialize CloudResourceInventorySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudResourceInventorySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudResourceInventorySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudResourceInventorySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudResourceInventorySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudResourceInventorySettingsConfig'", e);
                    }
                    // deserialize CloudtrailSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudtrailSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudtrailSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudtrailSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudtrailSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudtrailSettingsConfig'", e);
                    }
                    // deserialize CognitoUsersSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CognitoUsersSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCognitoUsersSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CognitoUsersSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CognitoUsersSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CognitoUsersSettingsConfig'", e);
                    }
                    // deserialize CrowdstrikeFdrSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CrowdstrikeFdrSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCrowdstrikeFdrSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CrowdstrikeFdrSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CrowdstrikeFdrSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CrowdstrikeFdrSettingsConfig'", e);
                    }
                    // deserialize DefenderForEndpointAlertsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DefenderForEndpointAlertsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDefenderForEndpointAlertsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DefenderForEndpointAlertsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DefenderForEndpointAlertsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DefenderForEndpointAlertsSettingsConfig'", e);
                    }
                    // deserialize DetectSummariesSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DetectSummariesSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDetectSummariesSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DetectSummariesSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DetectSummariesSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DetectSummariesSettingsConfig'", e);
                    }
                    // deserialize DeviceActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeviceActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDeviceActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DeviceActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeviceActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeviceActivitySettingsConfig'", e);
                    }
                    // deserialize DeviceDetailsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeviceDetailsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDeviceDetailsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DeviceDetailsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeviceDetailsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeviceDetailsSettingsConfig'", e);
                    }
                    // deserialize DevicesSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DevicesSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDevicesSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DevicesSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DevicesSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DevicesSettingsConfig'", e);
                    }
                    // deserialize DriveActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DriveActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDriveActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DriveActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DriveActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DriveActivitySettingsConfig'", e);
                    }
                    // deserialize EntraIdSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EntraIdSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEntraIdSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EntraIdSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EntraIdSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EntraIdSettingsConfig'", e);
                    }
                    // deserialize EventSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EventSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEventSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EventSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EventSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EventSettingsConfig'", e);
                    }
                    // deserialize EventsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EventsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEventsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EventsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EventsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EventsSettingsConfig'", e);
                    }
                    // deserialize EventsLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EventsLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEventsLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EventsLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EventsLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EventsLogsSettingsConfig'", e);
                    }
                    // deserialize FullScansSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        FullScansSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterFullScansSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'FullScansSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for FullScansSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'FullScansSettingsConfig'", e);
                    }
                    // deserialize GithubAdvisoryUserSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GithubAdvisoryUserSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterGithubAdvisoryUserSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GithubAdvisoryUserSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GithubAdvisoryUserSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GithubAdvisoryUserSettingsConfig'", e);
                    }
                    // deserialize GitlabIssuesSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GitlabIssuesSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterGitlabIssuesSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GitlabIssuesSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GitlabIssuesSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GitlabIssuesSettingsConfig'", e);
                    }
                    // deserialize GoogleCloudStorageSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        GoogleCloudStorageSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterGoogleCloudStorageSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'GoogleCloudStorageSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for GoogleCloudStorageSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'GoogleCloudStorageSettingsConfig'", e);
                    }
                    // deserialize IamAccessAnalyzerSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IamAccessAnalyzerSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterIamAccessAnalyzerSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IamAccessAnalyzerSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IamAccessAnalyzerSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IamAccessAnalyzerSettingsConfig'", e);
                    }
                    // deserialize IssuesSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        IssuesSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterIssuesSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'IssuesSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for IssuesSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'IssuesSettingsConfig'", e);
                    }
                    // deserialize KmsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        KmsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterKmsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'KmsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for KmsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'KmsSettingsConfig'", e);
                    }
                    // deserialize LogAnalyticsQuerySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LogAnalyticsQuerySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLogAnalyticsQuerySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LogAnalyticsQuerySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LogAnalyticsQuerySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LogAnalyticsQuerySettingsConfig'", e);
                    }
                    // deserialize LoginActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LoginActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLoginActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LoginActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LoginActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LoginActivitySettingsConfig'", e);
                    }
                    // deserialize LoginSessionsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LoginSessionsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLoginSessionsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LoginSessionsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LoginSessionsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LoginSessionsSettingsConfig'", e);
                    }
                    // deserialize Map<String, Object>
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.isJsonObject()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be a object type in the JSON string but got `%s`", jsonElement.toString()));
                        }

                        actualAdapter = adapterMapStringObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Map<String, Object>'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Map<String, Object> failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Map<String, Object>'", e);
                    }
                    // deserialize Object
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                        }
                        actualAdapter = adapterObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Object'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Object'", e);
                    }
                    // deserialize MonadLogSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MonadLogSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterMonadLogSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MonadLogSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MonadLogSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MonadLogSettingsConfig'", e);
                    }
                    // deserialize OauthActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OauthActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterOauthActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OauthActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OauthActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OauthActivitySettingsConfig'", e);
                    }
                    // deserialize ObjectStorageInputSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ObjectStorageInputSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterObjectStorageInputSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ObjectStorageInputSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ObjectStorageInputSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ObjectStorageInputSettingsConfig'", e);
                    }
                    // deserialize OneloginEventsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OneloginEventsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterOneloginEventsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OneloginEventsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OneloginEventsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OneloginEventsSettingsConfig'", e);
                    }
                    // deserialize OpenaiSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OpenaiSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterOpenaiSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OpenaiSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OpenaiSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OpenaiSettingsConfig'", e);
                    }
                    // deserialize OrganizationsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OrganizationsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterOrganizationsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OrganizationsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OrganizationsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OrganizationsSettingsConfig'", e);
                    }
                    // deserialize PaloAltoDataSecurityAlertsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        PaloAltoDataSecurityAlertsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterPaloAltoDataSecurityAlertsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'PaloAltoDataSecurityAlertsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for PaloAltoDataSecurityAlertsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'PaloAltoDataSecurityAlertsSettingsConfig'", e);
                    }
                    // deserialize ResourceEvaluationsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ResourceEvaluationsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterResourceEvaluationsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ResourceEvaluationsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ResourceEvaluationsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ResourceEvaluationsSettingsConfig'", e);
                    }
                    // deserialize RolesInfoSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RolesInfoSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterRolesInfoSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RolesInfoSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RolesInfoSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RolesInfoSettingsConfig'", e);
                    }
                    // deserialize SecretsmanagerSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SecretsmanagerSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSecretsmanagerSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SecretsmanagerSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SecretsmanagerSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SecretsmanagerSettingsConfig'", e);
                    }
                    // deserialize SecurityGroupsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SecurityGroupsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSecurityGroupsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SecurityGroupsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SecurityGroupsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SecurityGroupsSettingsConfig'", e);
                    }
                    // deserialize SemgrepCodeFindingsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepCodeFindingsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepCodeFindingsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepCodeFindingsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepCodeFindingsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepCodeFindingsSettingsConfig'", e);
                    }
                    // deserialize SemgrepDeploymentsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepDeploymentsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepDeploymentsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepDeploymentsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepDeploymentsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepDeploymentsSettingsConfig'", e);
                    }
                    // deserialize SemgrepProjectDetailsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepProjectDetailsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepProjectDetailsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepProjectDetailsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepProjectDetailsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepProjectDetailsSettingsConfig'", e);
                    }
                    // deserialize SemgrepProjectsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepProjectsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepProjectsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepProjectsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepProjectsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepProjectsSettingsConfig'", e);
                    }
                    // deserialize SemgrepSupplyChainFindingsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepSupplyChainFindingsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepSupplyChainFindingsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepSupplyChainFindingsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepSupplyChainFindingsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepSupplyChainFindingsSettingsConfig'", e);
                    }
                    // deserialize SentryOrgAuditLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SentryOrgAuditLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSentryOrgAuditLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SentryOrgAuditLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SentryOrgAuditLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SentryOrgAuditLogsSettingsConfig'", e);
                    }
                    // deserialize SlackUsersSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SlackUsersSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSlackUsersSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SlackUsersSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SlackUsersSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SlackUsersSettingsConfig'", e);
                    }
                    // deserialize SlackgroupsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SlackgroupsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSlackgroupsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SlackgroupsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SlackgroupsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SlackgroupsSettingsConfig'", e);
                    }
                    // deserialize SnowflakeInputSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnowflakeInputSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnowflakeInputSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnowflakeInputSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnowflakeInputSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnowflakeInputSettingsConfig'", e);
                    }
                    // deserialize SnykIssuesSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykIssuesSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykIssuesSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykIssuesSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykIssuesSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykIssuesSettingsConfig'", e);
                    }
                    // deserialize SnykOrganizationsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykOrganizationsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykOrganizationsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykOrganizationsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykOrganizationsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykOrganizationsSettingsConfig'", e);
                    }
                    // deserialize SnykProjectsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykProjectsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykProjectsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykProjectsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykProjectsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykProjectsSettingsConfig'", e);
                    }
                    // deserialize SnykTargetsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykTargetsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykTargetsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykTargetsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykTargetsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykTargetsSettingsConfig'", e);
                    }
                    // deserialize SyntheticDataSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SyntheticDataSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSyntheticDataSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SyntheticDataSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SyntheticDataSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SyntheticDataSettingsConfig'", e);
                    }
                    // deserialize SyntheticDataCustomSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SyntheticDataCustomSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSyntheticDataCustomSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SyntheticDataCustomSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SyntheticDataCustomSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SyntheticDataCustomSettingsConfig'", e);
                    }
                    // deserialize SystemlogSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SystemlogSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSystemlogSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SystemlogSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SystemlogSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SystemlogSettingsConfig'", e);
                    }
                    // deserialize TailscaleUsersSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TailscaleUsersSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterTailscaleUsersSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TailscaleUsersSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TailscaleUsersSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TailscaleUsersSettingsConfig'", e);
                    }
                    // deserialize TenableAssetsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TenableAssetsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterTenableAssetsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TenableAssetsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TenableAssetsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TenableAssetsSettingsConfig'", e);
                    }
                    // deserialize TenableAssetsCronSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TenableAssetsCronSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterTenableAssetsCronSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TenableAssetsCronSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TenableAssetsCronSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TenableAssetsCronSettingsConfig'", e);
                    }
                    // deserialize TenableVulnerabilitiesSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TenableVulnerabilitiesSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterTenableVulnerabilitiesSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TenableVulnerabilitiesSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TenableVulnerabilitiesSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TenableVulnerabilitiesSettingsConfig'", e);
                    }
                    // deserialize TenableVulnerabilitiesCronSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TenableVulnerabilitiesCronSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterTenableVulnerabilitiesCronSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TenableVulnerabilitiesCronSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TenableVulnerabilitiesCronSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TenableVulnerabilitiesCronSettingsConfig'", e);
                    }
                    // deserialize UsersSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UsersSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterUsersSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UsersSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UsersSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UsersSettingsConfig'", e);
                    }
                    // deserialize UsersInfoSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UsersInfoSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterUsersInfoSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UsersInfoSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UsersInfoSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UsersInfoSettingsConfig'", e);
                    }
                    // deserialize VulnerabilitiesSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VulnerabilitiesSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterVulnerabilitiesSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VulnerabilitiesSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VulnerabilitiesSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VulnerabilitiesSettingsConfig'", e);
                    }
                    // deserialize VulnerabilitiesCronSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VulnerabilitiesCronSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterVulnerabilitiesCronSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VulnerabilitiesCronSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VulnerabilitiesCronSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VulnerabilitiesCronSettingsConfig'", e);
                    }
                    // deserialize VulnerabilityFindingsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VulnerabilityFindingsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterVulnerabilityFindingsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VulnerabilityFindingsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VulnerabilityFindingsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VulnerabilityFindingsSettingsConfig'", e);
                    }

                    if (match == 1) {
                        SecretProcessesorInputConfigSettings ret = new SecretProcessesorInputConfigSettings();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for SecretProcessesorInputConfigSettings: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public SecretProcessesorInputConfigSettings() {
        super("oneOf", Boolean.FALSE);
    }

    public SecretProcessesorInputConfigSettings(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ActivityLogsSettingsConfig", ActivityLogsSettingsConfig.class);
        schemas.put("ActorsInfoSettingsConfig", ActorsInfoSettingsConfig.class);
        schemas.put("AdminActivitySettingsConfig", AdminActivitySettingsConfig.class);
        schemas.put("AdminLogsSettingsConfig", AdminLogsSettingsConfig.class);
        schemas.put("AuditLogsSettingsConfig", AuditLogsSettingsConfig.class);
        schemas.put("AuthLogsSettingsConfig", AuthLogsSettingsConfig.class);
        schemas.put("AwsGuarddutySettingsConfig", AwsGuarddutySettingsConfig.class);
        schemas.put("AwsS3SettingsConfig", AwsS3SettingsConfig.class);
        schemas.put("AwssqsSettingsConfig", AwssqsSettingsConfig.class);
        schemas.put("AzureActivityLogsSettingsConfig", AzureActivityLogsSettingsConfig.class);
        schemas.put("AzureBlobStorageSettingsConfig", AzureBlobStorageSettingsConfig.class);
        schemas.put("AzureVirtualMachineSettingsConfig", AzureVirtualMachineSettingsConfig.class);
        schemas.put("AzureVnetFlowLogsSettingsConfig", AzureVnetFlowLogsSettingsConfig.class);
        schemas.put("BigqueryInputSettingsConfig", BigqueryInputSettingsConfig.class);
        schemas.put("BoxEventsSettingsConfig", BoxEventsSettingsConfig.class);
        schemas.put("BoxUsersSettingsConfig", BoxUsersSettingsConfig.class);
        schemas.put("CisaUserSettingsConfig", CisaUserSettingsConfig.class);
        schemas.put("CloudAssetInventorySettingsConfig", CloudAssetInventorySettingsConfig.class);
        schemas.put("CloudConfigurationFindingsSettingsConfig", CloudConfigurationFindingsSettingsConfig.class);
        schemas.put("CloudLogsSettingsConfig", CloudLogsSettingsConfig.class);
        schemas.put("CloudResourceInventorySettingsConfig", CloudResourceInventorySettingsConfig.class);
        schemas.put("CloudtrailSettingsConfig", CloudtrailSettingsConfig.class);
        schemas.put("CognitoUsersSettingsConfig", CognitoUsersSettingsConfig.class);
        schemas.put("CrowdstrikeFdrSettingsConfig", CrowdstrikeFdrSettingsConfig.class);
        schemas.put("DefenderForEndpointAlertsSettingsConfig", DefenderForEndpointAlertsSettingsConfig.class);
        schemas.put("DetectSummariesSettingsConfig", DetectSummariesSettingsConfig.class);
        schemas.put("DeviceActivitySettingsConfig", DeviceActivitySettingsConfig.class);
        schemas.put("DeviceDetailsSettingsConfig", DeviceDetailsSettingsConfig.class);
        schemas.put("DevicesSettingsConfig", DevicesSettingsConfig.class);
        schemas.put("DriveActivitySettingsConfig", DriveActivitySettingsConfig.class);
        schemas.put("EntraIdSettingsConfig", EntraIdSettingsConfig.class);
        schemas.put("EventSettingsConfig", EventSettingsConfig.class);
        schemas.put("EventsSettingsConfig", EventsSettingsConfig.class);
        schemas.put("EventsLogsSettingsConfig", EventsLogsSettingsConfig.class);
        schemas.put("FullScansSettingsConfig", FullScansSettingsConfig.class);
        schemas.put("GithubAdvisoryUserSettingsConfig", GithubAdvisoryUserSettingsConfig.class);
        schemas.put("GitlabIssuesSettingsConfig", GitlabIssuesSettingsConfig.class);
        schemas.put("GoogleCloudStorageSettingsConfig", GoogleCloudStorageSettingsConfig.class);
        schemas.put("IamAccessAnalyzerSettingsConfig", IamAccessAnalyzerSettingsConfig.class);
        schemas.put("IssuesSettingsConfig", IssuesSettingsConfig.class);
        schemas.put("KmsSettingsConfig", KmsSettingsConfig.class);
        schemas.put("LogAnalyticsQuerySettingsConfig", LogAnalyticsQuerySettingsConfig.class);
        schemas.put("LoginActivitySettingsConfig", LoginActivitySettingsConfig.class);
        schemas.put("LoginSessionsSettingsConfig", LoginSessionsSettingsConfig.class);
        schemas.put("Map<String, Object>", Map.class);
        schemas.put("Object", Object.class);
        schemas.put("MonadLogSettingsConfig", MonadLogSettingsConfig.class);
        schemas.put("OauthActivitySettingsConfig", OauthActivitySettingsConfig.class);
        schemas.put("ObjectStorageInputSettingsConfig", ObjectStorageInputSettingsConfig.class);
        schemas.put("OneloginEventsSettingsConfig", OneloginEventsSettingsConfig.class);
        schemas.put("OpenaiSettingsConfig", OpenaiSettingsConfig.class);
        schemas.put("OrganizationsSettingsConfig", OrganizationsSettingsConfig.class);
        schemas.put("PaloAltoDataSecurityAlertsSettingsConfig", PaloAltoDataSecurityAlertsSettingsConfig.class);
        schemas.put("ResourceEvaluationsSettingsConfig", ResourceEvaluationsSettingsConfig.class);
        schemas.put("RolesInfoSettingsConfig", RolesInfoSettingsConfig.class);
        schemas.put("SecretsmanagerSettingsConfig", SecretsmanagerSettingsConfig.class);
        schemas.put("SecurityGroupsSettingsConfig", SecurityGroupsSettingsConfig.class);
        schemas.put("SemgrepCodeFindingsSettingsConfig", SemgrepCodeFindingsSettingsConfig.class);
        schemas.put("SemgrepDeploymentsSettingsConfig", SemgrepDeploymentsSettingsConfig.class);
        schemas.put("SemgrepProjectDetailsSettingsConfig", SemgrepProjectDetailsSettingsConfig.class);
        schemas.put("SemgrepProjectsSettingsConfig", SemgrepProjectsSettingsConfig.class);
        schemas.put("SemgrepSupplyChainFindingsSettingsConfig", SemgrepSupplyChainFindingsSettingsConfig.class);
        schemas.put("SentryOrgAuditLogsSettingsConfig", SentryOrgAuditLogsSettingsConfig.class);
        schemas.put("SlackUsersSettingsConfig", SlackUsersSettingsConfig.class);
        schemas.put("SlackgroupsSettingsConfig", SlackgroupsSettingsConfig.class);
        schemas.put("SnowflakeInputSettingsConfig", SnowflakeInputSettingsConfig.class);
        schemas.put("SnykIssuesSettingsConfig", SnykIssuesSettingsConfig.class);
        schemas.put("SnykOrganizationsSettingsConfig", SnykOrganizationsSettingsConfig.class);
        schemas.put("SnykProjectsSettingsConfig", SnykProjectsSettingsConfig.class);
        schemas.put("SnykTargetsSettingsConfig", SnykTargetsSettingsConfig.class);
        schemas.put("SyntheticDataSettingsConfig", SyntheticDataSettingsConfig.class);
        schemas.put("SyntheticDataCustomSettingsConfig", SyntheticDataCustomSettingsConfig.class);
        schemas.put("SystemlogSettingsConfig", SystemlogSettingsConfig.class);
        schemas.put("TailscaleUsersSettingsConfig", TailscaleUsersSettingsConfig.class);
        schemas.put("TenableAssetsSettingsConfig", TenableAssetsSettingsConfig.class);
        schemas.put("TenableAssetsCronSettingsConfig", TenableAssetsCronSettingsConfig.class);
        schemas.put("TenableVulnerabilitiesSettingsConfig", TenableVulnerabilitiesSettingsConfig.class);
        schemas.put("TenableVulnerabilitiesCronSettingsConfig", TenableVulnerabilitiesCronSettingsConfig.class);
        schemas.put("UsersSettingsConfig", UsersSettingsConfig.class);
        schemas.put("UsersInfoSettingsConfig", UsersInfoSettingsConfig.class);
        schemas.put("VulnerabilitiesSettingsConfig", VulnerabilitiesSettingsConfig.class);
        schemas.put("VulnerabilitiesCronSettingsConfig", VulnerabilitiesCronSettingsConfig.class);
        schemas.put("VulnerabilityFindingsSettingsConfig", VulnerabilityFindingsSettingsConfig.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return SecretProcessesorInputConfigSettings.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsGuarddutySettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, AzureBlobStorageSettingsConfig, AzureVirtualMachineSettingsConfig, AzureVnetFlowLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CisaUserSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CognitoUsersSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, EventsSettingsConfig, FullScansSettingsConfig, GithubAdvisoryUserSettingsConfig, GitlabIssuesSettingsConfig, GoogleCloudStorageSettingsConfig, IamAccessAnalyzerSettingsConfig, IssuesSettingsConfig, KmsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, Map<String, Object>, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, OpenaiSettingsConfig, OrganizationsSettingsConfig, PaloAltoDataSecurityAlertsSettingsConfig, ResourceEvaluationsSettingsConfig, RolesInfoSettingsConfig, SecretsmanagerSettingsConfig, SecurityGroupsSettingsConfig, SemgrepCodeFindingsSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SemgrepSupplyChainFindingsSettingsConfig, SentryOrgAuditLogsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykIssuesSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, SnykTargetsSettingsConfig, SyntheticDataCustomSettingsConfig, SyntheticDataSettingsConfig, SystemlogSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableAssetsSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, TenableVulnerabilitiesSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ActivityLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ActorsInfoSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdminActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdminLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuditLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsGuarddutySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsS3SettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwssqsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AzureActivityLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AzureBlobStorageSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AzureVirtualMachineSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AzureVnetFlowLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BigqueryInputSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BoxEventsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BoxUsersSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CisaUserSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudAssetInventorySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudConfigurationFindingsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudResourceInventorySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudtrailSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CognitoUsersSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CrowdstrikeFdrSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DefenderForEndpointAlertsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DetectSummariesSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeviceActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeviceDetailsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DevicesSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DriveActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EntraIdSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventsLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof FullScansSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GithubAdvisoryUserSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GitlabIssuesSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof GoogleCloudStorageSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IamAccessAnalyzerSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof IssuesSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof KmsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LogAnalyticsQuerySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LoginActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LoginSessionsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Map<?, ?>) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Object) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MonadLogSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OauthActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ObjectStorageInputSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OneloginEventsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OpenaiSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OrganizationsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof PaloAltoDataSecurityAlertsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ResourceEvaluationsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RolesInfoSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SecretsmanagerSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SecurityGroupsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepCodeFindingsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepDeploymentsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepProjectDetailsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepProjectsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepSupplyChainFindingsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SentryOrgAuditLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SlackUsersSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SlackgroupsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnowflakeInputSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykIssuesSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykOrganizationsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykProjectsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykTargetsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SyntheticDataSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SyntheticDataCustomSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SystemlogSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TailscaleUsersSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TenableAssetsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TenableAssetsCronSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TenableVulnerabilitiesSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TenableVulnerabilitiesCronSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UsersSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UsersInfoSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VulnerabilitiesSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VulnerabilitiesCronSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VulnerabilityFindingsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsGuarddutySettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, AzureBlobStorageSettingsConfig, AzureVirtualMachineSettingsConfig, AzureVnetFlowLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CisaUserSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CognitoUsersSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, EventsSettingsConfig, FullScansSettingsConfig, GithubAdvisoryUserSettingsConfig, GitlabIssuesSettingsConfig, GoogleCloudStorageSettingsConfig, IamAccessAnalyzerSettingsConfig, IssuesSettingsConfig, KmsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, Map<String, Object>, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, OpenaiSettingsConfig, OrganizationsSettingsConfig, PaloAltoDataSecurityAlertsSettingsConfig, ResourceEvaluationsSettingsConfig, RolesInfoSettingsConfig, SecretsmanagerSettingsConfig, SecurityGroupsSettingsConfig, SemgrepCodeFindingsSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SemgrepSupplyChainFindingsSettingsConfig, SentryOrgAuditLogsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykIssuesSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, SnykTargetsSettingsConfig, SyntheticDataCustomSettingsConfig, SyntheticDataSettingsConfig, SystemlogSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableAssetsSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, TenableVulnerabilitiesSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig");
    }

    /**
     * Get the actual instance, which can be the following:
     * ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsGuarddutySettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, AzureBlobStorageSettingsConfig, AzureVirtualMachineSettingsConfig, AzureVnetFlowLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CisaUserSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CognitoUsersSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, EventsSettingsConfig, FullScansSettingsConfig, GithubAdvisoryUserSettingsConfig, GitlabIssuesSettingsConfig, GoogleCloudStorageSettingsConfig, IamAccessAnalyzerSettingsConfig, IssuesSettingsConfig, KmsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, Map<String, Object>, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, OpenaiSettingsConfig, OrganizationsSettingsConfig, PaloAltoDataSecurityAlertsSettingsConfig, ResourceEvaluationsSettingsConfig, RolesInfoSettingsConfig, SecretsmanagerSettingsConfig, SecurityGroupsSettingsConfig, SemgrepCodeFindingsSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SemgrepSupplyChainFindingsSettingsConfig, SentryOrgAuditLogsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykIssuesSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, SnykTargetsSettingsConfig, SyntheticDataCustomSettingsConfig, SyntheticDataSettingsConfig, SystemlogSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableAssetsSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, TenableVulnerabilitiesSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig
     *
     * @return The actual instance (ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsGuarddutySettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, AzureBlobStorageSettingsConfig, AzureVirtualMachineSettingsConfig, AzureVnetFlowLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CisaUserSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CognitoUsersSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, EventsSettingsConfig, FullScansSettingsConfig, GithubAdvisoryUserSettingsConfig, GitlabIssuesSettingsConfig, GoogleCloudStorageSettingsConfig, IamAccessAnalyzerSettingsConfig, IssuesSettingsConfig, KmsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, Map<String, Object>, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, OpenaiSettingsConfig, OrganizationsSettingsConfig, PaloAltoDataSecurityAlertsSettingsConfig, ResourceEvaluationsSettingsConfig, RolesInfoSettingsConfig, SecretsmanagerSettingsConfig, SecurityGroupsSettingsConfig, SemgrepCodeFindingsSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SemgrepSupplyChainFindingsSettingsConfig, SentryOrgAuditLogsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykIssuesSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, SnykTargetsSettingsConfig, SyntheticDataCustomSettingsConfig, SyntheticDataSettingsConfig, SystemlogSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableAssetsSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, TenableVulnerabilitiesSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ActivityLogsSettingsConfig`. If the actual instance is not `ActivityLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ActivityLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `ActivityLogsSettingsConfig`
     */
    public ActivityLogsSettingsConfig getActivityLogsSettingsConfig() throws ClassCastException {
        return (ActivityLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ActorsInfoSettingsConfig`. If the actual instance is not `ActorsInfoSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ActorsInfoSettingsConfig`
     * @throws ClassCastException if the instance is not `ActorsInfoSettingsConfig`
     */
    public ActorsInfoSettingsConfig getActorsInfoSettingsConfig() throws ClassCastException {
        return (ActorsInfoSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AdminActivitySettingsConfig`. If the actual instance is not `AdminActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `AdminActivitySettingsConfig`
     */
    public AdminActivitySettingsConfig getAdminActivitySettingsConfig() throws ClassCastException {
        return (AdminActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AdminLogsSettingsConfig`. If the actual instance is not `AdminLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `AdminLogsSettingsConfig`
     */
    public AdminLogsSettingsConfig getAdminLogsSettingsConfig() throws ClassCastException {
        return (AdminLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AuditLogsSettingsConfig`. If the actual instance is not `AuditLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuditLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `AuditLogsSettingsConfig`
     */
    public AuditLogsSettingsConfig getAuditLogsSettingsConfig() throws ClassCastException {
        return (AuditLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AuthLogsSettingsConfig`. If the actual instance is not `AuthLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `AuthLogsSettingsConfig`
     */
    public AuthLogsSettingsConfig getAuthLogsSettingsConfig() throws ClassCastException {
        return (AuthLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AwsGuarddutySettingsConfig`. If the actual instance is not `AwsGuarddutySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsGuarddutySettingsConfig`
     * @throws ClassCastException if the instance is not `AwsGuarddutySettingsConfig`
     */
    public AwsGuarddutySettingsConfig getAwsGuarddutySettingsConfig() throws ClassCastException {
        return (AwsGuarddutySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AwsS3SettingsConfig`. If the actual instance is not `AwsS3SettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsS3SettingsConfig`
     * @throws ClassCastException if the instance is not `AwsS3SettingsConfig`
     */
    public AwsS3SettingsConfig getAwsS3SettingsConfig() throws ClassCastException {
        return (AwsS3SettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AwssqsSettingsConfig`. If the actual instance is not `AwssqsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwssqsSettingsConfig`
     * @throws ClassCastException if the instance is not `AwssqsSettingsConfig`
     */
    public AwssqsSettingsConfig getAwssqsSettingsConfig() throws ClassCastException {
        return (AwssqsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AzureActivityLogsSettingsConfig`. If the actual instance is not `AzureActivityLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AzureActivityLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `AzureActivityLogsSettingsConfig`
     */
    public AzureActivityLogsSettingsConfig getAzureActivityLogsSettingsConfig() throws ClassCastException {
        return (AzureActivityLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AzureBlobStorageSettingsConfig`. If the actual instance is not `AzureBlobStorageSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AzureBlobStorageSettingsConfig`
     * @throws ClassCastException if the instance is not `AzureBlobStorageSettingsConfig`
     */
    public AzureBlobStorageSettingsConfig getAzureBlobStorageSettingsConfig() throws ClassCastException {
        return (AzureBlobStorageSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AzureVirtualMachineSettingsConfig`. If the actual instance is not `AzureVirtualMachineSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AzureVirtualMachineSettingsConfig`
     * @throws ClassCastException if the instance is not `AzureVirtualMachineSettingsConfig`
     */
    public AzureVirtualMachineSettingsConfig getAzureVirtualMachineSettingsConfig() throws ClassCastException {
        return (AzureVirtualMachineSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AzureVnetFlowLogsSettingsConfig`. If the actual instance is not `AzureVnetFlowLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AzureVnetFlowLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `AzureVnetFlowLogsSettingsConfig`
     */
    public AzureVnetFlowLogsSettingsConfig getAzureVnetFlowLogsSettingsConfig() throws ClassCastException {
        return (AzureVnetFlowLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BigqueryInputSettingsConfig`. If the actual instance is not `BigqueryInputSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BigqueryInputSettingsConfig`
     * @throws ClassCastException if the instance is not `BigqueryInputSettingsConfig`
     */
    public BigqueryInputSettingsConfig getBigqueryInputSettingsConfig() throws ClassCastException {
        return (BigqueryInputSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BoxEventsSettingsConfig`. If the actual instance is not `BoxEventsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BoxEventsSettingsConfig`
     * @throws ClassCastException if the instance is not `BoxEventsSettingsConfig`
     */
    public BoxEventsSettingsConfig getBoxEventsSettingsConfig() throws ClassCastException {
        return (BoxEventsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BoxUsersSettingsConfig`. If the actual instance is not `BoxUsersSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BoxUsersSettingsConfig`
     * @throws ClassCastException if the instance is not `BoxUsersSettingsConfig`
     */
    public BoxUsersSettingsConfig getBoxUsersSettingsConfig() throws ClassCastException {
        return (BoxUsersSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CisaUserSettingsConfig`. If the actual instance is not `CisaUserSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CisaUserSettingsConfig`
     * @throws ClassCastException if the instance is not `CisaUserSettingsConfig`
     */
    public CisaUserSettingsConfig getCisaUserSettingsConfig() throws ClassCastException {
        return (CisaUserSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudAssetInventorySettingsConfig`. If the actual instance is not `CloudAssetInventorySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudAssetInventorySettingsConfig`
     * @throws ClassCastException if the instance is not `CloudAssetInventorySettingsConfig`
     */
    public CloudAssetInventorySettingsConfig getCloudAssetInventorySettingsConfig() throws ClassCastException {
        return (CloudAssetInventorySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudConfigurationFindingsSettingsConfig`. If the actual instance is not `CloudConfigurationFindingsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudConfigurationFindingsSettingsConfig`
     * @throws ClassCastException if the instance is not `CloudConfigurationFindingsSettingsConfig`
     */
    public CloudConfigurationFindingsSettingsConfig getCloudConfigurationFindingsSettingsConfig() throws ClassCastException {
        return (CloudConfigurationFindingsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudLogsSettingsConfig`. If the actual instance is not `CloudLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `CloudLogsSettingsConfig`
     */
    public CloudLogsSettingsConfig getCloudLogsSettingsConfig() throws ClassCastException {
        return (CloudLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudResourceInventorySettingsConfig`. If the actual instance is not `CloudResourceInventorySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudResourceInventorySettingsConfig`
     * @throws ClassCastException if the instance is not `CloudResourceInventorySettingsConfig`
     */
    public CloudResourceInventorySettingsConfig getCloudResourceInventorySettingsConfig() throws ClassCastException {
        return (CloudResourceInventorySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudtrailSettingsConfig`. If the actual instance is not `CloudtrailSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudtrailSettingsConfig`
     * @throws ClassCastException if the instance is not `CloudtrailSettingsConfig`
     */
    public CloudtrailSettingsConfig getCloudtrailSettingsConfig() throws ClassCastException {
        return (CloudtrailSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CognitoUsersSettingsConfig`. If the actual instance is not `CognitoUsersSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CognitoUsersSettingsConfig`
     * @throws ClassCastException if the instance is not `CognitoUsersSettingsConfig`
     */
    public CognitoUsersSettingsConfig getCognitoUsersSettingsConfig() throws ClassCastException {
        return (CognitoUsersSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CrowdstrikeFdrSettingsConfig`. If the actual instance is not `CrowdstrikeFdrSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CrowdstrikeFdrSettingsConfig`
     * @throws ClassCastException if the instance is not `CrowdstrikeFdrSettingsConfig`
     */
    public CrowdstrikeFdrSettingsConfig getCrowdstrikeFdrSettingsConfig() throws ClassCastException {
        return (CrowdstrikeFdrSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DefenderForEndpointAlertsSettingsConfig`. If the actual instance is not `DefenderForEndpointAlertsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DefenderForEndpointAlertsSettingsConfig`
     * @throws ClassCastException if the instance is not `DefenderForEndpointAlertsSettingsConfig`
     */
    public DefenderForEndpointAlertsSettingsConfig getDefenderForEndpointAlertsSettingsConfig() throws ClassCastException {
        return (DefenderForEndpointAlertsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DetectSummariesSettingsConfig`. If the actual instance is not `DetectSummariesSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DetectSummariesSettingsConfig`
     * @throws ClassCastException if the instance is not `DetectSummariesSettingsConfig`
     */
    public DetectSummariesSettingsConfig getDetectSummariesSettingsConfig() throws ClassCastException {
        return (DetectSummariesSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DeviceActivitySettingsConfig`. If the actual instance is not `DeviceActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeviceActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `DeviceActivitySettingsConfig`
     */
    public DeviceActivitySettingsConfig getDeviceActivitySettingsConfig() throws ClassCastException {
        return (DeviceActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DeviceDetailsSettingsConfig`. If the actual instance is not `DeviceDetailsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeviceDetailsSettingsConfig`
     * @throws ClassCastException if the instance is not `DeviceDetailsSettingsConfig`
     */
    public DeviceDetailsSettingsConfig getDeviceDetailsSettingsConfig() throws ClassCastException {
        return (DeviceDetailsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DevicesSettingsConfig`. If the actual instance is not `DevicesSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DevicesSettingsConfig`
     * @throws ClassCastException if the instance is not `DevicesSettingsConfig`
     */
    public DevicesSettingsConfig getDevicesSettingsConfig() throws ClassCastException {
        return (DevicesSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DriveActivitySettingsConfig`. If the actual instance is not `DriveActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DriveActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `DriveActivitySettingsConfig`
     */
    public DriveActivitySettingsConfig getDriveActivitySettingsConfig() throws ClassCastException {
        return (DriveActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EntraIdSettingsConfig`. If the actual instance is not `EntraIdSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EntraIdSettingsConfig`
     * @throws ClassCastException if the instance is not `EntraIdSettingsConfig`
     */
    public EntraIdSettingsConfig getEntraIdSettingsConfig() throws ClassCastException {
        return (EntraIdSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventSettingsConfig`. If the actual instance is not `EventSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventSettingsConfig`
     * @throws ClassCastException if the instance is not `EventSettingsConfig`
     */
    public EventSettingsConfig getEventSettingsConfig() throws ClassCastException {
        return (EventSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventsSettingsConfig`. If the actual instance is not `EventsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventsSettingsConfig`
     * @throws ClassCastException if the instance is not `EventsSettingsConfig`
     */
    public EventsSettingsConfig getEventsSettingsConfig() throws ClassCastException {
        return (EventsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventsLogsSettingsConfig`. If the actual instance is not `EventsLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventsLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `EventsLogsSettingsConfig`
     */
    public EventsLogsSettingsConfig getEventsLogsSettingsConfig() throws ClassCastException {
        return (EventsLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `FullScansSettingsConfig`. If the actual instance is not `FullScansSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `FullScansSettingsConfig`
     * @throws ClassCastException if the instance is not `FullScansSettingsConfig`
     */
    public FullScansSettingsConfig getFullScansSettingsConfig() throws ClassCastException {
        return (FullScansSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GithubAdvisoryUserSettingsConfig`. If the actual instance is not `GithubAdvisoryUserSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GithubAdvisoryUserSettingsConfig`
     * @throws ClassCastException if the instance is not `GithubAdvisoryUserSettingsConfig`
     */
    public GithubAdvisoryUserSettingsConfig getGithubAdvisoryUserSettingsConfig() throws ClassCastException {
        return (GithubAdvisoryUserSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GitlabIssuesSettingsConfig`. If the actual instance is not `GitlabIssuesSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GitlabIssuesSettingsConfig`
     * @throws ClassCastException if the instance is not `GitlabIssuesSettingsConfig`
     */
    public GitlabIssuesSettingsConfig getGitlabIssuesSettingsConfig() throws ClassCastException {
        return (GitlabIssuesSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `GoogleCloudStorageSettingsConfig`. If the actual instance is not `GoogleCloudStorageSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `GoogleCloudStorageSettingsConfig`
     * @throws ClassCastException if the instance is not `GoogleCloudStorageSettingsConfig`
     */
    public GoogleCloudStorageSettingsConfig getGoogleCloudStorageSettingsConfig() throws ClassCastException {
        return (GoogleCloudStorageSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IamAccessAnalyzerSettingsConfig`. If the actual instance is not `IamAccessAnalyzerSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IamAccessAnalyzerSettingsConfig`
     * @throws ClassCastException if the instance is not `IamAccessAnalyzerSettingsConfig`
     */
    public IamAccessAnalyzerSettingsConfig getIamAccessAnalyzerSettingsConfig() throws ClassCastException {
        return (IamAccessAnalyzerSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `IssuesSettingsConfig`. If the actual instance is not `IssuesSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `IssuesSettingsConfig`
     * @throws ClassCastException if the instance is not `IssuesSettingsConfig`
     */
    public IssuesSettingsConfig getIssuesSettingsConfig() throws ClassCastException {
        return (IssuesSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `KmsSettingsConfig`. If the actual instance is not `KmsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `KmsSettingsConfig`
     * @throws ClassCastException if the instance is not `KmsSettingsConfig`
     */
    public KmsSettingsConfig getKmsSettingsConfig() throws ClassCastException {
        return (KmsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LogAnalyticsQuerySettingsConfig`. If the actual instance is not `LogAnalyticsQuerySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LogAnalyticsQuerySettingsConfig`
     * @throws ClassCastException if the instance is not `LogAnalyticsQuerySettingsConfig`
     */
    public LogAnalyticsQuerySettingsConfig getLogAnalyticsQuerySettingsConfig() throws ClassCastException {
        return (LogAnalyticsQuerySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LoginActivitySettingsConfig`. If the actual instance is not `LoginActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LoginActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `LoginActivitySettingsConfig`
     */
    public LoginActivitySettingsConfig getLoginActivitySettingsConfig() throws ClassCastException {
        return (LoginActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LoginSessionsSettingsConfig`. If the actual instance is not `LoginSessionsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LoginSessionsSettingsConfig`
     * @throws ClassCastException if the instance is not `LoginSessionsSettingsConfig`
     */
    public LoginSessionsSettingsConfig getLoginSessionsSettingsConfig() throws ClassCastException {
        return (LoginSessionsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Map<String, Object>`. If the actual instance is not `Map<String, Object>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Map<String, Object>`
     * @throws ClassCastException if the instance is not `Map<String, Object>`
     */
    public Map<String, Object> getMapStringObject() throws ClassCastException {
        return (Map<String, Object>)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Object`. If the actual instance is not `Object`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Object`
     * @throws ClassCastException if the instance is not `Object`
     */
    public Object getObject() throws ClassCastException {
        return (Object)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MonadLogSettingsConfig`. If the actual instance is not `MonadLogSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MonadLogSettingsConfig`
     * @throws ClassCastException if the instance is not `MonadLogSettingsConfig`
     */
    public MonadLogSettingsConfig getMonadLogSettingsConfig() throws ClassCastException {
        return (MonadLogSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OauthActivitySettingsConfig`. If the actual instance is not `OauthActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OauthActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `OauthActivitySettingsConfig`
     */
    public OauthActivitySettingsConfig getOauthActivitySettingsConfig() throws ClassCastException {
        return (OauthActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ObjectStorageInputSettingsConfig`. If the actual instance is not `ObjectStorageInputSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ObjectStorageInputSettingsConfig`
     * @throws ClassCastException if the instance is not `ObjectStorageInputSettingsConfig`
     */
    public ObjectStorageInputSettingsConfig getObjectStorageInputSettingsConfig() throws ClassCastException {
        return (ObjectStorageInputSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OneloginEventsSettingsConfig`. If the actual instance is not `OneloginEventsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OneloginEventsSettingsConfig`
     * @throws ClassCastException if the instance is not `OneloginEventsSettingsConfig`
     */
    public OneloginEventsSettingsConfig getOneloginEventsSettingsConfig() throws ClassCastException {
        return (OneloginEventsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OpenaiSettingsConfig`. If the actual instance is not `OpenaiSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OpenaiSettingsConfig`
     * @throws ClassCastException if the instance is not `OpenaiSettingsConfig`
     */
    public OpenaiSettingsConfig getOpenaiSettingsConfig() throws ClassCastException {
        return (OpenaiSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OrganizationsSettingsConfig`. If the actual instance is not `OrganizationsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OrganizationsSettingsConfig`
     * @throws ClassCastException if the instance is not `OrganizationsSettingsConfig`
     */
    public OrganizationsSettingsConfig getOrganizationsSettingsConfig() throws ClassCastException {
        return (OrganizationsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `PaloAltoDataSecurityAlertsSettingsConfig`. If the actual instance is not `PaloAltoDataSecurityAlertsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `PaloAltoDataSecurityAlertsSettingsConfig`
     * @throws ClassCastException if the instance is not `PaloAltoDataSecurityAlertsSettingsConfig`
     */
    public PaloAltoDataSecurityAlertsSettingsConfig getPaloAltoDataSecurityAlertsSettingsConfig() throws ClassCastException {
        return (PaloAltoDataSecurityAlertsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ResourceEvaluationsSettingsConfig`. If the actual instance is not `ResourceEvaluationsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ResourceEvaluationsSettingsConfig`
     * @throws ClassCastException if the instance is not `ResourceEvaluationsSettingsConfig`
     */
    public ResourceEvaluationsSettingsConfig getResourceEvaluationsSettingsConfig() throws ClassCastException {
        return (ResourceEvaluationsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RolesInfoSettingsConfig`. If the actual instance is not `RolesInfoSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RolesInfoSettingsConfig`
     * @throws ClassCastException if the instance is not `RolesInfoSettingsConfig`
     */
    public RolesInfoSettingsConfig getRolesInfoSettingsConfig() throws ClassCastException {
        return (RolesInfoSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SecretsmanagerSettingsConfig`. If the actual instance is not `SecretsmanagerSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SecretsmanagerSettingsConfig`
     * @throws ClassCastException if the instance is not `SecretsmanagerSettingsConfig`
     */
    public SecretsmanagerSettingsConfig getSecretsmanagerSettingsConfig() throws ClassCastException {
        return (SecretsmanagerSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SecurityGroupsSettingsConfig`. If the actual instance is not `SecurityGroupsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SecurityGroupsSettingsConfig`
     * @throws ClassCastException if the instance is not `SecurityGroupsSettingsConfig`
     */
    public SecurityGroupsSettingsConfig getSecurityGroupsSettingsConfig() throws ClassCastException {
        return (SecurityGroupsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepCodeFindingsSettingsConfig`. If the actual instance is not `SemgrepCodeFindingsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepCodeFindingsSettingsConfig`
     * @throws ClassCastException if the instance is not `SemgrepCodeFindingsSettingsConfig`
     */
    public SemgrepCodeFindingsSettingsConfig getSemgrepCodeFindingsSettingsConfig() throws ClassCastException {
        return (SemgrepCodeFindingsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepDeploymentsSettingsConfig`. If the actual instance is not `SemgrepDeploymentsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepDeploymentsSettingsConfig`
     * @throws ClassCastException if the instance is not `SemgrepDeploymentsSettingsConfig`
     */
    public SemgrepDeploymentsSettingsConfig getSemgrepDeploymentsSettingsConfig() throws ClassCastException {
        return (SemgrepDeploymentsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepProjectDetailsSettingsConfig`. If the actual instance is not `SemgrepProjectDetailsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepProjectDetailsSettingsConfig`
     * @throws ClassCastException if the instance is not `SemgrepProjectDetailsSettingsConfig`
     */
    public SemgrepProjectDetailsSettingsConfig getSemgrepProjectDetailsSettingsConfig() throws ClassCastException {
        return (SemgrepProjectDetailsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepProjectsSettingsConfig`. If the actual instance is not `SemgrepProjectsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepProjectsSettingsConfig`
     * @throws ClassCastException if the instance is not `SemgrepProjectsSettingsConfig`
     */
    public SemgrepProjectsSettingsConfig getSemgrepProjectsSettingsConfig() throws ClassCastException {
        return (SemgrepProjectsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepSupplyChainFindingsSettingsConfig`. If the actual instance is not `SemgrepSupplyChainFindingsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepSupplyChainFindingsSettingsConfig`
     * @throws ClassCastException if the instance is not `SemgrepSupplyChainFindingsSettingsConfig`
     */
    public SemgrepSupplyChainFindingsSettingsConfig getSemgrepSupplyChainFindingsSettingsConfig() throws ClassCastException {
        return (SemgrepSupplyChainFindingsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SentryOrgAuditLogsSettingsConfig`. If the actual instance is not `SentryOrgAuditLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SentryOrgAuditLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `SentryOrgAuditLogsSettingsConfig`
     */
    public SentryOrgAuditLogsSettingsConfig getSentryOrgAuditLogsSettingsConfig() throws ClassCastException {
        return (SentryOrgAuditLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SlackUsersSettingsConfig`. If the actual instance is not `SlackUsersSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SlackUsersSettingsConfig`
     * @throws ClassCastException if the instance is not `SlackUsersSettingsConfig`
     */
    public SlackUsersSettingsConfig getSlackUsersSettingsConfig() throws ClassCastException {
        return (SlackUsersSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SlackgroupsSettingsConfig`. If the actual instance is not `SlackgroupsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SlackgroupsSettingsConfig`
     * @throws ClassCastException if the instance is not `SlackgroupsSettingsConfig`
     */
    public SlackgroupsSettingsConfig getSlackgroupsSettingsConfig() throws ClassCastException {
        return (SlackgroupsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnowflakeInputSettingsConfig`. If the actual instance is not `SnowflakeInputSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnowflakeInputSettingsConfig`
     * @throws ClassCastException if the instance is not `SnowflakeInputSettingsConfig`
     */
    public SnowflakeInputSettingsConfig getSnowflakeInputSettingsConfig() throws ClassCastException {
        return (SnowflakeInputSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykIssuesSettingsConfig`. If the actual instance is not `SnykIssuesSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykIssuesSettingsConfig`
     * @throws ClassCastException if the instance is not `SnykIssuesSettingsConfig`
     */
    public SnykIssuesSettingsConfig getSnykIssuesSettingsConfig() throws ClassCastException {
        return (SnykIssuesSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykOrganizationsSettingsConfig`. If the actual instance is not `SnykOrganizationsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykOrganizationsSettingsConfig`
     * @throws ClassCastException if the instance is not `SnykOrganizationsSettingsConfig`
     */
    public SnykOrganizationsSettingsConfig getSnykOrganizationsSettingsConfig() throws ClassCastException {
        return (SnykOrganizationsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykProjectsSettingsConfig`. If the actual instance is not `SnykProjectsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykProjectsSettingsConfig`
     * @throws ClassCastException if the instance is not `SnykProjectsSettingsConfig`
     */
    public SnykProjectsSettingsConfig getSnykProjectsSettingsConfig() throws ClassCastException {
        return (SnykProjectsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykTargetsSettingsConfig`. If the actual instance is not `SnykTargetsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykTargetsSettingsConfig`
     * @throws ClassCastException if the instance is not `SnykTargetsSettingsConfig`
     */
    public SnykTargetsSettingsConfig getSnykTargetsSettingsConfig() throws ClassCastException {
        return (SnykTargetsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SyntheticDataSettingsConfig`. If the actual instance is not `SyntheticDataSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SyntheticDataSettingsConfig`
     * @throws ClassCastException if the instance is not `SyntheticDataSettingsConfig`
     */
    public SyntheticDataSettingsConfig getSyntheticDataSettingsConfig() throws ClassCastException {
        return (SyntheticDataSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SyntheticDataCustomSettingsConfig`. If the actual instance is not `SyntheticDataCustomSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SyntheticDataCustomSettingsConfig`
     * @throws ClassCastException if the instance is not `SyntheticDataCustomSettingsConfig`
     */
    public SyntheticDataCustomSettingsConfig getSyntheticDataCustomSettingsConfig() throws ClassCastException {
        return (SyntheticDataCustomSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SystemlogSettingsConfig`. If the actual instance is not `SystemlogSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SystemlogSettingsConfig`
     * @throws ClassCastException if the instance is not `SystemlogSettingsConfig`
     */
    public SystemlogSettingsConfig getSystemlogSettingsConfig() throws ClassCastException {
        return (SystemlogSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TailscaleUsersSettingsConfig`. If the actual instance is not `TailscaleUsersSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TailscaleUsersSettingsConfig`
     * @throws ClassCastException if the instance is not `TailscaleUsersSettingsConfig`
     */
    public TailscaleUsersSettingsConfig getTailscaleUsersSettingsConfig() throws ClassCastException {
        return (TailscaleUsersSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TenableAssetsSettingsConfig`. If the actual instance is not `TenableAssetsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TenableAssetsSettingsConfig`
     * @throws ClassCastException if the instance is not `TenableAssetsSettingsConfig`
     */
    public TenableAssetsSettingsConfig getTenableAssetsSettingsConfig() throws ClassCastException {
        return (TenableAssetsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TenableAssetsCronSettingsConfig`. If the actual instance is not `TenableAssetsCronSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TenableAssetsCronSettingsConfig`
     * @throws ClassCastException if the instance is not `TenableAssetsCronSettingsConfig`
     */
    public TenableAssetsCronSettingsConfig getTenableAssetsCronSettingsConfig() throws ClassCastException {
        return (TenableAssetsCronSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TenableVulnerabilitiesSettingsConfig`. If the actual instance is not `TenableVulnerabilitiesSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TenableVulnerabilitiesSettingsConfig`
     * @throws ClassCastException if the instance is not `TenableVulnerabilitiesSettingsConfig`
     */
    public TenableVulnerabilitiesSettingsConfig getTenableVulnerabilitiesSettingsConfig() throws ClassCastException {
        return (TenableVulnerabilitiesSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TenableVulnerabilitiesCronSettingsConfig`. If the actual instance is not `TenableVulnerabilitiesCronSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TenableVulnerabilitiesCronSettingsConfig`
     * @throws ClassCastException if the instance is not `TenableVulnerabilitiesCronSettingsConfig`
     */
    public TenableVulnerabilitiesCronSettingsConfig getTenableVulnerabilitiesCronSettingsConfig() throws ClassCastException {
        return (TenableVulnerabilitiesCronSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UsersSettingsConfig`. If the actual instance is not `UsersSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsersSettingsConfig`
     * @throws ClassCastException if the instance is not `UsersSettingsConfig`
     */
    public UsersSettingsConfig getUsersSettingsConfig() throws ClassCastException {
        return (UsersSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UsersInfoSettingsConfig`. If the actual instance is not `UsersInfoSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsersInfoSettingsConfig`
     * @throws ClassCastException if the instance is not `UsersInfoSettingsConfig`
     */
    public UsersInfoSettingsConfig getUsersInfoSettingsConfig() throws ClassCastException {
        return (UsersInfoSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VulnerabilitiesSettingsConfig`. If the actual instance is not `VulnerabilitiesSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VulnerabilitiesSettingsConfig`
     * @throws ClassCastException if the instance is not `VulnerabilitiesSettingsConfig`
     */
    public VulnerabilitiesSettingsConfig getVulnerabilitiesSettingsConfig() throws ClassCastException {
        return (VulnerabilitiesSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VulnerabilitiesCronSettingsConfig`. If the actual instance is not `VulnerabilitiesCronSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VulnerabilitiesCronSettingsConfig`
     * @throws ClassCastException if the instance is not `VulnerabilitiesCronSettingsConfig`
     */
    public VulnerabilitiesCronSettingsConfig getVulnerabilitiesCronSettingsConfig() throws ClassCastException {
        return (VulnerabilitiesCronSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VulnerabilityFindingsSettingsConfig`. If the actual instance is not `VulnerabilityFindingsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VulnerabilityFindingsSettingsConfig`
     * @throws ClassCastException if the instance is not `VulnerabilityFindingsSettingsConfig`
     */
    public VulnerabilityFindingsSettingsConfig getVulnerabilityFindingsSettingsConfig() throws ClassCastException {
        return (VulnerabilityFindingsSettingsConfig)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to SecretProcessesorInputConfigSettings
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ActivityLogsSettingsConfig
        try {
            ActivityLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ActivityLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ActorsInfoSettingsConfig
        try {
            ActorsInfoSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ActorsInfoSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdminActivitySettingsConfig
        try {
            AdminActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdminLogsSettingsConfig
        try {
            AdminLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuditLogsSettingsConfig
        try {
            AuditLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuditLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthLogsSettingsConfig
        try {
            AuthLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsGuarddutySettingsConfig
        try {
            AwsGuarddutySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsGuarddutySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsS3SettingsConfig
        try {
            AwsS3SettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsS3SettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwssqsSettingsConfig
        try {
            AwssqsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwssqsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AzureActivityLogsSettingsConfig
        try {
            AzureActivityLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AzureActivityLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AzureBlobStorageSettingsConfig
        try {
            AzureBlobStorageSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AzureBlobStorageSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AzureVirtualMachineSettingsConfig
        try {
            AzureVirtualMachineSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AzureVirtualMachineSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AzureVnetFlowLogsSettingsConfig
        try {
            AzureVnetFlowLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AzureVnetFlowLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BigqueryInputSettingsConfig
        try {
            BigqueryInputSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BigqueryInputSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BoxEventsSettingsConfig
        try {
            BoxEventsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BoxEventsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BoxUsersSettingsConfig
        try {
            BoxUsersSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BoxUsersSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CisaUserSettingsConfig
        try {
            CisaUserSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CisaUserSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudAssetInventorySettingsConfig
        try {
            CloudAssetInventorySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudAssetInventorySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudConfigurationFindingsSettingsConfig
        try {
            CloudConfigurationFindingsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudConfigurationFindingsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudLogsSettingsConfig
        try {
            CloudLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudResourceInventorySettingsConfig
        try {
            CloudResourceInventorySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudResourceInventorySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudtrailSettingsConfig
        try {
            CloudtrailSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudtrailSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CognitoUsersSettingsConfig
        try {
            CognitoUsersSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CognitoUsersSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CrowdstrikeFdrSettingsConfig
        try {
            CrowdstrikeFdrSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CrowdstrikeFdrSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DefenderForEndpointAlertsSettingsConfig
        try {
            DefenderForEndpointAlertsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DefenderForEndpointAlertsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DetectSummariesSettingsConfig
        try {
            DetectSummariesSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DetectSummariesSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DeviceActivitySettingsConfig
        try {
            DeviceActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DeviceActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DeviceDetailsSettingsConfig
        try {
            DeviceDetailsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DeviceDetailsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DevicesSettingsConfig
        try {
            DevicesSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DevicesSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DriveActivitySettingsConfig
        try {
            DriveActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DriveActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EntraIdSettingsConfig
        try {
            EntraIdSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EntraIdSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EventSettingsConfig
        try {
            EventSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EventSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EventsSettingsConfig
        try {
            EventsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EventsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EventsLogsSettingsConfig
        try {
            EventsLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EventsLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with FullScansSettingsConfig
        try {
            FullScansSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for FullScansSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GithubAdvisoryUserSettingsConfig
        try {
            GithubAdvisoryUserSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GithubAdvisoryUserSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GitlabIssuesSettingsConfig
        try {
            GitlabIssuesSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GitlabIssuesSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with GoogleCloudStorageSettingsConfig
        try {
            GoogleCloudStorageSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for GoogleCloudStorageSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IamAccessAnalyzerSettingsConfig
        try {
            IamAccessAnalyzerSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IamAccessAnalyzerSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with IssuesSettingsConfig
        try {
            IssuesSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for IssuesSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with KmsSettingsConfig
        try {
            KmsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for KmsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LogAnalyticsQuerySettingsConfig
        try {
            LogAnalyticsQuerySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LogAnalyticsQuerySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LoginActivitySettingsConfig
        try {
            LoginActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LoginActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LoginSessionsSettingsConfig
        try {
            LoginSessionsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LoginSessionsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Map<String, Object>
        try {
            if (!jsonElement.isJsonObject()) {
                throw new IllegalArgumentException(String.format("Expected json element to be a object type in the JSON string but got `%s`", jsonElement.toString()));
            }

            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Map<String, Object> failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Object
        try {
            if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MonadLogSettingsConfig
        try {
            MonadLogSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MonadLogSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OauthActivitySettingsConfig
        try {
            OauthActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OauthActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ObjectStorageInputSettingsConfig
        try {
            ObjectStorageInputSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ObjectStorageInputSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OneloginEventsSettingsConfig
        try {
            OneloginEventsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OneloginEventsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OpenaiSettingsConfig
        try {
            OpenaiSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OpenaiSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OrganizationsSettingsConfig
        try {
            OrganizationsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OrganizationsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with PaloAltoDataSecurityAlertsSettingsConfig
        try {
            PaloAltoDataSecurityAlertsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for PaloAltoDataSecurityAlertsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ResourceEvaluationsSettingsConfig
        try {
            ResourceEvaluationsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ResourceEvaluationsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RolesInfoSettingsConfig
        try {
            RolesInfoSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RolesInfoSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SecretsmanagerSettingsConfig
        try {
            SecretsmanagerSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SecretsmanagerSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SecurityGroupsSettingsConfig
        try {
            SecurityGroupsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SecurityGroupsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepCodeFindingsSettingsConfig
        try {
            SemgrepCodeFindingsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepCodeFindingsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepDeploymentsSettingsConfig
        try {
            SemgrepDeploymentsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepDeploymentsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepProjectDetailsSettingsConfig
        try {
            SemgrepProjectDetailsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepProjectDetailsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepProjectsSettingsConfig
        try {
            SemgrepProjectsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepProjectsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepSupplyChainFindingsSettingsConfig
        try {
            SemgrepSupplyChainFindingsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepSupplyChainFindingsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SentryOrgAuditLogsSettingsConfig
        try {
            SentryOrgAuditLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SentryOrgAuditLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SlackUsersSettingsConfig
        try {
            SlackUsersSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SlackUsersSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SlackgroupsSettingsConfig
        try {
            SlackgroupsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SlackgroupsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnowflakeInputSettingsConfig
        try {
            SnowflakeInputSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnowflakeInputSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykIssuesSettingsConfig
        try {
            SnykIssuesSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykIssuesSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykOrganizationsSettingsConfig
        try {
            SnykOrganizationsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykOrganizationsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykProjectsSettingsConfig
        try {
            SnykProjectsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykProjectsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykTargetsSettingsConfig
        try {
            SnykTargetsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykTargetsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SyntheticDataSettingsConfig
        try {
            SyntheticDataSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SyntheticDataSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SyntheticDataCustomSettingsConfig
        try {
            SyntheticDataCustomSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SyntheticDataCustomSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SystemlogSettingsConfig
        try {
            SystemlogSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SystemlogSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TailscaleUsersSettingsConfig
        try {
            TailscaleUsersSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TailscaleUsersSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TenableAssetsSettingsConfig
        try {
            TenableAssetsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TenableAssetsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TenableAssetsCronSettingsConfig
        try {
            TenableAssetsCronSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TenableAssetsCronSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TenableVulnerabilitiesSettingsConfig
        try {
            TenableVulnerabilitiesSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TenableVulnerabilitiesSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TenableVulnerabilitiesCronSettingsConfig
        try {
            TenableVulnerabilitiesCronSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TenableVulnerabilitiesCronSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UsersSettingsConfig
        try {
            UsersSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UsersSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UsersInfoSettingsConfig
        try {
            UsersInfoSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UsersInfoSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VulnerabilitiesSettingsConfig
        try {
            VulnerabilitiesSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VulnerabilitiesSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VulnerabilitiesCronSettingsConfig
        try {
            VulnerabilitiesCronSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VulnerabilitiesCronSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VulnerabilityFindingsSettingsConfig
        try {
            VulnerabilityFindingsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VulnerabilityFindingsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for SecretProcessesorInputConfigSettings with oneOf schemas: ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsGuarddutySettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, AzureBlobStorageSettingsConfig, AzureVirtualMachineSettingsConfig, AzureVnetFlowLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CisaUserSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CognitoUsersSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, EventsSettingsConfig, FullScansSettingsConfig, GithubAdvisoryUserSettingsConfig, GitlabIssuesSettingsConfig, GoogleCloudStorageSettingsConfig, IamAccessAnalyzerSettingsConfig, IssuesSettingsConfig, KmsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, Map<String, Object>, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, OpenaiSettingsConfig, OrganizationsSettingsConfig, PaloAltoDataSecurityAlertsSettingsConfig, ResourceEvaluationsSettingsConfig, RolesInfoSettingsConfig, SecretsmanagerSettingsConfig, SecurityGroupsSettingsConfig, SemgrepCodeFindingsSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SemgrepSupplyChainFindingsSettingsConfig, SentryOrgAuditLogsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykIssuesSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, SnykTargetsSettingsConfig, SyntheticDataCustomSettingsConfig, SyntheticDataSettingsConfig, SystemlogSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableAssetsSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, TenableVulnerabilitiesSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of SecretProcessesorInputConfigSettings given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of SecretProcessesorInputConfigSettings
     * @throws IOException if the JSON string is invalid with respect to SecretProcessesorInputConfigSettings
     */
    public static SecretProcessesorInputConfigSettings fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, SecretProcessesorInputConfigSettings.class);
    }

    /**
     * Convert an instance of SecretProcessesorInputConfigSettings to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

