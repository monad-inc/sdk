/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.Map;
import org.openapitools.client.model.ActorsInfoSecretsConfig;
import org.openapitools.client.model.AdminActivitySecretsConfig;
import org.openapitools.client.model.AdminLogsSecretsConfig;
import org.openapitools.client.model.AuditLogsSecretsConfig;
import org.openapitools.client.model.AuthLogsSecretsConfig;
import org.openapitools.client.model.AzureActivityLogsSecretsConfig;
import org.openapitools.client.model.BoxEventsSecretsConfig;
import org.openapitools.client.model.BoxUsersSecretsConfig;
import org.openapitools.client.model.CloudAssetInventorySecretsConfig;
import org.openapitools.client.model.CloudConfigurationFindingsSecretsConfig;
import org.openapitools.client.model.CloudLogsSecretsConfig;
import org.openapitools.client.model.CloudResourceInventorySecretsConfig;
import org.openapitools.client.model.DetectSummariesSecretsConfig;
import org.openapitools.client.model.DeviceActivitySecretsConfig;
import org.openapitools.client.model.DeviceDetailsSecretsConfig;
import org.openapitools.client.model.DriveActivitySecretsConfig;
import org.openapitools.client.model.EntraIdSecretsConfig;
import org.openapitools.client.model.EventSecretsConfig;
import org.openapitools.client.model.EventsLogsSecretsConfig;
import org.openapitools.client.model.LogAnalyticsQuerySecretsConfig;
import org.openapitools.client.model.LoginActivitySecretsConfig;
import org.openapitools.client.model.LoginSessionsSecretsConfig;
import org.openapitools.client.model.ModelsSecret;
import org.openapitools.client.model.OauthActivitySecretsConfig;
import org.openapitools.client.model.RolesInfoSecretsConfig;
import org.openapitools.client.model.SemgrepCodeFindingsSecretsConfig;
import org.openapitools.client.model.SemgrepDeploymentsSecretsConfig;
import org.openapitools.client.model.SemgrepProjectDetailsSecretsConfig;
import org.openapitools.client.model.SemgrepProjectsSecretsConfig;
import org.openapitools.client.model.SemgrepSupplyChainFindingsSecretsConfig;
import org.openapitools.client.model.SlackUsersSecretsConfig;
import org.openapitools.client.model.SlackgroupsSecretsConfig;
import org.openapitools.client.model.SnykIssuesSecretsConfig;
import org.openapitools.client.model.SnykOrganizationsSecretsConfig;
import org.openapitools.client.model.SnykProjectsSecretsConfig;
import org.openapitools.client.model.SnykTargetsSecretsConfig;
import org.openapitools.client.model.TenableAssetsSecretsConfig;
import org.openapitools.client.model.TenableVulnerabilitiesSecretsConfig;
import org.openapitools.client.model.UsersInfoSecretsConfig;
import org.openapitools.client.model.UsersSecretsConfig;
import org.openapitools.client.model.VulnerabilitiesSecretsConfig;
import org.openapitools.client.model.VulnerabilityFindingsSecretsConfig;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-02-18T14:57:29.550629309Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class RoutesV2InputConfigSecrets extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RoutesV2InputConfigSecrets.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RoutesV2InputConfigSecrets.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RoutesV2InputConfigSecrets' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ActorsInfoSecretsConfig> adapterActorsInfoSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(ActorsInfoSecretsConfig.class));
            final TypeAdapter<AdminActivitySecretsConfig> adapterAdminActivitySecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(AdminActivitySecretsConfig.class));
            final TypeAdapter<AdminLogsSecretsConfig> adapterAdminLogsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(AdminLogsSecretsConfig.class));
            final TypeAdapter<AuditLogsSecretsConfig> adapterAuditLogsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(AuditLogsSecretsConfig.class));
            final TypeAdapter<AuthLogsSecretsConfig> adapterAuthLogsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(AuthLogsSecretsConfig.class));
            final TypeAdapter<Object> adapterObject = gson.getDelegateAdapter(this, TypeToken.get(Object.class));
            final TypeAdapter<AzureActivityLogsSecretsConfig> adapterAzureActivityLogsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(AzureActivityLogsSecretsConfig.class));
            final TypeAdapter<BoxEventsSecretsConfig> adapterBoxEventsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(BoxEventsSecretsConfig.class));
            final TypeAdapter<BoxUsersSecretsConfig> adapterBoxUsersSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(BoxUsersSecretsConfig.class));
            final TypeAdapter<CloudAssetInventorySecretsConfig> adapterCloudAssetInventorySecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudAssetInventorySecretsConfig.class));
            final TypeAdapter<CloudConfigurationFindingsSecretsConfig> adapterCloudConfigurationFindingsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudConfigurationFindingsSecretsConfig.class));
            final TypeAdapter<CloudLogsSecretsConfig> adapterCloudLogsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudLogsSecretsConfig.class));
            final TypeAdapter<CloudResourceInventorySecretsConfig> adapterCloudResourceInventorySecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudResourceInventorySecretsConfig.class));
            final TypeAdapter<DetectSummariesSecretsConfig> adapterDetectSummariesSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(DetectSummariesSecretsConfig.class));
            final TypeAdapter<DeviceActivitySecretsConfig> adapterDeviceActivitySecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(DeviceActivitySecretsConfig.class));
            final TypeAdapter<DeviceDetailsSecretsConfig> adapterDeviceDetailsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(DeviceDetailsSecretsConfig.class));
            final TypeAdapter<DriveActivitySecretsConfig> adapterDriveActivitySecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(DriveActivitySecretsConfig.class));
            final TypeAdapter<EntraIdSecretsConfig> adapterEntraIdSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(EntraIdSecretsConfig.class));
            final TypeAdapter<EventSecretsConfig> adapterEventSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(EventSecretsConfig.class));
            final TypeAdapter<EventsLogsSecretsConfig> adapterEventsLogsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(EventsLogsSecretsConfig.class));
            final TypeAdapter<LogAnalyticsQuerySecretsConfig> adapterLogAnalyticsQuerySecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(LogAnalyticsQuerySecretsConfig.class));
            final TypeAdapter<LoginActivitySecretsConfig> adapterLoginActivitySecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(LoginActivitySecretsConfig.class));
            final TypeAdapter<LoginSessionsSecretsConfig> adapterLoginSessionsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(LoginSessionsSecretsConfig.class));
            final Type typeInstanceMapStringObject = new TypeToken<Map<String, Object>>(){}.getType();
            final TypeAdapter<Map<String, Object>> adapterMapStringObject = (TypeAdapter<Map<String, Object>>) gson.getDelegateAdapter(this, TypeToken.get(typeInstanceMapStringObject));
            final TypeAdapter<OauthActivitySecretsConfig> adapterOauthActivitySecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(OauthActivitySecretsConfig.class));
            final TypeAdapter<RolesInfoSecretsConfig> adapterRolesInfoSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(RolesInfoSecretsConfig.class));
            final TypeAdapter<SemgrepCodeFindingsSecretsConfig> adapterSemgrepCodeFindingsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepCodeFindingsSecretsConfig.class));
            final TypeAdapter<SemgrepDeploymentsSecretsConfig> adapterSemgrepDeploymentsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepDeploymentsSecretsConfig.class));
            final TypeAdapter<SemgrepProjectDetailsSecretsConfig> adapterSemgrepProjectDetailsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepProjectDetailsSecretsConfig.class));
            final TypeAdapter<SemgrepProjectsSecretsConfig> adapterSemgrepProjectsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepProjectsSecretsConfig.class));
            final TypeAdapter<SemgrepSupplyChainFindingsSecretsConfig> adapterSemgrepSupplyChainFindingsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepSupplyChainFindingsSecretsConfig.class));
            final TypeAdapter<SlackUsersSecretsConfig> adapterSlackUsersSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SlackUsersSecretsConfig.class));
            final TypeAdapter<SlackgroupsSecretsConfig> adapterSlackgroupsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SlackgroupsSecretsConfig.class));
            final TypeAdapter<SnykIssuesSecretsConfig> adapterSnykIssuesSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykIssuesSecretsConfig.class));
            final TypeAdapter<SnykOrganizationsSecretsConfig> adapterSnykOrganizationsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykOrganizationsSecretsConfig.class));
            final TypeAdapter<SnykProjectsSecretsConfig> adapterSnykProjectsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykProjectsSecretsConfig.class));
            final TypeAdapter<SnykTargetsSecretsConfig> adapterSnykTargetsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykTargetsSecretsConfig.class));
            final TypeAdapter<TenableAssetsSecretsConfig> adapterTenableAssetsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(TenableAssetsSecretsConfig.class));
            final TypeAdapter<TenableVulnerabilitiesSecretsConfig> adapterTenableVulnerabilitiesSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(TenableVulnerabilitiesSecretsConfig.class));
            final TypeAdapter<UsersSecretsConfig> adapterUsersSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(UsersSecretsConfig.class));
            final TypeAdapter<UsersInfoSecretsConfig> adapterUsersInfoSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(UsersInfoSecretsConfig.class));
            final TypeAdapter<VulnerabilitiesSecretsConfig> adapterVulnerabilitiesSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilitiesSecretsConfig.class));
            final TypeAdapter<VulnerabilityFindingsSecretsConfig> adapterVulnerabilityFindingsSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityFindingsSecretsConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<RoutesV2InputConfigSecrets>() {
                @Override
                public void write(JsonWriter out, RoutesV2InputConfigSecrets value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ActorsInfoSecretsConfig`
                    if (value.getActualInstance() instanceof ActorsInfoSecretsConfig) {
                        JsonElement element = adapterActorsInfoSecretsConfig.toJsonTree((ActorsInfoSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdminActivitySecretsConfig`
                    if (value.getActualInstance() instanceof AdminActivitySecretsConfig) {
                        JsonElement element = adapterAdminActivitySecretsConfig.toJsonTree((AdminActivitySecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdminLogsSecretsConfig`
                    if (value.getActualInstance() instanceof AdminLogsSecretsConfig) {
                        JsonElement element = adapterAdminLogsSecretsConfig.toJsonTree((AdminLogsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuditLogsSecretsConfig`
                    if (value.getActualInstance() instanceof AuditLogsSecretsConfig) {
                        JsonElement element = adapterAuditLogsSecretsConfig.toJsonTree((AuditLogsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthLogsSecretsConfig`
                    if (value.getActualInstance() instanceof AuthLogsSecretsConfig) {
                        JsonElement element = adapterAuthLogsSecretsConfig.toJsonTree((AuthLogsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Object`
                    if (value.getActualInstance() instanceof Object) {
                        JsonPrimitive primitive = adapterObject.toJsonTree((Object)value.getActualInstance()).getAsJsonPrimitive();
                        elementAdapter.write(out, primitive);
                        return;
                    }
                    // check if the actual instance is of the type `AzureActivityLogsSecretsConfig`
                    if (value.getActualInstance() instanceof AzureActivityLogsSecretsConfig) {
                        JsonElement element = adapterAzureActivityLogsSecretsConfig.toJsonTree((AzureActivityLogsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BoxEventsSecretsConfig`
                    if (value.getActualInstance() instanceof BoxEventsSecretsConfig) {
                        JsonElement element = adapterBoxEventsSecretsConfig.toJsonTree((BoxEventsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `BoxUsersSecretsConfig`
                    if (value.getActualInstance() instanceof BoxUsersSecretsConfig) {
                        JsonElement element = adapterBoxUsersSecretsConfig.toJsonTree((BoxUsersSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudAssetInventorySecretsConfig`
                    if (value.getActualInstance() instanceof CloudAssetInventorySecretsConfig) {
                        JsonElement element = adapterCloudAssetInventorySecretsConfig.toJsonTree((CloudAssetInventorySecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudConfigurationFindingsSecretsConfig`
                    if (value.getActualInstance() instanceof CloudConfigurationFindingsSecretsConfig) {
                        JsonElement element = adapterCloudConfigurationFindingsSecretsConfig.toJsonTree((CloudConfigurationFindingsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudLogsSecretsConfig`
                    if (value.getActualInstance() instanceof CloudLogsSecretsConfig) {
                        JsonElement element = adapterCloudLogsSecretsConfig.toJsonTree((CloudLogsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudResourceInventorySecretsConfig`
                    if (value.getActualInstance() instanceof CloudResourceInventorySecretsConfig) {
                        JsonElement element = adapterCloudResourceInventorySecretsConfig.toJsonTree((CloudResourceInventorySecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DetectSummariesSecretsConfig`
                    if (value.getActualInstance() instanceof DetectSummariesSecretsConfig) {
                        JsonElement element = adapterDetectSummariesSecretsConfig.toJsonTree((DetectSummariesSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DeviceActivitySecretsConfig`
                    if (value.getActualInstance() instanceof DeviceActivitySecretsConfig) {
                        JsonElement element = adapterDeviceActivitySecretsConfig.toJsonTree((DeviceActivitySecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DeviceDetailsSecretsConfig`
                    if (value.getActualInstance() instanceof DeviceDetailsSecretsConfig) {
                        JsonElement element = adapterDeviceDetailsSecretsConfig.toJsonTree((DeviceDetailsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DriveActivitySecretsConfig`
                    if (value.getActualInstance() instanceof DriveActivitySecretsConfig) {
                        JsonElement element = adapterDriveActivitySecretsConfig.toJsonTree((DriveActivitySecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EntraIdSecretsConfig`
                    if (value.getActualInstance() instanceof EntraIdSecretsConfig) {
                        JsonElement element = adapterEntraIdSecretsConfig.toJsonTree((EntraIdSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EventSecretsConfig`
                    if (value.getActualInstance() instanceof EventSecretsConfig) {
                        JsonElement element = adapterEventSecretsConfig.toJsonTree((EventSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EventsLogsSecretsConfig`
                    if (value.getActualInstance() instanceof EventsLogsSecretsConfig) {
                        JsonElement element = adapterEventsLogsSecretsConfig.toJsonTree((EventsLogsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LogAnalyticsQuerySecretsConfig`
                    if (value.getActualInstance() instanceof LogAnalyticsQuerySecretsConfig) {
                        JsonElement element = adapterLogAnalyticsQuerySecretsConfig.toJsonTree((LogAnalyticsQuerySecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LoginActivitySecretsConfig`
                    if (value.getActualInstance() instanceof LoginActivitySecretsConfig) {
                        JsonElement element = adapterLoginActivitySecretsConfig.toJsonTree((LoginActivitySecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LoginSessionsSecretsConfig`
                    if (value.getActualInstance() instanceof LoginSessionsSecretsConfig) {
                        JsonElement element = adapterLoginSessionsSecretsConfig.toJsonTree((LoginSessionsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Map<String, Object>`
                    if (value.getActualInstance() instanceof Map<?, ?>) {
                        JsonObject object = adapterMapStringObject.toJsonTree((Map<String, Object>)value.getActualInstance()).getAsJsonObject();
                        elementAdapter.write(out, object);
                        return;
                    }
                    // check if the actual instance is of the type `OauthActivitySecretsConfig`
                    if (value.getActualInstance() instanceof OauthActivitySecretsConfig) {
                        JsonElement element = adapterOauthActivitySecretsConfig.toJsonTree((OauthActivitySecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RolesInfoSecretsConfig`
                    if (value.getActualInstance() instanceof RolesInfoSecretsConfig) {
                        JsonElement element = adapterRolesInfoSecretsConfig.toJsonTree((RolesInfoSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepCodeFindingsSecretsConfig`
                    if (value.getActualInstance() instanceof SemgrepCodeFindingsSecretsConfig) {
                        JsonElement element = adapterSemgrepCodeFindingsSecretsConfig.toJsonTree((SemgrepCodeFindingsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepDeploymentsSecretsConfig`
                    if (value.getActualInstance() instanceof SemgrepDeploymentsSecretsConfig) {
                        JsonElement element = adapterSemgrepDeploymentsSecretsConfig.toJsonTree((SemgrepDeploymentsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepProjectDetailsSecretsConfig`
                    if (value.getActualInstance() instanceof SemgrepProjectDetailsSecretsConfig) {
                        JsonElement element = adapterSemgrepProjectDetailsSecretsConfig.toJsonTree((SemgrepProjectDetailsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepProjectsSecretsConfig`
                    if (value.getActualInstance() instanceof SemgrepProjectsSecretsConfig) {
                        JsonElement element = adapterSemgrepProjectsSecretsConfig.toJsonTree((SemgrepProjectsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepSupplyChainFindingsSecretsConfig`
                    if (value.getActualInstance() instanceof SemgrepSupplyChainFindingsSecretsConfig) {
                        JsonElement element = adapterSemgrepSupplyChainFindingsSecretsConfig.toJsonTree((SemgrepSupplyChainFindingsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SlackUsersSecretsConfig`
                    if (value.getActualInstance() instanceof SlackUsersSecretsConfig) {
                        JsonElement element = adapterSlackUsersSecretsConfig.toJsonTree((SlackUsersSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SlackgroupsSecretsConfig`
                    if (value.getActualInstance() instanceof SlackgroupsSecretsConfig) {
                        JsonElement element = adapterSlackgroupsSecretsConfig.toJsonTree((SlackgroupsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykIssuesSecretsConfig`
                    if (value.getActualInstance() instanceof SnykIssuesSecretsConfig) {
                        JsonElement element = adapterSnykIssuesSecretsConfig.toJsonTree((SnykIssuesSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykOrganizationsSecretsConfig`
                    if (value.getActualInstance() instanceof SnykOrganizationsSecretsConfig) {
                        JsonElement element = adapterSnykOrganizationsSecretsConfig.toJsonTree((SnykOrganizationsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykProjectsSecretsConfig`
                    if (value.getActualInstance() instanceof SnykProjectsSecretsConfig) {
                        JsonElement element = adapterSnykProjectsSecretsConfig.toJsonTree((SnykProjectsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykTargetsSecretsConfig`
                    if (value.getActualInstance() instanceof SnykTargetsSecretsConfig) {
                        JsonElement element = adapterSnykTargetsSecretsConfig.toJsonTree((SnykTargetsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TenableAssetsSecretsConfig`
                    if (value.getActualInstance() instanceof TenableAssetsSecretsConfig) {
                        JsonElement element = adapterTenableAssetsSecretsConfig.toJsonTree((TenableAssetsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `TenableVulnerabilitiesSecretsConfig`
                    if (value.getActualInstance() instanceof TenableVulnerabilitiesSecretsConfig) {
                        JsonElement element = adapterTenableVulnerabilitiesSecretsConfig.toJsonTree((TenableVulnerabilitiesSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UsersSecretsConfig`
                    if (value.getActualInstance() instanceof UsersSecretsConfig) {
                        JsonElement element = adapterUsersSecretsConfig.toJsonTree((UsersSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UsersInfoSecretsConfig`
                    if (value.getActualInstance() instanceof UsersInfoSecretsConfig) {
                        JsonElement element = adapterUsersInfoSecretsConfig.toJsonTree((UsersInfoSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VulnerabilitiesSecretsConfig`
                    if (value.getActualInstance() instanceof VulnerabilitiesSecretsConfig) {
                        JsonElement element = adapterVulnerabilitiesSecretsConfig.toJsonTree((VulnerabilitiesSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VulnerabilityFindingsSecretsConfig`
                    if (value.getActualInstance() instanceof VulnerabilityFindingsSecretsConfig) {
                        JsonElement element = adapterVulnerabilityFindingsSecretsConfig.toJsonTree((VulnerabilityFindingsSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, Map<String, Object>, OauthActivitySecretsConfig, Object, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig");
                }

                @Override
                public RoutesV2InputConfigSecrets read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ActorsInfoSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ActorsInfoSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterActorsInfoSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ActorsInfoSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ActorsInfoSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ActorsInfoSecretsConfig'", e);
                    }
                    // deserialize AdminActivitySecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminActivitySecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminActivitySecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminActivitySecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminActivitySecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminActivitySecretsConfig'", e);
                    }
                    // deserialize AdminLogsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminLogsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminLogsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminLogsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminLogsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminLogsSecretsConfig'", e);
                    }
                    // deserialize AuditLogsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuditLogsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuditLogsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuditLogsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuditLogsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuditLogsSecretsConfig'", e);
                    }
                    // deserialize AuthLogsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthLogsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthLogsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthLogsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthLogsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthLogsSecretsConfig'", e);
                    }
                    // deserialize Object
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                        }
                        actualAdapter = adapterObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Object'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Object'", e);
                    }
                    // deserialize AzureActivityLogsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AzureActivityLogsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAzureActivityLogsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AzureActivityLogsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AzureActivityLogsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AzureActivityLogsSecretsConfig'", e);
                    }
                    // deserialize BoxEventsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BoxEventsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterBoxEventsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BoxEventsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BoxEventsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BoxEventsSecretsConfig'", e);
                    }
                    // deserialize BoxUsersSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        BoxUsersSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterBoxUsersSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'BoxUsersSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for BoxUsersSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'BoxUsersSecretsConfig'", e);
                    }
                    // deserialize CloudAssetInventorySecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudAssetInventorySecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudAssetInventorySecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudAssetInventorySecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudAssetInventorySecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudAssetInventorySecretsConfig'", e);
                    }
                    // deserialize CloudConfigurationFindingsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudConfigurationFindingsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudConfigurationFindingsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudConfigurationFindingsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudConfigurationFindingsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudConfigurationFindingsSecretsConfig'", e);
                    }
                    // deserialize CloudLogsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudLogsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudLogsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudLogsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudLogsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudLogsSecretsConfig'", e);
                    }
                    // deserialize CloudResourceInventorySecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudResourceInventorySecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudResourceInventorySecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudResourceInventorySecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudResourceInventorySecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudResourceInventorySecretsConfig'", e);
                    }
                    // deserialize DetectSummariesSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DetectSummariesSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDetectSummariesSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DetectSummariesSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DetectSummariesSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DetectSummariesSecretsConfig'", e);
                    }
                    // deserialize DeviceActivitySecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeviceActivitySecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDeviceActivitySecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DeviceActivitySecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeviceActivitySecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeviceActivitySecretsConfig'", e);
                    }
                    // deserialize DeviceDetailsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeviceDetailsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDeviceDetailsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DeviceDetailsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeviceDetailsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeviceDetailsSecretsConfig'", e);
                    }
                    // deserialize DriveActivitySecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DriveActivitySecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDriveActivitySecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DriveActivitySecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DriveActivitySecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DriveActivitySecretsConfig'", e);
                    }
                    // deserialize EntraIdSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EntraIdSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEntraIdSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EntraIdSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EntraIdSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EntraIdSecretsConfig'", e);
                    }
                    // deserialize EventSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EventSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEventSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EventSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EventSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EventSecretsConfig'", e);
                    }
                    // deserialize EventsLogsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EventsLogsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEventsLogsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EventsLogsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EventsLogsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EventsLogsSecretsConfig'", e);
                    }
                    // deserialize LogAnalyticsQuerySecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LogAnalyticsQuerySecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLogAnalyticsQuerySecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LogAnalyticsQuerySecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LogAnalyticsQuerySecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LogAnalyticsQuerySecretsConfig'", e);
                    }
                    // deserialize LoginActivitySecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LoginActivitySecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLoginActivitySecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LoginActivitySecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LoginActivitySecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LoginActivitySecretsConfig'", e);
                    }
                    // deserialize LoginSessionsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LoginSessionsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLoginSessionsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LoginSessionsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LoginSessionsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LoginSessionsSecretsConfig'", e);
                    }
                    // deserialize Map<String, Object>
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.isJsonObject()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be a object type in the JSON string but got `%s`", jsonElement.toString()));
                        }

                        actualAdapter = adapterMapStringObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Map<String, Object>'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Map<String, Object> failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Map<String, Object>'", e);
                    }
                    // deserialize OauthActivitySecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OauthActivitySecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterOauthActivitySecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OauthActivitySecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OauthActivitySecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OauthActivitySecretsConfig'", e);
                    }
                    // deserialize RolesInfoSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RolesInfoSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterRolesInfoSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RolesInfoSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RolesInfoSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RolesInfoSecretsConfig'", e);
                    }
                    // deserialize SemgrepCodeFindingsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepCodeFindingsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepCodeFindingsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepCodeFindingsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepCodeFindingsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepCodeFindingsSecretsConfig'", e);
                    }
                    // deserialize SemgrepDeploymentsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepDeploymentsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepDeploymentsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepDeploymentsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepDeploymentsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepDeploymentsSecretsConfig'", e);
                    }
                    // deserialize SemgrepProjectDetailsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepProjectDetailsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepProjectDetailsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepProjectDetailsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepProjectDetailsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepProjectDetailsSecretsConfig'", e);
                    }
                    // deserialize SemgrepProjectsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepProjectsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepProjectsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepProjectsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepProjectsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepProjectsSecretsConfig'", e);
                    }
                    // deserialize SemgrepSupplyChainFindingsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepSupplyChainFindingsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepSupplyChainFindingsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepSupplyChainFindingsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepSupplyChainFindingsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepSupplyChainFindingsSecretsConfig'", e);
                    }
                    // deserialize SlackUsersSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SlackUsersSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSlackUsersSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SlackUsersSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SlackUsersSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SlackUsersSecretsConfig'", e);
                    }
                    // deserialize SlackgroupsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SlackgroupsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSlackgroupsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SlackgroupsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SlackgroupsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SlackgroupsSecretsConfig'", e);
                    }
                    // deserialize SnykIssuesSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykIssuesSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykIssuesSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykIssuesSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykIssuesSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykIssuesSecretsConfig'", e);
                    }
                    // deserialize SnykOrganizationsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykOrganizationsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykOrganizationsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykOrganizationsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykOrganizationsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykOrganizationsSecretsConfig'", e);
                    }
                    // deserialize SnykProjectsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykProjectsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykProjectsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykProjectsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykProjectsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykProjectsSecretsConfig'", e);
                    }
                    // deserialize SnykTargetsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykTargetsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykTargetsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykTargetsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykTargetsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykTargetsSecretsConfig'", e);
                    }
                    // deserialize TenableAssetsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TenableAssetsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterTenableAssetsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TenableAssetsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TenableAssetsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TenableAssetsSecretsConfig'", e);
                    }
                    // deserialize TenableVulnerabilitiesSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        TenableVulnerabilitiesSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterTenableVulnerabilitiesSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'TenableVulnerabilitiesSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for TenableVulnerabilitiesSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'TenableVulnerabilitiesSecretsConfig'", e);
                    }
                    // deserialize UsersSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UsersSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterUsersSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UsersSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UsersSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UsersSecretsConfig'", e);
                    }
                    // deserialize UsersInfoSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UsersInfoSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterUsersInfoSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UsersInfoSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UsersInfoSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UsersInfoSecretsConfig'", e);
                    }
                    // deserialize VulnerabilitiesSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VulnerabilitiesSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterVulnerabilitiesSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VulnerabilitiesSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VulnerabilitiesSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VulnerabilitiesSecretsConfig'", e);
                    }
                    // deserialize VulnerabilityFindingsSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VulnerabilityFindingsSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterVulnerabilityFindingsSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VulnerabilityFindingsSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VulnerabilityFindingsSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VulnerabilityFindingsSecretsConfig'", e);
                    }

                    if (match == 1) {
                        RoutesV2InputConfigSecrets ret = new RoutesV2InputConfigSecrets();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RoutesV2InputConfigSecrets: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public RoutesV2InputConfigSecrets() {
        super("oneOf", Boolean.FALSE);
    }

    public RoutesV2InputConfigSecrets(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ActorsInfoSecretsConfig", ActorsInfoSecretsConfig.class);
        schemas.put("AdminActivitySecretsConfig", AdminActivitySecretsConfig.class);
        schemas.put("AdminLogsSecretsConfig", AdminLogsSecretsConfig.class);
        schemas.put("AuditLogsSecretsConfig", AuditLogsSecretsConfig.class);
        schemas.put("AuthLogsSecretsConfig", AuthLogsSecretsConfig.class);
        schemas.put("Object", Object.class);
        schemas.put("AzureActivityLogsSecretsConfig", AzureActivityLogsSecretsConfig.class);
        schemas.put("BoxEventsSecretsConfig", BoxEventsSecretsConfig.class);
        schemas.put("BoxUsersSecretsConfig", BoxUsersSecretsConfig.class);
        schemas.put("CloudAssetInventorySecretsConfig", CloudAssetInventorySecretsConfig.class);
        schemas.put("CloudConfigurationFindingsSecretsConfig", CloudConfigurationFindingsSecretsConfig.class);
        schemas.put("CloudLogsSecretsConfig", CloudLogsSecretsConfig.class);
        schemas.put("CloudResourceInventorySecretsConfig", CloudResourceInventorySecretsConfig.class);
        schemas.put("DetectSummariesSecretsConfig", DetectSummariesSecretsConfig.class);
        schemas.put("DeviceActivitySecretsConfig", DeviceActivitySecretsConfig.class);
        schemas.put("DeviceDetailsSecretsConfig", DeviceDetailsSecretsConfig.class);
        schemas.put("DriveActivitySecretsConfig", DriveActivitySecretsConfig.class);
        schemas.put("EntraIdSecretsConfig", EntraIdSecretsConfig.class);
        schemas.put("EventSecretsConfig", EventSecretsConfig.class);
        schemas.put("EventsLogsSecretsConfig", EventsLogsSecretsConfig.class);
        schemas.put("LogAnalyticsQuerySecretsConfig", LogAnalyticsQuerySecretsConfig.class);
        schemas.put("LoginActivitySecretsConfig", LoginActivitySecretsConfig.class);
        schemas.put("LoginSessionsSecretsConfig", LoginSessionsSecretsConfig.class);
        schemas.put("Map<String, Object>", Map.class);
        schemas.put("OauthActivitySecretsConfig", OauthActivitySecretsConfig.class);
        schemas.put("RolesInfoSecretsConfig", RolesInfoSecretsConfig.class);
        schemas.put("SemgrepCodeFindingsSecretsConfig", SemgrepCodeFindingsSecretsConfig.class);
        schemas.put("SemgrepDeploymentsSecretsConfig", SemgrepDeploymentsSecretsConfig.class);
        schemas.put("SemgrepProjectDetailsSecretsConfig", SemgrepProjectDetailsSecretsConfig.class);
        schemas.put("SemgrepProjectsSecretsConfig", SemgrepProjectsSecretsConfig.class);
        schemas.put("SemgrepSupplyChainFindingsSecretsConfig", SemgrepSupplyChainFindingsSecretsConfig.class);
        schemas.put("SlackUsersSecretsConfig", SlackUsersSecretsConfig.class);
        schemas.put("SlackgroupsSecretsConfig", SlackgroupsSecretsConfig.class);
        schemas.put("SnykIssuesSecretsConfig", SnykIssuesSecretsConfig.class);
        schemas.put("SnykOrganizationsSecretsConfig", SnykOrganizationsSecretsConfig.class);
        schemas.put("SnykProjectsSecretsConfig", SnykProjectsSecretsConfig.class);
        schemas.put("SnykTargetsSecretsConfig", SnykTargetsSecretsConfig.class);
        schemas.put("TenableAssetsSecretsConfig", TenableAssetsSecretsConfig.class);
        schemas.put("TenableVulnerabilitiesSecretsConfig", TenableVulnerabilitiesSecretsConfig.class);
        schemas.put("UsersSecretsConfig", UsersSecretsConfig.class);
        schemas.put("UsersInfoSecretsConfig", UsersInfoSecretsConfig.class);
        schemas.put("VulnerabilitiesSecretsConfig", VulnerabilitiesSecretsConfig.class);
        schemas.put("VulnerabilityFindingsSecretsConfig", VulnerabilityFindingsSecretsConfig.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return RoutesV2InputConfigSecrets.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, Map<String, Object>, OauthActivitySecretsConfig, Object, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ActorsInfoSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdminActivitySecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdminLogsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuditLogsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthLogsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Object) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AzureActivityLogsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BoxEventsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof BoxUsersSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudAssetInventorySecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudConfigurationFindingsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudLogsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudResourceInventorySecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DetectSummariesSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeviceActivitySecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeviceDetailsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DriveActivitySecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EntraIdSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventsLogsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LogAnalyticsQuerySecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LoginActivitySecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LoginSessionsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Map<?, ?>) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OauthActivitySecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RolesInfoSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepCodeFindingsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepDeploymentsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepProjectDetailsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepProjectsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepSupplyChainFindingsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SlackUsersSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SlackgroupsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykIssuesSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykOrganizationsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykProjectsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykTargetsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TenableAssetsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof TenableVulnerabilitiesSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UsersSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UsersInfoSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VulnerabilitiesSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VulnerabilityFindingsSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, Map<String, Object>, OauthActivitySecretsConfig, Object, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig");
    }

    /**
     * Get the actual instance, which can be the following:
     * ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, Map<String, Object>, OauthActivitySecretsConfig, Object, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig
     *
     * @return The actual instance (ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, Map<String, Object>, OauthActivitySecretsConfig, Object, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ActorsInfoSecretsConfig`. If the actual instance is not `ActorsInfoSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ActorsInfoSecretsConfig`
     * @throws ClassCastException if the instance is not `ActorsInfoSecretsConfig`
     */
    public ActorsInfoSecretsConfig getActorsInfoSecretsConfig() throws ClassCastException {
        return (ActorsInfoSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AdminActivitySecretsConfig`. If the actual instance is not `AdminActivitySecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminActivitySecretsConfig`
     * @throws ClassCastException if the instance is not `AdminActivitySecretsConfig`
     */
    public AdminActivitySecretsConfig getAdminActivitySecretsConfig() throws ClassCastException {
        return (AdminActivitySecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AdminLogsSecretsConfig`. If the actual instance is not `AdminLogsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminLogsSecretsConfig`
     * @throws ClassCastException if the instance is not `AdminLogsSecretsConfig`
     */
    public AdminLogsSecretsConfig getAdminLogsSecretsConfig() throws ClassCastException {
        return (AdminLogsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AuditLogsSecretsConfig`. If the actual instance is not `AuditLogsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuditLogsSecretsConfig`
     * @throws ClassCastException if the instance is not `AuditLogsSecretsConfig`
     */
    public AuditLogsSecretsConfig getAuditLogsSecretsConfig() throws ClassCastException {
        return (AuditLogsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AuthLogsSecretsConfig`. If the actual instance is not `AuthLogsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthLogsSecretsConfig`
     * @throws ClassCastException if the instance is not `AuthLogsSecretsConfig`
     */
    public AuthLogsSecretsConfig getAuthLogsSecretsConfig() throws ClassCastException {
        return (AuthLogsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Object`. If the actual instance is not `Object`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Object`
     * @throws ClassCastException if the instance is not `Object`
     */
    public Object getObject() throws ClassCastException {
        return (Object)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AzureActivityLogsSecretsConfig`. If the actual instance is not `AzureActivityLogsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AzureActivityLogsSecretsConfig`
     * @throws ClassCastException if the instance is not `AzureActivityLogsSecretsConfig`
     */
    public AzureActivityLogsSecretsConfig getAzureActivityLogsSecretsConfig() throws ClassCastException {
        return (AzureActivityLogsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BoxEventsSecretsConfig`. If the actual instance is not `BoxEventsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BoxEventsSecretsConfig`
     * @throws ClassCastException if the instance is not `BoxEventsSecretsConfig`
     */
    public BoxEventsSecretsConfig getBoxEventsSecretsConfig() throws ClassCastException {
        return (BoxEventsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `BoxUsersSecretsConfig`. If the actual instance is not `BoxUsersSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `BoxUsersSecretsConfig`
     * @throws ClassCastException if the instance is not `BoxUsersSecretsConfig`
     */
    public BoxUsersSecretsConfig getBoxUsersSecretsConfig() throws ClassCastException {
        return (BoxUsersSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudAssetInventorySecretsConfig`. If the actual instance is not `CloudAssetInventorySecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudAssetInventorySecretsConfig`
     * @throws ClassCastException if the instance is not `CloudAssetInventorySecretsConfig`
     */
    public CloudAssetInventorySecretsConfig getCloudAssetInventorySecretsConfig() throws ClassCastException {
        return (CloudAssetInventorySecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudConfigurationFindingsSecretsConfig`. If the actual instance is not `CloudConfigurationFindingsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudConfigurationFindingsSecretsConfig`
     * @throws ClassCastException if the instance is not `CloudConfigurationFindingsSecretsConfig`
     */
    public CloudConfigurationFindingsSecretsConfig getCloudConfigurationFindingsSecretsConfig() throws ClassCastException {
        return (CloudConfigurationFindingsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudLogsSecretsConfig`. If the actual instance is not `CloudLogsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudLogsSecretsConfig`
     * @throws ClassCastException if the instance is not `CloudLogsSecretsConfig`
     */
    public CloudLogsSecretsConfig getCloudLogsSecretsConfig() throws ClassCastException {
        return (CloudLogsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudResourceInventorySecretsConfig`. If the actual instance is not `CloudResourceInventorySecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudResourceInventorySecretsConfig`
     * @throws ClassCastException if the instance is not `CloudResourceInventorySecretsConfig`
     */
    public CloudResourceInventorySecretsConfig getCloudResourceInventorySecretsConfig() throws ClassCastException {
        return (CloudResourceInventorySecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DetectSummariesSecretsConfig`. If the actual instance is not `DetectSummariesSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DetectSummariesSecretsConfig`
     * @throws ClassCastException if the instance is not `DetectSummariesSecretsConfig`
     */
    public DetectSummariesSecretsConfig getDetectSummariesSecretsConfig() throws ClassCastException {
        return (DetectSummariesSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DeviceActivitySecretsConfig`. If the actual instance is not `DeviceActivitySecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeviceActivitySecretsConfig`
     * @throws ClassCastException if the instance is not `DeviceActivitySecretsConfig`
     */
    public DeviceActivitySecretsConfig getDeviceActivitySecretsConfig() throws ClassCastException {
        return (DeviceActivitySecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DeviceDetailsSecretsConfig`. If the actual instance is not `DeviceDetailsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeviceDetailsSecretsConfig`
     * @throws ClassCastException if the instance is not `DeviceDetailsSecretsConfig`
     */
    public DeviceDetailsSecretsConfig getDeviceDetailsSecretsConfig() throws ClassCastException {
        return (DeviceDetailsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DriveActivitySecretsConfig`. If the actual instance is not `DriveActivitySecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DriveActivitySecretsConfig`
     * @throws ClassCastException if the instance is not `DriveActivitySecretsConfig`
     */
    public DriveActivitySecretsConfig getDriveActivitySecretsConfig() throws ClassCastException {
        return (DriveActivitySecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EntraIdSecretsConfig`. If the actual instance is not `EntraIdSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EntraIdSecretsConfig`
     * @throws ClassCastException if the instance is not `EntraIdSecretsConfig`
     */
    public EntraIdSecretsConfig getEntraIdSecretsConfig() throws ClassCastException {
        return (EntraIdSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventSecretsConfig`. If the actual instance is not `EventSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventSecretsConfig`
     * @throws ClassCastException if the instance is not `EventSecretsConfig`
     */
    public EventSecretsConfig getEventSecretsConfig() throws ClassCastException {
        return (EventSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventsLogsSecretsConfig`. If the actual instance is not `EventsLogsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventsLogsSecretsConfig`
     * @throws ClassCastException if the instance is not `EventsLogsSecretsConfig`
     */
    public EventsLogsSecretsConfig getEventsLogsSecretsConfig() throws ClassCastException {
        return (EventsLogsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LogAnalyticsQuerySecretsConfig`. If the actual instance is not `LogAnalyticsQuerySecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LogAnalyticsQuerySecretsConfig`
     * @throws ClassCastException if the instance is not `LogAnalyticsQuerySecretsConfig`
     */
    public LogAnalyticsQuerySecretsConfig getLogAnalyticsQuerySecretsConfig() throws ClassCastException {
        return (LogAnalyticsQuerySecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LoginActivitySecretsConfig`. If the actual instance is not `LoginActivitySecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LoginActivitySecretsConfig`
     * @throws ClassCastException if the instance is not `LoginActivitySecretsConfig`
     */
    public LoginActivitySecretsConfig getLoginActivitySecretsConfig() throws ClassCastException {
        return (LoginActivitySecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LoginSessionsSecretsConfig`. If the actual instance is not `LoginSessionsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LoginSessionsSecretsConfig`
     * @throws ClassCastException if the instance is not `LoginSessionsSecretsConfig`
     */
    public LoginSessionsSecretsConfig getLoginSessionsSecretsConfig() throws ClassCastException {
        return (LoginSessionsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Map<String, Object>`. If the actual instance is not `Map<String, Object>`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Map<String, Object>`
     * @throws ClassCastException if the instance is not `Map<String, Object>`
     */
    public Map<String, Object> getMapStringObject() throws ClassCastException {
        return (Map<String, Object>)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OauthActivitySecretsConfig`. If the actual instance is not `OauthActivitySecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OauthActivitySecretsConfig`
     * @throws ClassCastException if the instance is not `OauthActivitySecretsConfig`
     */
    public OauthActivitySecretsConfig getOauthActivitySecretsConfig() throws ClassCastException {
        return (OauthActivitySecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RolesInfoSecretsConfig`. If the actual instance is not `RolesInfoSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RolesInfoSecretsConfig`
     * @throws ClassCastException if the instance is not `RolesInfoSecretsConfig`
     */
    public RolesInfoSecretsConfig getRolesInfoSecretsConfig() throws ClassCastException {
        return (RolesInfoSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepCodeFindingsSecretsConfig`. If the actual instance is not `SemgrepCodeFindingsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepCodeFindingsSecretsConfig`
     * @throws ClassCastException if the instance is not `SemgrepCodeFindingsSecretsConfig`
     */
    public SemgrepCodeFindingsSecretsConfig getSemgrepCodeFindingsSecretsConfig() throws ClassCastException {
        return (SemgrepCodeFindingsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepDeploymentsSecretsConfig`. If the actual instance is not `SemgrepDeploymentsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepDeploymentsSecretsConfig`
     * @throws ClassCastException if the instance is not `SemgrepDeploymentsSecretsConfig`
     */
    public SemgrepDeploymentsSecretsConfig getSemgrepDeploymentsSecretsConfig() throws ClassCastException {
        return (SemgrepDeploymentsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepProjectDetailsSecretsConfig`. If the actual instance is not `SemgrepProjectDetailsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepProjectDetailsSecretsConfig`
     * @throws ClassCastException if the instance is not `SemgrepProjectDetailsSecretsConfig`
     */
    public SemgrepProjectDetailsSecretsConfig getSemgrepProjectDetailsSecretsConfig() throws ClassCastException {
        return (SemgrepProjectDetailsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepProjectsSecretsConfig`. If the actual instance is not `SemgrepProjectsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepProjectsSecretsConfig`
     * @throws ClassCastException if the instance is not `SemgrepProjectsSecretsConfig`
     */
    public SemgrepProjectsSecretsConfig getSemgrepProjectsSecretsConfig() throws ClassCastException {
        return (SemgrepProjectsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepSupplyChainFindingsSecretsConfig`. If the actual instance is not `SemgrepSupplyChainFindingsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepSupplyChainFindingsSecretsConfig`
     * @throws ClassCastException if the instance is not `SemgrepSupplyChainFindingsSecretsConfig`
     */
    public SemgrepSupplyChainFindingsSecretsConfig getSemgrepSupplyChainFindingsSecretsConfig() throws ClassCastException {
        return (SemgrepSupplyChainFindingsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SlackUsersSecretsConfig`. If the actual instance is not `SlackUsersSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SlackUsersSecretsConfig`
     * @throws ClassCastException if the instance is not `SlackUsersSecretsConfig`
     */
    public SlackUsersSecretsConfig getSlackUsersSecretsConfig() throws ClassCastException {
        return (SlackUsersSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SlackgroupsSecretsConfig`. If the actual instance is not `SlackgroupsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SlackgroupsSecretsConfig`
     * @throws ClassCastException if the instance is not `SlackgroupsSecretsConfig`
     */
    public SlackgroupsSecretsConfig getSlackgroupsSecretsConfig() throws ClassCastException {
        return (SlackgroupsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykIssuesSecretsConfig`. If the actual instance is not `SnykIssuesSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykIssuesSecretsConfig`
     * @throws ClassCastException if the instance is not `SnykIssuesSecretsConfig`
     */
    public SnykIssuesSecretsConfig getSnykIssuesSecretsConfig() throws ClassCastException {
        return (SnykIssuesSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykOrganizationsSecretsConfig`. If the actual instance is not `SnykOrganizationsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykOrganizationsSecretsConfig`
     * @throws ClassCastException if the instance is not `SnykOrganizationsSecretsConfig`
     */
    public SnykOrganizationsSecretsConfig getSnykOrganizationsSecretsConfig() throws ClassCastException {
        return (SnykOrganizationsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykProjectsSecretsConfig`. If the actual instance is not `SnykProjectsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykProjectsSecretsConfig`
     * @throws ClassCastException if the instance is not `SnykProjectsSecretsConfig`
     */
    public SnykProjectsSecretsConfig getSnykProjectsSecretsConfig() throws ClassCastException {
        return (SnykProjectsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykTargetsSecretsConfig`. If the actual instance is not `SnykTargetsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykTargetsSecretsConfig`
     * @throws ClassCastException if the instance is not `SnykTargetsSecretsConfig`
     */
    public SnykTargetsSecretsConfig getSnykTargetsSecretsConfig() throws ClassCastException {
        return (SnykTargetsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TenableAssetsSecretsConfig`. If the actual instance is not `TenableAssetsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TenableAssetsSecretsConfig`
     * @throws ClassCastException if the instance is not `TenableAssetsSecretsConfig`
     */
    public TenableAssetsSecretsConfig getTenableAssetsSecretsConfig() throws ClassCastException {
        return (TenableAssetsSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `TenableVulnerabilitiesSecretsConfig`. If the actual instance is not `TenableVulnerabilitiesSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `TenableVulnerabilitiesSecretsConfig`
     * @throws ClassCastException if the instance is not `TenableVulnerabilitiesSecretsConfig`
     */
    public TenableVulnerabilitiesSecretsConfig getTenableVulnerabilitiesSecretsConfig() throws ClassCastException {
        return (TenableVulnerabilitiesSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UsersSecretsConfig`. If the actual instance is not `UsersSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsersSecretsConfig`
     * @throws ClassCastException if the instance is not `UsersSecretsConfig`
     */
    public UsersSecretsConfig getUsersSecretsConfig() throws ClassCastException {
        return (UsersSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UsersInfoSecretsConfig`. If the actual instance is not `UsersInfoSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsersInfoSecretsConfig`
     * @throws ClassCastException if the instance is not `UsersInfoSecretsConfig`
     */
    public UsersInfoSecretsConfig getUsersInfoSecretsConfig() throws ClassCastException {
        return (UsersInfoSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VulnerabilitiesSecretsConfig`. If the actual instance is not `VulnerabilitiesSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VulnerabilitiesSecretsConfig`
     * @throws ClassCastException if the instance is not `VulnerabilitiesSecretsConfig`
     */
    public VulnerabilitiesSecretsConfig getVulnerabilitiesSecretsConfig() throws ClassCastException {
        return (VulnerabilitiesSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VulnerabilityFindingsSecretsConfig`. If the actual instance is not `VulnerabilityFindingsSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VulnerabilityFindingsSecretsConfig`
     * @throws ClassCastException if the instance is not `VulnerabilityFindingsSecretsConfig`
     */
    public VulnerabilityFindingsSecretsConfig getVulnerabilityFindingsSecretsConfig() throws ClassCastException {
        return (VulnerabilityFindingsSecretsConfig)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RoutesV2InputConfigSecrets
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ActorsInfoSecretsConfig
        try {
            ActorsInfoSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ActorsInfoSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdminActivitySecretsConfig
        try {
            AdminActivitySecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminActivitySecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdminLogsSecretsConfig
        try {
            AdminLogsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminLogsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuditLogsSecretsConfig
        try {
            AuditLogsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuditLogsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthLogsSecretsConfig
        try {
            AuthLogsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthLogsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Object
        try {
            if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AzureActivityLogsSecretsConfig
        try {
            AzureActivityLogsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AzureActivityLogsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BoxEventsSecretsConfig
        try {
            BoxEventsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BoxEventsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with BoxUsersSecretsConfig
        try {
            BoxUsersSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for BoxUsersSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudAssetInventorySecretsConfig
        try {
            CloudAssetInventorySecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudAssetInventorySecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudConfigurationFindingsSecretsConfig
        try {
            CloudConfigurationFindingsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudConfigurationFindingsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudLogsSecretsConfig
        try {
            CloudLogsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudLogsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudResourceInventorySecretsConfig
        try {
            CloudResourceInventorySecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudResourceInventorySecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DetectSummariesSecretsConfig
        try {
            DetectSummariesSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DetectSummariesSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DeviceActivitySecretsConfig
        try {
            DeviceActivitySecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DeviceActivitySecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DeviceDetailsSecretsConfig
        try {
            DeviceDetailsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DeviceDetailsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DriveActivitySecretsConfig
        try {
            DriveActivitySecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DriveActivitySecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EntraIdSecretsConfig
        try {
            EntraIdSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EntraIdSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EventSecretsConfig
        try {
            EventSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EventSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EventsLogsSecretsConfig
        try {
            EventsLogsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EventsLogsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LogAnalyticsQuerySecretsConfig
        try {
            LogAnalyticsQuerySecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LogAnalyticsQuerySecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LoginActivitySecretsConfig
        try {
            LoginActivitySecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LoginActivitySecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LoginSessionsSecretsConfig
        try {
            LoginSessionsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LoginSessionsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Map<String, Object>
        try {
            if (!jsonElement.isJsonObject()) {
                throw new IllegalArgumentException(String.format("Expected json element to be a object type in the JSON string but got `%s`", jsonElement.toString()));
            }

            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Map<String, Object> failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OauthActivitySecretsConfig
        try {
            OauthActivitySecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OauthActivitySecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RolesInfoSecretsConfig
        try {
            RolesInfoSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RolesInfoSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepCodeFindingsSecretsConfig
        try {
            SemgrepCodeFindingsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepCodeFindingsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepDeploymentsSecretsConfig
        try {
            SemgrepDeploymentsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepDeploymentsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepProjectDetailsSecretsConfig
        try {
            SemgrepProjectDetailsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepProjectDetailsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepProjectsSecretsConfig
        try {
            SemgrepProjectsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepProjectsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepSupplyChainFindingsSecretsConfig
        try {
            SemgrepSupplyChainFindingsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepSupplyChainFindingsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SlackUsersSecretsConfig
        try {
            SlackUsersSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SlackUsersSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SlackgroupsSecretsConfig
        try {
            SlackgroupsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SlackgroupsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykIssuesSecretsConfig
        try {
            SnykIssuesSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykIssuesSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykOrganizationsSecretsConfig
        try {
            SnykOrganizationsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykOrganizationsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykProjectsSecretsConfig
        try {
            SnykProjectsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykProjectsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykTargetsSecretsConfig
        try {
            SnykTargetsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykTargetsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TenableAssetsSecretsConfig
        try {
            TenableAssetsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TenableAssetsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with TenableVulnerabilitiesSecretsConfig
        try {
            TenableVulnerabilitiesSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for TenableVulnerabilitiesSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UsersSecretsConfig
        try {
            UsersSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UsersSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UsersInfoSecretsConfig
        try {
            UsersInfoSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UsersInfoSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VulnerabilitiesSecretsConfig
        try {
            VulnerabilitiesSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VulnerabilitiesSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VulnerabilityFindingsSecretsConfig
        try {
            VulnerabilityFindingsSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VulnerabilityFindingsSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for RoutesV2InputConfigSecrets with oneOf schemas: ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, Map<String, Object>, OauthActivitySecretsConfig, Object, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of RoutesV2InputConfigSecrets given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RoutesV2InputConfigSecrets
     * @throws IOException if the JSON string is invalid with respect to RoutesV2InputConfigSecrets
     */
    public static RoutesV2InputConfigSecrets fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RoutesV2InputConfigSecrets.class);
    }

    /**
     * Convert an instance of RoutesV2InputConfigSecrets to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

