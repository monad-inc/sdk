/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Snowflake Output Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-17T15:58:37.129168319Z[Etc/UTC]", comments = "Generator version: 7.10.0")
public class SnowflakeSettingsConfig {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private String account;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  @javax.annotation.Nullable
  private String database;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  @javax.annotation.Nullable
  private String schema;

  public static final String SERIALIZED_NAME_STAGE = "stage";
  @SerializedName(SERIALIZED_NAME_STAGE)
  @javax.annotation.Nullable
  private String stage;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  @javax.annotation.Nullable
  private String table;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nullable
  private String user;

  public static final String SERIALIZED_NAME_WAREHOUSE = "warehouse";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE)
  @javax.annotation.Nullable
  private String warehouse;

  public SnowflakeSettingsConfig() {
  }

  public SnowflakeSettingsConfig account(@javax.annotation.Nullable String account) {
    this.account = account;
    return this;
  }

  /**
   * The unique identifier for your Snowflake account, typically in the form of &#39;account_name.cloud_provider&#39;
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable String account) {
    this.account = account;
  }


  public SnowflakeSettingsConfig database(@javax.annotation.Nullable String database) {
    this.database = database;
    return this;
  }

  /**
   * The name of the Snowflake database to connect to and perform operations on
   * @return database
   */
  @javax.annotation.Nullable
  public String getDatabase() {
    return database;
  }

  public void setDatabase(@javax.annotation.Nullable String database) {
    this.database = database;
  }


  public SnowflakeSettingsConfig schema(@javax.annotation.Nullable String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * The schema within the Snowflake database where the target table resides.
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(@javax.annotation.Nullable String schema) {
    this.schema = schema;
  }


  public SnowflakeSettingsConfig stage(@javax.annotation.Nullable String stage) {
    this.stage = stage;
    return this;
  }

  /**
   * The name of the Snowflake stage where the data will be copied to. Monad create or replace the stage.
   * @return stage
   */
  @javax.annotation.Nullable
  public String getStage() {
    return stage;
  }

  public void setStage(@javax.annotation.Nullable String stage) {
    this.stage = stage;
  }


  public SnowflakeSettingsConfig table(@javax.annotation.Nullable String table) {
    this.table = table;
    return this;
  }

  /**
   * The name of the table in Snowflake where the data will be written
   * @return table
   */
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }

  public void setTable(@javax.annotation.Nullable String table) {
    this.table = table;
  }


  public SnowflakeSettingsConfig user(@javax.annotation.Nullable String user) {
    this.user = user;
    return this;
  }

  /**
   * The username of the Snowflake account used to establish the connection.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nullable String user) {
    this.user = user;
  }


  public SnowflakeSettingsConfig warehouse(@javax.annotation.Nullable String warehouse) {
    this.warehouse = warehouse;
    return this;
  }

  /**
   * The Snowflake virtual warehouse to use for executing queries and processing data.
   * @return warehouse
   */
  @javax.annotation.Nullable
  public String getWarehouse() {
    return warehouse;
  }

  public void setWarehouse(@javax.annotation.Nullable String warehouse) {
    this.warehouse = warehouse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnowflakeSettingsConfig snowflakeSettingsConfig = (SnowflakeSettingsConfig) o;
    return Objects.equals(this.account, snowflakeSettingsConfig.account) &&
        Objects.equals(this.database, snowflakeSettingsConfig.database) &&
        Objects.equals(this.schema, snowflakeSettingsConfig.schema) &&
        Objects.equals(this.stage, snowflakeSettingsConfig.stage) &&
        Objects.equals(this.table, snowflakeSettingsConfig.table) &&
        Objects.equals(this.user, snowflakeSettingsConfig.user) &&
        Objects.equals(this.warehouse, snowflakeSettingsConfig.warehouse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, database, schema, stage, table, user, warehouse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnowflakeSettingsConfig {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    stage: ").append(toIndentedString(stage)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("account");
    openapiFields.add("database");
    openapiFields.add("schema");
    openapiFields.add("stage");
    openapiFields.add("table");
    openapiFields.add("user");
    openapiFields.add("warehouse");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnowflakeSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnowflakeSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnowflakeSettingsConfig is not found in the empty JSON string", SnowflakeSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnowflakeSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnowflakeSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) && !jsonObj.get("database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database").toString()));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("stage") != null && !jsonObj.get("stage").isJsonNull()) && !jsonObj.get("stage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stage").toString()));
      }
      if ((jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) && !jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("warehouse") != null && !jsonObj.get("warehouse").isJsonNull()) && !jsonObj.get("warehouse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouse").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnowflakeSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnowflakeSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnowflakeSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnowflakeSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SnowflakeSettingsConfig>() {
           @Override
           public void write(JsonWriter out, SnowflakeSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnowflakeSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnowflakeSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnowflakeSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to SnowflakeSettingsConfig
   */
  public static SnowflakeSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnowflakeSettingsConfig.class);
  }

  /**
   * Convert an instance of SnowflakeSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

