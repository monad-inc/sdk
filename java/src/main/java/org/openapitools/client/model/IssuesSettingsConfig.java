/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Wiz Issues settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-25T00:32:25.916469165Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class IssuesSettingsConfig {
  public static final String SERIALIZED_NAME_CONTROL_IDS = "control_ids";
  @SerializedName(SERIALIZED_NAME_CONTROL_IDS)
  @javax.annotation.Nullable
  private List<String> controlIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_NOTE = "has_note";
  @SerializedName(SERIALIZED_NAME_HAS_NOTE)
  @javax.annotation.Nullable
  private String hasNote;

  public static final String SERIALIZED_NAME_HAS_REMEDIATION = "has_remediation";
  @SerializedName(SERIALIZED_NAME_HAS_REMEDIATION)
  @javax.annotation.Nullable
  private String hasRemediation;

  public static final String SERIALIZED_NAME_HAS_SERVICE_TICKET = "has_service_ticket";
  @SerializedName(SERIALIZED_NAME_HAS_SERVICE_TICKET)
  @javax.annotation.Nullable
  private String hasServiceTicket;

  public static final String SERIALIZED_NAME_ISSUE_IDS = "issue_ids";
  @SerializedName(SERIALIZED_NAME_ISSUE_IDS)
  @javax.annotation.Nullable
  private List<String> issueIds = new ArrayList<>();

  /**
   * Gets or Sets issueTypes
   */
  @JsonAdapter(IssueTypesEnum.Adapter.class)
  public enum IssueTypesEnum {
    TOXIC_COMBINATION("TOXIC_COMBINATION"),
    
    THREAT_DETECTION("THREAT_DETECTION"),
    
    CLOUD_CONFIGURATION("CLOUD_CONFIGURATION");

    private String value;

    IssueTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IssueTypesEnum fromValue(String value) {
      for (IssueTypesEnum b : IssueTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IssueTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IssueTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IssueTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IssueTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IssueTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ISSUE_TYPES = "issue_types";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPES)
  @javax.annotation.Nullable
  private List<IssueTypesEnum> issueTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROJECT_IDS = "project_ids";
  @SerializedName(SERIALIZED_NAME_PROJECT_IDS)
  @javax.annotation.Nullable
  private List<String> projectIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELATED_ENTITY_ID = "related_entity_id";
  @SerializedName(SERIALIZED_NAME_RELATED_ENTITY_ID)
  @javax.annotation.Nullable
  private String relatedEntityId;

  /**
   * Gets or Sets resolutionReasons
   */
  @JsonAdapter(ResolutionReasonsEnum.Adapter.class)
  public enum ResolutionReasonsEnum {
    CONTROL_CHANGED("CONTROL_CHANGED"),
    
    CONTROL_DISABLED("CONTROL_DISABLED"),
    
    CONTROL_DELETED("CONTROL_DELETED"),
    
    EXCEPTION("EXCEPTION"),
    
    FALSE_POSITIVE("FALSE_POSITIVE"),
    
    WONT_FIX("WONT_FIX"),
    
    OBJECT_DELETED("OBJECT_DELETED"),
    
    ISSUE_FIXED("ISSUE_FIXED");

    private String value;

    ResolutionReasonsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResolutionReasonsEnum fromValue(String value) {
      for (ResolutionReasonsEnum b : ResolutionReasonsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResolutionReasonsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResolutionReasonsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResolutionReasonsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResolutionReasonsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResolutionReasonsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESOLUTION_REASONS = "resolution_reasons";
  @SerializedName(SERIALIZED_NAME_RESOLUTION_REASONS)
  @javax.annotation.Nullable
  private List<ResolutionReasonsEnum> resolutionReasons = new ArrayList<>();

  public static final String SERIALIZED_NAME_RISK_EQUALS_ALL = "risk_equals_all";
  @SerializedName(SERIALIZED_NAME_RISK_EQUALS_ALL)
  @javax.annotation.Nullable
  private List<String> riskEqualsAll = new ArrayList<>();

  public static final String SERIALIZED_NAME_RISK_EQUALS_ANY = "risk_equals_any";
  @SerializedName(SERIALIZED_NAME_RISK_EQUALS_ANY)
  @javax.annotation.Nullable
  private List<String> riskEqualsAny = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEARCH_QUERY = "search_query";
  @SerializedName(SERIALIZED_NAME_SEARCH_QUERY)
  @javax.annotation.Nullable
  private String searchQuery;

  public static final String SERIALIZED_NAME_SECURITY_SCAN = "security_scan";
  @SerializedName(SERIALIZED_NAME_SECURITY_SCAN)
  @javax.annotation.Nullable
  private String securityScan;

  /**
   * Gets or Sets severities
   */
  @JsonAdapter(SeveritiesEnum.Adapter.class)
  public enum SeveritiesEnum {
    INFORMATIONAL("INFORMATIONAL"),
    
    LOW("LOW"),
    
    MEDIUM("MEDIUM"),
    
    HIGH("HIGH"),
    
    CRITICAL("CRITICAL");

    private String value;

    SeveritiesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeveritiesEnum fromValue(String value) {
      for (SeveritiesEnum b : SeveritiesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeveritiesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeveritiesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeveritiesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeveritiesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeveritiesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITIES = "severities";
  @SerializedName(SERIALIZED_NAME_SEVERITIES)
  @javax.annotation.Nullable
  private List<SeveritiesEnum> severities = new ArrayList<>();

  /**
   * Gets or Sets stackLayers
   */
  @JsonAdapter(StackLayersEnum.Adapter.class)
  public enum StackLayersEnum {
    APPLICATION_AND_DATA("APPLICATION_AND_DATA"),
    
    CI_CD("CI_CD"),
    
    SECURITY_AND_IDENTITY("SECURITY_AND_IDENTITY"),
    
    COMPUTE_PLATFORMS("COMPUTE_PLATFORMS"),
    
    CODE("CODE"),
    
    CLOUD_ENTITLEMENTS("CLOUD_ENTITLEMENTS"),
    
    DATA_STORES("DATA_STORES");

    private String value;

    StackLayersEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StackLayersEnum fromValue(String value) {
      for (StackLayersEnum b : StackLayersEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StackLayersEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StackLayersEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StackLayersEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StackLayersEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StackLayersEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STACK_LAYERS = "stack_layers";
  @SerializedName(SERIALIZED_NAME_STACK_LAYERS)
  @javax.annotation.Nullable
  private List<StackLayersEnum> stackLayers = new ArrayList<>();

  /**
   * Gets or Sets status
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    OPEN("OPEN"),
    
    IN_PROGRESS("IN_PROGRESS"),
    
    RESOLVED("RESOLVED"),
    
    REJECTED("REJECTED");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private List<StatusEnum> status = new ArrayList<>();

  public static final String SERIALIZED_NAME_TENANT_DATA_CENTER = "tenant_data_center";
  @SerializedName(SERIALIZED_NAME_TENANT_DATA_CENTER)
  @javax.annotation.Nullable
  private String tenantDataCenter;

  public IssuesSettingsConfig() {
  }

  public IssuesSettingsConfig controlIds(@javax.annotation.Nullable List<String> controlIds) {
    this.controlIds = controlIds;
    return this;
  }

  public IssuesSettingsConfig addControlIdsItem(String controlIdsItem) {
    if (this.controlIds == null) {
      this.controlIds = new ArrayList<>();
    }
    this.controlIds.add(controlIdsItem);
    return this;
  }

  /**
   * @Description Filter Issues created by specific control IDs
   * @return controlIds
   */
  @javax.annotation.Nullable
  public List<String> getControlIds() {
    return controlIds;
  }

  public void setControlIds(@javax.annotation.Nullable List<String> controlIds) {
    this.controlIds = controlIds;
  }


  public IssuesSettingsConfig hasNote(@javax.annotation.Nullable String hasNote) {
    this.hasNote = hasNote;
    return this;
  }

  /**
   * @Description Filter Issues with or without a note
   * @return hasNote
   */
  @javax.annotation.Nullable
  public String getHasNote() {
    return hasNote;
  }

  public void setHasNote(@javax.annotation.Nullable String hasNote) {
    this.hasNote = hasNote;
  }


  public IssuesSettingsConfig hasRemediation(@javax.annotation.Nullable String hasRemediation) {
    this.hasRemediation = hasRemediation;
    return this;
  }

  /**
   * @Description Filter Issues with or without remediation
   * @return hasRemediation
   */
  @javax.annotation.Nullable
  public String getHasRemediation() {
    return hasRemediation;
  }

  public void setHasRemediation(@javax.annotation.Nullable String hasRemediation) {
    this.hasRemediation = hasRemediation;
  }


  public IssuesSettingsConfig hasServiceTicket(@javax.annotation.Nullable String hasServiceTicket) {
    this.hasServiceTicket = hasServiceTicket;
    return this;
  }

  /**
   * @Description Filter Issues with or without related service ticket
   * @return hasServiceTicket
   */
  @javax.annotation.Nullable
  public String getHasServiceTicket() {
    return hasServiceTicket;
  }

  public void setHasServiceTicket(@javax.annotation.Nullable String hasServiceTicket) {
    this.hasServiceTicket = hasServiceTicket;
  }


  public IssuesSettingsConfig issueIds(@javax.annotation.Nullable List<String> issueIds) {
    this.issueIds = issueIds;
    return this;
  }

  public IssuesSettingsConfig addIssueIdsItem(String issueIdsItem) {
    if (this.issueIds == null) {
      this.issueIds = new ArrayList<>();
    }
    this.issueIds.add(issueIdsItem);
    return this;
  }

  /**
   * @Description Filter only Issues that match these specific IDs
   * @return issueIds
   */
  @javax.annotation.Nullable
  public List<String> getIssueIds() {
    return issueIds;
  }

  public void setIssueIds(@javax.annotation.Nullable List<String> issueIds) {
    this.issueIds = issueIds;
  }


  public IssuesSettingsConfig issueTypes(@javax.annotation.Nullable List<IssueTypesEnum> issueTypes) {
    this.issueTypes = issueTypes;
    return this;
  }

  public IssuesSettingsConfig addIssueTypesItem(IssueTypesEnum issueTypesItem) {
    if (this.issueTypes == null) {
      this.issueTypes = new ArrayList<>();
    }
    this.issueTypes.add(issueTypesItem);
    return this;
  }

  /**
   * @Description Filter by Issue type
   * @return issueTypes
   */
  @javax.annotation.Nullable
  public List<IssueTypesEnum> getIssueTypes() {
    return issueTypes;
  }

  public void setIssueTypes(@javax.annotation.Nullable List<IssueTypesEnum> issueTypes) {
    this.issueTypes = issueTypes;
  }


  public IssuesSettingsConfig projectIds(@javax.annotation.Nullable List<String> projectIds) {
    this.projectIds = projectIds;
    return this;
  }

  public IssuesSettingsConfig addProjectIdsItem(String projectIdsItem) {
    if (this.projectIds == null) {
      this.projectIds = new ArrayList<>();
    }
    this.projectIds.add(projectIdsItem);
    return this;
  }

  /**
   * @Description Filter Issues associated with specific project IDs
   * @return projectIds
   */
  @javax.annotation.Nullable
  public List<String> getProjectIds() {
    return projectIds;
  }

  public void setProjectIds(@javax.annotation.Nullable List<String> projectIds) {
    this.projectIds = projectIds;
  }


  public IssuesSettingsConfig relatedEntityId(@javax.annotation.Nullable String relatedEntityId) {
    this.relatedEntityId = relatedEntityId;
    return this;
  }

  /**
   * @Description Filter by related entity ids
   * @return relatedEntityId
   */
  @javax.annotation.Nullable
  public String getRelatedEntityId() {
    return relatedEntityId;
  }

  public void setRelatedEntityId(@javax.annotation.Nullable String relatedEntityId) {
    this.relatedEntityId = relatedEntityId;
  }


  public IssuesSettingsConfig resolutionReasons(@javax.annotation.Nullable List<ResolutionReasonsEnum> resolutionReasons) {
    this.resolutionReasons = resolutionReasons;
    return this;
  }

  public IssuesSettingsConfig addResolutionReasonsItem(ResolutionReasonsEnum resolutionReasonsItem) {
    if (this.resolutionReasons == null) {
      this.resolutionReasons = new ArrayList<>();
    }
    this.resolutionReasons.add(resolutionReasonsItem);
    return this;
  }

  /**
   * @Description Filter Issues by resolution reason
   * @return resolutionReasons
   */
  @javax.annotation.Nullable
  public List<ResolutionReasonsEnum> getResolutionReasons() {
    return resolutionReasons;
  }

  public void setResolutionReasons(@javax.annotation.Nullable List<ResolutionReasonsEnum> resolutionReasons) {
    this.resolutionReasons = resolutionReasons;
  }


  public IssuesSettingsConfig riskEqualsAll(@javax.annotation.Nullable List<String> riskEqualsAll) {
    this.riskEqualsAll = riskEqualsAll;
    return this;
  }

  public IssuesSettingsConfig addRiskEqualsAllItem(String riskEqualsAllItem) {
    if (this.riskEqualsAll == null) {
      this.riskEqualsAll = new ArrayList<>();
    }
    this.riskEqualsAll.add(riskEqualsAllItem);
    return this;
  }

  /**
   * @Description Filters Issues by risk type according to Wiz-defined types of risk @Description Use the risk ID and not the risk name @Description All specified risks must be present
   * @return riskEqualsAll
   */
  @javax.annotation.Nullable
  public List<String> getRiskEqualsAll() {
    return riskEqualsAll;
  }

  public void setRiskEqualsAll(@javax.annotation.Nullable List<String> riskEqualsAll) {
    this.riskEqualsAll = riskEqualsAll;
  }


  public IssuesSettingsConfig riskEqualsAny(@javax.annotation.Nullable List<String> riskEqualsAny) {
    this.riskEqualsAny = riskEqualsAny;
    return this;
  }

  public IssuesSettingsConfig addRiskEqualsAnyItem(String riskEqualsAnyItem) {
    if (this.riskEqualsAny == null) {
      this.riskEqualsAny = new ArrayList<>();
    }
    this.riskEqualsAny.add(riskEqualsAnyItem);
    return this;
  }

  /**
   * @Description Filters Issues by risk type according to Wiz-defined types of risk @Description Use the risk ID and not the risk name
   * @return riskEqualsAny
   */
  @javax.annotation.Nullable
  public List<String> getRiskEqualsAny() {
    return riskEqualsAny;
  }

  public void setRiskEqualsAny(@javax.annotation.Nullable List<String> riskEqualsAny) {
    this.riskEqualsAny = riskEqualsAny;
  }


  public IssuesSettingsConfig searchQuery(@javax.annotation.Nullable String searchQuery) {
    this.searchQuery = searchQuery;
    return this;
  }

  /**
   * @Description Free text search on Issue title or object name @Description Returns NULL if no match is found
   * @return searchQuery
   */
  @javax.annotation.Nullable
  public String getSearchQuery() {
    return searchQuery;
  }

  public void setSearchQuery(@javax.annotation.Nullable String searchQuery) {
    this.searchQuery = searchQuery;
  }


  public IssuesSettingsConfig securityScan(@javax.annotation.Nullable String securityScan) {
    this.securityScan = securityScan;
    return this;
  }

  /**
   * @Description Filter by security scan source
   * @return securityScan
   */
  @javax.annotation.Nullable
  public String getSecurityScan() {
    return securityScan;
  }

  public void setSecurityScan(@javax.annotation.Nullable String securityScan) {
    this.securityScan = securityScan;
  }


  public IssuesSettingsConfig severities(@javax.annotation.Nullable List<SeveritiesEnum> severities) {
    this.severities = severities;
    return this;
  }

  public IssuesSettingsConfig addSeveritiesItem(SeveritiesEnum severitiesItem) {
    if (this.severities == null) {
      this.severities = new ArrayList<>();
    }
    this.severities.add(severitiesItem);
    return this;
  }

  /**
   * @Description Filter Issues according to Control severity
   * @return severities
   */
  @javax.annotation.Nullable
  public List<SeveritiesEnum> getSeverities() {
    return severities;
  }

  public void setSeverities(@javax.annotation.Nullable List<SeveritiesEnum> severities) {
    this.severities = severities;
  }


  public IssuesSettingsConfig stackLayers(@javax.annotation.Nullable List<StackLayersEnum> stackLayers) {
    this.stackLayers = stackLayers;
    return this;
  }

  public IssuesSettingsConfig addStackLayersItem(StackLayersEnum stackLayersItem) {
    if (this.stackLayers == null) {
      this.stackLayers = new ArrayList<>();
    }
    this.stackLayers.add(stackLayersItem);
    return this;
  }

  /**
   * @Description Filter Issues from specific stack layers
   * @return stackLayers
   */
  @javax.annotation.Nullable
  public List<StackLayersEnum> getStackLayers() {
    return stackLayers;
  }

  public void setStackLayers(@javax.annotation.Nullable List<StackLayersEnum> stackLayers) {
    this.stackLayers = stackLayers;
  }


  public IssuesSettingsConfig status(@javax.annotation.Nullable List<StatusEnum> status) {
    this.status = status;
    return this;
  }

  public IssuesSettingsConfig addStatusItem(StatusEnum statusItem) {
    if (this.status == null) {
      this.status = new ArrayList<>();
    }
    this.status.add(statusItem);
    return this;
  }

  /**
   * @Description Filter by Issue handling status @Description Default: OPEN
   * @return status
   */
  @javax.annotation.Nullable
  public List<StatusEnum> getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable List<StatusEnum> status) {
    this.status = status;
  }


  public IssuesSettingsConfig tenantDataCenter(@javax.annotation.Nullable String tenantDataCenter) {
    this.tenantDataCenter = tenantDataCenter;
    return this;
  }

  /**
   * DataCenter represents the tenant&#39;s data center location @Description Enter a tenant data center, e.g., \&quot;us1\&quot;, \&quot;us2\&quot;, \&quot;us3\&quot; @Description Find your tenant data center on the Tenant Info page in Wiz, or request it from your Wiz customer contact
   * @return tenantDataCenter
   */
  @javax.annotation.Nullable
  public String getTenantDataCenter() {
    return tenantDataCenter;
  }

  public void setTenantDataCenter(@javax.annotation.Nullable String tenantDataCenter) {
    this.tenantDataCenter = tenantDataCenter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IssuesSettingsConfig issuesSettingsConfig = (IssuesSettingsConfig) o;
    return Objects.equals(this.controlIds, issuesSettingsConfig.controlIds) &&
        Objects.equals(this.hasNote, issuesSettingsConfig.hasNote) &&
        Objects.equals(this.hasRemediation, issuesSettingsConfig.hasRemediation) &&
        Objects.equals(this.hasServiceTicket, issuesSettingsConfig.hasServiceTicket) &&
        Objects.equals(this.issueIds, issuesSettingsConfig.issueIds) &&
        Objects.equals(this.issueTypes, issuesSettingsConfig.issueTypes) &&
        Objects.equals(this.projectIds, issuesSettingsConfig.projectIds) &&
        Objects.equals(this.relatedEntityId, issuesSettingsConfig.relatedEntityId) &&
        Objects.equals(this.resolutionReasons, issuesSettingsConfig.resolutionReasons) &&
        Objects.equals(this.riskEqualsAll, issuesSettingsConfig.riskEqualsAll) &&
        Objects.equals(this.riskEqualsAny, issuesSettingsConfig.riskEqualsAny) &&
        Objects.equals(this.searchQuery, issuesSettingsConfig.searchQuery) &&
        Objects.equals(this.securityScan, issuesSettingsConfig.securityScan) &&
        Objects.equals(this.severities, issuesSettingsConfig.severities) &&
        Objects.equals(this.stackLayers, issuesSettingsConfig.stackLayers) &&
        Objects.equals(this.status, issuesSettingsConfig.status) &&
        Objects.equals(this.tenantDataCenter, issuesSettingsConfig.tenantDataCenter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controlIds, hasNote, hasRemediation, hasServiceTicket, issueIds, issueTypes, projectIds, relatedEntityId, resolutionReasons, riskEqualsAll, riskEqualsAny, searchQuery, securityScan, severities, stackLayers, status, tenantDataCenter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IssuesSettingsConfig {\n");
    sb.append("    controlIds: ").append(toIndentedString(controlIds)).append("\n");
    sb.append("    hasNote: ").append(toIndentedString(hasNote)).append("\n");
    sb.append("    hasRemediation: ").append(toIndentedString(hasRemediation)).append("\n");
    sb.append("    hasServiceTicket: ").append(toIndentedString(hasServiceTicket)).append("\n");
    sb.append("    issueIds: ").append(toIndentedString(issueIds)).append("\n");
    sb.append("    issueTypes: ").append(toIndentedString(issueTypes)).append("\n");
    sb.append("    projectIds: ").append(toIndentedString(projectIds)).append("\n");
    sb.append("    relatedEntityId: ").append(toIndentedString(relatedEntityId)).append("\n");
    sb.append("    resolutionReasons: ").append(toIndentedString(resolutionReasons)).append("\n");
    sb.append("    riskEqualsAll: ").append(toIndentedString(riskEqualsAll)).append("\n");
    sb.append("    riskEqualsAny: ").append(toIndentedString(riskEqualsAny)).append("\n");
    sb.append("    searchQuery: ").append(toIndentedString(searchQuery)).append("\n");
    sb.append("    securityScan: ").append(toIndentedString(securityScan)).append("\n");
    sb.append("    severities: ").append(toIndentedString(severities)).append("\n");
    sb.append("    stackLayers: ").append(toIndentedString(stackLayers)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    tenantDataCenter: ").append(toIndentedString(tenantDataCenter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("control_ids");
    openapiFields.add("has_note");
    openapiFields.add("has_remediation");
    openapiFields.add("has_service_ticket");
    openapiFields.add("issue_ids");
    openapiFields.add("issue_types");
    openapiFields.add("project_ids");
    openapiFields.add("related_entity_id");
    openapiFields.add("resolution_reasons");
    openapiFields.add("risk_equals_all");
    openapiFields.add("risk_equals_any");
    openapiFields.add("search_query");
    openapiFields.add("security_scan");
    openapiFields.add("severities");
    openapiFields.add("stack_layers");
    openapiFields.add("status");
    openapiFields.add("tenant_data_center");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IssuesSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IssuesSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IssuesSettingsConfig is not found in the empty JSON string", IssuesSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IssuesSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IssuesSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("control_ids") != null && !jsonObj.get("control_ids").isJsonNull() && !jsonObj.get("control_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `control_ids` to be an array in the JSON string but got `%s`", jsonObj.get("control_ids").toString()));
      }
      if ((jsonObj.get("has_note") != null && !jsonObj.get("has_note").isJsonNull()) && !jsonObj.get("has_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `has_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("has_note").toString()));
      }
      if ((jsonObj.get("has_remediation") != null && !jsonObj.get("has_remediation").isJsonNull()) && !jsonObj.get("has_remediation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `has_remediation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("has_remediation").toString()));
      }
      if ((jsonObj.get("has_service_ticket") != null && !jsonObj.get("has_service_ticket").isJsonNull()) && !jsonObj.get("has_service_ticket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `has_service_ticket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("has_service_ticket").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("issue_ids") != null && !jsonObj.get("issue_ids").isJsonNull() && !jsonObj.get("issue_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_ids` to be an array in the JSON string but got `%s`", jsonObj.get("issue_ids").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("issue_types") != null && !jsonObj.get("issue_types").isJsonNull() && !jsonObj.get("issue_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_types` to be an array in the JSON string but got `%s`", jsonObj.get("issue_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("project_ids") != null && !jsonObj.get("project_ids").isJsonNull() && !jsonObj.get("project_ids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_ids` to be an array in the JSON string but got `%s`", jsonObj.get("project_ids").toString()));
      }
      if ((jsonObj.get("related_entity_id") != null && !jsonObj.get("related_entity_id").isJsonNull()) && !jsonObj.get("related_entity_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `related_entity_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("related_entity_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("resolution_reasons") != null && !jsonObj.get("resolution_reasons").isJsonNull() && !jsonObj.get("resolution_reasons").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `resolution_reasons` to be an array in the JSON string but got `%s`", jsonObj.get("resolution_reasons").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("risk_equals_all") != null && !jsonObj.get("risk_equals_all").isJsonNull() && !jsonObj.get("risk_equals_all").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk_equals_all` to be an array in the JSON string but got `%s`", jsonObj.get("risk_equals_all").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("risk_equals_any") != null && !jsonObj.get("risk_equals_any").isJsonNull() && !jsonObj.get("risk_equals_any").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `risk_equals_any` to be an array in the JSON string but got `%s`", jsonObj.get("risk_equals_any").toString()));
      }
      if ((jsonObj.get("search_query") != null && !jsonObj.get("search_query").isJsonNull()) && !jsonObj.get("search_query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_query").toString()));
      }
      if ((jsonObj.get("security_scan") != null && !jsonObj.get("security_scan").isJsonNull()) && !jsonObj.get("security_scan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `security_scan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("security_scan").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("severities") != null && !jsonObj.get("severities").isJsonNull() && !jsonObj.get("severities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `severities` to be an array in the JSON string but got `%s`", jsonObj.get("severities").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("stack_layers") != null && !jsonObj.get("stack_layers").isJsonNull() && !jsonObj.get("stack_layers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `stack_layers` to be an array in the JSON string but got `%s`", jsonObj.get("stack_layers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull() && !jsonObj.get("status").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be an array in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("tenant_data_center") != null && !jsonObj.get("tenant_data_center").isJsonNull()) && !jsonObj.get("tenant_data_center").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenant_data_center` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenant_data_center").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IssuesSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IssuesSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IssuesSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IssuesSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<IssuesSettingsConfig>() {
           @Override
           public void write(JsonWriter out, IssuesSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IssuesSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IssuesSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IssuesSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to IssuesSettingsConfig
   */
  public static IssuesSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IssuesSettingsConfig.class);
  }

  /**
   * Convert an instance of IssuesSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

