/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ActorsInfoSettingsConfig;
import org.openapitools.client.model.AdminActivitySettingsConfig;
import org.openapitools.client.model.AdminLogsSettingsConfig;
import org.openapitools.client.model.AuditLogsSettingsConfig;
import org.openapitools.client.model.AuthLogsSettingsConfig;
import org.openapitools.client.model.AwsS3SettingsConfig;
import org.openapitools.client.model.AzureActivityLogsSettingsConfig;
import org.openapitools.client.model.CloudConfigurationFindingsSettingsConfig;
import org.openapitools.client.model.CloudLogsSettingsConfig;
import org.openapitools.client.model.CloudResourceInventorySettingsConfig;
import org.openapitools.client.model.CloudtrailSettingsConfig;
import org.openapitools.client.model.DemoCustomSettingsConfig;
import org.openapitools.client.model.DemoSettingsConfig;
import org.openapitools.client.model.DetectSummariesSettingsConfig;
import org.openapitools.client.model.DeviceActivitySettingsConfig;
import org.openapitools.client.model.DeviceDetailsSettingsConfig;
import org.openapitools.client.model.DriveActivitySettingsConfig;
import org.openapitools.client.model.EntraIdSettingsConfig;
import org.openapitools.client.model.EventSettingsConfig;
import org.openapitools.client.model.EventsLogsSettingsConfig;
import org.openapitools.client.model.LogAnalyticsQuerySettingsConfig;
import org.openapitools.client.model.LoginActivitySettingsConfig;
import org.openapitools.client.model.LoginSessionsSettingsConfig;
import org.openapitools.client.model.MonadLogSettingsConfig;
import org.openapitools.client.model.OauthActivitySettingsConfig;
import org.openapitools.client.model.RolesInfoSettingsConfig;
import org.openapitools.client.model.SemgrepDeploymentsSettingsConfig;
import org.openapitools.client.model.SemgrepProjectDetailsSettingsConfig;
import org.openapitools.client.model.SemgrepProjectsSettingsConfig;
import org.openapitools.client.model.SlackUsersSettingsConfig;
import org.openapitools.client.model.SlackgroupsSettingsConfig;
import org.openapitools.client.model.SnykOrganizationsSettingsConfig;
import org.openapitools.client.model.SnykProjectsSettingsConfig;
import org.openapitools.client.model.UsersInfoSettingsConfig;
import org.openapitools.client.model.UsersSettingsConfig;
import org.openapitools.client.model.VulnerabilitiesSettingsConfig;
import org.openapitools.client.model.VulnerabilityFindingsSettingsConfig;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-22T15:23:02.198566206Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class RoutesV2InputConfigSettings extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RoutesV2InputConfigSettings.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RoutesV2InputConfigSettings.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RoutesV2InputConfigSettings' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<ActorsInfoSettingsConfig> adapterActorsInfoSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(ActorsInfoSettingsConfig.class));
            final TypeAdapter<AdminActivitySettingsConfig> adapterAdminActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AdminActivitySettingsConfig.class));
            final TypeAdapter<AdminLogsSettingsConfig> adapterAdminLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AdminLogsSettingsConfig.class));
            final TypeAdapter<AuditLogsSettingsConfig> adapterAuditLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AuditLogsSettingsConfig.class));
            final TypeAdapter<AuthLogsSettingsConfig> adapterAuthLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AuthLogsSettingsConfig.class));
            final TypeAdapter<AwsS3SettingsConfig> adapterAwsS3SettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AwsS3SettingsConfig.class));
            final TypeAdapter<AzureActivityLogsSettingsConfig> adapterAzureActivityLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(AzureActivityLogsSettingsConfig.class));
            final TypeAdapter<Object> adapterObject = gson.getDelegateAdapter(this, TypeToken.get(Object.class));
            final TypeAdapter<CloudConfigurationFindingsSettingsConfig> adapterCloudConfigurationFindingsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudConfigurationFindingsSettingsConfig.class));
            final TypeAdapter<CloudLogsSettingsConfig> adapterCloudLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudLogsSettingsConfig.class));
            final TypeAdapter<CloudResourceInventorySettingsConfig> adapterCloudResourceInventorySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudResourceInventorySettingsConfig.class));
            final TypeAdapter<CloudtrailSettingsConfig> adapterCloudtrailSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(CloudtrailSettingsConfig.class));
            final TypeAdapter<DemoSettingsConfig> adapterDemoSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DemoSettingsConfig.class));
            final TypeAdapter<DemoCustomSettingsConfig> adapterDemoCustomSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DemoCustomSettingsConfig.class));
            final TypeAdapter<DetectSummariesSettingsConfig> adapterDetectSummariesSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DetectSummariesSettingsConfig.class));
            final TypeAdapter<DeviceActivitySettingsConfig> adapterDeviceActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DeviceActivitySettingsConfig.class));
            final TypeAdapter<DeviceDetailsSettingsConfig> adapterDeviceDetailsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DeviceDetailsSettingsConfig.class));
            final TypeAdapter<DriveActivitySettingsConfig> adapterDriveActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(DriveActivitySettingsConfig.class));
            final TypeAdapter<EntraIdSettingsConfig> adapterEntraIdSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(EntraIdSettingsConfig.class));
            final TypeAdapter<EventSettingsConfig> adapterEventSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(EventSettingsConfig.class));
            final TypeAdapter<EventsLogsSettingsConfig> adapterEventsLogsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(EventsLogsSettingsConfig.class));
            final TypeAdapter<LogAnalyticsQuerySettingsConfig> adapterLogAnalyticsQuerySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(LogAnalyticsQuerySettingsConfig.class));
            final TypeAdapter<LoginActivitySettingsConfig> adapterLoginActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(LoginActivitySettingsConfig.class));
            final TypeAdapter<LoginSessionsSettingsConfig> adapterLoginSessionsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(LoginSessionsSettingsConfig.class));
            final TypeAdapter<MonadLogSettingsConfig> adapterMonadLogSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(MonadLogSettingsConfig.class));
            final TypeAdapter<OauthActivitySettingsConfig> adapterOauthActivitySettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(OauthActivitySettingsConfig.class));
            final TypeAdapter<RolesInfoSettingsConfig> adapterRolesInfoSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(RolesInfoSettingsConfig.class));
            final TypeAdapter<SemgrepDeploymentsSettingsConfig> adapterSemgrepDeploymentsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepDeploymentsSettingsConfig.class));
            final TypeAdapter<SemgrepProjectDetailsSettingsConfig> adapterSemgrepProjectDetailsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepProjectDetailsSettingsConfig.class));
            final TypeAdapter<SemgrepProjectsSettingsConfig> adapterSemgrepProjectsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SemgrepProjectsSettingsConfig.class));
            final TypeAdapter<SlackUsersSettingsConfig> adapterSlackUsersSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SlackUsersSettingsConfig.class));
            final TypeAdapter<SlackgroupsSettingsConfig> adapterSlackgroupsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SlackgroupsSettingsConfig.class));
            final TypeAdapter<SnykOrganizationsSettingsConfig> adapterSnykOrganizationsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykOrganizationsSettingsConfig.class));
            final TypeAdapter<SnykProjectsSettingsConfig> adapterSnykProjectsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnykProjectsSettingsConfig.class));
            final TypeAdapter<UsersSettingsConfig> adapterUsersSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(UsersSettingsConfig.class));
            final TypeAdapter<UsersInfoSettingsConfig> adapterUsersInfoSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(UsersInfoSettingsConfig.class));
            final TypeAdapter<VulnerabilitiesSettingsConfig> adapterVulnerabilitiesSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilitiesSettingsConfig.class));
            final TypeAdapter<VulnerabilityFindingsSettingsConfig> adapterVulnerabilityFindingsSettingsConfig = gson.getDelegateAdapter(this, TypeToken.get(VulnerabilityFindingsSettingsConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<RoutesV2InputConfigSettings>() {
                @Override
                public void write(JsonWriter out, RoutesV2InputConfigSettings value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `ActorsInfoSettingsConfig`
                    if (value.getActualInstance() instanceof ActorsInfoSettingsConfig) {
                        JsonElement element = adapterActorsInfoSettingsConfig.toJsonTree((ActorsInfoSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdminActivitySettingsConfig`
                    if (value.getActualInstance() instanceof AdminActivitySettingsConfig) {
                        JsonElement element = adapterAdminActivitySettingsConfig.toJsonTree((AdminActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AdminLogsSettingsConfig`
                    if (value.getActualInstance() instanceof AdminLogsSettingsConfig) {
                        JsonElement element = adapterAdminLogsSettingsConfig.toJsonTree((AdminLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuditLogsSettingsConfig`
                    if (value.getActualInstance() instanceof AuditLogsSettingsConfig) {
                        JsonElement element = adapterAuditLogsSettingsConfig.toJsonTree((AuditLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AuthLogsSettingsConfig`
                    if (value.getActualInstance() instanceof AuthLogsSettingsConfig) {
                        JsonElement element = adapterAuthLogsSettingsConfig.toJsonTree((AuthLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AwsS3SettingsConfig`
                    if (value.getActualInstance() instanceof AwsS3SettingsConfig) {
                        JsonElement element = adapterAwsS3SettingsConfig.toJsonTree((AwsS3SettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `AzureActivityLogsSettingsConfig`
                    if (value.getActualInstance() instanceof AzureActivityLogsSettingsConfig) {
                        JsonElement element = adapterAzureActivityLogsSettingsConfig.toJsonTree((AzureActivityLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Object`
                    if (value.getActualInstance() instanceof Object) {
                        JsonPrimitive primitive = adapterObject.toJsonTree((Object)value.getActualInstance()).getAsJsonPrimitive();
                        elementAdapter.write(out, primitive);
                        return;
                    }
                    // check if the actual instance is of the type `CloudConfigurationFindingsSettingsConfig`
                    if (value.getActualInstance() instanceof CloudConfigurationFindingsSettingsConfig) {
                        JsonElement element = adapterCloudConfigurationFindingsSettingsConfig.toJsonTree((CloudConfigurationFindingsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudLogsSettingsConfig`
                    if (value.getActualInstance() instanceof CloudLogsSettingsConfig) {
                        JsonElement element = adapterCloudLogsSettingsConfig.toJsonTree((CloudLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudResourceInventorySettingsConfig`
                    if (value.getActualInstance() instanceof CloudResourceInventorySettingsConfig) {
                        JsonElement element = adapterCloudResourceInventorySettingsConfig.toJsonTree((CloudResourceInventorySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `CloudtrailSettingsConfig`
                    if (value.getActualInstance() instanceof CloudtrailSettingsConfig) {
                        JsonElement element = adapterCloudtrailSettingsConfig.toJsonTree((CloudtrailSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DemoSettingsConfig`
                    if (value.getActualInstance() instanceof DemoSettingsConfig) {
                        JsonElement element = adapterDemoSettingsConfig.toJsonTree((DemoSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DemoCustomSettingsConfig`
                    if (value.getActualInstance() instanceof DemoCustomSettingsConfig) {
                        JsonElement element = adapterDemoCustomSettingsConfig.toJsonTree((DemoCustomSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DetectSummariesSettingsConfig`
                    if (value.getActualInstance() instanceof DetectSummariesSettingsConfig) {
                        JsonElement element = adapterDetectSummariesSettingsConfig.toJsonTree((DetectSummariesSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DeviceActivitySettingsConfig`
                    if (value.getActualInstance() instanceof DeviceActivitySettingsConfig) {
                        JsonElement element = adapterDeviceActivitySettingsConfig.toJsonTree((DeviceActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DeviceDetailsSettingsConfig`
                    if (value.getActualInstance() instanceof DeviceDetailsSettingsConfig) {
                        JsonElement element = adapterDeviceDetailsSettingsConfig.toJsonTree((DeviceDetailsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `DriveActivitySettingsConfig`
                    if (value.getActualInstance() instanceof DriveActivitySettingsConfig) {
                        JsonElement element = adapterDriveActivitySettingsConfig.toJsonTree((DriveActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EntraIdSettingsConfig`
                    if (value.getActualInstance() instanceof EntraIdSettingsConfig) {
                        JsonElement element = adapterEntraIdSettingsConfig.toJsonTree((EntraIdSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EventSettingsConfig`
                    if (value.getActualInstance() instanceof EventSettingsConfig) {
                        JsonElement element = adapterEventSettingsConfig.toJsonTree((EventSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `EventsLogsSettingsConfig`
                    if (value.getActualInstance() instanceof EventsLogsSettingsConfig) {
                        JsonElement element = adapterEventsLogsSettingsConfig.toJsonTree((EventsLogsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LogAnalyticsQuerySettingsConfig`
                    if (value.getActualInstance() instanceof LogAnalyticsQuerySettingsConfig) {
                        JsonElement element = adapterLogAnalyticsQuerySettingsConfig.toJsonTree((LogAnalyticsQuerySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LoginActivitySettingsConfig`
                    if (value.getActualInstance() instanceof LoginActivitySettingsConfig) {
                        JsonElement element = adapterLoginActivitySettingsConfig.toJsonTree((LoginActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `LoginSessionsSettingsConfig`
                    if (value.getActualInstance() instanceof LoginSessionsSettingsConfig) {
                        JsonElement element = adapterLoginSessionsSettingsConfig.toJsonTree((LoginSessionsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `MonadLogSettingsConfig`
                    if (value.getActualInstance() instanceof MonadLogSettingsConfig) {
                        JsonElement element = adapterMonadLogSettingsConfig.toJsonTree((MonadLogSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OauthActivitySettingsConfig`
                    if (value.getActualInstance() instanceof OauthActivitySettingsConfig) {
                        JsonElement element = adapterOauthActivitySettingsConfig.toJsonTree((OauthActivitySettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `RolesInfoSettingsConfig`
                    if (value.getActualInstance() instanceof RolesInfoSettingsConfig) {
                        JsonElement element = adapterRolesInfoSettingsConfig.toJsonTree((RolesInfoSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepDeploymentsSettingsConfig`
                    if (value.getActualInstance() instanceof SemgrepDeploymentsSettingsConfig) {
                        JsonElement element = adapterSemgrepDeploymentsSettingsConfig.toJsonTree((SemgrepDeploymentsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepProjectDetailsSettingsConfig`
                    if (value.getActualInstance() instanceof SemgrepProjectDetailsSettingsConfig) {
                        JsonElement element = adapterSemgrepProjectDetailsSettingsConfig.toJsonTree((SemgrepProjectDetailsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SemgrepProjectsSettingsConfig`
                    if (value.getActualInstance() instanceof SemgrepProjectsSettingsConfig) {
                        JsonElement element = adapterSemgrepProjectsSettingsConfig.toJsonTree((SemgrepProjectsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SlackUsersSettingsConfig`
                    if (value.getActualInstance() instanceof SlackUsersSettingsConfig) {
                        JsonElement element = adapterSlackUsersSettingsConfig.toJsonTree((SlackUsersSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SlackgroupsSettingsConfig`
                    if (value.getActualInstance() instanceof SlackgroupsSettingsConfig) {
                        JsonElement element = adapterSlackgroupsSettingsConfig.toJsonTree((SlackgroupsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykOrganizationsSettingsConfig`
                    if (value.getActualInstance() instanceof SnykOrganizationsSettingsConfig) {
                        JsonElement element = adapterSnykOrganizationsSettingsConfig.toJsonTree((SnykOrganizationsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnykProjectsSettingsConfig`
                    if (value.getActualInstance() instanceof SnykProjectsSettingsConfig) {
                        JsonElement element = adapterSnykProjectsSettingsConfig.toJsonTree((SnykProjectsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UsersSettingsConfig`
                    if (value.getActualInstance() instanceof UsersSettingsConfig) {
                        JsonElement element = adapterUsersSettingsConfig.toJsonTree((UsersSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `UsersInfoSettingsConfig`
                    if (value.getActualInstance() instanceof UsersInfoSettingsConfig) {
                        JsonElement element = adapterUsersInfoSettingsConfig.toJsonTree((UsersInfoSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VulnerabilitiesSettingsConfig`
                    if (value.getActualInstance() instanceof VulnerabilitiesSettingsConfig) {
                        JsonElement element = adapterVulnerabilitiesSettingsConfig.toJsonTree((VulnerabilitiesSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `VulnerabilityFindingsSettingsConfig`
                    if (value.getActualInstance() instanceof VulnerabilityFindingsSettingsConfig) {
                        JsonElement element = adapterVulnerabilityFindingsSettingsConfig.toJsonTree((VulnerabilityFindingsSettingsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AzureActivityLogsSettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig");
                }

                @Override
                public RoutesV2InputConfigSettings read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize ActorsInfoSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ActorsInfoSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterActorsInfoSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ActorsInfoSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ActorsInfoSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ActorsInfoSettingsConfig'", e);
                    }
                    // deserialize AdminActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminActivitySettingsConfig'", e);
                    }
                    // deserialize AdminLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AdminLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAdminLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AdminLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AdminLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AdminLogsSettingsConfig'", e);
                    }
                    // deserialize AuditLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuditLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuditLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuditLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuditLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuditLogsSettingsConfig'", e);
                    }
                    // deserialize AuthLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AuthLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAuthLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AuthLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AuthLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AuthLogsSettingsConfig'", e);
                    }
                    // deserialize AwsS3SettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AwsS3SettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAwsS3SettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AwsS3SettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AwsS3SettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AwsS3SettingsConfig'", e);
                    }
                    // deserialize AzureActivityLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        AzureActivityLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterAzureActivityLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'AzureActivityLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for AzureActivityLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'AzureActivityLogsSettingsConfig'", e);
                    }
                    // deserialize Object
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                        }
                        actualAdapter = adapterObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Object'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Object'", e);
                    }
                    // deserialize CloudConfigurationFindingsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudConfigurationFindingsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudConfigurationFindingsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudConfigurationFindingsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudConfigurationFindingsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudConfigurationFindingsSettingsConfig'", e);
                    }
                    // deserialize CloudLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudLogsSettingsConfig'", e);
                    }
                    // deserialize CloudResourceInventorySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudResourceInventorySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudResourceInventorySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudResourceInventorySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudResourceInventorySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudResourceInventorySettingsConfig'", e);
                    }
                    // deserialize CloudtrailSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CloudtrailSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCloudtrailSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CloudtrailSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CloudtrailSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CloudtrailSettingsConfig'", e);
                    }
                    // deserialize DemoSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DemoSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDemoSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DemoSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DemoSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DemoSettingsConfig'", e);
                    }
                    // deserialize DemoCustomSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DemoCustomSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDemoCustomSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DemoCustomSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DemoCustomSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DemoCustomSettingsConfig'", e);
                    }
                    // deserialize DetectSummariesSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DetectSummariesSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDetectSummariesSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DetectSummariesSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DetectSummariesSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DetectSummariesSettingsConfig'", e);
                    }
                    // deserialize DeviceActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeviceActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDeviceActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DeviceActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeviceActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeviceActivitySettingsConfig'", e);
                    }
                    // deserialize DeviceDetailsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DeviceDetailsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDeviceDetailsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DeviceDetailsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DeviceDetailsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DeviceDetailsSettingsConfig'", e);
                    }
                    // deserialize DriveActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        DriveActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterDriveActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'DriveActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for DriveActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'DriveActivitySettingsConfig'", e);
                    }
                    // deserialize EntraIdSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EntraIdSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEntraIdSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EntraIdSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EntraIdSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EntraIdSettingsConfig'", e);
                    }
                    // deserialize EventSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EventSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEventSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EventSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EventSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EventSettingsConfig'", e);
                    }
                    // deserialize EventsLogsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        EventsLogsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterEventsLogsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'EventsLogsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for EventsLogsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'EventsLogsSettingsConfig'", e);
                    }
                    // deserialize LogAnalyticsQuerySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LogAnalyticsQuerySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLogAnalyticsQuerySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LogAnalyticsQuerySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LogAnalyticsQuerySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LogAnalyticsQuerySettingsConfig'", e);
                    }
                    // deserialize LoginActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LoginActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLoginActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LoginActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LoginActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LoginActivitySettingsConfig'", e);
                    }
                    // deserialize LoginSessionsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        LoginSessionsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterLoginSessionsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'LoginSessionsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for LoginSessionsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'LoginSessionsSettingsConfig'", e);
                    }
                    // deserialize MonadLogSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        MonadLogSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterMonadLogSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'MonadLogSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for MonadLogSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'MonadLogSettingsConfig'", e);
                    }
                    // deserialize OauthActivitySettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OauthActivitySettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterOauthActivitySettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OauthActivitySettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OauthActivitySettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OauthActivitySettingsConfig'", e);
                    }
                    // deserialize RolesInfoSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        RolesInfoSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterRolesInfoSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'RolesInfoSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for RolesInfoSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'RolesInfoSettingsConfig'", e);
                    }
                    // deserialize SemgrepDeploymentsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepDeploymentsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepDeploymentsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepDeploymentsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepDeploymentsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepDeploymentsSettingsConfig'", e);
                    }
                    // deserialize SemgrepProjectDetailsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepProjectDetailsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepProjectDetailsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepProjectDetailsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepProjectDetailsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepProjectDetailsSettingsConfig'", e);
                    }
                    // deserialize SemgrepProjectsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SemgrepProjectsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSemgrepProjectsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SemgrepProjectsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SemgrepProjectsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SemgrepProjectsSettingsConfig'", e);
                    }
                    // deserialize SlackUsersSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SlackUsersSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSlackUsersSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SlackUsersSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SlackUsersSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SlackUsersSettingsConfig'", e);
                    }
                    // deserialize SlackgroupsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SlackgroupsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSlackgroupsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SlackgroupsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SlackgroupsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SlackgroupsSettingsConfig'", e);
                    }
                    // deserialize SnykOrganizationsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykOrganizationsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykOrganizationsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykOrganizationsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykOrganizationsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykOrganizationsSettingsConfig'", e);
                    }
                    // deserialize SnykProjectsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnykProjectsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnykProjectsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnykProjectsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnykProjectsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnykProjectsSettingsConfig'", e);
                    }
                    // deserialize UsersSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UsersSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterUsersSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UsersSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UsersSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UsersSettingsConfig'", e);
                    }
                    // deserialize UsersInfoSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        UsersInfoSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterUsersInfoSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'UsersInfoSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for UsersInfoSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'UsersInfoSettingsConfig'", e);
                    }
                    // deserialize VulnerabilitiesSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VulnerabilitiesSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterVulnerabilitiesSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VulnerabilitiesSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VulnerabilitiesSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VulnerabilitiesSettingsConfig'", e);
                    }
                    // deserialize VulnerabilityFindingsSettingsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        VulnerabilityFindingsSettingsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterVulnerabilityFindingsSettingsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'VulnerabilityFindingsSettingsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for VulnerabilityFindingsSettingsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'VulnerabilityFindingsSettingsConfig'", e);
                    }

                    if (match == 1) {
                        RoutesV2InputConfigSettings ret = new RoutesV2InputConfigSettings();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RoutesV2InputConfigSettings: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public RoutesV2InputConfigSettings() {
        super("oneOf", Boolean.FALSE);
    }

    public RoutesV2InputConfigSettings(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("ActorsInfoSettingsConfig", ActorsInfoSettingsConfig.class);
        schemas.put("AdminActivitySettingsConfig", AdminActivitySettingsConfig.class);
        schemas.put("AdminLogsSettingsConfig", AdminLogsSettingsConfig.class);
        schemas.put("AuditLogsSettingsConfig", AuditLogsSettingsConfig.class);
        schemas.put("AuthLogsSettingsConfig", AuthLogsSettingsConfig.class);
        schemas.put("AwsS3SettingsConfig", AwsS3SettingsConfig.class);
        schemas.put("AzureActivityLogsSettingsConfig", AzureActivityLogsSettingsConfig.class);
        schemas.put("Object", Object.class);
        schemas.put("CloudConfigurationFindingsSettingsConfig", CloudConfigurationFindingsSettingsConfig.class);
        schemas.put("CloudLogsSettingsConfig", CloudLogsSettingsConfig.class);
        schemas.put("CloudResourceInventorySettingsConfig", CloudResourceInventorySettingsConfig.class);
        schemas.put("CloudtrailSettingsConfig", CloudtrailSettingsConfig.class);
        schemas.put("DemoSettingsConfig", DemoSettingsConfig.class);
        schemas.put("DemoCustomSettingsConfig", DemoCustomSettingsConfig.class);
        schemas.put("DetectSummariesSettingsConfig", DetectSummariesSettingsConfig.class);
        schemas.put("DeviceActivitySettingsConfig", DeviceActivitySettingsConfig.class);
        schemas.put("DeviceDetailsSettingsConfig", DeviceDetailsSettingsConfig.class);
        schemas.put("DriveActivitySettingsConfig", DriveActivitySettingsConfig.class);
        schemas.put("EntraIdSettingsConfig", EntraIdSettingsConfig.class);
        schemas.put("EventSettingsConfig", EventSettingsConfig.class);
        schemas.put("EventsLogsSettingsConfig", EventsLogsSettingsConfig.class);
        schemas.put("LogAnalyticsQuerySettingsConfig", LogAnalyticsQuerySettingsConfig.class);
        schemas.put("LoginActivitySettingsConfig", LoginActivitySettingsConfig.class);
        schemas.put("LoginSessionsSettingsConfig", LoginSessionsSettingsConfig.class);
        schemas.put("MonadLogSettingsConfig", MonadLogSettingsConfig.class);
        schemas.put("OauthActivitySettingsConfig", OauthActivitySettingsConfig.class);
        schemas.put("RolesInfoSettingsConfig", RolesInfoSettingsConfig.class);
        schemas.put("SemgrepDeploymentsSettingsConfig", SemgrepDeploymentsSettingsConfig.class);
        schemas.put("SemgrepProjectDetailsSettingsConfig", SemgrepProjectDetailsSettingsConfig.class);
        schemas.put("SemgrepProjectsSettingsConfig", SemgrepProjectsSettingsConfig.class);
        schemas.put("SlackUsersSettingsConfig", SlackUsersSettingsConfig.class);
        schemas.put("SlackgroupsSettingsConfig", SlackgroupsSettingsConfig.class);
        schemas.put("SnykOrganizationsSettingsConfig", SnykOrganizationsSettingsConfig.class);
        schemas.put("SnykProjectsSettingsConfig", SnykProjectsSettingsConfig.class);
        schemas.put("UsersSettingsConfig", UsersSettingsConfig.class);
        schemas.put("UsersInfoSettingsConfig", UsersInfoSettingsConfig.class);
        schemas.put("VulnerabilitiesSettingsConfig", VulnerabilitiesSettingsConfig.class);
        schemas.put("VulnerabilityFindingsSettingsConfig", VulnerabilityFindingsSettingsConfig.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return RoutesV2InputConfigSettings.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AzureActivityLogsSettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof ActorsInfoSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdminActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AdminLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuditLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AuthLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AwsS3SettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof AzureActivityLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Object) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudConfigurationFindingsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudResourceInventorySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof CloudtrailSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DemoSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DemoCustomSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DetectSummariesSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeviceActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DeviceDetailsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof DriveActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EntraIdSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof EventsLogsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LogAnalyticsQuerySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LoginActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof LoginSessionsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof MonadLogSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OauthActivitySettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof RolesInfoSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepDeploymentsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepProjectDetailsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SemgrepProjectsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SlackUsersSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SlackgroupsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykOrganizationsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnykProjectsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UsersSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof UsersInfoSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VulnerabilitiesSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof VulnerabilityFindingsSettingsConfig) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AzureActivityLogsSettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig");
    }

    /**
     * Get the actual instance, which can be the following:
     * ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AzureActivityLogsSettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig
     *
     * @return The actual instance (ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AzureActivityLogsSettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `ActorsInfoSettingsConfig`. If the actual instance is not `ActorsInfoSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ActorsInfoSettingsConfig`
     * @throws ClassCastException if the instance is not `ActorsInfoSettingsConfig`
     */
    public ActorsInfoSettingsConfig getActorsInfoSettingsConfig() throws ClassCastException {
        return (ActorsInfoSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AdminActivitySettingsConfig`. If the actual instance is not `AdminActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `AdminActivitySettingsConfig`
     */
    public AdminActivitySettingsConfig getAdminActivitySettingsConfig() throws ClassCastException {
        return (AdminActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AdminLogsSettingsConfig`. If the actual instance is not `AdminLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AdminLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `AdminLogsSettingsConfig`
     */
    public AdminLogsSettingsConfig getAdminLogsSettingsConfig() throws ClassCastException {
        return (AdminLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AuditLogsSettingsConfig`. If the actual instance is not `AuditLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuditLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `AuditLogsSettingsConfig`
     */
    public AuditLogsSettingsConfig getAuditLogsSettingsConfig() throws ClassCastException {
        return (AuditLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AuthLogsSettingsConfig`. If the actual instance is not `AuthLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AuthLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `AuthLogsSettingsConfig`
     */
    public AuthLogsSettingsConfig getAuthLogsSettingsConfig() throws ClassCastException {
        return (AuthLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AwsS3SettingsConfig`. If the actual instance is not `AwsS3SettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AwsS3SettingsConfig`
     * @throws ClassCastException if the instance is not `AwsS3SettingsConfig`
     */
    public AwsS3SettingsConfig getAwsS3SettingsConfig() throws ClassCastException {
        return (AwsS3SettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `AzureActivityLogsSettingsConfig`. If the actual instance is not `AzureActivityLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `AzureActivityLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `AzureActivityLogsSettingsConfig`
     */
    public AzureActivityLogsSettingsConfig getAzureActivityLogsSettingsConfig() throws ClassCastException {
        return (AzureActivityLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Object`. If the actual instance is not `Object`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Object`
     * @throws ClassCastException if the instance is not `Object`
     */
    public Object getObject() throws ClassCastException {
        return (Object)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudConfigurationFindingsSettingsConfig`. If the actual instance is not `CloudConfigurationFindingsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudConfigurationFindingsSettingsConfig`
     * @throws ClassCastException if the instance is not `CloudConfigurationFindingsSettingsConfig`
     */
    public CloudConfigurationFindingsSettingsConfig getCloudConfigurationFindingsSettingsConfig() throws ClassCastException {
        return (CloudConfigurationFindingsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudLogsSettingsConfig`. If the actual instance is not `CloudLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `CloudLogsSettingsConfig`
     */
    public CloudLogsSettingsConfig getCloudLogsSettingsConfig() throws ClassCastException {
        return (CloudLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudResourceInventorySettingsConfig`. If the actual instance is not `CloudResourceInventorySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudResourceInventorySettingsConfig`
     * @throws ClassCastException if the instance is not `CloudResourceInventorySettingsConfig`
     */
    public CloudResourceInventorySettingsConfig getCloudResourceInventorySettingsConfig() throws ClassCastException {
        return (CloudResourceInventorySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `CloudtrailSettingsConfig`. If the actual instance is not `CloudtrailSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CloudtrailSettingsConfig`
     * @throws ClassCastException if the instance is not `CloudtrailSettingsConfig`
     */
    public CloudtrailSettingsConfig getCloudtrailSettingsConfig() throws ClassCastException {
        return (CloudtrailSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DemoSettingsConfig`. If the actual instance is not `DemoSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DemoSettingsConfig`
     * @throws ClassCastException if the instance is not `DemoSettingsConfig`
     */
    public DemoSettingsConfig getDemoSettingsConfig() throws ClassCastException {
        return (DemoSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DemoCustomSettingsConfig`. If the actual instance is not `DemoCustomSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DemoCustomSettingsConfig`
     * @throws ClassCastException if the instance is not `DemoCustomSettingsConfig`
     */
    public DemoCustomSettingsConfig getDemoCustomSettingsConfig() throws ClassCastException {
        return (DemoCustomSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DetectSummariesSettingsConfig`. If the actual instance is not `DetectSummariesSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DetectSummariesSettingsConfig`
     * @throws ClassCastException if the instance is not `DetectSummariesSettingsConfig`
     */
    public DetectSummariesSettingsConfig getDetectSummariesSettingsConfig() throws ClassCastException {
        return (DetectSummariesSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DeviceActivitySettingsConfig`. If the actual instance is not `DeviceActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeviceActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `DeviceActivitySettingsConfig`
     */
    public DeviceActivitySettingsConfig getDeviceActivitySettingsConfig() throws ClassCastException {
        return (DeviceActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DeviceDetailsSettingsConfig`. If the actual instance is not `DeviceDetailsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DeviceDetailsSettingsConfig`
     * @throws ClassCastException if the instance is not `DeviceDetailsSettingsConfig`
     */
    public DeviceDetailsSettingsConfig getDeviceDetailsSettingsConfig() throws ClassCastException {
        return (DeviceDetailsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `DriveActivitySettingsConfig`. If the actual instance is not `DriveActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `DriveActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `DriveActivitySettingsConfig`
     */
    public DriveActivitySettingsConfig getDriveActivitySettingsConfig() throws ClassCastException {
        return (DriveActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EntraIdSettingsConfig`. If the actual instance is not `EntraIdSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EntraIdSettingsConfig`
     * @throws ClassCastException if the instance is not `EntraIdSettingsConfig`
     */
    public EntraIdSettingsConfig getEntraIdSettingsConfig() throws ClassCastException {
        return (EntraIdSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventSettingsConfig`. If the actual instance is not `EventSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventSettingsConfig`
     * @throws ClassCastException if the instance is not `EventSettingsConfig`
     */
    public EventSettingsConfig getEventSettingsConfig() throws ClassCastException {
        return (EventSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `EventsLogsSettingsConfig`. If the actual instance is not `EventsLogsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `EventsLogsSettingsConfig`
     * @throws ClassCastException if the instance is not `EventsLogsSettingsConfig`
     */
    public EventsLogsSettingsConfig getEventsLogsSettingsConfig() throws ClassCastException {
        return (EventsLogsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LogAnalyticsQuerySettingsConfig`. If the actual instance is not `LogAnalyticsQuerySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LogAnalyticsQuerySettingsConfig`
     * @throws ClassCastException if the instance is not `LogAnalyticsQuerySettingsConfig`
     */
    public LogAnalyticsQuerySettingsConfig getLogAnalyticsQuerySettingsConfig() throws ClassCastException {
        return (LogAnalyticsQuerySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LoginActivitySettingsConfig`. If the actual instance is not `LoginActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LoginActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `LoginActivitySettingsConfig`
     */
    public LoginActivitySettingsConfig getLoginActivitySettingsConfig() throws ClassCastException {
        return (LoginActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `LoginSessionsSettingsConfig`. If the actual instance is not `LoginSessionsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `LoginSessionsSettingsConfig`
     * @throws ClassCastException if the instance is not `LoginSessionsSettingsConfig`
     */
    public LoginSessionsSettingsConfig getLoginSessionsSettingsConfig() throws ClassCastException {
        return (LoginSessionsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `MonadLogSettingsConfig`. If the actual instance is not `MonadLogSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `MonadLogSettingsConfig`
     * @throws ClassCastException if the instance is not `MonadLogSettingsConfig`
     */
    public MonadLogSettingsConfig getMonadLogSettingsConfig() throws ClassCastException {
        return (MonadLogSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OauthActivitySettingsConfig`. If the actual instance is not `OauthActivitySettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OauthActivitySettingsConfig`
     * @throws ClassCastException if the instance is not `OauthActivitySettingsConfig`
     */
    public OauthActivitySettingsConfig getOauthActivitySettingsConfig() throws ClassCastException {
        return (OauthActivitySettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `RolesInfoSettingsConfig`. If the actual instance is not `RolesInfoSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `RolesInfoSettingsConfig`
     * @throws ClassCastException if the instance is not `RolesInfoSettingsConfig`
     */
    public RolesInfoSettingsConfig getRolesInfoSettingsConfig() throws ClassCastException {
        return (RolesInfoSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepDeploymentsSettingsConfig`. If the actual instance is not `SemgrepDeploymentsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepDeploymentsSettingsConfig`
     * @throws ClassCastException if the instance is not `SemgrepDeploymentsSettingsConfig`
     */
    public SemgrepDeploymentsSettingsConfig getSemgrepDeploymentsSettingsConfig() throws ClassCastException {
        return (SemgrepDeploymentsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepProjectDetailsSettingsConfig`. If the actual instance is not `SemgrepProjectDetailsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepProjectDetailsSettingsConfig`
     * @throws ClassCastException if the instance is not `SemgrepProjectDetailsSettingsConfig`
     */
    public SemgrepProjectDetailsSettingsConfig getSemgrepProjectDetailsSettingsConfig() throws ClassCastException {
        return (SemgrepProjectDetailsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SemgrepProjectsSettingsConfig`. If the actual instance is not `SemgrepProjectsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SemgrepProjectsSettingsConfig`
     * @throws ClassCastException if the instance is not `SemgrepProjectsSettingsConfig`
     */
    public SemgrepProjectsSettingsConfig getSemgrepProjectsSettingsConfig() throws ClassCastException {
        return (SemgrepProjectsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SlackUsersSettingsConfig`. If the actual instance is not `SlackUsersSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SlackUsersSettingsConfig`
     * @throws ClassCastException if the instance is not `SlackUsersSettingsConfig`
     */
    public SlackUsersSettingsConfig getSlackUsersSettingsConfig() throws ClassCastException {
        return (SlackUsersSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SlackgroupsSettingsConfig`. If the actual instance is not `SlackgroupsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SlackgroupsSettingsConfig`
     * @throws ClassCastException if the instance is not `SlackgroupsSettingsConfig`
     */
    public SlackgroupsSettingsConfig getSlackgroupsSettingsConfig() throws ClassCastException {
        return (SlackgroupsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykOrganizationsSettingsConfig`. If the actual instance is not `SnykOrganizationsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykOrganizationsSettingsConfig`
     * @throws ClassCastException if the instance is not `SnykOrganizationsSettingsConfig`
     */
    public SnykOrganizationsSettingsConfig getSnykOrganizationsSettingsConfig() throws ClassCastException {
        return (SnykOrganizationsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnykProjectsSettingsConfig`. If the actual instance is not `SnykProjectsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnykProjectsSettingsConfig`
     * @throws ClassCastException if the instance is not `SnykProjectsSettingsConfig`
     */
    public SnykProjectsSettingsConfig getSnykProjectsSettingsConfig() throws ClassCastException {
        return (SnykProjectsSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UsersSettingsConfig`. If the actual instance is not `UsersSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsersSettingsConfig`
     * @throws ClassCastException if the instance is not `UsersSettingsConfig`
     */
    public UsersSettingsConfig getUsersSettingsConfig() throws ClassCastException {
        return (UsersSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `UsersInfoSettingsConfig`. If the actual instance is not `UsersInfoSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `UsersInfoSettingsConfig`
     * @throws ClassCastException if the instance is not `UsersInfoSettingsConfig`
     */
    public UsersInfoSettingsConfig getUsersInfoSettingsConfig() throws ClassCastException {
        return (UsersInfoSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VulnerabilitiesSettingsConfig`. If the actual instance is not `VulnerabilitiesSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VulnerabilitiesSettingsConfig`
     * @throws ClassCastException if the instance is not `VulnerabilitiesSettingsConfig`
     */
    public VulnerabilitiesSettingsConfig getVulnerabilitiesSettingsConfig() throws ClassCastException {
        return (VulnerabilitiesSettingsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `VulnerabilityFindingsSettingsConfig`. If the actual instance is not `VulnerabilityFindingsSettingsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `VulnerabilityFindingsSettingsConfig`
     * @throws ClassCastException if the instance is not `VulnerabilityFindingsSettingsConfig`
     */
    public VulnerabilityFindingsSettingsConfig getVulnerabilityFindingsSettingsConfig() throws ClassCastException {
        return (VulnerabilityFindingsSettingsConfig)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RoutesV2InputConfigSettings
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with ActorsInfoSettingsConfig
        try {
            ActorsInfoSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ActorsInfoSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdminActivitySettingsConfig
        try {
            AdminActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AdminLogsSettingsConfig
        try {
            AdminLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AdminLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuditLogsSettingsConfig
        try {
            AuditLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuditLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AuthLogsSettingsConfig
        try {
            AuthLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AuthLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AwsS3SettingsConfig
        try {
            AwsS3SettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AwsS3SettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with AzureActivityLogsSettingsConfig
        try {
            AzureActivityLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for AzureActivityLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Object
        try {
            if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudConfigurationFindingsSettingsConfig
        try {
            CloudConfigurationFindingsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudConfigurationFindingsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudLogsSettingsConfig
        try {
            CloudLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudResourceInventorySettingsConfig
        try {
            CloudResourceInventorySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudResourceInventorySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with CloudtrailSettingsConfig
        try {
            CloudtrailSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CloudtrailSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DemoSettingsConfig
        try {
            DemoSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DemoSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DemoCustomSettingsConfig
        try {
            DemoCustomSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DemoCustomSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DetectSummariesSettingsConfig
        try {
            DetectSummariesSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DetectSummariesSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DeviceActivitySettingsConfig
        try {
            DeviceActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DeviceActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DeviceDetailsSettingsConfig
        try {
            DeviceDetailsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DeviceDetailsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with DriveActivitySettingsConfig
        try {
            DriveActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for DriveActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EntraIdSettingsConfig
        try {
            EntraIdSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EntraIdSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EventSettingsConfig
        try {
            EventSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EventSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with EventsLogsSettingsConfig
        try {
            EventsLogsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for EventsLogsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LogAnalyticsQuerySettingsConfig
        try {
            LogAnalyticsQuerySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LogAnalyticsQuerySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LoginActivitySettingsConfig
        try {
            LoginActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LoginActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with LoginSessionsSettingsConfig
        try {
            LoginSessionsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for LoginSessionsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with MonadLogSettingsConfig
        try {
            MonadLogSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for MonadLogSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OauthActivitySettingsConfig
        try {
            OauthActivitySettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OauthActivitySettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with RolesInfoSettingsConfig
        try {
            RolesInfoSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for RolesInfoSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepDeploymentsSettingsConfig
        try {
            SemgrepDeploymentsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepDeploymentsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepProjectDetailsSettingsConfig
        try {
            SemgrepProjectDetailsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepProjectDetailsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SemgrepProjectsSettingsConfig
        try {
            SemgrepProjectsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SemgrepProjectsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SlackUsersSettingsConfig
        try {
            SlackUsersSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SlackUsersSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SlackgroupsSettingsConfig
        try {
            SlackgroupsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SlackgroupsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykOrganizationsSettingsConfig
        try {
            SnykOrganizationsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykOrganizationsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnykProjectsSettingsConfig
        try {
            SnykProjectsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnykProjectsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UsersSettingsConfig
        try {
            UsersSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UsersSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with UsersInfoSettingsConfig
        try {
            UsersInfoSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for UsersInfoSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VulnerabilitiesSettingsConfig
        try {
            VulnerabilitiesSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VulnerabilitiesSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with VulnerabilityFindingsSettingsConfig
        try {
            VulnerabilityFindingsSettingsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for VulnerabilityFindingsSettingsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for RoutesV2InputConfigSettings with oneOf schemas: ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AzureActivityLogsSettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, Object, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of RoutesV2InputConfigSettings given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RoutesV2InputConfigSettings
     * @throws IOException if the JSON string is invalid with respect to RoutesV2InputConfigSettings
     */
    public static RoutesV2InputConfigSettings fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RoutesV2InputConfigSettings.class);
    }

    /**
     * Convert an instance of RoutesV2InputConfigSettings to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

