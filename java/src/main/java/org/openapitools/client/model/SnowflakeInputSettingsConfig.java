/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Snowflake Input Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-17T16:42:13.012818676Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class SnowflakeInputSettingsConfig {
  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  @javax.annotation.Nullable
  private String account;

  public static final String SERIALIZED_NAME_AUTH_TYPE = "auth_type";
  @SerializedName(SERIALIZED_NAME_AUTH_TYPE)
  @javax.annotation.Nullable
  private String authType;

  public static final String SERIALIZED_NAME_CRON = "cron";
  @SerializedName(SERIALIZED_NAME_CRON)
  @javax.annotation.Nullable
  private String cron;

  public static final String SERIALIZED_NAME_DATABASE = "database";
  @SerializedName(SERIALIZED_NAME_DATABASE)
  @javax.annotation.Nullable
  private String database;

  public static final String SERIALIZED_NAME_QUERY = "query";
  @SerializedName(SERIALIZED_NAME_QUERY)
  @javax.annotation.Nullable
  private String query;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  @javax.annotation.Nullable
  private String role;

  public static final String SERIALIZED_NAME_SCHEMA = "schema";
  @SerializedName(SERIALIZED_NAME_SCHEMA)
  @javax.annotation.Nullable
  private String schema;

  public static final String SERIALIZED_NAME_TABLE = "table";
  @SerializedName(SERIALIZED_NAME_TABLE)
  @javax.annotation.Nullable
  private String table;

  public static final String SERIALIZED_NAME_TIMESTAMP_COLUMN = "timestamp_column";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP_COLUMN)
  @javax.annotation.Nullable
  private String timestampColumn;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nullable
  private String user;

  public static final String SERIALIZED_NAME_WAREHOUSE = "warehouse";
  @SerializedName(SERIALIZED_NAME_WAREHOUSE)
  @javax.annotation.Nullable
  private String warehouse;

  public SnowflakeInputSettingsConfig() {
  }

  public SnowflakeInputSettingsConfig account(@javax.annotation.Nullable String account) {
    this.account = account;
    return this;
  }

  /**
   * The unique identifier for your Snowflake account, typically in the form of &#39;organization-account_name&#39;.
   * @return account
   */
  @javax.annotation.Nullable
  public String getAccount() {
    return account;
  }

  public void setAccount(@javax.annotation.Nullable String account) {
    this.account = account;
  }


  public SnowflakeInputSettingsConfig authType(@javax.annotation.Nullable String authType) {
    this.authType = authType;
    return this;
  }

  /**
   * Authentication type: \&quot;password\&quot; or \&quot;private key\&quot;
   * @return authType
   */
  @javax.annotation.Nullable
  public String getAuthType() {
    return authType;
  }

  public void setAuthType(@javax.annotation.Nullable String authType) {
    this.authType = authType;
  }


  public SnowflakeInputSettingsConfig cron(@javax.annotation.Nullable String cron) {
    this.cron = cron;
    return this;
  }

  /**
   * Cron string for scheduling the ingest of your input
   * @return cron
   */
  @javax.annotation.Nullable
  public String getCron() {
    return cron;
  }

  public void setCron(@javax.annotation.Nullable String cron) {
    this.cron = cron;
  }


  public SnowflakeInputSettingsConfig database(@javax.annotation.Nullable String database) {
    this.database = database;
    return this;
  }

  /**
   * The name of the Snowflake database to connect to and perform operations on
   * @return database
   */
  @javax.annotation.Nullable
  public String getDatabase() {
    return database;
  }

  public void setDatabase(@javax.annotation.Nullable String database) {
    this.database = database;
  }


  public SnowflakeInputSettingsConfig query(@javax.annotation.Nullable String query) {
    this.query = query;
    return this;
  }

  /**
   * Optional custom query to use instead of table (must include timestamp_column)
   * @return query
   */
  @javax.annotation.Nullable
  public String getQuery() {
    return query;
  }

  public void setQuery(@javax.annotation.Nullable String query) {
    this.query = query;
  }


  public SnowflakeInputSettingsConfig role(@javax.annotation.Nullable String role) {
    this.role = role;
    return this;
  }

  /**
   * The name of the Role your service account was granted which can access your resources.
   * @return role
   */
  @javax.annotation.Nullable
  public String getRole() {
    return role;
  }

  public void setRole(@javax.annotation.Nullable String role) {
    this.role = role;
  }


  public SnowflakeInputSettingsConfig schema(@javax.annotation.Nullable String schema) {
    this.schema = schema;
    return this;
  }

  /**
   * The schema within the Snowflake database where the target table resides.
   * @return schema
   */
  @javax.annotation.Nullable
  public String getSchema() {
    return schema;
  }

  public void setSchema(@javax.annotation.Nullable String schema) {
    this.schema = schema;
  }


  public SnowflakeInputSettingsConfig table(@javax.annotation.Nullable String table) {
    this.table = table;
    return this;
  }

  /**
   * The name of the table in Snowflake to query data from.
   * @return table
   */
  @javax.annotation.Nullable
  public String getTable() {
    return table;
  }

  public void setTable(@javax.annotation.Nullable String table) {
    this.table = table;
  }


  public SnowflakeInputSettingsConfig timestampColumn(@javax.annotation.Nullable String timestampColumn) {
    this.timestampColumn = timestampColumn;
    return this;
  }

  /**
   * The column containing timestamp values used for incremental loading
   * @return timestampColumn
   */
  @javax.annotation.Nullable
  public String getTimestampColumn() {
    return timestampColumn;
  }

  public void setTimestampColumn(@javax.annotation.Nullable String timestampColumn) {
    this.timestampColumn = timestampColumn;
  }


  public SnowflakeInputSettingsConfig user(@javax.annotation.Nullable String user) {
    this.user = user;
    return this;
  }

  /**
   * The username of the Snowflake account used to establish the connection.
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nullable String user) {
    this.user = user;
  }


  public SnowflakeInputSettingsConfig warehouse(@javax.annotation.Nullable String warehouse) {
    this.warehouse = warehouse;
    return this;
  }

  /**
   * The Snowflake virtual warehouse to use for executing queries and processing data.
   * @return warehouse
   */
  @javax.annotation.Nullable
  public String getWarehouse() {
    return warehouse;
  }

  public void setWarehouse(@javax.annotation.Nullable String warehouse) {
    this.warehouse = warehouse;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SnowflakeInputSettingsConfig snowflakeInputSettingsConfig = (SnowflakeInputSettingsConfig) o;
    return Objects.equals(this.account, snowflakeInputSettingsConfig.account) &&
        Objects.equals(this.authType, snowflakeInputSettingsConfig.authType) &&
        Objects.equals(this.cron, snowflakeInputSettingsConfig.cron) &&
        Objects.equals(this.database, snowflakeInputSettingsConfig.database) &&
        Objects.equals(this.query, snowflakeInputSettingsConfig.query) &&
        Objects.equals(this.role, snowflakeInputSettingsConfig.role) &&
        Objects.equals(this.schema, snowflakeInputSettingsConfig.schema) &&
        Objects.equals(this.table, snowflakeInputSettingsConfig.table) &&
        Objects.equals(this.timestampColumn, snowflakeInputSettingsConfig.timestampColumn) &&
        Objects.equals(this.user, snowflakeInputSettingsConfig.user) &&
        Objects.equals(this.warehouse, snowflakeInputSettingsConfig.warehouse);
  }

  @Override
  public int hashCode() {
    return Objects.hash(account, authType, cron, database, query, role, schema, table, timestampColumn, user, warehouse);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SnowflakeInputSettingsConfig {\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    authType: ").append(toIndentedString(authType)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    database: ").append(toIndentedString(database)).append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    schema: ").append(toIndentedString(schema)).append("\n");
    sb.append("    table: ").append(toIndentedString(table)).append("\n");
    sb.append("    timestampColumn: ").append(toIndentedString(timestampColumn)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    warehouse: ").append(toIndentedString(warehouse)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("account", "auth_type", "cron", "database", "query", "role", "schema", "table", "timestamp_column", "user", "warehouse"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SnowflakeInputSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SnowflakeInputSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SnowflakeInputSettingsConfig is not found in the empty JSON string", SnowflakeInputSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SnowflakeInputSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SnowflakeInputSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("auth_type") != null && !jsonObj.get("auth_type").isJsonNull()) && !jsonObj.get("auth_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `auth_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("auth_type").toString()));
      }
      if ((jsonObj.get("cron") != null && !jsonObj.get("cron").isJsonNull()) && !jsonObj.get("cron").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cron` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cron").toString()));
      }
      if ((jsonObj.get("database") != null && !jsonObj.get("database").isJsonNull()) && !jsonObj.get("database").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `database` to be a primitive type in the JSON string but got `%s`", jsonObj.get("database").toString()));
      }
      if ((jsonObj.get("query") != null && !jsonObj.get("query").isJsonNull()) && !jsonObj.get("query").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `query` to be a primitive type in the JSON string but got `%s`", jsonObj.get("query").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      if ((jsonObj.get("schema") != null && !jsonObj.get("schema").isJsonNull()) && !jsonObj.get("schema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schema").toString()));
      }
      if ((jsonObj.get("table") != null && !jsonObj.get("table").isJsonNull()) && !jsonObj.get("table").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `table` to be a primitive type in the JSON string but got `%s`", jsonObj.get("table").toString()));
      }
      if ((jsonObj.get("timestamp_column") != null && !jsonObj.get("timestamp_column").isJsonNull()) && !jsonObj.get("timestamp_column").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timestamp_column` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timestamp_column").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
      if ((jsonObj.get("warehouse") != null && !jsonObj.get("warehouse").isJsonNull()) && !jsonObj.get("warehouse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `warehouse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("warehouse").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SnowflakeInputSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SnowflakeInputSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SnowflakeInputSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SnowflakeInputSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SnowflakeInputSettingsConfig>() {
           @Override
           public void write(JsonWriter out, SnowflakeInputSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SnowflakeInputSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SnowflakeInputSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SnowflakeInputSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to SnowflakeInputSettingsConfig
   */
  public static SnowflakeInputSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SnowflakeInputSettingsConfig.class);
  }

  /**
   * Convert an instance of SnowflakeInputSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

