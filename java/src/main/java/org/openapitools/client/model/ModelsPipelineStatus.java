/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ModelsDataUsage;
import org.openapitools.client.model.ModelsPipelineNodeStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsPipelineStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-11T18:00:51.126379750Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ModelsPipelineStatus {
  public static final String SERIALIZED_NAME_EGRESS = "egress";
  @SerializedName(SERIALIZED_NAME_EGRESS)
  @javax.annotation.Nullable
  private ModelsDataUsage egress;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  @javax.annotation.Nullable
  private Integer errors;

  public static final String SERIALIZED_NAME_INGRESS = "ingress";
  @SerializedName(SERIALIZED_NAME_INGRESS)
  @javax.annotation.Nullable
  private ModelsDataUsage ingress;

  public static final String SERIALIZED_NAME_NODES = "nodes";
  @SerializedName(SERIALIZED_NAME_NODES)
  @javax.annotation.Nullable
  private List<ModelsPipelineNodeStatus> nodes = new ArrayList<>();

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  @javax.annotation.Nullable
  private String organizationId;

  public static final String SERIALIZED_NAME_PIPELINE_ID = "pipeline_id";
  @SerializedName(SERIALIZED_NAME_PIPELINE_ID)
  @javax.annotation.Nullable
  private String pipelineId;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public ModelsPipelineStatus() {
  }

  public ModelsPipelineStatus egress(@javax.annotation.Nullable ModelsDataUsage egress) {
    this.egress = egress;
    return this;
  }

  /**
   * Get egress
   * @return egress
   */
  @javax.annotation.Nullable
  public ModelsDataUsage getEgress() {
    return egress;
  }

  public void setEgress(@javax.annotation.Nullable ModelsDataUsage egress) {
    this.egress = egress;
  }


  public ModelsPipelineStatus errors(@javax.annotation.Nullable Integer errors) {
    this.errors = errors;
    return this;
  }

  /**
   * Get errors
   * @return errors
   */
  @javax.annotation.Nullable
  public Integer getErrors() {
    return errors;
  }

  public void setErrors(@javax.annotation.Nullable Integer errors) {
    this.errors = errors;
  }


  public ModelsPipelineStatus ingress(@javax.annotation.Nullable ModelsDataUsage ingress) {
    this.ingress = ingress;
    return this;
  }

  /**
   * Get ingress
   * @return ingress
   */
  @javax.annotation.Nullable
  public ModelsDataUsage getIngress() {
    return ingress;
  }

  public void setIngress(@javax.annotation.Nullable ModelsDataUsage ingress) {
    this.ingress = ingress;
  }


  public ModelsPipelineStatus nodes(@javax.annotation.Nullable List<ModelsPipelineNodeStatus> nodes) {
    this.nodes = nodes;
    return this;
  }

  public ModelsPipelineStatus addNodesItem(ModelsPipelineNodeStatus nodesItem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<>();
    }
    this.nodes.add(nodesItem);
    return this;
  }

  /**
   * Get nodes
   * @return nodes
   */
  @javax.annotation.Nullable
  public List<ModelsPipelineNodeStatus> getNodes() {
    return nodes;
  }

  public void setNodes(@javax.annotation.Nullable List<ModelsPipelineNodeStatus> nodes) {
    this.nodes = nodes;
  }


  public ModelsPipelineStatus organizationId(@javax.annotation.Nullable String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Get organizationId
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(@javax.annotation.Nullable String organizationId) {
    this.organizationId = organizationId;
  }


  public ModelsPipelineStatus pipelineId(@javax.annotation.Nullable String pipelineId) {
    this.pipelineId = pipelineId;
    return this;
  }

  /**
   * Get pipelineId
   * @return pipelineId
   */
  @javax.annotation.Nullable
  public String getPipelineId() {
    return pipelineId;
  }

  public void setPipelineId(@javax.annotation.Nullable String pipelineId) {
    this.pipelineId = pipelineId;
  }


  public ModelsPipelineStatus status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsPipelineStatus modelsPipelineStatus = (ModelsPipelineStatus) o;
    return Objects.equals(this.egress, modelsPipelineStatus.egress) &&
        Objects.equals(this.errors, modelsPipelineStatus.errors) &&
        Objects.equals(this.ingress, modelsPipelineStatus.ingress) &&
        Objects.equals(this.nodes, modelsPipelineStatus.nodes) &&
        Objects.equals(this.organizationId, modelsPipelineStatus.organizationId) &&
        Objects.equals(this.pipelineId, modelsPipelineStatus.pipelineId) &&
        Objects.equals(this.status, modelsPipelineStatus.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(egress, errors, ingress, nodes, organizationId, pipelineId, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsPipelineStatus {\n");
    sb.append("    egress: ").append(toIndentedString(egress)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    ingress: ").append(toIndentedString(ingress)).append("\n");
    sb.append("    nodes: ").append(toIndentedString(nodes)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    pipelineId: ").append(toIndentedString(pipelineId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("egress");
    openapiFields.add("errors");
    openapiFields.add("ingress");
    openapiFields.add("nodes");
    openapiFields.add("organization_id");
    openapiFields.add("pipeline_id");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelsPipelineStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelsPipelineStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsPipelineStatus is not found in the empty JSON string", ModelsPipelineStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelsPipelineStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsPipelineStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `egress`
      if (jsonObj.get("egress") != null && !jsonObj.get("egress").isJsonNull()) {
        ModelsDataUsage.validateJsonElement(jsonObj.get("egress"));
      }
      // validate the optional field `ingress`
      if (jsonObj.get("ingress") != null && !jsonObj.get("ingress").isJsonNull()) {
        ModelsDataUsage.validateJsonElement(jsonObj.get("ingress"));
      }
      if (jsonObj.get("nodes") != null && !jsonObj.get("nodes").isJsonNull()) {
        JsonArray jsonArraynodes = jsonObj.getAsJsonArray("nodes");
        if (jsonArraynodes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nodes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nodes` to be an array in the JSON string but got `%s`", jsonObj.get("nodes").toString()));
          }

          // validate the optional field `nodes` (array)
          for (int i = 0; i < jsonArraynodes.size(); i++) {
            ModelsPipelineNodeStatus.validateJsonElement(jsonArraynodes.get(i));
          };
        }
      }
      if ((jsonObj.get("organization_id") != null && !jsonObj.get("organization_id").isJsonNull()) && !jsonObj.get("organization_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_id").toString()));
      }
      if ((jsonObj.get("pipeline_id") != null && !jsonObj.get("pipeline_id").isJsonNull()) && !jsonObj.get("pipeline_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipeline_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipeline_id").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsPipelineStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsPipelineStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsPipelineStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsPipelineStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsPipelineStatus>() {
           @Override
           public void write(JsonWriter out, ModelsPipelineStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsPipelineStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelsPipelineStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelsPipelineStatus
   * @throws IOException if the JSON string is invalid with respect to ModelsPipelineStatus
   */
  public static ModelsPipelineStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsPipelineStatus.class);
  }

  /**
   * Convert an instance of ModelsPipelineStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

