/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ModelsNodeComponent;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsPipelineNode
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-11T21:08:52.138462016Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class ModelsPipelineNode {
  public static final String SERIALIZED_NAME_COMPONENT = "component";
  @SerializedName(SERIALIZED_NAME_COMPONENT)
  @javax.annotation.Nullable
  private ModelsNodeComponent component;

  public static final String SERIALIZED_NAME_COMPONENT_ID = "component_id";
  @SerializedName(SERIALIZED_NAME_COMPONENT_ID)
  @javax.annotation.Nullable
  private String componentId;

  public static final String SERIALIZED_NAME_COMPONENT_SUB_TYPE = "component_sub_type";
  @SerializedName(SERIALIZED_NAME_COMPONENT_SUB_TYPE)
  @javax.annotation.Nullable
  private String componentSubType;

  public static final String SERIALIZED_NAME_COMPONENT_TYPE = "component_type";
  @SerializedName(SERIALIZED_NAME_COMPONENT_TYPE)
  @javax.annotation.Nullable
  private String componentType;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private String createdAt;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  @javax.annotation.Nullable
  private String organizationId;

  public static final String SERIALIZED_NAME_PIPELINE_ID = "pipeline_id";
  @SerializedName(SERIALIZED_NAME_PIPELINE_ID)
  @javax.annotation.Nullable
  private String pipelineId;

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  @javax.annotation.Nullable
  private String slug;

  public ModelsPipelineNode() {
  }

  public ModelsPipelineNode component(@javax.annotation.Nullable ModelsNodeComponent component) {
    this.component = component;
    return this;
  }

  /**
   * Get component
   * @return component
   */
  @javax.annotation.Nullable
  public ModelsNodeComponent getComponent() {
    return component;
  }

  public void setComponent(@javax.annotation.Nullable ModelsNodeComponent component) {
    this.component = component;
  }


  public ModelsPipelineNode componentId(@javax.annotation.Nullable String componentId) {
    this.componentId = componentId;
    return this;
  }

  /**
   * Get componentId
   * @return componentId
   */
  @javax.annotation.Nullable
  public String getComponentId() {
    return componentId;
  }

  public void setComponentId(@javax.annotation.Nullable String componentId) {
    this.componentId = componentId;
  }


  public ModelsPipelineNode componentSubType(@javax.annotation.Nullable String componentSubType) {
    this.componentSubType = componentSubType;
    return this;
  }

  /**
   * Get componentSubType
   * @return componentSubType
   */
  @javax.annotation.Nullable
  public String getComponentSubType() {
    return componentSubType;
  }

  public void setComponentSubType(@javax.annotation.Nullable String componentSubType) {
    this.componentSubType = componentSubType;
  }


  public ModelsPipelineNode componentType(@javax.annotation.Nullable String componentType) {
    this.componentType = componentType;
    return this;
  }

  /**
   * Get componentType
   * @return componentType
   */
  @javax.annotation.Nullable
  public String getComponentType() {
    return componentType;
  }

  public void setComponentType(@javax.annotation.Nullable String componentType) {
    this.componentType = componentType;
  }


  public ModelsPipelineNode createdAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
  }


  public ModelsPipelineNode enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public ModelsPipelineNode id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public ModelsPipelineNode organizationId(@javax.annotation.Nullable String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Get organizationId
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(@javax.annotation.Nullable String organizationId) {
    this.organizationId = organizationId;
  }


  public ModelsPipelineNode pipelineId(@javax.annotation.Nullable String pipelineId) {
    this.pipelineId = pipelineId;
    return this;
  }

  /**
   * Get pipelineId
   * @return pipelineId
   */
  @javax.annotation.Nullable
  public String getPipelineId() {
    return pipelineId;
  }

  public void setPipelineId(@javax.annotation.Nullable String pipelineId) {
    this.pipelineId = pipelineId;
  }


  public ModelsPipelineNode slug(@javax.annotation.Nullable String slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nullable
  public String getSlug() {
    return slug;
  }

  public void setSlug(@javax.annotation.Nullable String slug) {
    this.slug = slug;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsPipelineNode modelsPipelineNode = (ModelsPipelineNode) o;
    return Objects.equals(this.component, modelsPipelineNode.component) &&
        Objects.equals(this.componentId, modelsPipelineNode.componentId) &&
        Objects.equals(this.componentSubType, modelsPipelineNode.componentSubType) &&
        Objects.equals(this.componentType, modelsPipelineNode.componentType) &&
        Objects.equals(this.createdAt, modelsPipelineNode.createdAt) &&
        Objects.equals(this.enabled, modelsPipelineNode.enabled) &&
        Objects.equals(this.id, modelsPipelineNode.id) &&
        Objects.equals(this.organizationId, modelsPipelineNode.organizationId) &&
        Objects.equals(this.pipelineId, modelsPipelineNode.pipelineId) &&
        Objects.equals(this.slug, modelsPipelineNode.slug);
  }

  @Override
  public int hashCode() {
    return Objects.hash(component, componentId, componentSubType, componentType, createdAt, enabled, id, organizationId, pipelineId, slug);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsPipelineNode {\n");
    sb.append("    component: ").append(toIndentedString(component)).append("\n");
    sb.append("    componentId: ").append(toIndentedString(componentId)).append("\n");
    sb.append("    componentSubType: ").append(toIndentedString(componentSubType)).append("\n");
    sb.append("    componentType: ").append(toIndentedString(componentType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    pipelineId: ").append(toIndentedString(pipelineId)).append("\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("component");
    openapiFields.add("component_id");
    openapiFields.add("component_sub_type");
    openapiFields.add("component_type");
    openapiFields.add("created_at");
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("organization_id");
    openapiFields.add("pipeline_id");
    openapiFields.add("slug");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelsPipelineNode
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelsPipelineNode.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsPipelineNode is not found in the empty JSON string", ModelsPipelineNode.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelsPipelineNode.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsPipelineNode` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `component`
      if (jsonObj.get("component") != null && !jsonObj.get("component").isJsonNull()) {
        ModelsNodeComponent.validateJsonElement(jsonObj.get("component"));
      }
      if ((jsonObj.get("component_id") != null && !jsonObj.get("component_id").isJsonNull()) && !jsonObj.get("component_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component_id").toString()));
      }
      if ((jsonObj.get("component_sub_type") != null && !jsonObj.get("component_sub_type").isJsonNull()) && !jsonObj.get("component_sub_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component_sub_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component_sub_type").toString()));
      }
      if ((jsonObj.get("component_type") != null && !jsonObj.get("component_type").isJsonNull()) && !jsonObj.get("component_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `component_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("component_type").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("organization_id") != null && !jsonObj.get("organization_id").isJsonNull()) && !jsonObj.get("organization_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_id").toString()));
      }
      if ((jsonObj.get("pipeline_id") != null && !jsonObj.get("pipeline_id").isJsonNull()) && !jsonObj.get("pipeline_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipeline_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipeline_id").toString()));
      }
      if ((jsonObj.get("slug") != null && !jsonObj.get("slug").isJsonNull()) && !jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsPipelineNode.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsPipelineNode' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsPipelineNode> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsPipelineNode.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsPipelineNode>() {
           @Override
           public void write(JsonWriter out, ModelsPipelineNode value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsPipelineNode read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelsPipelineNode given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelsPipelineNode
   * @throws IOException if the JSON string is invalid with respect to ModelsPipelineNode
   */
  public static ModelsPipelineNode fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsPipelineNode.class);
  }

  /**
   * Convert an instance of ModelsPipelineNode to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

