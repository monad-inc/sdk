/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.DelimitedDelimiterFormatter;
import org.openapitools.client.model.JsonJsonFormatter;
import org.openapitools.client.model.ParquetParquetFormatter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The format config to use
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-10T16:43:41.826791519Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class FormatterFormatConfig {
  public static final String SERIALIZED_NAME_FORMAT = "Format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  @javax.annotation.Nullable
  private String format;

  public static final String SERIALIZED_NAME_DELIMITED_FORMAT = "delimited_format";
  @SerializedName(SERIALIZED_NAME_DELIMITED_FORMAT)
  @javax.annotation.Nullable
  private DelimitedDelimiterFormatter delimitedFormat;

  public static final String SERIALIZED_NAME_JSON_FORMAT = "json_format";
  @SerializedName(SERIALIZED_NAME_JSON_FORMAT)
  @javax.annotation.Nullable
  private JsonJsonFormatter jsonFormat;

  public static final String SERIALIZED_NAME_PARQUET_FORMAT = "parquet_format";
  @SerializedName(SERIALIZED_NAME_PARQUET_FORMAT)
  @javax.annotation.Nullable
  private ParquetParquetFormatter parquetFormat;

  public FormatterFormatConfig() {
  }

  public FormatterFormatConfig format(@javax.annotation.Nullable String format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(@javax.annotation.Nullable String format) {
    this.format = format;
  }


  public FormatterFormatConfig delimitedFormat(@javax.annotation.Nullable DelimitedDelimiterFormatter delimitedFormat) {
    this.delimitedFormat = delimitedFormat;
    return this;
  }

  /**
   * Get delimitedFormat
   * @return delimitedFormat
   */
  @javax.annotation.Nullable
  public DelimitedDelimiterFormatter getDelimitedFormat() {
    return delimitedFormat;
  }

  public void setDelimitedFormat(@javax.annotation.Nullable DelimitedDelimiterFormatter delimitedFormat) {
    this.delimitedFormat = delimitedFormat;
  }


  public FormatterFormatConfig jsonFormat(@javax.annotation.Nullable JsonJsonFormatter jsonFormat) {
    this.jsonFormat = jsonFormat;
    return this;
  }

  /**
   * Get jsonFormat
   * @return jsonFormat
   */
  @javax.annotation.Nullable
  public JsonJsonFormatter getJsonFormat() {
    return jsonFormat;
  }

  public void setJsonFormat(@javax.annotation.Nullable JsonJsonFormatter jsonFormat) {
    this.jsonFormat = jsonFormat;
  }


  public FormatterFormatConfig parquetFormat(@javax.annotation.Nullable ParquetParquetFormatter parquetFormat) {
    this.parquetFormat = parquetFormat;
    return this;
  }

  /**
   * Get parquetFormat
   * @return parquetFormat
   */
  @javax.annotation.Nullable
  public ParquetParquetFormatter getParquetFormat() {
    return parquetFormat;
  }

  public void setParquetFormat(@javax.annotation.Nullable ParquetParquetFormatter parquetFormat) {
    this.parquetFormat = parquetFormat;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FormatterFormatConfig formatterFormatConfig = (FormatterFormatConfig) o;
    return Objects.equals(this.format, formatterFormatConfig.format) &&
        Objects.equals(this.delimitedFormat, formatterFormatConfig.delimitedFormat) &&
        Objects.equals(this.jsonFormat, formatterFormatConfig.jsonFormat) &&
        Objects.equals(this.parquetFormat, formatterFormatConfig.parquetFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(format, delimitedFormat, jsonFormat, parquetFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FormatterFormatConfig {\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    delimitedFormat: ").append(toIndentedString(delimitedFormat)).append("\n");
    sb.append("    jsonFormat: ").append(toIndentedString(jsonFormat)).append("\n");
    sb.append("    parquetFormat: ").append(toIndentedString(parquetFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("Format", "delimited_format", "json_format", "parquet_format"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FormatterFormatConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FormatterFormatConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FormatterFormatConfig is not found in the empty JSON string", FormatterFormatConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FormatterFormatConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FormatterFormatConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Format") != null && !jsonObj.get("Format").isJsonNull()) && !jsonObj.get("Format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Format").toString()));
      }
      // validate the optional field `delimited_format`
      if (jsonObj.get("delimited_format") != null && !jsonObj.get("delimited_format").isJsonNull()) {
        DelimitedDelimiterFormatter.validateJsonElement(jsonObj.get("delimited_format"));
      }
      // validate the optional field `json_format`
      if (jsonObj.get("json_format") != null && !jsonObj.get("json_format").isJsonNull()) {
        JsonJsonFormatter.validateJsonElement(jsonObj.get("json_format"));
      }
      // validate the optional field `parquet_format`
      if (jsonObj.get("parquet_format") != null && !jsonObj.get("parquet_format").isJsonNull()) {
        ParquetParquetFormatter.validateJsonElement(jsonObj.get("parquet_format"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FormatterFormatConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FormatterFormatConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FormatterFormatConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FormatterFormatConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<FormatterFormatConfig>() {
           @Override
           public void write(JsonWriter out, FormatterFormatConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FormatterFormatConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FormatterFormatConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FormatterFormatConfig
   * @throws IOException if the JSON string is invalid with respect to FormatterFormatConfig
   */
  public static FormatterFormatConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FormatterFormatConfig.class);
  }

  /**
   * Convert an instance of FormatterFormatConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

