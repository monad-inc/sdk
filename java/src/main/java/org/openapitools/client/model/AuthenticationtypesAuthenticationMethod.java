/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AuthenticationtypesAuthenticationMethod
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T23:18:04.745866179Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class AuthenticationtypesAuthenticationMethod {
  public static final String SERIALIZED_NAME_CONFIRMED = "confirmed";
  @SerializedName(SERIALIZED_NAME_CONFIRMED)
  @javax.annotation.Nullable
  private Boolean confirmed;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private String createdAt;

  public static final String SERIALIZED_NAME_CREDENTIAL_BACKED_UP = "credential_backed_up";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_BACKED_UP)
  @javax.annotation.Nullable
  private Boolean credentialBackedUp;

  public static final String SERIALIZED_NAME_CREDENTIAL_DEVICE_TYPE = "credential_device_type";
  @SerializedName(SERIALIZED_NAME_CREDENTIAL_DEVICE_TYPE)
  @javax.annotation.Nullable
  private String credentialDeviceType;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  @javax.annotation.Nullable
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private String id;

  public static final String SERIALIZED_NAME_KEY_ID = "key_id";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  @javax.annotation.Nullable
  private String keyId;

  public static final String SERIALIZED_NAME_LINK_ID = "link_id";
  @SerializedName(SERIALIZED_NAME_LINK_ID)
  @javax.annotation.Nullable
  private String linkId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phone_number";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nullable
  private String phoneNumber;

  public static final String SERIALIZED_NAME_PUBLIC_KEY = "public_key";
  @SerializedName(SERIALIZED_NAME_PUBLIC_KEY)
  @javax.annotation.Nullable
  private String publicKey;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  @javax.annotation.Nullable
  private String type;

  public static final String SERIALIZED_NAME_USER_AGENT = "user_agent";
  @SerializedName(SERIALIZED_NAME_USER_AGENT)
  @javax.annotation.Nullable
  private String userAgent;

  public AuthenticationtypesAuthenticationMethod() {
  }

  public AuthenticationtypesAuthenticationMethod confirmed(@javax.annotation.Nullable Boolean confirmed) {
    this.confirmed = confirmed;
    return this;
  }

  /**
   * Get confirmed
   * @return confirmed
   */
  @javax.annotation.Nullable
  public Boolean getConfirmed() {
    return confirmed;
  }

  public void setConfirmed(@javax.annotation.Nullable Boolean confirmed) {
    this.confirmed = confirmed;
  }


  public AuthenticationtypesAuthenticationMethod createdAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public String getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable String createdAt) {
    this.createdAt = createdAt;
  }


  public AuthenticationtypesAuthenticationMethod credentialBackedUp(@javax.annotation.Nullable Boolean credentialBackedUp) {
    this.credentialBackedUp = credentialBackedUp;
    return this;
  }

  /**
   * Get credentialBackedUp
   * @return credentialBackedUp
   */
  @javax.annotation.Nullable
  public Boolean getCredentialBackedUp() {
    return credentialBackedUp;
  }

  public void setCredentialBackedUp(@javax.annotation.Nullable Boolean credentialBackedUp) {
    this.credentialBackedUp = credentialBackedUp;
  }


  public AuthenticationtypesAuthenticationMethod credentialDeviceType(@javax.annotation.Nullable String credentialDeviceType) {
    this.credentialDeviceType = credentialDeviceType;
    return this;
  }

  /**
   * Get credentialDeviceType
   * @return credentialDeviceType
   */
  @javax.annotation.Nullable
  public String getCredentialDeviceType() {
    return credentialDeviceType;
  }

  public void setCredentialDeviceType(@javax.annotation.Nullable String credentialDeviceType) {
    this.credentialDeviceType = credentialDeviceType;
  }


  public AuthenticationtypesAuthenticationMethod email(@javax.annotation.Nullable String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(@javax.annotation.Nullable String email) {
    this.email = email;
  }


  public AuthenticationtypesAuthenticationMethod id(@javax.annotation.Nullable String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable String id) {
    this.id = id;
  }


  public AuthenticationtypesAuthenticationMethod keyId(@javax.annotation.Nullable String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * Get keyId
   * @return keyId
   */
  @javax.annotation.Nullable
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(@javax.annotation.Nullable String keyId) {
    this.keyId = keyId;
  }


  public AuthenticationtypesAuthenticationMethod linkId(@javax.annotation.Nullable String linkId) {
    this.linkId = linkId;
    return this;
  }

  /**
   * Get linkId
   * @return linkId
   */
  @javax.annotation.Nullable
  public String getLinkId() {
    return linkId;
  }

  public void setLinkId(@javax.annotation.Nullable String linkId) {
    this.linkId = linkId;
  }


  public AuthenticationtypesAuthenticationMethod name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AuthenticationtypesAuthenticationMethod phoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nullable
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nullable String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public AuthenticationtypesAuthenticationMethod publicKey(@javax.annotation.Nullable String publicKey) {
    this.publicKey = publicKey;
    return this;
  }

  /**
   * Get publicKey
   * @return publicKey
   */
  @javax.annotation.Nullable
  public String getPublicKey() {
    return publicKey;
  }

  public void setPublicKey(@javax.annotation.Nullable String publicKey) {
    this.publicKey = publicKey;
  }


  public AuthenticationtypesAuthenticationMethod type(@javax.annotation.Nullable String type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(@javax.annotation.Nullable String type) {
    this.type = type;
  }


  public AuthenticationtypesAuthenticationMethod userAgent(@javax.annotation.Nullable String userAgent) {
    this.userAgent = userAgent;
    return this;
  }

  /**
   * Get userAgent
   * @return userAgent
   */
  @javax.annotation.Nullable
  public String getUserAgent() {
    return userAgent;
  }

  public void setUserAgent(@javax.annotation.Nullable String userAgent) {
    this.userAgent = userAgent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuthenticationtypesAuthenticationMethod authenticationtypesAuthenticationMethod = (AuthenticationtypesAuthenticationMethod) o;
    return Objects.equals(this.confirmed, authenticationtypesAuthenticationMethod.confirmed) &&
        Objects.equals(this.createdAt, authenticationtypesAuthenticationMethod.createdAt) &&
        Objects.equals(this.credentialBackedUp, authenticationtypesAuthenticationMethod.credentialBackedUp) &&
        Objects.equals(this.credentialDeviceType, authenticationtypesAuthenticationMethod.credentialDeviceType) &&
        Objects.equals(this.email, authenticationtypesAuthenticationMethod.email) &&
        Objects.equals(this.id, authenticationtypesAuthenticationMethod.id) &&
        Objects.equals(this.keyId, authenticationtypesAuthenticationMethod.keyId) &&
        Objects.equals(this.linkId, authenticationtypesAuthenticationMethod.linkId) &&
        Objects.equals(this.name, authenticationtypesAuthenticationMethod.name) &&
        Objects.equals(this.phoneNumber, authenticationtypesAuthenticationMethod.phoneNumber) &&
        Objects.equals(this.publicKey, authenticationtypesAuthenticationMethod.publicKey) &&
        Objects.equals(this.type, authenticationtypesAuthenticationMethod.type) &&
        Objects.equals(this.userAgent, authenticationtypesAuthenticationMethod.userAgent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confirmed, createdAt, credentialBackedUp, credentialDeviceType, email, id, keyId, linkId, name, phoneNumber, publicKey, type, userAgent);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuthenticationtypesAuthenticationMethod {\n");
    sb.append("    confirmed: ").append(toIndentedString(confirmed)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    credentialBackedUp: ").append(toIndentedString(credentialBackedUp)).append("\n");
    sb.append("    credentialDeviceType: ").append(toIndentedString(credentialDeviceType)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    linkId: ").append(toIndentedString(linkId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    publicKey: ").append(toIndentedString(publicKey)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    userAgent: ").append(toIndentedString(userAgent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("confirmed", "created_at", "credential_backed_up", "credential_device_type", "email", "id", "key_id", "link_id", "name", "phone_number", "public_key", "type", "user_agent"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuthenticationtypesAuthenticationMethod
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuthenticationtypesAuthenticationMethod.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuthenticationtypesAuthenticationMethod is not found in the empty JSON string", AuthenticationtypesAuthenticationMethod.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuthenticationtypesAuthenticationMethod.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuthenticationtypesAuthenticationMethod` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("credential_device_type") != null && !jsonObj.get("credential_device_type").isJsonNull()) && !jsonObj.get("credential_device_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `credential_device_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("credential_device_type").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("key_id") != null && !jsonObj.get("key_id").isJsonNull()) && !jsonObj.get("key_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_id").toString()));
      }
      if ((jsonObj.get("link_id") != null && !jsonObj.get("link_id").isJsonNull()) && !jsonObj.get("link_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `link_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("link_id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phone_number") != null && !jsonObj.get("phone_number").isJsonNull()) && !jsonObj.get("phone_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phone_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phone_number").toString()));
      }
      if ((jsonObj.get("public_key") != null && !jsonObj.get("public_key").isJsonNull()) && !jsonObj.get("public_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `public_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("public_key").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      if ((jsonObj.get("user_agent") != null && !jsonObj.get("user_agent").isJsonNull()) && !jsonObj.get("user_agent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user_agent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user_agent").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuthenticationtypesAuthenticationMethod.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuthenticationtypesAuthenticationMethod' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuthenticationtypesAuthenticationMethod> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuthenticationtypesAuthenticationMethod.class));

       return (TypeAdapter<T>) new TypeAdapter<AuthenticationtypesAuthenticationMethod>() {
           @Override
           public void write(JsonWriter out, AuthenticationtypesAuthenticationMethod value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuthenticationtypesAuthenticationMethod read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuthenticationtypesAuthenticationMethod given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuthenticationtypesAuthenticationMethod
   * @throws IOException if the JSON string is invalid with respect to AuthenticationtypesAuthenticationMethod
   */
  public static AuthenticationtypesAuthenticationMethod fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuthenticationtypesAuthenticationMethod.class);
  }

  /**
   * Convert an instance of AuthenticationtypesAuthenticationMethod to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

