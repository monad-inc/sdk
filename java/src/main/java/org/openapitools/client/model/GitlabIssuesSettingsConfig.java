/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gitlab Issues settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-24T13:19:51.855698190Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class GitlabIssuesSettingsConfig {
  public static final String SERIALIZED_NAME_CONFIDENTIAL = "confidential";
  @SerializedName(SERIALIZED_NAME_CONFIDENTIAL)
  @javax.annotation.Nullable
  private Boolean confidential;

  public static final String SERIALIZED_NAME_GITLAB_URL = "gitlab_url";
  @SerializedName(SERIALIZED_NAME_GITLAB_URL)
  @javax.annotation.Nullable
  private String gitlabUrl;

  public static final String SERIALIZED_NAME_ISSUE_TYPE = "issue_type";
  @SerializedName(SERIALIZED_NAME_ISSUE_TYPE)
  @javax.annotation.Nullable
  private String issueType;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  @javax.annotation.Nullable
  private String projectId;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  @javax.annotation.Nullable
  private String state;

  public static final String SERIALIZED_NAME_WITH_LABEL_DETAILS = "with_label_details";
  @SerializedName(SERIALIZED_NAME_WITH_LABEL_DETAILS)
  @javax.annotation.Nullable
  private Boolean withLabelDetails;

  public GitlabIssuesSettingsConfig() {
  }

  public GitlabIssuesSettingsConfig confidential(@javax.annotation.Nullable Boolean confidential) {
    this.confidential = confidential;
    return this;
  }

  /**
   * Confidential to filter issues by confidentiality status. Confidential &#x3D; true means only show confidential issues.
   * @return confidential
   */
  @javax.annotation.Nullable
  public Boolean getConfidential() {
    return confidential;
  }

  public void setConfidential(@javax.annotation.Nullable Boolean confidential) {
    this.confidential = confidential;
  }


  public GitlabIssuesSettingsConfig gitlabUrl(@javax.annotation.Nullable String gitlabUrl) {
    this.gitlabUrl = gitlabUrl;
    return this;
  }

  /**
   * GitLab URL (for Custom-Urls when self hosting. Defaults to https://gitlab.com.)
   * @return gitlabUrl
   */
  @javax.annotation.Nullable
  public String getGitlabUrl() {
    return gitlabUrl;
  }

  public void setGitlabUrl(@javax.annotation.Nullable String gitlabUrl) {
    this.gitlabUrl = gitlabUrl;
  }


  public GitlabIssuesSettingsConfig issueType(@javax.annotation.Nullable String issueType) {
    this.issueType = issueType;
    return this;
  }

  /**
   * IssueType to filter issues by type e.g. issue, incident, etc.
   * @return issueType
   */
  @javax.annotation.Nullable
  public String getIssueType() {
    return issueType;
  }

  public void setIssueType(@javax.annotation.Nullable String issueType) {
    this.issueType = issueType;
  }


  public GitlabIssuesSettingsConfig projectId(@javax.annotation.Nullable String projectId) {
    this.projectId = projectId;
    return this;
  }

  /**
   * Project ID to get issues for
   * @return projectId
   */
  @javax.annotation.Nullable
  public String getProjectId() {
    return projectId;
  }

  public void setProjectId(@javax.annotation.Nullable String projectId) {
    this.projectId = projectId;
  }


  public GitlabIssuesSettingsConfig state(@javax.annotation.Nullable String state) {
    this.state = state;
    return this;
  }

  /**
   * State to filter issues by e.g. opened, closed
   * @return state
   */
  @javax.annotation.Nullable
  public String getState() {
    return state;
  }

  public void setState(@javax.annotation.Nullable String state) {
    this.state = state;
  }


  public GitlabIssuesSettingsConfig withLabelDetails(@javax.annotation.Nullable Boolean withLabelDetails) {
    this.withLabelDetails = withLabelDetails;
    return this;
  }

  /**
   * Include label details in the response
   * @return withLabelDetails
   */
  @javax.annotation.Nullable
  public Boolean getWithLabelDetails() {
    return withLabelDetails;
  }

  public void setWithLabelDetails(@javax.annotation.Nullable Boolean withLabelDetails) {
    this.withLabelDetails = withLabelDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GitlabIssuesSettingsConfig gitlabIssuesSettingsConfig = (GitlabIssuesSettingsConfig) o;
    return Objects.equals(this.confidential, gitlabIssuesSettingsConfig.confidential) &&
        Objects.equals(this.gitlabUrl, gitlabIssuesSettingsConfig.gitlabUrl) &&
        Objects.equals(this.issueType, gitlabIssuesSettingsConfig.issueType) &&
        Objects.equals(this.projectId, gitlabIssuesSettingsConfig.projectId) &&
        Objects.equals(this.state, gitlabIssuesSettingsConfig.state) &&
        Objects.equals(this.withLabelDetails, gitlabIssuesSettingsConfig.withLabelDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(confidential, gitlabUrl, issueType, projectId, state, withLabelDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GitlabIssuesSettingsConfig {\n");
    sb.append("    confidential: ").append(toIndentedString(confidential)).append("\n");
    sb.append("    gitlabUrl: ").append(toIndentedString(gitlabUrl)).append("\n");
    sb.append("    issueType: ").append(toIndentedString(issueType)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    withLabelDetails: ").append(toIndentedString(withLabelDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("confidential");
    openapiFields.add("gitlab_url");
    openapiFields.add("issue_type");
    openapiFields.add("project_id");
    openapiFields.add("state");
    openapiFields.add("with_label_details");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GitlabIssuesSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GitlabIssuesSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GitlabIssuesSettingsConfig is not found in the empty JSON string", GitlabIssuesSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GitlabIssuesSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GitlabIssuesSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("gitlab_url") != null && !jsonObj.get("gitlab_url").isJsonNull()) && !jsonObj.get("gitlab_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gitlab_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gitlab_url").toString()));
      }
      if ((jsonObj.get("issue_type") != null && !jsonObj.get("issue_type").isJsonNull()) && !jsonObj.get("issue_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issue_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issue_type").toString()));
      }
      if ((jsonObj.get("project_id") != null && !jsonObj.get("project_id").isJsonNull()) && !jsonObj.get("project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_id").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GitlabIssuesSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GitlabIssuesSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GitlabIssuesSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GitlabIssuesSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<GitlabIssuesSettingsConfig>() {
           @Override
           public void write(JsonWriter out, GitlabIssuesSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GitlabIssuesSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GitlabIssuesSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GitlabIssuesSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to GitlabIssuesSettingsConfig
   */
  public static GitlabIssuesSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GitlabIssuesSettingsConfig.class);
  }

  /**
   * Convert an instance of GitlabIssuesSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

