/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ModelsDataUsage;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ModelsPipelineNodeStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-27T14:33:17.361342391Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class ModelsPipelineNodeStatus {
  public static final String SERIALIZED_NAME_EGRESS = "egress";
  @SerializedName(SERIALIZED_NAME_EGRESS)
  @javax.annotation.Nullable
  private ModelsDataUsage egress;

  public static final String SERIALIZED_NAME_INGRESS = "ingress";
  @SerializedName(SERIALIZED_NAME_INGRESS)
  @javax.annotation.Nullable
  private ModelsDataUsage ingress;

  public static final String SERIALIZED_NAME_NODE_ID = "node_id";
  @SerializedName(SERIALIZED_NAME_NODE_ID)
  @javax.annotation.Nullable
  private String nodeId;

  public static final String SERIALIZED_NAME_NODE_SLUG = "node_slug";
  @SerializedName(SERIALIZED_NAME_NODE_SLUG)
  @javax.annotation.Nullable
  private String nodeSlug;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  @javax.annotation.Nullable
  private String status;

  public ModelsPipelineNodeStatus() {
  }

  public ModelsPipelineNodeStatus egress(@javax.annotation.Nullable ModelsDataUsage egress) {
    this.egress = egress;
    return this;
  }

  /**
   * Get egress
   * @return egress
   */
  @javax.annotation.Nullable
  public ModelsDataUsage getEgress() {
    return egress;
  }

  public void setEgress(@javax.annotation.Nullable ModelsDataUsage egress) {
    this.egress = egress;
  }


  public ModelsPipelineNodeStatus ingress(@javax.annotation.Nullable ModelsDataUsage ingress) {
    this.ingress = ingress;
    return this;
  }

  /**
   * Get ingress
   * @return ingress
   */
  @javax.annotation.Nullable
  public ModelsDataUsage getIngress() {
    return ingress;
  }

  public void setIngress(@javax.annotation.Nullable ModelsDataUsage ingress) {
    this.ingress = ingress;
  }


  public ModelsPipelineNodeStatus nodeId(@javax.annotation.Nullable String nodeId) {
    this.nodeId = nodeId;
    return this;
  }

  /**
   * Get nodeId
   * @return nodeId
   */
  @javax.annotation.Nullable
  public String getNodeId() {
    return nodeId;
  }

  public void setNodeId(@javax.annotation.Nullable String nodeId) {
    this.nodeId = nodeId;
  }


  public ModelsPipelineNodeStatus nodeSlug(@javax.annotation.Nullable String nodeSlug) {
    this.nodeSlug = nodeSlug;
    return this;
  }

  /**
   * Get nodeSlug
   * @return nodeSlug
   */
  @javax.annotation.Nullable
  public String getNodeSlug() {
    return nodeSlug;
  }

  public void setNodeSlug(@javax.annotation.Nullable String nodeSlug) {
    this.nodeSlug = nodeSlug;
  }


  public ModelsPipelineNodeStatus status(@javax.annotation.Nullable String status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(@javax.annotation.Nullable String status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ModelsPipelineNodeStatus modelsPipelineNodeStatus = (ModelsPipelineNodeStatus) o;
    return Objects.equals(this.egress, modelsPipelineNodeStatus.egress) &&
        Objects.equals(this.ingress, modelsPipelineNodeStatus.ingress) &&
        Objects.equals(this.nodeId, modelsPipelineNodeStatus.nodeId) &&
        Objects.equals(this.nodeSlug, modelsPipelineNodeStatus.nodeSlug) &&
        Objects.equals(this.status, modelsPipelineNodeStatus.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(egress, ingress, nodeId, nodeSlug, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ModelsPipelineNodeStatus {\n");
    sb.append("    egress: ").append(toIndentedString(egress)).append("\n");
    sb.append("    ingress: ").append(toIndentedString(ingress)).append("\n");
    sb.append("    nodeId: ").append(toIndentedString(nodeId)).append("\n");
    sb.append("    nodeSlug: ").append(toIndentedString(nodeSlug)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("egress");
    openapiFields.add("ingress");
    openapiFields.add("node_id");
    openapiFields.add("node_slug");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ModelsPipelineNodeStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ModelsPipelineNodeStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ModelsPipelineNodeStatus is not found in the empty JSON string", ModelsPipelineNodeStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ModelsPipelineNodeStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ModelsPipelineNodeStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `egress`
      if (jsonObj.get("egress") != null && !jsonObj.get("egress").isJsonNull()) {
        ModelsDataUsage.validateJsonElement(jsonObj.get("egress"));
      }
      // validate the optional field `ingress`
      if (jsonObj.get("ingress") != null && !jsonObj.get("ingress").isJsonNull()) {
        ModelsDataUsage.validateJsonElement(jsonObj.get("ingress"));
      }
      if ((jsonObj.get("node_id") != null && !jsonObj.get("node_id").isJsonNull()) && !jsonObj.get("node_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_id").toString()));
      }
      if ((jsonObj.get("node_slug") != null && !jsonObj.get("node_slug").isJsonNull()) && !jsonObj.get("node_slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `node_slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("node_slug").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ModelsPipelineNodeStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ModelsPipelineNodeStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ModelsPipelineNodeStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ModelsPipelineNodeStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ModelsPipelineNodeStatus>() {
           @Override
           public void write(JsonWriter out, ModelsPipelineNodeStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ModelsPipelineNodeStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ModelsPipelineNodeStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ModelsPipelineNodeStatus
   * @throws IOException if the JSON string is invalid with respect to ModelsPipelineNodeStatus
   */
  public static ModelsPipelineNodeStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ModelsPipelineNodeStatus.class);
  }

  /**
   * Convert an instance of ModelsPipelineNodeStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

