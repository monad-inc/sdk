/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RoutesV2MetricsValue;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RoutesV2PipelineMetric
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-07T16:46:05.616290814Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class RoutesV2PipelineMetric {
  public static final String SERIALIZED_NAME_PIPELINE_ID = "pipeline_id";
  @SerializedName(SERIALIZED_NAME_PIPELINE_ID)
  @javax.annotation.Nullable
  private String pipelineId;

  public static final String SERIALIZED_NAME_PIPELINE_NAME = "pipeline_name";
  @SerializedName(SERIALIZED_NAME_PIPELINE_NAME)
  @javax.annotation.Nullable
  private String pipelineName;

  public static final String SERIALIZED_NAME_TOTAL_BYTES = "total_bytes";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES)
  @javax.annotation.Nullable
  private Integer totalBytes;

  public static final String SERIALIZED_NAME_VALUES = "values";
  @SerializedName(SERIALIZED_NAME_VALUES)
  @javax.annotation.Nullable
  private List<RoutesV2MetricsValue> values = new ArrayList<>();

  public RoutesV2PipelineMetric() {
  }

  public RoutesV2PipelineMetric pipelineId(@javax.annotation.Nullable String pipelineId) {
    this.pipelineId = pipelineId;
    return this;
  }

  /**
   * Get pipelineId
   * @return pipelineId
   */
  @javax.annotation.Nullable
  public String getPipelineId() {
    return pipelineId;
  }

  public void setPipelineId(@javax.annotation.Nullable String pipelineId) {
    this.pipelineId = pipelineId;
  }


  public RoutesV2PipelineMetric pipelineName(@javax.annotation.Nullable String pipelineName) {
    this.pipelineName = pipelineName;
    return this;
  }

  /**
   * Get pipelineName
   * @return pipelineName
   */
  @javax.annotation.Nullable
  public String getPipelineName() {
    return pipelineName;
  }

  public void setPipelineName(@javax.annotation.Nullable String pipelineName) {
    this.pipelineName = pipelineName;
  }


  public RoutesV2PipelineMetric totalBytes(@javax.annotation.Nullable Integer totalBytes) {
    this.totalBytes = totalBytes;
    return this;
  }

  /**
   * Get totalBytes
   * @return totalBytes
   */
  @javax.annotation.Nullable
  public Integer getTotalBytes() {
    return totalBytes;
  }

  public void setTotalBytes(@javax.annotation.Nullable Integer totalBytes) {
    this.totalBytes = totalBytes;
  }


  public RoutesV2PipelineMetric values(@javax.annotation.Nullable List<RoutesV2MetricsValue> values) {
    this.values = values;
    return this;
  }

  public RoutesV2PipelineMetric addValuesItem(RoutesV2MetricsValue valuesItem) {
    if (this.values == null) {
      this.values = new ArrayList<>();
    }
    this.values.add(valuesItem);
    return this;
  }

  /**
   * Get values
   * @return values
   */
  @javax.annotation.Nullable
  public List<RoutesV2MetricsValue> getValues() {
    return values;
  }

  public void setValues(@javax.annotation.Nullable List<RoutesV2MetricsValue> values) {
    this.values = values;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RoutesV2PipelineMetric routesV2PipelineMetric = (RoutesV2PipelineMetric) o;
    return Objects.equals(this.pipelineId, routesV2PipelineMetric.pipelineId) &&
        Objects.equals(this.pipelineName, routesV2PipelineMetric.pipelineName) &&
        Objects.equals(this.totalBytes, routesV2PipelineMetric.totalBytes) &&
        Objects.equals(this.values, routesV2PipelineMetric.values);
  }

  @Override
  public int hashCode() {
    return Objects.hash(pipelineId, pipelineName, totalBytes, values);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RoutesV2PipelineMetric {\n");
    sb.append("    pipelineId: ").append(toIndentedString(pipelineId)).append("\n");
    sb.append("    pipelineName: ").append(toIndentedString(pipelineName)).append("\n");
    sb.append("    totalBytes: ").append(toIndentedString(totalBytes)).append("\n");
    sb.append("    values: ").append(toIndentedString(values)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("pipeline_id", "pipeline_name", "total_bytes", "values"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RoutesV2PipelineMetric
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RoutesV2PipelineMetric.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RoutesV2PipelineMetric is not found in the empty JSON string", RoutesV2PipelineMetric.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RoutesV2PipelineMetric.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RoutesV2PipelineMetric` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("pipeline_id") != null && !jsonObj.get("pipeline_id").isJsonNull()) && !jsonObj.get("pipeline_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipeline_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipeline_id").toString()));
      }
      if ((jsonObj.get("pipeline_name") != null && !jsonObj.get("pipeline_name").isJsonNull()) && !jsonObj.get("pipeline_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pipeline_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pipeline_name").toString()));
      }
      if (jsonObj.get("values") != null && !jsonObj.get("values").isJsonNull()) {
        JsonArray jsonArrayvalues = jsonObj.getAsJsonArray("values");
        if (jsonArrayvalues != null) {
          // ensure the json data is an array
          if (!jsonObj.get("values").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `values` to be an array in the JSON string but got `%s`", jsonObj.get("values").toString()));
          }

          // validate the optional field `values` (array)
          for (int i = 0; i < jsonArrayvalues.size(); i++) {
            RoutesV2MetricsValue.validateJsonElement(jsonArrayvalues.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RoutesV2PipelineMetric.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RoutesV2PipelineMetric' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RoutesV2PipelineMetric> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RoutesV2PipelineMetric.class));

       return (TypeAdapter<T>) new TypeAdapter<RoutesV2PipelineMetric>() {
           @Override
           public void write(JsonWriter out, RoutesV2PipelineMetric value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RoutesV2PipelineMetric read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RoutesV2PipelineMetric given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RoutesV2PipelineMetric
   * @throws IOException if the JSON string is invalid with respect to RoutesV2PipelineMetric
   */
  public static RoutesV2PipelineMetric fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RoutesV2PipelineMetric.class);
  }

  /**
   * Convert an instance of RoutesV2PipelineMetric to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

