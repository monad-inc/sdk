/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HttpHeaders
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-06T23:32:29.239235574Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class HttpHeaders {
  public static final String SERIALIZED_NAME_HEADER_KEY = "header_key";
  @SerializedName(SERIALIZED_NAME_HEADER_KEY)
  @javax.annotation.Nullable
  private String headerKey;

  public static final String SERIALIZED_NAME_HEADER_VALUE = "header_value";
  @SerializedName(SERIALIZED_NAME_HEADER_VALUE)
  @javax.annotation.Nullable
  private String headerValue;

  public HttpHeaders() {
  }

  public HttpHeaders headerKey(@javax.annotation.Nullable String headerKey) {
    this.headerKey = headerKey;
    return this;
  }

  /**
   * Get headerKey
   * @return headerKey
   */
  @javax.annotation.Nullable
  public String getHeaderKey() {
    return headerKey;
  }

  public void setHeaderKey(@javax.annotation.Nullable String headerKey) {
    this.headerKey = headerKey;
  }


  public HttpHeaders headerValue(@javax.annotation.Nullable String headerValue) {
    this.headerValue = headerValue;
    return this;
  }

  /**
   * Get headerValue
   * @return headerValue
   */
  @javax.annotation.Nullable
  public String getHeaderValue() {
    return headerValue;
  }

  public void setHeaderValue(@javax.annotation.Nullable String headerValue) {
    this.headerValue = headerValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpHeaders httpHeaders = (HttpHeaders) o;
    return Objects.equals(this.headerKey, httpHeaders.headerKey) &&
        Objects.equals(this.headerValue, httpHeaders.headerValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(headerKey, headerValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpHeaders {\n");
    sb.append("    headerKey: ").append(toIndentedString(headerKey)).append("\n");
    sb.append("    headerValue: ").append(toIndentedString(headerValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("header_key", "header_value"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpHeaders
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpHeaders.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpHeaders is not found in the empty JSON string", HttpHeaders.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpHeaders.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpHeaders` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("header_key") != null && !jsonObj.get("header_key").isJsonNull()) && !jsonObj.get("header_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_key").toString()));
      }
      if ((jsonObj.get("header_value") != null && !jsonObj.get("header_value").isJsonNull()) && !jsonObj.get("header_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `header_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("header_value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpHeaders.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpHeaders' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpHeaders> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpHeaders.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpHeaders>() {
           @Override
           public void write(JsonWriter out, HttpHeaders value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpHeaders read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpHeaders given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpHeaders
   * @throws IOException if the JSON string is invalid with respect to HttpHeaders
   */
  public static HttpHeaders fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpHeaders.class);
  }

  /**
   * Convert an instance of HttpHeaders to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

