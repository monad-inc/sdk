/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AWS Certificate Manager settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-08T19:37:13.436889974Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class CertificateManagerSettingsConfig {
  /**
   * Gets or Sets certificateStatuses
   */
  @JsonAdapter(CertificateStatusesEnum.Adapter.class)
  public enum CertificateStatusesEnum {
    PENDING_VALIDATION("PENDING_VALIDATION"),
    
    ISSUED("ISSUED"),
    
    INACTIVE("INACTIVE"),
    
    EXPIRED("EXPIRED"),
    
    VALIDATION_TIMED_OUT("VALIDATION_TIMED_OUT"),
    
    REVOKED("REVOKED"),
    
    FAILED("FAILED");

    private String value;

    CertificateStatusesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CertificateStatusesEnum fromValue(String value) {
      for (CertificateStatusesEnum b : CertificateStatusesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CertificateStatusesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CertificateStatusesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CertificateStatusesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CertificateStatusesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CertificateStatusesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CERTIFICATE_STATUSES = "certificate_statuses";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_STATUSES)
  @javax.annotation.Nullable
  private List<CertificateStatusesEnum> certificateStatuses = new ArrayList<>();

  public static final String SERIALIZED_NAME_CRON = "cron";
  @SerializedName(SERIALIZED_NAME_CRON)
  @javax.annotation.Nullable
  private String cron;

  /**
   * Gets or Sets extendedKeyUsage
   */
  @JsonAdapter(ExtendedKeyUsageEnum.Adapter.class)
  public enum ExtendedKeyUsageEnum {
    TLS_WEB_SERVER_AUTHENTICATION("TLS_WEB_SERVER_AUTHENTICATION"),
    
    TLS_WEB_CLIENT_AUTHENTICATION("TLS_WEB_CLIENT_AUTHENTICATION"),
    
    CODE_SIGNING("CODE_SIGNING"),
    
    EMAIL_PROTECTION("EMAIL_PROTECTION"),
    
    TIME_STAMPING("TIME_STAMPING"),
    
    OCSP_SIGNING("OCSP_SIGNING"),
    
    IPSEC_END_SYSTEM("IPSEC_END_SYSTEM"),
    
    IPSEC_TUNNEL("IPSEC_TUNNEL"),
    
    IPSEC_USER("IPSEC_USER"),
    
    ANY("ANY"),
    
    NONE("NONE"),
    
    CUSTOM("CUSTOM");

    private String value;

    ExtendedKeyUsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ExtendedKeyUsageEnum fromValue(String value) {
      for (ExtendedKeyUsageEnum b : ExtendedKeyUsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ExtendedKeyUsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ExtendedKeyUsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ExtendedKeyUsageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ExtendedKeyUsageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ExtendedKeyUsageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EXTENDED_KEY_USAGE = "extended_key_usage";
  @SerializedName(SERIALIZED_NAME_EXTENDED_KEY_USAGE)
  @javax.annotation.Nullable
  private List<ExtendedKeyUsageEnum> extendedKeyUsage = new ArrayList<>();

  /**
   * Gets or Sets keyTypes
   */
  @JsonAdapter(KeyTypesEnum.Adapter.class)
  public enum KeyTypesEnum {
    RSA_1024("RSA_1024"),
    
    RSA_2048("RSA_2048"),
    
    RSA_3072("RSA_3072"),
    
    RSA_4096("RSA_4096"),
    
    EC_PRIME256V1("EC_prime256v1"),
    
    EC_SECP384R1("EC_secp384r1"),
    
    EC_SECP521R1("EC_secp521r1");

    private String value;

    KeyTypesEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyTypesEnum fromValue(String value) {
      for (KeyTypesEnum b : KeyTypesEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyTypesEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyTypesEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyTypesEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyTypesEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_TYPES = "key_types";
  @SerializedName(SERIALIZED_NAME_KEY_TYPES)
  @javax.annotation.Nullable
  private List<KeyTypesEnum> keyTypes = new ArrayList<>();

  /**
   * Gets or Sets keyUsage
   */
  @JsonAdapter(KeyUsageEnum.Adapter.class)
  public enum KeyUsageEnum {
    DIGITAL_SIGNATURE("DIGITAL_SIGNATURE"),
    
    NON_REPUDIATION("NON_REPUDIATION"),
    
    KEY_ENCIPHERMENT("KEY_ENCIPHERMENT"),
    
    DATA_ENCIPHERMENT("DATA_ENCIPHERMENT"),
    
    KEY_AGREEMENT("KEY_AGREEMENT"),
    
    CERTIFICATE_SIGNING("CERTIFICATE_SIGNING"),
    
    CRL_SIGNING("CRL_SIGNING"),
    
    ENCIPHER_ONLY("ENCIPHER_ONLY"),
    
    DECIPHER_ONLY("DECIPHER_ONLY"),
    
    ANY("ANY"),
    
    CUSTOM("CUSTOM");

    private String value;

    KeyUsageEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static KeyUsageEnum fromValue(String value) {
      for (KeyUsageEnum b : KeyUsageEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<KeyUsageEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final KeyUsageEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public KeyUsageEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return KeyUsageEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      KeyUsageEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_KEY_USAGE = "key_usage";
  @SerializedName(SERIALIZED_NAME_KEY_USAGE)
  @javax.annotation.Nullable
  private List<KeyUsageEnum> keyUsage = new ArrayList<>();

  /**
   * Identifies the AWS service that manages the certificate issued by ACM.
   */
  @JsonAdapter(ManagedByEnum.Adapter.class)
  public enum ManagedByEnum {
    CLOUDFRONT("CLOUDFRONT");

    private String value;

    ManagedByEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ManagedByEnum fromValue(String value) {
      for (ManagedByEnum b : ManagedByEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ManagedByEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ManagedByEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ManagedByEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ManagedByEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ManagedByEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MANAGED_BY = "managed_by";
  @SerializedName(SERIALIZED_NAME_MANAGED_BY)
  @javax.annotation.Nullable
  private ManagedByEnum managedBy;

  /**
   * Gets or Sets regions
   */
  @JsonAdapter(RegionsEnum.Adapter.class)
  public enum RegionsEnum {
    US_EAST_1("us-east-1"),
    
    US_EAST_2("us-east-2"),
    
    US_WEST_1("us-west-1"),
    
    US_WEST_2("us-west-2"),
    
    AF_SOUTH_1("af-south-1"),
    
    AP_EAST_1("ap-east-1"),
    
    AP_SOUTH_1("ap-south-1"),
    
    AP_NORTHEAST_1("ap-northeast-1"),
    
    AP_NORTHEAST_2("ap-northeast-2"),
    
    AP_NORTHEAST_3("ap-northeast-3"),
    
    AP_SOUTHEAST_1("ap-southeast-1"),
    
    AP_SOUTHEAST_2("ap-southeast-2"),
    
    CA_CENTRAL_1("ca-central-1"),
    
    CN_NORTH_1("cn-north-1"),
    
    CN_NORTHWEST_1("cn-northwest-1"),
    
    EU_CENTRAL_1("eu-central-1"),
    
    EU_WEST_1("eu-west-1"),
    
    EU_WEST_2("eu-west-2"),
    
    EU_WEST_3("eu-west-3"),
    
    EU_NORTH_1("eu-north-1"),
    
    EU_SOUTH_1("eu-south-1"),
    
    ME_SOUTH_1("me-south-1"),
    
    SA_EAST_1("sa-east-1"),
    
    US_GOV_EAST_1("us-gov-east-1"),
    
    US_GOV_WEST_1("us-gov-west-1");

    private String value;

    RegionsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionsEnum fromValue(String value) {
      for (RegionsEnum b : RegionsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  @javax.annotation.Nullable
  private List<RegionsEnum> regions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ROLE_ARN = "role_arn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  @javax.annotation.Nullable
  private String roleArn;

  public CertificateManagerSettingsConfig() {
  }

  public CertificateManagerSettingsConfig certificateStatuses(@javax.annotation.Nullable List<CertificateStatusesEnum> certificateStatuses) {
    this.certificateStatuses = certificateStatuses;
    return this;
  }

  public CertificateManagerSettingsConfig addCertificateStatusesItem(CertificateStatusesEnum certificateStatusesItem) {
    if (this.certificateStatuses == null) {
      this.certificateStatuses = new ArrayList<>();
    }
    this.certificateStatuses.add(certificateStatusesItem);
    return this;
  }

  /**
   * Filter the certificate list by status value.
   * @return certificateStatuses
   */
  @javax.annotation.Nullable
  public List<CertificateStatusesEnum> getCertificateStatuses() {
    return certificateStatuses;
  }

  public void setCertificateStatuses(@javax.annotation.Nullable List<CertificateStatusesEnum> certificateStatuses) {
    this.certificateStatuses = certificateStatuses;
  }


  public CertificateManagerSettingsConfig cron(@javax.annotation.Nullable String cron) {
    this.cron = cron;
    return this;
  }

  /**
   * Cron expression for scheduling the input
   * @return cron
   */
  @javax.annotation.Nullable
  public String getCron() {
    return cron;
  }

  public void setCron(@javax.annotation.Nullable String cron) {
    this.cron = cron;
  }


  public CertificateManagerSettingsConfig extendedKeyUsage(@javax.annotation.Nullable List<ExtendedKeyUsageEnum> extendedKeyUsage) {
    this.extendedKeyUsage = extendedKeyUsage;
    return this;
  }

  public CertificateManagerSettingsConfig addExtendedKeyUsageItem(ExtendedKeyUsageEnum extendedKeyUsageItem) {
    if (this.extendedKeyUsage == null) {
      this.extendedKeyUsage = new ArrayList<>();
    }
    this.extendedKeyUsage.add(extendedKeyUsageItem);
    return this;
  }

  /**
   * The Extended Key Usage X.509 v3 extension defines one or more purposes for which the public key is used. This is in addition or in place of Key Usage.
   * @return extendedKeyUsage
   */
  @javax.annotation.Nullable
  public List<ExtendedKeyUsageEnum> getExtendedKeyUsage() {
    return extendedKeyUsage;
  }

  public void setExtendedKeyUsage(@javax.annotation.Nullable List<ExtendedKeyUsageEnum> extendedKeyUsage) {
    this.extendedKeyUsage = extendedKeyUsage;
  }


  public CertificateManagerSettingsConfig keyTypes(@javax.annotation.Nullable List<KeyTypesEnum> keyTypes) {
    this.keyTypes = keyTypes;
    return this;
  }

  public CertificateManagerSettingsConfig addKeyTypesItem(KeyTypesEnum keyTypesItem) {
    if (this.keyTypes == null) {
      this.keyTypes = new ArrayList<>();
    }
    this.keyTypes.add(keyTypesItem);
    return this;
  }

  /**
   * Specify one or more algorithms that is used to generate key pairs.\\n\\n
   * @return keyTypes
   */
  @javax.annotation.Nullable
  public List<KeyTypesEnum> getKeyTypes() {
    return keyTypes;
  }

  public void setKeyTypes(@javax.annotation.Nullable List<KeyTypesEnum> keyTypes) {
    this.keyTypes = keyTypes;
  }


  public CertificateManagerSettingsConfig keyUsage(@javax.annotation.Nullable List<KeyUsageEnum> keyUsage) {
    this.keyUsage = keyUsage;
    return this;
  }

  public CertificateManagerSettingsConfig addKeyUsageItem(KeyUsageEnum keyUsageItem) {
    if (this.keyUsage == null) {
      this.keyUsage = new ArrayList<>();
    }
    this.keyUsage.add(keyUsageItem);
    return this;
  }

  /**
   * The Key Usage X.509 v3 extension defines the purpose of the public key contained in the certificate.
   * @return keyUsage
   */
  @javax.annotation.Nullable
  public List<KeyUsageEnum> getKeyUsage() {
    return keyUsage;
  }

  public void setKeyUsage(@javax.annotation.Nullable List<KeyUsageEnum> keyUsage) {
    this.keyUsage = keyUsage;
  }


  public CertificateManagerSettingsConfig managedBy(@javax.annotation.Nullable ManagedByEnum managedBy) {
    this.managedBy = managedBy;
    return this;
  }

  /**
   * Identifies the AWS service that manages the certificate issued by ACM.
   * @return managedBy
   */
  @javax.annotation.Nullable
  public ManagedByEnum getManagedBy() {
    return managedBy;
  }

  public void setManagedBy(@javax.annotation.Nullable ManagedByEnum managedBy) {
    this.managedBy = managedBy;
  }


  public CertificateManagerSettingsConfig regions(@javax.annotation.Nullable List<RegionsEnum> regions) {
    this.regions = regions;
    return this;
  }

  public CertificateManagerSettingsConfig addRegionsItem(RegionsEnum regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * Get regions
   * @return regions
   */
  @javax.annotation.Nullable
  public List<RegionsEnum> getRegions() {
    return regions;
  }

  public void setRegions(@javax.annotation.Nullable List<RegionsEnum> regions) {
    this.regions = regions;
  }


  public CertificateManagerSettingsConfig roleArn(@javax.annotation.Nullable String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The ARN of the role to assume to access the bucket
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(@javax.annotation.Nullable String roleArn) {
    this.roleArn = roleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CertificateManagerSettingsConfig certificateManagerSettingsConfig = (CertificateManagerSettingsConfig) o;
    return Objects.equals(this.certificateStatuses, certificateManagerSettingsConfig.certificateStatuses) &&
        Objects.equals(this.cron, certificateManagerSettingsConfig.cron) &&
        Objects.equals(this.extendedKeyUsage, certificateManagerSettingsConfig.extendedKeyUsage) &&
        Objects.equals(this.keyTypes, certificateManagerSettingsConfig.keyTypes) &&
        Objects.equals(this.keyUsage, certificateManagerSettingsConfig.keyUsage) &&
        Objects.equals(this.managedBy, certificateManagerSettingsConfig.managedBy) &&
        Objects.equals(this.regions, certificateManagerSettingsConfig.regions) &&
        Objects.equals(this.roleArn, certificateManagerSettingsConfig.roleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(certificateStatuses, cron, extendedKeyUsage, keyTypes, keyUsage, managedBy, regions, roleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CertificateManagerSettingsConfig {\n");
    sb.append("    certificateStatuses: ").append(toIndentedString(certificateStatuses)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    extendedKeyUsage: ").append(toIndentedString(extendedKeyUsage)).append("\n");
    sb.append("    keyTypes: ").append(toIndentedString(keyTypes)).append("\n");
    sb.append("    keyUsage: ").append(toIndentedString(keyUsage)).append("\n");
    sb.append("    managedBy: ").append(toIndentedString(managedBy)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("certificate_statuses", "cron", "extended_key_usage", "key_types", "key_usage", "managed_by", "regions", "role_arn"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CertificateManagerSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CertificateManagerSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CertificateManagerSettingsConfig is not found in the empty JSON string", CertificateManagerSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CertificateManagerSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CertificateManagerSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("certificate_statuses") != null && !jsonObj.get("certificate_statuses").isJsonNull() && !jsonObj.get("certificate_statuses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificate_statuses` to be an array in the JSON string but got `%s`", jsonObj.get("certificate_statuses").toString()));
      }
      if ((jsonObj.get("cron") != null && !jsonObj.get("cron").isJsonNull()) && !jsonObj.get("cron").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cron` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cron").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("extended_key_usage") != null && !jsonObj.get("extended_key_usage").isJsonNull() && !jsonObj.get("extended_key_usage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `extended_key_usage` to be an array in the JSON string but got `%s`", jsonObj.get("extended_key_usage").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_types") != null && !jsonObj.get("key_types").isJsonNull() && !jsonObj.get("key_types").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_types` to be an array in the JSON string but got `%s`", jsonObj.get("key_types").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("key_usage") != null && !jsonObj.get("key_usage").isJsonNull() && !jsonObj.get("key_usage").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_usage` to be an array in the JSON string but got `%s`", jsonObj.get("key_usage").toString()));
      }
      if ((jsonObj.get("managed_by") != null && !jsonObj.get("managed_by").isJsonNull()) && !jsonObj.get("managed_by").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managed_by` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managed_by").toString()));
      }
      // validate the optional field `managed_by`
      if (jsonObj.get("managed_by") != null && !jsonObj.get("managed_by").isJsonNull()) {
        ManagedByEnum.validateJsonElement(jsonObj.get("managed_by"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull() && !jsonObj.get("regions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
      }
      if ((jsonObj.get("role_arn") != null && !jsonObj.get("role_arn").isJsonNull()) && !jsonObj.get("role_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_arn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CertificateManagerSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CertificateManagerSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CertificateManagerSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CertificateManagerSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CertificateManagerSettingsConfig>() {
           @Override
           public void write(JsonWriter out, CertificateManagerSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CertificateManagerSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CertificateManagerSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CertificateManagerSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to CertificateManagerSettingsConfig
   */
  public static CertificateManagerSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CertificateManagerSettingsConfig.class);
  }

  /**
   * Convert an instance of CertificateManagerSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

