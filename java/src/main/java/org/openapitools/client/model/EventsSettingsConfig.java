/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Twilio Events settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-21T17:03:55.432837449Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class EventsSettingsConfig {
  public static final String SERIALIZED_NAME_ACTOR_SID = "actor_sid";
  @SerializedName(SERIALIZED_NAME_ACTOR_SID)
  @javax.annotation.Nullable
  private String actorSid;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "event_type";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  @javax.annotation.Nullable
  private String eventType;

  public static final String SERIALIZED_NAME_REPLICATION_START_TIME = "replication_start_time";
  @SerializedName(SERIALIZED_NAME_REPLICATION_START_TIME)
  @javax.annotation.Nullable
  private String replicationStartTime;

  public static final String SERIALIZED_NAME_RESOURCE_SID = "resource_sid";
  @SerializedName(SERIALIZED_NAME_RESOURCE_SID)
  @javax.annotation.Nullable
  private String resourceSid;

  public EventsSettingsConfig() {
  }

  public EventsSettingsConfig actorSid(@javax.annotation.Nullable String actorSid) {
    this.actorSid = actorSid;
    return this;
  }

  /**
   * Only includes events initiated by this Actor. Useful for auditing actions taken by specific users or API credentials.
   * @return actorSid
   */
  @javax.annotation.Nullable
  public String getActorSid() {
    return actorSid;
  }

  public void setActorSid(@javax.annotation.Nullable String actorSid) {
    this.actorSid = actorSid;
  }


  public EventsSettingsConfig eventType(@javax.annotation.Nullable String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Only includes events of a specific event type: https://www.twilio.com/docs/usage/monitor-events#event-types
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(@javax.annotation.Nullable String eventType) {
    this.eventType = eventType;
  }


  public EventsSettingsConfig replicationStartTime(@javax.annotation.Nullable String replicationStartTime) {
    this.replicationStartTime = replicationStartTime;
    return this;
  }

  /**
   * Only include events after this time for the initial sync. If not specified, returns all events from the start. Must be a valid ISO 8601 formatted datetime string: yyyy-MM-dd&#39;T&#39;HH:mm:ss&#39;Z&#39;
   * @return replicationStartTime
   */
  @javax.annotation.Nullable
  public String getReplicationStartTime() {
    return replicationStartTime;
  }

  public void setReplicationStartTime(@javax.annotation.Nullable String replicationStartTime) {
    this.replicationStartTime = replicationStartTime;
  }


  public EventsSettingsConfig resourceSid(@javax.annotation.Nullable String resourceSid) {
    this.resourceSid = resourceSid;
    return this;
  }

  /**
   * Only include events that refer to this resource. Useful for discovering the history of a specific resource.
   * @return resourceSid
   */
  @javax.annotation.Nullable
  public String getResourceSid() {
    return resourceSid;
  }

  public void setResourceSid(@javax.annotation.Nullable String resourceSid) {
    this.resourceSid = resourceSid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EventsSettingsConfig eventsSettingsConfig = (EventsSettingsConfig) o;
    return Objects.equals(this.actorSid, eventsSettingsConfig.actorSid) &&
        Objects.equals(this.eventType, eventsSettingsConfig.eventType) &&
        Objects.equals(this.replicationStartTime, eventsSettingsConfig.replicationStartTime) &&
        Objects.equals(this.resourceSid, eventsSettingsConfig.resourceSid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actorSid, eventType, replicationStartTime, resourceSid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EventsSettingsConfig {\n");
    sb.append("    actorSid: ").append(toIndentedString(actorSid)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    replicationStartTime: ").append(toIndentedString(replicationStartTime)).append("\n");
    sb.append("    resourceSid: ").append(toIndentedString(resourceSid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("actor_sid", "event_type", "replication_start_time", "resource_sid"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EventsSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EventsSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EventsSettingsConfig is not found in the empty JSON string", EventsSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EventsSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EventsSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actor_sid") != null && !jsonObj.get("actor_sid").isJsonNull()) && !jsonObj.get("actor_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor_sid").toString()));
      }
      if ((jsonObj.get("event_type") != null && !jsonObj.get("event_type").isJsonNull()) && !jsonObj.get("event_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `event_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("event_type").toString()));
      }
      if ((jsonObj.get("replication_start_time") != null && !jsonObj.get("replication_start_time").isJsonNull()) && !jsonObj.get("replication_start_time").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replication_start_time` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replication_start_time").toString()));
      }
      if ((jsonObj.get("resource_sid") != null && !jsonObj.get("resource_sid").isJsonNull()) && !jsonObj.get("resource_sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resource_sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resource_sid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EventsSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EventsSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EventsSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EventsSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<EventsSettingsConfig>() {
           @Override
           public void write(JsonWriter out, EventsSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EventsSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EventsSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EventsSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to EventsSettingsConfig
   */
  public static EventsSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EventsSettingsConfig.class);
  }

  /**
   * Convert an instance of EventsSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

