/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Crowdstrike Falcon Data Replicator settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-04-15T18:09:04.375757808Z[Etc/UTC]", comments = "Generator version: 7.12.0")
public class CrowdstrikeFdrSettingsConfig {
  public static final String SERIALIZED_NAME_AWS_QUEUE_URL = "aws_queue_url";
  @SerializedName(SERIALIZED_NAME_AWS_QUEUE_URL)
  @javax.annotation.Nullable
  private String awsQueueUrl;

  public static final String SERIALIZED_NAME_AWS_REGION_NAME = "aws_region_name";
  @SerializedName(SERIALIZED_NAME_AWS_REGION_NAME)
  @javax.annotation.Nullable
  private String awsRegionName;

  public static final String SERIALIZED_NAME_AWS_S3_URL = "aws_s3_url";
  @SerializedName(SERIALIZED_NAME_AWS_S3_URL)
  @javax.annotation.Nullable
  private String awsS3Url;

  public static final String SERIALIZED_NAME_CRON = "cron";
  @SerializedName(SERIALIZED_NAME_CRON)
  @javax.annotation.Nullable
  private String cron;

  public static final String SERIALIZED_NAME_VISIBILITY_TIMEOUT = "visibility_timeout";
  @SerializedName(SERIALIZED_NAME_VISIBILITY_TIMEOUT)
  @javax.annotation.Nullable
  private Integer visibilityTimeout;

  public CrowdstrikeFdrSettingsConfig() {
  }

  public CrowdstrikeFdrSettingsConfig awsQueueUrl(@javax.annotation.Nullable String awsQueueUrl) {
    this.awsQueueUrl = awsQueueUrl;
    return this;
  }

  /**
   * AWS SQS queue URL provided to you by the CrowdStrike Falcon console
   * @return awsQueueUrl
   */
  @javax.annotation.Nullable
  public String getAwsQueueUrl() {
    return awsQueueUrl;
  }

  public void setAwsQueueUrl(@javax.annotation.Nullable String awsQueueUrl) {
    this.awsQueueUrl = awsQueueUrl;
  }


  public CrowdstrikeFdrSettingsConfig awsRegionName(@javax.annotation.Nullable String awsRegionName) {
    this.awsRegionName = awsRegionName;
    return this;
  }

  /**
   * Name of the region where the queue resides
   * @return awsRegionName
   */
  @javax.annotation.Nullable
  public String getAwsRegionName() {
    return awsRegionName;
  }

  public void setAwsRegionName(@javax.annotation.Nullable String awsRegionName) {
    this.awsRegionName = awsRegionName;
  }


  public CrowdstrikeFdrSettingsConfig awsS3Url(@javax.annotation.Nullable String awsS3Url) {
    this.awsS3Url = awsS3Url;
    return this;
  }

  /**
   * The URL of the S3 bucket
   * @return awsS3Url
   */
  @javax.annotation.Nullable
  public String getAwsS3Url() {
    return awsS3Url;
  }

  public void setAwsS3Url(@javax.annotation.Nullable String awsS3Url) {
    this.awsS3Url = awsS3Url;
  }


  public CrowdstrikeFdrSettingsConfig cron(@javax.annotation.Nullable String cron) {
    this.cron = cron;
    return this;
  }

  /**
   * The time in seconds to wait before each check of the queue for more messages
   * @return cron
   */
  @javax.annotation.Nullable
  public String getCron() {
    return cron;
  }

  public void setCron(@javax.annotation.Nullable String cron) {
    this.cron = cron;
  }


  public CrowdstrikeFdrSettingsConfig visibilityTimeout(@javax.annotation.Nullable Integer visibilityTimeout) {
    this.visibilityTimeout = visibilityTimeout;
    return this;
  }

  /**
   * Time in seconds before a message is returned back to the SQS queue
   * @return visibilityTimeout
   */
  @javax.annotation.Nullable
  public Integer getVisibilityTimeout() {
    return visibilityTimeout;
  }

  public void setVisibilityTimeout(@javax.annotation.Nullable Integer visibilityTimeout) {
    this.visibilityTimeout = visibilityTimeout;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CrowdstrikeFdrSettingsConfig crowdstrikeFdrSettingsConfig = (CrowdstrikeFdrSettingsConfig) o;
    return Objects.equals(this.awsQueueUrl, crowdstrikeFdrSettingsConfig.awsQueueUrl) &&
        Objects.equals(this.awsRegionName, crowdstrikeFdrSettingsConfig.awsRegionName) &&
        Objects.equals(this.awsS3Url, crowdstrikeFdrSettingsConfig.awsS3Url) &&
        Objects.equals(this.cron, crowdstrikeFdrSettingsConfig.cron) &&
        Objects.equals(this.visibilityTimeout, crowdstrikeFdrSettingsConfig.visibilityTimeout);
  }

  @Override
  public int hashCode() {
    return Objects.hash(awsQueueUrl, awsRegionName, awsS3Url, cron, visibilityTimeout);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CrowdstrikeFdrSettingsConfig {\n");
    sb.append("    awsQueueUrl: ").append(toIndentedString(awsQueueUrl)).append("\n");
    sb.append("    awsRegionName: ").append(toIndentedString(awsRegionName)).append("\n");
    sb.append("    awsS3Url: ").append(toIndentedString(awsS3Url)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    visibilityTimeout: ").append(toIndentedString(visibilityTimeout)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aws_queue_url");
    openapiFields.add("aws_region_name");
    openapiFields.add("aws_s3_url");
    openapiFields.add("cron");
    openapiFields.add("visibility_timeout");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CrowdstrikeFdrSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CrowdstrikeFdrSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CrowdstrikeFdrSettingsConfig is not found in the empty JSON string", CrowdstrikeFdrSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CrowdstrikeFdrSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CrowdstrikeFdrSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aws_queue_url") != null && !jsonObj.get("aws_queue_url").isJsonNull()) && !jsonObj.get("aws_queue_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aws_queue_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aws_queue_url").toString()));
      }
      if ((jsonObj.get("aws_region_name") != null && !jsonObj.get("aws_region_name").isJsonNull()) && !jsonObj.get("aws_region_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aws_region_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aws_region_name").toString()));
      }
      if ((jsonObj.get("aws_s3_url") != null && !jsonObj.get("aws_s3_url").isJsonNull()) && !jsonObj.get("aws_s3_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aws_s3_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aws_s3_url").toString()));
      }
      if ((jsonObj.get("cron") != null && !jsonObj.get("cron").isJsonNull()) && !jsonObj.get("cron").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cron` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cron").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CrowdstrikeFdrSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CrowdstrikeFdrSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CrowdstrikeFdrSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CrowdstrikeFdrSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<CrowdstrikeFdrSettingsConfig>() {
           @Override
           public void write(JsonWriter out, CrowdstrikeFdrSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CrowdstrikeFdrSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CrowdstrikeFdrSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CrowdstrikeFdrSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to CrowdstrikeFdrSettingsConfig
   */
  public static CrowdstrikeFdrSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CrowdstrikeFdrSettingsConfig.class);
  }

  /**
   * Convert an instance of CrowdstrikeFdrSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

