/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GitHub audit logs settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-01T16:32:37.415371564Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class AuditLogsSettingsConfig {
  public static final String SERIALIZED_NAME_ACTIONS = "actions";
  @SerializedName(SERIALIZED_NAME_ACTIONS)
  @javax.annotation.Nullable
  private List<String> actions = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTOR = "actor";
  @SerializedName(SERIALIZED_NAME_ACTOR)
  @javax.annotation.Nullable
  private String actor;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  @javax.annotation.Nullable
  private String country;

  public static final String SERIALIZED_NAME_CREATED_AFTER = "created_after";
  @SerializedName(SERIALIZED_NAME_CREATED_AFTER)
  @javax.annotation.Nullable
  private String createdAfter;

  public static final String SERIALIZED_NAME_ENTERPRISE = "enterprise";
  @SerializedName(SERIALIZED_NAME_ENTERPRISE)
  @javax.annotation.Nullable
  private String enterprise;

  public static final String SERIALIZED_NAME_INCLUDE = "include";
  @SerializedName(SERIALIZED_NAME_INCLUDE)
  @javax.annotation.Nullable
  private String include;

  public static final String SERIALIZED_NAME_ORGANIZATION = "organization";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION)
  @javax.annotation.Nullable
  private String organization;

  public static final String SERIALIZED_NAME_REPOSITORY = "repository";
  @SerializedName(SERIALIZED_NAME_REPOSITORY)
  @javax.annotation.Nullable
  private String repository;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  @javax.annotation.Nullable
  private String user;

  public AuditLogsSettingsConfig() {
  }

  public AuditLogsSettingsConfig actions(@javax.annotation.Nullable List<String> actions) {
    this.actions = actions;
    return this;
  }

  public AuditLogsSettingsConfig addActionsItem(String actionsItem) {
    if (this.actions == null) {
      this.actions = new ArrayList<>();
    }
    this.actions.add(actionsItem);
    return this;
  }

  /**
   * Filter by specific actions. Use wildcards for broader matches (e.g., repo.*)
   * @return actions
   */
  @javax.annotation.Nullable
  public List<String> getActions() {
    return actions;
  }

  public void setActions(@javax.annotation.Nullable List<String> actions) {
    this.actions = actions;
  }


  public AuditLogsSettingsConfig actor(@javax.annotation.Nullable String actor) {
    this.actor = actor;
    return this;
  }

  /**
   * Filter by the username that initiated the action
   * @return actor
   */
  @javax.annotation.Nullable
  public String getActor() {
    return actor;
  }

  public void setActor(@javax.annotation.Nullable String actor) {
    this.actor = actor;
  }


  public AuditLogsSettingsConfig country(@javax.annotation.Nullable String country) {
    this.country = country;
    return this;
  }

  /**
   * Filter by actor&#39;s country code (e.g., US)
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(@javax.annotation.Nullable String country) {
    this.country = country;
  }


  public AuditLogsSettingsConfig createdAfter(@javax.annotation.Nullable String createdAfter) {
    this.createdAfter = createdAfter;
    return this;
  }

  /**
   * Only return audit log entries after this RFC3339 formatted time stamp
   * @return createdAfter
   */
  @javax.annotation.Nullable
  public String getCreatedAfter() {
    return createdAfter;
  }

  public void setCreatedAfter(@javax.annotation.Nullable String createdAfter) {
    this.createdAfter = createdAfter;
  }


  public AuditLogsSettingsConfig enterprise(@javax.annotation.Nullable String enterprise) {
    this.enterprise = enterprise;
    return this;
  }

  /**
   * Your GitHub enterprise slug or ID
   * @return enterprise
   */
  @javax.annotation.Nullable
  public String getEnterprise() {
    return enterprise;
  }

  public void setEnterprise(@javax.annotation.Nullable String enterprise) {
    this.enterprise = enterprise;
  }


  public AuditLogsSettingsConfig include(@javax.annotation.Nullable String include) {
    this.include = include;
    return this;
  }

  /**
   * Event types to include. web: Gets all web (non-git) events. git: Gets git events. all: Gets both.
   * @return include
   */
  @javax.annotation.Nullable
  public String getInclude() {
    return include;
  }

  public void setInclude(@javax.annotation.Nullable String include) {
    this.include = include;
  }


  public AuditLogsSettingsConfig organization(@javax.annotation.Nullable String organization) {
    this.organization = organization;
    return this;
  }

  /**
   * Filter by organization name
   * @return organization
   */
  @javax.annotation.Nullable
  public String getOrganization() {
    return organization;
  }

  public void setOrganization(@javax.annotation.Nullable String organization) {
    this.organization = organization;
  }


  public AuditLogsSettingsConfig repository(@javax.annotation.Nullable String repository) {
    this.repository = repository;
    return this;
  }

  /**
   * Filter by repository (format: org-name/repo-name)
   * @return repository
   */
  @javax.annotation.Nullable
  public String getRepository() {
    return repository;
  }

  public void setRepository(@javax.annotation.Nullable String repository) {
    this.repository = repository;
  }


  public AuditLogsSettingsConfig user(@javax.annotation.Nullable String user) {
    this.user = user;
    return this;
  }

  /**
   * Filter by the username that was affected by the action
   * @return user
   */
  @javax.annotation.Nullable
  public String getUser() {
    return user;
  }

  public void setUser(@javax.annotation.Nullable String user) {
    this.user = user;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AuditLogsSettingsConfig auditLogsSettingsConfig = (AuditLogsSettingsConfig) o;
    return Objects.equals(this.actions, auditLogsSettingsConfig.actions) &&
        Objects.equals(this.actor, auditLogsSettingsConfig.actor) &&
        Objects.equals(this.country, auditLogsSettingsConfig.country) &&
        Objects.equals(this.createdAfter, auditLogsSettingsConfig.createdAfter) &&
        Objects.equals(this.enterprise, auditLogsSettingsConfig.enterprise) &&
        Objects.equals(this.include, auditLogsSettingsConfig.include) &&
        Objects.equals(this.organization, auditLogsSettingsConfig.organization) &&
        Objects.equals(this.repository, auditLogsSettingsConfig.repository) &&
        Objects.equals(this.user, auditLogsSettingsConfig.user);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actions, actor, country, createdAfter, enterprise, include, organization, repository, user);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AuditLogsSettingsConfig {\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("    actor: ").append(toIndentedString(actor)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    createdAfter: ").append(toIndentedString(createdAfter)).append("\n");
    sb.append("    enterprise: ").append(toIndentedString(enterprise)).append("\n");
    sb.append("    include: ").append(toIndentedString(include)).append("\n");
    sb.append("    organization: ").append(toIndentedString(organization)).append("\n");
    sb.append("    repository: ").append(toIndentedString(repository)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("actions", "actor", "country", "created_after", "enterprise", "include", "organization", "repository", "user"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AuditLogsSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AuditLogsSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AuditLogsSettingsConfig is not found in the empty JSON string", AuditLogsSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AuditLogsSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AuditLogsSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("actions") != null && !jsonObj.get("actions").isJsonNull() && !jsonObj.get("actions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `actions` to be an array in the JSON string but got `%s`", jsonObj.get("actions").toString()));
      }
      if ((jsonObj.get("actor") != null && !jsonObj.get("actor").isJsonNull()) && !jsonObj.get("actor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actor").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("created_after") != null && !jsonObj.get("created_after").isJsonNull()) && !jsonObj.get("created_after").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_after` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_after").toString()));
      }
      if ((jsonObj.get("enterprise") != null && !jsonObj.get("enterprise").isJsonNull()) && !jsonObj.get("enterprise").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `enterprise` to be a primitive type in the JSON string but got `%s`", jsonObj.get("enterprise").toString()));
      }
      if ((jsonObj.get("include") != null && !jsonObj.get("include").isJsonNull()) && !jsonObj.get("include").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `include` to be a primitive type in the JSON string but got `%s`", jsonObj.get("include").toString()));
      }
      if ((jsonObj.get("organization") != null && !jsonObj.get("organization").isJsonNull()) && !jsonObj.get("organization").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization").toString()));
      }
      if ((jsonObj.get("repository") != null && !jsonObj.get("repository").isJsonNull()) && !jsonObj.get("repository").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repository` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repository").toString()));
      }
      if ((jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) && !jsonObj.get("user").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `user` to be a primitive type in the JSON string but got `%s`", jsonObj.get("user").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AuditLogsSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AuditLogsSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AuditLogsSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AuditLogsSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<AuditLogsSettingsConfig>() {
           @Override
           public void write(JsonWriter out, AuditLogsSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AuditLogsSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AuditLogsSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AuditLogsSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to AuditLogsSettingsConfig
   */
  public static AuditLogsSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AuditLogsSettingsConfig.class);
  }

  /**
   * Convert an instance of AuditLogsSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

