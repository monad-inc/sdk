/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BatchConfigBatchConfig;
import org.openapitools.client.model.ParquetParquetFormatter;
import org.openapitools.client.model.SecurityLakeSourceAccountDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Security Lake Output Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-17T17:45:50.670070680Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class SecurityLakeSettingsConfig {
  public static final String SERIALIZED_NAME_BATCH_CONFIG = "batch_config";
  @SerializedName(SERIALIZED_NAME_BATCH_CONFIG)
  @javax.annotation.Nullable
  private BatchConfigBatchConfig batchConfig;

  public static final String SERIALIZED_NAME_BUCKET_NAME = "bucketName";
  @SerializedName(SERIALIZED_NAME_BUCKET_NAME)
  @javax.annotation.Nullable
  private String bucketName;

  public static final String SERIALIZED_NAME_BUCKET_URL = "bucket_url";
  @SerializedName(SERIALIZED_NAME_BUCKET_URL)
  @javax.annotation.Nullable
  private String bucketUrl;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  @javax.annotation.Nullable
  private String key;

  public static final String SERIALIZED_NAME_PARQUET_FORMAT = "parquet_format";
  @SerializedName(SERIALIZED_NAME_PARQUET_FORMAT)
  @javax.annotation.Nullable
  private ParquetParquetFormatter parquetFormat;

  public static final String SERIALIZED_NAME_ROLE_ARN = "role_arn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  @javax.annotation.Nullable
  private String roleArn;

  public static final String SERIALIZED_NAME_SOURCE_ACCOUNT_DETAILS = "source_account_details";
  @SerializedName(SERIALIZED_NAME_SOURCE_ACCOUNT_DETAILS)
  @javax.annotation.Nullable
  private SecurityLakeSourceAccountDetails sourceAccountDetails;

  public SecurityLakeSettingsConfig() {
  }

  public SecurityLakeSettingsConfig batchConfig(@javax.annotation.Nullable BatchConfigBatchConfig batchConfig) {
    this.batchConfig = batchConfig;
    return this;
  }

  /**
   * Get batchConfig
   * @return batchConfig
   */
  @javax.annotation.Nullable
  public BatchConfigBatchConfig getBatchConfig() {
    return batchConfig;
  }

  public void setBatchConfig(@javax.annotation.Nullable BatchConfigBatchConfig batchConfig) {
    this.batchConfig = batchConfig;
  }


  public SecurityLakeSettingsConfig bucketName(@javax.annotation.Nullable String bucketName) {
    this.bucketName = bucketName;
    return this;
  }

  /**
   * Bucket Name
   * @return bucketName
   */
  @javax.annotation.Nullable
  public String getBucketName() {
    return bucketName;
  }

  public void setBucketName(@javax.annotation.Nullable String bucketName) {
    this.bucketName = bucketName;
  }


  public SecurityLakeSettingsConfig bucketUrl(@javax.annotation.Nullable String bucketUrl) {
    this.bucketUrl = bucketUrl;
    return this;
  }

  /**
   * The name of the S3 bucket where data will be stored
   * @return bucketUrl
   */
  @javax.annotation.Nullable
  public String getBucketUrl() {
    return bucketUrl;
  }

  public void setBucketUrl(@javax.annotation.Nullable String bucketUrl) {
    this.bucketUrl = bucketUrl;
  }


  public SecurityLakeSettingsConfig key(@javax.annotation.Nullable String key) {
    this.key = key;
    return this;
  }

  /**
   * S3 Key
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(@javax.annotation.Nullable String key) {
    this.key = key;
  }


  public SecurityLakeSettingsConfig parquetFormat(@javax.annotation.Nullable ParquetParquetFormatter parquetFormat) {
    this.parquetFormat = parquetFormat;
    return this;
  }

  /**
   * Get parquetFormat
   * @return parquetFormat
   */
  @javax.annotation.Nullable
  public ParquetParquetFormatter getParquetFormat() {
    return parquetFormat;
  }

  public void setParquetFormat(@javax.annotation.Nullable ParquetParquetFormatter parquetFormat) {
    this.parquetFormat = parquetFormat;
  }


  public SecurityLakeSettingsConfig roleArn(@javax.annotation.Nullable String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The Amazon Resource Name (ARN) of the IAM role to assume which grants access to the S3 bucket
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(@javax.annotation.Nullable String roleArn) {
    this.roleArn = roleArn;
  }


  public SecurityLakeSettingsConfig sourceAccountDetails(@javax.annotation.Nullable SecurityLakeSourceAccountDetails sourceAccountDetails) {
    this.sourceAccountDetails = sourceAccountDetails;
    return this;
  }

  /**
   * Get sourceAccountDetails
   * @return sourceAccountDetails
   */
  @javax.annotation.Nullable
  public SecurityLakeSourceAccountDetails getSourceAccountDetails() {
    return sourceAccountDetails;
  }

  public void setSourceAccountDetails(@javax.annotation.Nullable SecurityLakeSourceAccountDetails sourceAccountDetails) {
    this.sourceAccountDetails = sourceAccountDetails;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SecurityLakeSettingsConfig securityLakeSettingsConfig = (SecurityLakeSettingsConfig) o;
    return Objects.equals(this.batchConfig, securityLakeSettingsConfig.batchConfig) &&
        Objects.equals(this.bucketName, securityLakeSettingsConfig.bucketName) &&
        Objects.equals(this.bucketUrl, securityLakeSettingsConfig.bucketUrl) &&
        Objects.equals(this.key, securityLakeSettingsConfig.key) &&
        Objects.equals(this.parquetFormat, securityLakeSettingsConfig.parquetFormat) &&
        Objects.equals(this.roleArn, securityLakeSettingsConfig.roleArn) &&
        Objects.equals(this.sourceAccountDetails, securityLakeSettingsConfig.sourceAccountDetails);
  }

  @Override
  public int hashCode() {
    return Objects.hash(batchConfig, bucketName, bucketUrl, key, parquetFormat, roleArn, sourceAccountDetails);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SecurityLakeSettingsConfig {\n");
    sb.append("    batchConfig: ").append(toIndentedString(batchConfig)).append("\n");
    sb.append("    bucketName: ").append(toIndentedString(bucketName)).append("\n");
    sb.append("    bucketUrl: ").append(toIndentedString(bucketUrl)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    parquetFormat: ").append(toIndentedString(parquetFormat)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("    sourceAccountDetails: ").append(toIndentedString(sourceAccountDetails)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("batch_config", "bucketName", "bucket_url", "key", "parquet_format", "role_arn", "source_account_details"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SecurityLakeSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SecurityLakeSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SecurityLakeSettingsConfig is not found in the empty JSON string", SecurityLakeSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SecurityLakeSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SecurityLakeSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `batch_config`
      if (jsonObj.get("batch_config") != null && !jsonObj.get("batch_config").isJsonNull()) {
        BatchConfigBatchConfig.validateJsonElement(jsonObj.get("batch_config"));
      }
      if ((jsonObj.get("bucketName") != null && !jsonObj.get("bucketName").isJsonNull()) && !jsonObj.get("bucketName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucketName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucketName").toString()));
      }
      if ((jsonObj.get("bucket_url") != null && !jsonObj.get("bucket_url").isJsonNull()) && !jsonObj.get("bucket_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bucket_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bucket_url").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      // validate the optional field `parquet_format`
      if (jsonObj.get("parquet_format") != null && !jsonObj.get("parquet_format").isJsonNull()) {
        ParquetParquetFormatter.validateJsonElement(jsonObj.get("parquet_format"));
      }
      if ((jsonObj.get("role_arn") != null && !jsonObj.get("role_arn").isJsonNull()) && !jsonObj.get("role_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_arn").toString()));
      }
      // validate the optional field `source_account_details`
      if (jsonObj.get("source_account_details") != null && !jsonObj.get("source_account_details").isJsonNull()) {
        SecurityLakeSourceAccountDetails.validateJsonElement(jsonObj.get("source_account_details"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SecurityLakeSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SecurityLakeSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SecurityLakeSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SecurityLakeSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<SecurityLakeSettingsConfig>() {
           @Override
           public void write(JsonWriter out, SecurityLakeSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SecurityLakeSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SecurityLakeSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SecurityLakeSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to SecurityLakeSettingsConfig
   */
  public static SecurityLakeSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SecurityLakeSettingsConfig.class);
  }

  /**
   * Convert an instance of SecurityLakeSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

