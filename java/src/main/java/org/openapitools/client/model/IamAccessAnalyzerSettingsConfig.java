/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IamAccessAnalyzerFilter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * AWS IAM Access Analyzer settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-24T23:30:42.382161755Z[Etc/UTC]", comments = "Generator version: 7.14.0")
public class IamAccessAnalyzerSettingsConfig {
  public static final String SERIALIZED_NAME_ANALYZER_ARN = "analyzer_arn";
  @SerializedName(SERIALIZED_NAME_ANALYZER_ARN)
  @javax.annotation.Nullable
  private String analyzerArn;

  public static final String SERIALIZED_NAME_CRON = "cron";
  @SerializedName(SERIALIZED_NAME_CRON)
  @javax.annotation.Nullable
  private String cron;

  public static final String SERIALIZED_NAME_FILTERS = "filters";
  @SerializedName(SERIALIZED_NAME_FILTERS)
  @javax.annotation.Nullable
  private List<IamAccessAnalyzerFilter> filters = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  @javax.annotation.Nullable
  private String region;

  public static final String SERIALIZED_NAME_ROLE_ARN = "role_arn";
  @SerializedName(SERIALIZED_NAME_ROLE_ARN)
  @javax.annotation.Nullable
  private String roleArn;

  public IamAccessAnalyzerSettingsConfig() {
  }

  public IamAccessAnalyzerSettingsConfig analyzerArn(@javax.annotation.Nullable String analyzerArn) {
    this.analyzerArn = analyzerArn;
    return this;
  }

  /**
   * The [ARN of the analyzer] to retrieve findings from.
   * @return analyzerArn
   */
  @javax.annotation.Nullable
  public String getAnalyzerArn() {
    return analyzerArn;
  }

  public void setAnalyzerArn(@javax.annotation.Nullable String analyzerArn) {
    this.analyzerArn = analyzerArn;
  }


  public IamAccessAnalyzerSettingsConfig cron(@javax.annotation.Nullable String cron) {
    this.cron = cron;
    return this;
  }

  /**
   * Cron string for scheduling the ingest of your input. eg: &#x60;0 0 * * *&#x60; - Daily at midnight, or &#x60;*_/15 * * * *&#x60; - Every 15 minutes
   * @return cron
   */
  @javax.annotation.Nullable
  public String getCron() {
    return cron;
  }

  public void setCron(@javax.annotation.Nullable String cron) {
    this.cron = cron;
  }


  public IamAccessAnalyzerSettingsConfig filters(@javax.annotation.Nullable List<IamAccessAnalyzerFilter> filters) {
    this.filters = filters;
    return this;
  }

  public IamAccessAnalyzerSettingsConfig addFiltersItem(IamAccessAnalyzerFilter filtersItem) {
    if (this.filters == null) {
      this.filters = new ArrayList<>();
    }
    this.filters.add(filtersItem);
    return this;
  }

  /**
   * A filter to match for the findings to return.
   * @return filters
   */
  @javax.annotation.Nullable
  public List<IamAccessAnalyzerFilter> getFilters() {
    return filters;
  }

  public void setFilters(@javax.annotation.Nullable List<IamAccessAnalyzerFilter> filters) {
    this.filters = filters;
  }


  public IamAccessAnalyzerSettingsConfig region(@javax.annotation.Nullable String region) {
    this.region = region;
    return this;
  }

  /**
   * The Region that you would receieve findings for
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(@javax.annotation.Nullable String region) {
    this.region = region;
  }


  public IamAccessAnalyzerSettingsConfig roleArn(@javax.annotation.Nullable String roleArn) {
    this.roleArn = roleArn;
    return this;
  }

  /**
   * The ARN of the role to assume to access the bucket
   * @return roleArn
   */
  @javax.annotation.Nullable
  public String getRoleArn() {
    return roleArn;
  }

  public void setRoleArn(@javax.annotation.Nullable String roleArn) {
    this.roleArn = roleArn;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IamAccessAnalyzerSettingsConfig iamAccessAnalyzerSettingsConfig = (IamAccessAnalyzerSettingsConfig) o;
    return Objects.equals(this.analyzerArn, iamAccessAnalyzerSettingsConfig.analyzerArn) &&
        Objects.equals(this.cron, iamAccessAnalyzerSettingsConfig.cron) &&
        Objects.equals(this.filters, iamAccessAnalyzerSettingsConfig.filters) &&
        Objects.equals(this.region, iamAccessAnalyzerSettingsConfig.region) &&
        Objects.equals(this.roleArn, iamAccessAnalyzerSettingsConfig.roleArn);
  }

  @Override
  public int hashCode() {
    return Objects.hash(analyzerArn, cron, filters, region, roleArn);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IamAccessAnalyzerSettingsConfig {\n");
    sb.append("    analyzerArn: ").append(toIndentedString(analyzerArn)).append("\n");
    sb.append("    cron: ").append(toIndentedString(cron)).append("\n");
    sb.append("    filters: ").append(toIndentedString(filters)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    roleArn: ").append(toIndentedString(roleArn)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>(Arrays.asList("analyzer_arn", "cron", "filters", "region", "role_arn"));

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>(0);
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IamAccessAnalyzerSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IamAccessAnalyzerSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IamAccessAnalyzerSettingsConfig is not found in the empty JSON string", IamAccessAnalyzerSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IamAccessAnalyzerSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IamAccessAnalyzerSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("analyzer_arn") != null && !jsonObj.get("analyzer_arn").isJsonNull()) && !jsonObj.get("analyzer_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyzer_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("analyzer_arn").toString()));
      }
      if ((jsonObj.get("cron") != null && !jsonObj.get("cron").isJsonNull()) && !jsonObj.get("cron").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cron` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cron").toString()));
      }
      if (jsonObj.get("filters") != null && !jsonObj.get("filters").isJsonNull()) {
        JsonArray jsonArrayfilters = jsonObj.getAsJsonArray("filters");
        if (jsonArrayfilters != null) {
          // ensure the json data is an array
          if (!jsonObj.get("filters").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `filters` to be an array in the JSON string but got `%s`", jsonObj.get("filters").toString()));
          }

          // validate the optional field `filters` (array)
          for (int i = 0; i < jsonArrayfilters.size(); i++) {
            IamAccessAnalyzerFilter.validateJsonElement(jsonArrayfilters.get(i));
          };
        }
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("role_arn") != null && !jsonObj.get("role_arn").isJsonNull()) && !jsonObj.get("role_arn").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role_arn` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role_arn").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IamAccessAnalyzerSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IamAccessAnalyzerSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IamAccessAnalyzerSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IamAccessAnalyzerSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<IamAccessAnalyzerSettingsConfig>() {
           @Override
           public void write(JsonWriter out, IamAccessAnalyzerSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IamAccessAnalyzerSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IamAccessAnalyzerSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IamAccessAnalyzerSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to IamAccessAnalyzerSettingsConfig
   */
  public static IamAccessAnalyzerSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IamAccessAnalyzerSettingsConfig.class);
  }

  /**
   * Convert an instance of IamAccessAnalyzerSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

