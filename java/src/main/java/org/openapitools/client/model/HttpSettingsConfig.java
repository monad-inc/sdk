/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * HTTP Output Settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-04T18:05:02.328214947Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class HttpSettingsConfig {
  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  @javax.annotation.Nullable
  private String endpoint;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  @javax.annotation.Nullable
  private Map<String, String> headers = new HashMap<>();

  public static final String SERIALIZED_NAME_MAX_BATCH_DATA_SIZE = "max_batch_data_size";
  @SerializedName(SERIALIZED_NAME_MAX_BATCH_DATA_SIZE)
  @javax.annotation.Nullable
  private Integer maxBatchDataSize;

  public static final String SERIALIZED_NAME_MAX_BATCH_RECORD_COUNT = "max_batch_record_count";
  @SerializedName(SERIALIZED_NAME_MAX_BATCH_RECORD_COUNT)
  @javax.annotation.Nullable
  private Integer maxBatchRecordCount;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  @javax.annotation.Nullable
  private String method;

  public static final String SERIALIZED_NAME_PAYLOAD_STRUCTURE = "payload_structure";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_STRUCTURE)
  @javax.annotation.Nullable
  private String payloadStructure;

  public static final String SERIALIZED_NAME_RATE_LIMIT = "rate_limit";
  @SerializedName(SERIALIZED_NAME_RATE_LIMIT)
  @javax.annotation.Nullable
  private Integer rateLimit;

  public static final String SERIALIZED_NAME_TLS_SKIP_VERIFY = "tls_skip_verify";
  @SerializedName(SERIALIZED_NAME_TLS_SKIP_VERIFY)
  @javax.annotation.Nullable
  private Boolean tlsSkipVerify;

  public static final String SERIALIZED_NAME_WRAPPER_KEY = "wrapper_key";
  @SerializedName(SERIALIZED_NAME_WRAPPER_KEY)
  @javax.annotation.Nullable
  private String wrapperKey;

  public HttpSettingsConfig() {
  }

  public HttpSettingsConfig endpoint(@javax.annotation.Nullable String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * The full URL of the HTTP endpoint to send data to. Must include the scheme (http or https).
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(@javax.annotation.Nullable String endpoint) {
    this.endpoint = endpoint;
  }


  public HttpSettingsConfig headers(@javax.annotation.Nullable Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public HttpSettingsConfig putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * Non secret headers
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(@javax.annotation.Nullable Map<String, String> headers) {
    this.headers = headers;
  }


  public HttpSettingsConfig maxBatchDataSize(@javax.annotation.Nullable Integer maxBatchDataSize) {
    this.maxBatchDataSize = maxBatchDataSize;
    return this;
  }

  /**
   * The maximum size in KB for a single batch of data to be sent in one request. This does not effect the single payload structure.
   * @return maxBatchDataSize
   */
  @javax.annotation.Nullable
  public Integer getMaxBatchDataSize() {
    return maxBatchDataSize;
  }

  public void setMaxBatchDataSize(@javax.annotation.Nullable Integer maxBatchDataSize) {
    this.maxBatchDataSize = maxBatchDataSize;
  }


  public HttpSettingsConfig maxBatchRecordCount(@javax.annotation.Nullable Integer maxBatchRecordCount) {
    this.maxBatchRecordCount = maxBatchRecordCount;
    return this;
  }

  /**
   * The maximum number of records to include in a single batch. For single payload structure, this is automatically set to 1. For other payload structures, this determines the maximum number of records sent in a single request.
   * @return maxBatchRecordCount
   */
  @javax.annotation.Nullable
  public Integer getMaxBatchRecordCount() {
    return maxBatchRecordCount;
  }

  public void setMaxBatchRecordCount(@javax.annotation.Nullable Integer maxBatchRecordCount) {
    this.maxBatchRecordCount = maxBatchRecordCount;
  }


  public HttpSettingsConfig method(@javax.annotation.Nullable String method) {
    this.method = method;
    return this;
  }

  /**
   * The HTTP method to use for requests (GET, POST, PUT, PATCH, or DELETE).
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }

  public void setMethod(@javax.annotation.Nullable String method) {
    this.method = method;
  }


  public HttpSettingsConfig payloadStructure(@javax.annotation.Nullable String payloadStructure) {
    this.payloadStructure = payloadStructure;
    return this;
  }

  /**
   * Determines how the payload is structured. &#39;single&#39; sends each record as a separate request, &#39;array&#39; sends multiple records as an array, &#39;wrapped&#39; sends multiple records within a wrapper object.
   * @return payloadStructure
   */
  @javax.annotation.Nullable
  public String getPayloadStructure() {
    return payloadStructure;
  }

  public void setPayloadStructure(@javax.annotation.Nullable String payloadStructure) {
    this.payloadStructure = payloadStructure;
  }


  public HttpSettingsConfig rateLimit(@javax.annotation.Nullable Integer rateLimit) {
    this.rateLimit = rateLimit;
    return this;
  }

  /**
   * Maximum number of requests per second to send to the endpoint.
   * @return rateLimit
   */
  @javax.annotation.Nullable
  public Integer getRateLimit() {
    return rateLimit;
  }

  public void setRateLimit(@javax.annotation.Nullable Integer rateLimit) {
    this.rateLimit = rateLimit;
  }


  public HttpSettingsConfig tlsSkipVerify(@javax.annotation.Nullable Boolean tlsSkipVerify) {
    this.tlsSkipVerify = tlsSkipVerify;
    return this;
  }

  /**
   * Skip TLS verification.
   * @return tlsSkipVerify
   */
  @javax.annotation.Nullable
  public Boolean getTlsSkipVerify() {
    return tlsSkipVerify;
  }

  public void setTlsSkipVerify(@javax.annotation.Nullable Boolean tlsSkipVerify) {
    this.tlsSkipVerify = tlsSkipVerify;
  }


  public HttpSettingsConfig wrapperKey(@javax.annotation.Nullable String wrapperKey) {
    this.wrapperKey = wrapperKey;
    return this;
  }

  /**
   * The key to use for wrapping the payload when PayloadStructure is set to &#39;wrapped&#39;.
   * @return wrapperKey
   */
  @javax.annotation.Nullable
  public String getWrapperKey() {
    return wrapperKey;
  }

  public void setWrapperKey(@javax.annotation.Nullable String wrapperKey) {
    this.wrapperKey = wrapperKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpSettingsConfig httpSettingsConfig = (HttpSettingsConfig) o;
    return Objects.equals(this.endpoint, httpSettingsConfig.endpoint) &&
        Objects.equals(this.headers, httpSettingsConfig.headers) &&
        Objects.equals(this.maxBatchDataSize, httpSettingsConfig.maxBatchDataSize) &&
        Objects.equals(this.maxBatchRecordCount, httpSettingsConfig.maxBatchRecordCount) &&
        Objects.equals(this.method, httpSettingsConfig.method) &&
        Objects.equals(this.payloadStructure, httpSettingsConfig.payloadStructure) &&
        Objects.equals(this.rateLimit, httpSettingsConfig.rateLimit) &&
        Objects.equals(this.tlsSkipVerify, httpSettingsConfig.tlsSkipVerify) &&
        Objects.equals(this.wrapperKey, httpSettingsConfig.wrapperKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endpoint, headers, maxBatchDataSize, maxBatchRecordCount, method, payloadStructure, rateLimit, tlsSkipVerify, wrapperKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpSettingsConfig {\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    maxBatchDataSize: ").append(toIndentedString(maxBatchDataSize)).append("\n");
    sb.append("    maxBatchRecordCount: ").append(toIndentedString(maxBatchRecordCount)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    payloadStructure: ").append(toIndentedString(payloadStructure)).append("\n");
    sb.append("    rateLimit: ").append(toIndentedString(rateLimit)).append("\n");
    sb.append("    tlsSkipVerify: ").append(toIndentedString(tlsSkipVerify)).append("\n");
    sb.append("    wrapperKey: ").append(toIndentedString(wrapperKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endpoint");
    openapiFields.add("headers");
    openapiFields.add("max_batch_data_size");
    openapiFields.add("max_batch_record_count");
    openapiFields.add("method");
    openapiFields.add("payload_structure");
    openapiFields.add("rate_limit");
    openapiFields.add("tls_skip_verify");
    openapiFields.add("wrapper_key");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HttpSettingsConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HttpSettingsConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HttpSettingsConfig is not found in the empty JSON string", HttpSettingsConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HttpSettingsConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HttpSettingsConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if ((jsonObj.get("payload_structure") != null && !jsonObj.get("payload_structure").isJsonNull()) && !jsonObj.get("payload_structure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payload_structure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payload_structure").toString()));
      }
      if ((jsonObj.get("wrapper_key") != null && !jsonObj.get("wrapper_key").isJsonNull()) && !jsonObj.get("wrapper_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `wrapper_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("wrapper_key").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HttpSettingsConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HttpSettingsConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HttpSettingsConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HttpSettingsConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<HttpSettingsConfig>() {
           @Override
           public void write(JsonWriter out, HttpSettingsConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HttpSettingsConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HttpSettingsConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HttpSettingsConfig
   * @throws IOException if the JSON string is invalid with respect to HttpSettingsConfig
   */
  public static HttpSettingsConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HttpSettingsConfig.class);
  }

  /**
   * Convert an instance of HttpSettingsConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

