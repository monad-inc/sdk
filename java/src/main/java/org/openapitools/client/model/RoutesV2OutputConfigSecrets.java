/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.CriblHttpSecretsConfig;
import org.openapitools.client.model.ElasticsearchSecretsConfig;
import org.openapitools.client.model.HttpSecretsConfig;
import org.openapitools.client.model.OpensearchSecretsConfig;
import org.openapitools.client.model.SentinelSecretsConfig;
import org.openapitools.client.model.SnowflakeSecretsConfig;
import org.openapitools.client.model.SplunkSecretsConfig;
import org.openapitools.client.model.SumologicSecretsConfig;



import java.io.IOException;
import java.lang.reflect.Type;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapter;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.JsonPrimitive;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonSerializationContext;
import com.google.gson.JsonSerializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonArray;
import com.google.gson.JsonParseException;

import org.openapitools.client.JSON;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-01-24T16:03:06.042386318Z[Etc/UTC]", comments = "Generator version: 7.11.0")
public class RoutesV2OutputConfigSecrets extends AbstractOpenApiSchema {
    private static final Logger log = Logger.getLogger(RoutesV2OutputConfigSecrets.class.getName());

    public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
        @SuppressWarnings("unchecked")
        @Override
        public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
            if (!RoutesV2OutputConfigSecrets.class.isAssignableFrom(type.getRawType())) {
                return null; // this class only serializes 'RoutesV2OutputConfigSecrets' and its subtypes
            }
            final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
            final TypeAdapter<CriblHttpSecretsConfig> adapterCriblHttpSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(CriblHttpSecretsConfig.class));
            final TypeAdapter<ElasticsearchSecretsConfig> adapterElasticsearchSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(ElasticsearchSecretsConfig.class));
            final TypeAdapter<HttpSecretsConfig> adapterHttpSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(HttpSecretsConfig.class));
            final TypeAdapter<OpensearchSecretsConfig> adapterOpensearchSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(OpensearchSecretsConfig.class));
            final TypeAdapter<Object> adapterObject = gson.getDelegateAdapter(this, TypeToken.get(Object.class));
            final TypeAdapter<SentinelSecretsConfig> adapterSentinelSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SentinelSecretsConfig.class));
            final TypeAdapter<SnowflakeSecretsConfig> adapterSnowflakeSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SnowflakeSecretsConfig.class));
            final TypeAdapter<SplunkSecretsConfig> adapterSplunkSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SplunkSecretsConfig.class));
            final TypeAdapter<SumologicSecretsConfig> adapterSumologicSecretsConfig = gson.getDelegateAdapter(this, TypeToken.get(SumologicSecretsConfig.class));

            return (TypeAdapter<T>) new TypeAdapter<RoutesV2OutputConfigSecrets>() {
                @Override
                public void write(JsonWriter out, RoutesV2OutputConfigSecrets value) throws IOException {
                    if (value == null || value.getActualInstance() == null) {
                        elementAdapter.write(out, null);
                        return;
                    }

                    // check if the actual instance is of the type `CriblHttpSecretsConfig`
                    if (value.getActualInstance() instanceof CriblHttpSecretsConfig) {
                        JsonElement element = adapterCriblHttpSecretsConfig.toJsonTree((CriblHttpSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `ElasticsearchSecretsConfig`
                    if (value.getActualInstance() instanceof ElasticsearchSecretsConfig) {
                        JsonElement element = adapterElasticsearchSecretsConfig.toJsonTree((ElasticsearchSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `HttpSecretsConfig`
                    if (value.getActualInstance() instanceof HttpSecretsConfig) {
                        JsonElement element = adapterHttpSecretsConfig.toJsonTree((HttpSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `OpensearchSecretsConfig`
                    if (value.getActualInstance() instanceof OpensearchSecretsConfig) {
                        JsonElement element = adapterOpensearchSecretsConfig.toJsonTree((OpensearchSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `Object`
                    if (value.getActualInstance() instanceof Object) {
                        JsonPrimitive primitive = adapterObject.toJsonTree((Object)value.getActualInstance()).getAsJsonPrimitive();
                        elementAdapter.write(out, primitive);
                        return;
                    }
                    // check if the actual instance is of the type `SentinelSecretsConfig`
                    if (value.getActualInstance() instanceof SentinelSecretsConfig) {
                        JsonElement element = adapterSentinelSecretsConfig.toJsonTree((SentinelSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SnowflakeSecretsConfig`
                    if (value.getActualInstance() instanceof SnowflakeSecretsConfig) {
                        JsonElement element = adapterSnowflakeSecretsConfig.toJsonTree((SnowflakeSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SplunkSecretsConfig`
                    if (value.getActualInstance() instanceof SplunkSecretsConfig) {
                        JsonElement element = adapterSplunkSecretsConfig.toJsonTree((SplunkSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    // check if the actual instance is of the type `SumologicSecretsConfig`
                    if (value.getActualInstance() instanceof SumologicSecretsConfig) {
                        JsonElement element = adapterSumologicSecretsConfig.toJsonTree((SumologicSecretsConfig)value.getActualInstance());
                        elementAdapter.write(out, element);
                        return;
                    }
                    throw new IOException("Failed to serialize as the type doesn't match oneOf schemas: CriblHttpSecretsConfig, ElasticsearchSecretsConfig, HttpSecretsConfig, Object, OpensearchSecretsConfig, SentinelSecretsConfig, SnowflakeSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig");
                }

                @Override
                public RoutesV2OutputConfigSecrets read(JsonReader in) throws IOException {
                    Object deserialized = null;
                    JsonElement jsonElement = elementAdapter.read(in);

                    int match = 0;
                    ArrayList<String> errorMessages = new ArrayList<>();
                    TypeAdapter actualAdapter = elementAdapter;

                    // deserialize CriblHttpSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        CriblHttpSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterCriblHttpSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'CriblHttpSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for CriblHttpSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'CriblHttpSecretsConfig'", e);
                    }
                    // deserialize ElasticsearchSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        ElasticsearchSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterElasticsearchSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'ElasticsearchSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for ElasticsearchSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'ElasticsearchSecretsConfig'", e);
                    }
                    // deserialize HttpSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        HttpSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterHttpSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'HttpSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for HttpSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'HttpSecretsConfig'", e);
                    }
                    // deserialize OpensearchSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        OpensearchSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterOpensearchSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'OpensearchSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for OpensearchSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'OpensearchSecretsConfig'", e);
                    }
                    // deserialize Object
                    try {
                        // validate the JSON object to see if any exception is thrown
                        if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                            throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
                        }
                        actualAdapter = adapterObject;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'Object'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'Object'", e);
                    }
                    // deserialize SentinelSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SentinelSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSentinelSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SentinelSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SentinelSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SentinelSecretsConfig'", e);
                    }
                    // deserialize SnowflakeSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SnowflakeSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSnowflakeSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SnowflakeSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SnowflakeSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SnowflakeSecretsConfig'", e);
                    }
                    // deserialize SplunkSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SplunkSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSplunkSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SplunkSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SplunkSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SplunkSecretsConfig'", e);
                    }
                    // deserialize SumologicSecretsConfig
                    try {
                        // validate the JSON object to see if any exception is thrown
                        SumologicSecretsConfig.validateJsonElement(jsonElement);
                        actualAdapter = adapterSumologicSecretsConfig;
                        match++;
                        log.log(Level.FINER, "Input data matches schema 'SumologicSecretsConfig'");
                    } catch (Exception e) {
                        // deserialization failed, continue
                        errorMessages.add(String.format("Deserialization for SumologicSecretsConfig failed with `%s`.", e.getMessage()));
                        log.log(Level.FINER, "Input data does not match schema 'SumologicSecretsConfig'", e);
                    }

                    if (match == 1) {
                        RoutesV2OutputConfigSecrets ret = new RoutesV2OutputConfigSecrets();
                        ret.setActualInstance(actualAdapter.fromJsonTree(jsonElement));
                        return ret;
                    }

                    throw new IOException(String.format("Failed deserialization for RoutesV2OutputConfigSecrets: %d classes match result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", match, errorMessages, jsonElement.toString()));
                }
            }.nullSafe();
        }
    }

    // store a list of schema names defined in oneOf
    public static final Map<String, Class<?>> schemas = new HashMap<String, Class<?>>();

    public RoutesV2OutputConfigSecrets() {
        super("oneOf", Boolean.FALSE);
    }

    public RoutesV2OutputConfigSecrets(Object o) {
        super("oneOf", Boolean.FALSE);
        setActualInstance(o);
    }

    static {
        schemas.put("CriblHttpSecretsConfig", CriblHttpSecretsConfig.class);
        schemas.put("ElasticsearchSecretsConfig", ElasticsearchSecretsConfig.class);
        schemas.put("HttpSecretsConfig", HttpSecretsConfig.class);
        schemas.put("OpensearchSecretsConfig", OpensearchSecretsConfig.class);
        schemas.put("Object", Object.class);
        schemas.put("SentinelSecretsConfig", SentinelSecretsConfig.class);
        schemas.put("SnowflakeSecretsConfig", SnowflakeSecretsConfig.class);
        schemas.put("SplunkSecretsConfig", SplunkSecretsConfig.class);
        schemas.put("SumologicSecretsConfig", SumologicSecretsConfig.class);
    }

    @Override
    public Map<String, Class<?>> getSchemas() {
        return RoutesV2OutputConfigSecrets.schemas;
    }

    /**
     * Set the instance that matches the oneOf child schema, check
     * the instance parameter is valid against the oneOf child schemas:
     * CriblHttpSecretsConfig, ElasticsearchSecretsConfig, HttpSecretsConfig, Object, OpensearchSecretsConfig, SentinelSecretsConfig, SnowflakeSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig
     *
     * It could be an instance of the 'oneOf' schemas.
     */
    @Override
    public void setActualInstance(Object instance) {
        if (instance instanceof CriblHttpSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof ElasticsearchSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof HttpSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof OpensearchSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof Object) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SentinelSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SnowflakeSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SplunkSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        if (instance instanceof SumologicSecretsConfig) {
            super.setActualInstance(instance);
            return;
        }

        throw new RuntimeException("Invalid instance type. Must be CriblHttpSecretsConfig, ElasticsearchSecretsConfig, HttpSecretsConfig, Object, OpensearchSecretsConfig, SentinelSecretsConfig, SnowflakeSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig");
    }

    /**
     * Get the actual instance, which can be the following:
     * CriblHttpSecretsConfig, ElasticsearchSecretsConfig, HttpSecretsConfig, Object, OpensearchSecretsConfig, SentinelSecretsConfig, SnowflakeSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig
     *
     * @return The actual instance (CriblHttpSecretsConfig, ElasticsearchSecretsConfig, HttpSecretsConfig, Object, OpensearchSecretsConfig, SentinelSecretsConfig, SnowflakeSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig)
     */
    @SuppressWarnings("unchecked")
    @Override
    public Object getActualInstance() {
        return super.getActualInstance();
    }

    /**
     * Get the actual instance of `CriblHttpSecretsConfig`. If the actual instance is not `CriblHttpSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `CriblHttpSecretsConfig`
     * @throws ClassCastException if the instance is not `CriblHttpSecretsConfig`
     */
    public CriblHttpSecretsConfig getCriblHttpSecretsConfig() throws ClassCastException {
        return (CriblHttpSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `ElasticsearchSecretsConfig`. If the actual instance is not `ElasticsearchSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `ElasticsearchSecretsConfig`
     * @throws ClassCastException if the instance is not `ElasticsearchSecretsConfig`
     */
    public ElasticsearchSecretsConfig getElasticsearchSecretsConfig() throws ClassCastException {
        return (ElasticsearchSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `HttpSecretsConfig`. If the actual instance is not `HttpSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `HttpSecretsConfig`
     * @throws ClassCastException if the instance is not `HttpSecretsConfig`
     */
    public HttpSecretsConfig getHttpSecretsConfig() throws ClassCastException {
        return (HttpSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `OpensearchSecretsConfig`. If the actual instance is not `OpensearchSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `OpensearchSecretsConfig`
     * @throws ClassCastException if the instance is not `OpensearchSecretsConfig`
     */
    public OpensearchSecretsConfig getOpensearchSecretsConfig() throws ClassCastException {
        return (OpensearchSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `Object`. If the actual instance is not `Object`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `Object`
     * @throws ClassCastException if the instance is not `Object`
     */
    public Object getObject() throws ClassCastException {
        return (Object)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SentinelSecretsConfig`. If the actual instance is not `SentinelSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SentinelSecretsConfig`
     * @throws ClassCastException if the instance is not `SentinelSecretsConfig`
     */
    public SentinelSecretsConfig getSentinelSecretsConfig() throws ClassCastException {
        return (SentinelSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SnowflakeSecretsConfig`. If the actual instance is not `SnowflakeSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SnowflakeSecretsConfig`
     * @throws ClassCastException if the instance is not `SnowflakeSecretsConfig`
     */
    public SnowflakeSecretsConfig getSnowflakeSecretsConfig() throws ClassCastException {
        return (SnowflakeSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SplunkSecretsConfig`. If the actual instance is not `SplunkSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SplunkSecretsConfig`
     * @throws ClassCastException if the instance is not `SplunkSecretsConfig`
     */
    public SplunkSecretsConfig getSplunkSecretsConfig() throws ClassCastException {
        return (SplunkSecretsConfig)super.getActualInstance();
    }

    /**
     * Get the actual instance of `SumologicSecretsConfig`. If the actual instance is not `SumologicSecretsConfig`,
     * the ClassCastException will be thrown.
     *
     * @return The actual instance of `SumologicSecretsConfig`
     * @throws ClassCastException if the instance is not `SumologicSecretsConfig`
     */
    public SumologicSecretsConfig getSumologicSecretsConfig() throws ClassCastException {
        return (SumologicSecretsConfig)super.getActualInstance();
    }

    /**
     * Validates the JSON Element and throws an exception if issues found
     *
     * @param jsonElement JSON Element
     * @throws IOException if the JSON Element is invalid with respect to RoutesV2OutputConfigSecrets
     */
    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
        // validate oneOf schemas one by one
        int validCount = 0;
        ArrayList<String> errorMessages = new ArrayList<>();
        // validate the json string with CriblHttpSecretsConfig
        try {
            CriblHttpSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for CriblHttpSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with ElasticsearchSecretsConfig
        try {
            ElasticsearchSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for ElasticsearchSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with HttpSecretsConfig
        try {
            HttpSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for HttpSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with OpensearchSecretsConfig
        try {
            OpensearchSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for OpensearchSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with Object
        try {
            if (!jsonElement.getAsJsonPrimitive().isNumber()) {
                throw new IllegalArgumentException(String.format("Expected json element to be of type Number in the JSON string but got `%s`", jsonElement.toString()));
            }
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for Object failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SentinelSecretsConfig
        try {
            SentinelSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SentinelSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SnowflakeSecretsConfig
        try {
            SnowflakeSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SnowflakeSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SplunkSecretsConfig
        try {
            SplunkSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SplunkSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        // validate the json string with SumologicSecretsConfig
        try {
            SumologicSecretsConfig.validateJsonElement(jsonElement);
            validCount++;
        } catch (Exception e) {
            errorMessages.add(String.format("Deserialization for SumologicSecretsConfig failed with `%s`.", e.getMessage()));
            // continue to the next one
        }
        if (validCount != 1) {
            throw new IOException(String.format("The JSON string is invalid for RoutesV2OutputConfigSecrets with oneOf schemas: CriblHttpSecretsConfig, ElasticsearchSecretsConfig, HttpSecretsConfig, Object, OpensearchSecretsConfig, SentinelSecretsConfig, SnowflakeSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig. %d class(es) match the result, expected 1. Detailed failure message for oneOf schemas: %s. JSON: %s", validCount, errorMessages, jsonElement.toString()));
        }
    }

    /**
     * Create an instance of RoutesV2OutputConfigSecrets given an JSON string
     *
     * @param jsonString JSON string
     * @return An instance of RoutesV2OutputConfigSecrets
     * @throws IOException if the JSON string is invalid with respect to RoutesV2OutputConfigSecrets
     */
    public static RoutesV2OutputConfigSecrets fromJson(String jsonString) throws IOException {
        return JSON.getGson().fromJson(jsonString, RoutesV2OutputConfigSecrets.class);
    }

    /**
     * Convert an instance of RoutesV2OutputConfigSecrets to an JSON string
     *
     * @return JSON string
     */
    public String toJson() {
        return JSON.getGson().toJson(this);
    }
}

