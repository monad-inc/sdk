/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * EnrichmentConnectorMeta
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-27T21:04:11.137712083Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class EnrichmentConnectorMeta {
  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  @javax.annotation.Nullable
  private Object config = null;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_HOUSE = "house";
  @SerializedName(SERIALIZED_NAME_HOUSE)
  @javax.annotation.Nullable
  private String house;

  public static final String SERIALIZED_NAME_INTERNAL = "internal";
  @SerializedName(SERIALIZED_NAME_INTERNAL)
  @javax.annotation.Nullable
  private Boolean internal;

  public static final String SERIALIZED_NAME_LOGO_KEY = "logo_key";
  @SerializedName(SERIALIZED_NAME_LOGO_KEY)
  @javax.annotation.Nullable
  private String logoKey;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_TIER = "tier";
  @SerializedName(SERIALIZED_NAME_TIER)
  @javax.annotation.Nullable
  private Integer tier;

  public static final String SERIALIZED_NAME_TYPE_ID = "type_id";
  @SerializedName(SERIALIZED_NAME_TYPE_ID)
  @javax.annotation.Nullable
  private String typeId;

  public EnrichmentConnectorMeta() {
  }

  public EnrichmentConnectorMeta config(@javax.annotation.Nullable Object config) {
    this.config = config;
    return this;
  }

  /**
   * Get config
   * @return config
   */
  @javax.annotation.Nullable
  public Object getConfig() {
    return config;
  }

  public void setConfig(@javax.annotation.Nullable Object config) {
    this.config = config;
  }


  public EnrichmentConnectorMeta description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public EnrichmentConnectorMeta house(@javax.annotation.Nullable String house) {
    this.house = house;
    return this;
  }

  /**
   * Get house
   * @return house
   */
  @javax.annotation.Nullable
  public String getHouse() {
    return house;
  }

  public void setHouse(@javax.annotation.Nullable String house) {
    this.house = house;
  }


  public EnrichmentConnectorMeta internal(@javax.annotation.Nullable Boolean internal) {
    this.internal = internal;
    return this;
  }

  /**
   * Get internal
   * @return internal
   */
  @javax.annotation.Nullable
  public Boolean getInternal() {
    return internal;
  }

  public void setInternal(@javax.annotation.Nullable Boolean internal) {
    this.internal = internal;
  }


  public EnrichmentConnectorMeta logoKey(@javax.annotation.Nullable String logoKey) {
    this.logoKey = logoKey;
    return this;
  }

  /**
   * Get logoKey
   * @return logoKey
   */
  @javax.annotation.Nullable
  public String getLogoKey() {
    return logoKey;
  }

  public void setLogoKey(@javax.annotation.Nullable String logoKey) {
    this.logoKey = logoKey;
  }


  public EnrichmentConnectorMeta name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public EnrichmentConnectorMeta tier(@javax.annotation.Nullable Integer tier) {
    this.tier = tier;
    return this;
  }

  /**
   * Get tier
   * @return tier
   */
  @javax.annotation.Nullable
  public Integer getTier() {
    return tier;
  }

  public void setTier(@javax.annotation.Nullable Integer tier) {
    this.tier = tier;
  }


  public EnrichmentConnectorMeta typeId(@javax.annotation.Nullable String typeId) {
    this.typeId = typeId;
    return this;
  }

  /**
   * Get typeId
   * @return typeId
   */
  @javax.annotation.Nullable
  public String getTypeId() {
    return typeId;
  }

  public void setTypeId(@javax.annotation.Nullable String typeId) {
    this.typeId = typeId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EnrichmentConnectorMeta enrichmentConnectorMeta = (EnrichmentConnectorMeta) o;
    return Objects.equals(this.config, enrichmentConnectorMeta.config) &&
        Objects.equals(this.description, enrichmentConnectorMeta.description) &&
        Objects.equals(this.house, enrichmentConnectorMeta.house) &&
        Objects.equals(this.internal, enrichmentConnectorMeta.internal) &&
        Objects.equals(this.logoKey, enrichmentConnectorMeta.logoKey) &&
        Objects.equals(this.name, enrichmentConnectorMeta.name) &&
        Objects.equals(this.tier, enrichmentConnectorMeta.tier) &&
        Objects.equals(this.typeId, enrichmentConnectorMeta.typeId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(config, description, house, internal, logoKey, name, tier, typeId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EnrichmentConnectorMeta {\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    house: ").append(toIndentedString(house)).append("\n");
    sb.append("    internal: ").append(toIndentedString(internal)).append("\n");
    sb.append("    logoKey: ").append(toIndentedString(logoKey)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tier: ").append(toIndentedString(tier)).append("\n");
    sb.append("    typeId: ").append(toIndentedString(typeId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("config");
    openapiFields.add("description");
    openapiFields.add("house");
    openapiFields.add("internal");
    openapiFields.add("logo_key");
    openapiFields.add("name");
    openapiFields.add("tier");
    openapiFields.add("type_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EnrichmentConnectorMeta
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EnrichmentConnectorMeta.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EnrichmentConnectorMeta is not found in the empty JSON string", EnrichmentConnectorMeta.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EnrichmentConnectorMeta.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EnrichmentConnectorMeta` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("house") != null && !jsonObj.get("house").isJsonNull()) && !jsonObj.get("house").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `house` to be a primitive type in the JSON string but got `%s`", jsonObj.get("house").toString()));
      }
      if ((jsonObj.get("logo_key") != null && !jsonObj.get("logo_key").isJsonNull()) && !jsonObj.get("logo_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo_key").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("type_id") != null && !jsonObj.get("type_id").isJsonNull()) && !jsonObj.get("type_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EnrichmentConnectorMeta.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EnrichmentConnectorMeta' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EnrichmentConnectorMeta> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EnrichmentConnectorMeta.class));

       return (TypeAdapter<T>) new TypeAdapter<EnrichmentConnectorMeta>() {
           @Override
           public void write(JsonWriter out, EnrichmentConnectorMeta value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EnrichmentConnectorMeta read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EnrichmentConnectorMeta given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EnrichmentConnectorMeta
   * @throws IOException if the JSON string is invalid with respect to EnrichmentConnectorMeta
   */
  public static EnrichmentConnectorMeta fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EnrichmentConnectorMeta.class);
  }

  /**
   * Convert an instance of EnrichmentConnectorMeta to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

