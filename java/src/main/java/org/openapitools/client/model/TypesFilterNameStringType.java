/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.annotations.SerializedName;

import java.io.IOException;
import com.google.gson.TypeAdapter;
import com.google.gson.JsonElement;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;

/**
 * The following are keys you can use:    - description: Prefix match, not case-sensitive.    - name: Prefix match, case-sensitive.    - tag-key: Prefix match, case-sensitive.    - tag-value: Prefix match, case-sensitive.    - primary-region: Prefix match, case-sensitive.    - owning-service: Prefix match, case-sensitive.    - all: Breaks the filter value string into words and then searches all   attributes for matches. Not case-sensitive.
 */
@JsonAdapter(TypesFilterNameStringType.Adapter.class)
public enum TypesFilterNameStringType {
  
  FilterNameStringTypeDescription("description"),
  
  FilterNameStringTypeName("name"),
  
  FilterNameStringTypeTagKey("tag-key"),
  
  FilterNameStringTypeTagValue("tag-value"),
  
  FilterNameStringTypePrimaryRegion("primary-region"),
  
  FilterNameStringTypeOwningService("owning-service"),
  
  FilterNameStringTypeAll("all");

  private String value;

  TypesFilterNameStringType(String value) {
    this.value = value;
  }

  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  public static TypesFilterNameStringType fromValue(String value) {
    for (TypesFilterNameStringType b : TypesFilterNameStringType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }

  public static class Adapter extends TypeAdapter<TypesFilterNameStringType> {
    @Override
    public void write(final JsonWriter jsonWriter, final TypesFilterNameStringType enumeration) throws IOException {
      jsonWriter.value(enumeration.getValue());
    }

    @Override
    public TypesFilterNameStringType read(final JsonReader jsonReader) throws IOException {
      String value = jsonReader.nextString();
      return TypesFilterNameStringType.fromValue(value);
    }
  }

  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
    String value = jsonElement.getAsString();
    TypesFilterNameStringType.fromValue(value);
  }
}

