/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ResponderErrorResponse;
import org.openapitools.client.model.RoutesV2ApplyTransformationRequest;
import org.openapitools.client.model.RoutesV2ApplyTransformationResponse;
import org.openapitools.client.model.RoutesV2GenerateRecordRequest;
import org.openapitools.client.model.RoutesV2GenerateRecordResponse;
import org.openapitools.client.model.RoutesV2ListTemplatesResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SandboxApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SandboxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SandboxApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2SandboxTemplateGet
     * @param body  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of template names </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2SandboxTemplateGetCall(Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v2/sandbox/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2SandboxTemplateGetValidateBeforeCall(Object body, final ApiCallback _callback) throws ApiException {
        return v2SandboxTemplateGetCall(body, _callback);

    }

    /**
     * List available templates
     * Get a list of all valid record type templates
     * @param body  (optional)
     * @return RoutesV2ListTemplatesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of template names </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV2ListTemplatesResponse v2SandboxTemplateGet(Object body) throws ApiException {
        ApiResponse<RoutesV2ListTemplatesResponse> localVarResp = v2SandboxTemplateGetWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * List available templates
     * Get a list of all valid record type templates
     * @param body  (optional)
     * @return ApiResponse&lt;RoutesV2ListTemplatesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of template names </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV2ListTemplatesResponse> v2SandboxTemplateGetWithHttpInfo(Object body) throws ApiException {
        okhttp3.Call localVarCall = v2SandboxTemplateGetValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RoutesV2ListTemplatesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List available templates (asynchronously)
     * Get a list of all valid record type templates
     * @param body  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of template names </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2SandboxTemplateGetAsync(Object body, final ApiCallback<RoutesV2ListTemplatesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2SandboxTemplateGetValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RoutesV2ListTemplatesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2SandboxTemplatePost
     * @param routesV2GenerateRecordRequest Record generation parameters (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2SandboxTemplatePostCall(RoutesV2GenerateRecordRequest routesV2GenerateRecordRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2GenerateRecordRequest;

        // create path and map variables
        String localVarPath = "/v2/sandbox/template";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2SandboxTemplatePostValidateBeforeCall(RoutesV2GenerateRecordRequest routesV2GenerateRecordRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routesV2GenerateRecordRequest' is set
        if (routesV2GenerateRecordRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2GenerateRecordRequest' when calling v2SandboxTemplatePost(Async)");
        }

        return v2SandboxTemplatePostCall(routesV2GenerateRecordRequest, _callback);

    }

    /**
     * Generate sample record
     * Generate a sample record using the specified template type
     * @param routesV2GenerateRecordRequest Record generation parameters (required)
     * @return RoutesV2GenerateRecordResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV2GenerateRecordResponse v2SandboxTemplatePost(RoutesV2GenerateRecordRequest routesV2GenerateRecordRequest) throws ApiException {
        ApiResponse<RoutesV2GenerateRecordResponse> localVarResp = v2SandboxTemplatePostWithHttpInfo(routesV2GenerateRecordRequest);
        return localVarResp.getData();
    }

    /**
     * Generate sample record
     * Generate a sample record using the specified template type
     * @param routesV2GenerateRecordRequest Record generation parameters (required)
     * @return ApiResponse&lt;RoutesV2GenerateRecordResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV2GenerateRecordResponse> v2SandboxTemplatePostWithHttpInfo(RoutesV2GenerateRecordRequest routesV2GenerateRecordRequest) throws ApiException {
        okhttp3.Call localVarCall = v2SandboxTemplatePostValidateBeforeCall(routesV2GenerateRecordRequest, null);
        Type localVarReturnType = new TypeToken<RoutesV2GenerateRecordResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Generate sample record (asynchronously)
     * Generate a sample record using the specified template type
     * @param routesV2GenerateRecordRequest Record generation parameters (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2SandboxTemplatePostAsync(RoutesV2GenerateRecordRequest routesV2GenerateRecordRequest, final ApiCallback<RoutesV2GenerateRecordResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2SandboxTemplatePostValidateBeforeCall(routesV2GenerateRecordRequest, _callback);
        Type localVarReturnType = new TypeToken<RoutesV2GenerateRecordResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2SandboxTransformPost
     * @param routesV2ApplyTransformationRequest Transform configuration and record (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2SandboxTransformPostCall(RoutesV2ApplyTransformationRequest routesV2ApplyTransformationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2ApplyTransformationRequest;

        // create path and map variables
        String localVarPath = "/v2/sandbox/transform";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2SandboxTransformPostValidateBeforeCall(RoutesV2ApplyTransformationRequest routesV2ApplyTransformationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'routesV2ApplyTransformationRequest' is set
        if (routesV2ApplyTransformationRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2ApplyTransformationRequest' when calling v2SandboxTransformPost(Async)");
        }

        return v2SandboxTransformPostCall(routesV2ApplyTransformationRequest, _callback);

    }

    /**
     * Apply transformation to record
     * Apply a transformation configuration to a JSON record
     * @param routesV2ApplyTransformationRequest Transform configuration and record (required)
     * @return RoutesV2ApplyTransformationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV2ApplyTransformationResponse v2SandboxTransformPost(RoutesV2ApplyTransformationRequest routesV2ApplyTransformationRequest) throws ApiException {
        ApiResponse<RoutesV2ApplyTransformationResponse> localVarResp = v2SandboxTransformPostWithHttpInfo(routesV2ApplyTransformationRequest);
        return localVarResp.getData();
    }

    /**
     * Apply transformation to record
     * Apply a transformation configuration to a JSON record
     * @param routesV2ApplyTransformationRequest Transform configuration and record (required)
     * @return ApiResponse&lt;RoutesV2ApplyTransformationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV2ApplyTransformationResponse> v2SandboxTransformPostWithHttpInfo(RoutesV2ApplyTransformationRequest routesV2ApplyTransformationRequest) throws ApiException {
        okhttp3.Call localVarCall = v2SandboxTransformPostValidateBeforeCall(routesV2ApplyTransformationRequest, null);
        Type localVarReturnType = new TypeToken<RoutesV2ApplyTransformationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Apply transformation to record (asynchronously)
     * Apply a transformation configuration to a JSON record
     * @param routesV2ApplyTransformationRequest Transform configuration and record (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request parameters </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2SandboxTransformPostAsync(RoutesV2ApplyTransformationRequest routesV2ApplyTransformationRequest, final ApiCallback<RoutesV2ApplyTransformationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2SandboxTransformPostValidateBeforeCall(routesV2ApplyTransformationRequest, _callback);
        Type localVarReturnType = new TypeToken<RoutesV2ApplyTransformationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
