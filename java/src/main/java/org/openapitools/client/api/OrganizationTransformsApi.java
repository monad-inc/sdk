/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsTransform;
import org.openapitools.client.model.ModelsTransformList;
import org.openapitools.client.model.RoutesCreateTransformRequest;
import org.openapitools.client.model.RoutesGetTransformResponse;
import org.openapitools.client.model.RoutesUpdateTransformRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationTransformsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationTransformsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationTransformsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1OrganizationIdTransformsGet
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transforms </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to marshal transforms </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsGetCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/transforms"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdTransformsGetValidateBeforeCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdTransformsGet(Async)");
        }

        return v1OrganizationIdTransformsGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List transforms
     * List transforms
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ModelsTransformList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transforms </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to marshal transforms </td><td>  -  </td></tr>
     </table>
     */
    public ModelsTransformList v1OrganizationIdTransformsGet(String organizationId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ModelsTransformList> localVarResp = v1OrganizationIdTransformsGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List transforms
     * List transforms
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ApiResponse&lt;ModelsTransformList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transforms </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to marshal transforms </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsTransformList> v1OrganizationIdTransformsGetWithHttpInfo(String organizationId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdTransformsGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsTransformList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transforms (asynchronously)
     * List transforms
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of transforms </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to marshal transforms </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsGetAsync(String organizationId, Integer limit, Integer offset, final ApiCallback<ModelsTransformList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdTransformsGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsTransformList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdTransformsPost
     * @param organizationId Organization ID (required)
     * @param routesCreateTransformRequest Request body for creating a transform (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsPostCall(String organizationId, RoutesCreateTransformRequest routesCreateTransformRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesCreateTransformRequest;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/transforms"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdTransformsPostValidateBeforeCall(String organizationId, RoutesCreateTransformRequest routesCreateTransformRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdTransformsPost(Async)");
        }

        // verify the required parameter 'routesCreateTransformRequest' is set
        if (routesCreateTransformRequest == null) {
            throw new ApiException("Missing the required parameter 'routesCreateTransformRequest' when calling v1OrganizationIdTransformsPost(Async)");
        }

        return v1OrganizationIdTransformsPostCall(organizationId, routesCreateTransformRequest, _callback);

    }

    /**
     * Create transform
     * Create transform
     * @param organizationId Organization ID (required)
     * @param routesCreateTransformRequest Request body for creating a transform (required)
     * @return ModelsTransform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create transform </td><td>  -  </td></tr>
     </table>
     */
    public ModelsTransform v1OrganizationIdTransformsPost(String organizationId, RoutesCreateTransformRequest routesCreateTransformRequest) throws ApiException {
        ApiResponse<ModelsTransform> localVarResp = v1OrganizationIdTransformsPostWithHttpInfo(organizationId, routesCreateTransformRequest);
        return localVarResp.getData();
    }

    /**
     * Create transform
     * Create transform
     * @param organizationId Organization ID (required)
     * @param routesCreateTransformRequest Request body for creating a transform (required)
     * @return ApiResponse&lt;ModelsTransform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create transform </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsTransform> v1OrganizationIdTransformsPostWithHttpInfo(String organizationId, RoutesCreateTransformRequest routesCreateTransformRequest) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdTransformsPostValidateBeforeCall(organizationId, routesCreateTransformRequest, null);
        Type localVarReturnType = new TypeToken<ModelsTransform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create transform (asynchronously)
     * Create transform
     * @param organizationId Organization ID (required)
     * @param routesCreateTransformRequest Request body for creating a transform (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsPostAsync(String organizationId, RoutesCreateTransformRequest routesCreateTransformRequest, final ApiCallback<ModelsTransform> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdTransformsPostValidateBeforeCall(organizationId, routesCreateTransformRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsTransform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdTransformsTransformIdDelete
     * @param organizationId Organization ID (required)
     * @param transformId Transform ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsTransformIdDeleteCall(String organizationId, String transformId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/transforms/{transform_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "transform_id" + "}", localVarApiClient.escapeString(transformId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdTransformsTransformIdDeleteValidateBeforeCall(String organizationId, String transformId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdTransformsTransformIdDelete(Async)");
        }

        // verify the required parameter 'transformId' is set
        if (transformId == null) {
            throw new ApiException("Missing the required parameter 'transformId' when calling v1OrganizationIdTransformsTransformIdDelete(Async)");
        }

        return v1OrganizationIdTransformsTransformIdDeleteCall(organizationId, transformId, _callback);

    }

    /**
     * Delete transform
     * Delete transform
     * @param organizationId Organization ID (required)
     * @param transformId Transform ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete transform </td><td>  -  </td></tr>
     </table>
     */
    public Object v1OrganizationIdTransformsTransformIdDelete(String organizationId, String transformId) throws ApiException {
        ApiResponse<Object> localVarResp = v1OrganizationIdTransformsTransformIdDeleteWithHttpInfo(organizationId, transformId);
        return localVarResp.getData();
    }

    /**
     * Delete transform
     * Delete transform
     * @param organizationId Organization ID (required)
     * @param transformId Transform ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete transform </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> v1OrganizationIdTransformsTransformIdDeleteWithHttpInfo(String organizationId, String transformId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdTransformsTransformIdDeleteValidateBeforeCall(organizationId, transformId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete transform (asynchronously)
     * Delete transform
     * @param organizationId Organization ID (required)
     * @param transformId Transform ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsTransformIdDeleteAsync(String organizationId, String transformId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdTransformsTransformIdDeleteValidateBeforeCall(organizationId, transformId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdTransformsTransformIdGet
     * @param transformId Transform ID (required)
     * @param organizationId Organization ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsTransformIdGetCall(String transformId, String organizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/transforms/{transform_id}"
            .replace("{" + "transform_id" + "}", localVarApiClient.escapeString(transformId.toString()))
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdTransformsTransformIdGetValidateBeforeCall(String transformId, String organizationId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transformId' is set
        if (transformId == null) {
            throw new ApiException("Missing the required parameter 'transformId' when calling v1OrganizationIdTransformsTransformIdGet(Async)");
        }

        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdTransformsTransformIdGet(Async)");
        }

        return v1OrganizationIdTransformsTransformIdGetCall(transformId, organizationId, _callback);

    }

    /**
     * Get transform
     * Get transform
     * @param transformId Transform ID (required)
     * @param organizationId Organization ID (required)
     * @return RoutesGetTransformResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform </td><td>  -  </td></tr>
     </table>
     */
    public RoutesGetTransformResponse v1OrganizationIdTransformsTransformIdGet(String transformId, String organizationId) throws ApiException {
        ApiResponse<RoutesGetTransformResponse> localVarResp = v1OrganizationIdTransformsTransformIdGetWithHttpInfo(transformId, organizationId);
        return localVarResp.getData();
    }

    /**
     * Get transform
     * Get transform
     * @param transformId Transform ID (required)
     * @param organizationId Organization ID (required)
     * @return ApiResponse&lt;RoutesGetTransformResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesGetTransformResponse> v1OrganizationIdTransformsTransformIdGetWithHttpInfo(String transformId, String organizationId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdTransformsTransformIdGetValidateBeforeCall(transformId, organizationId, null);
        Type localVarReturnType = new TypeToken<RoutesGetTransformResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transform (asynchronously)
     * Get transform
     * @param transformId Transform ID (required)
     * @param organizationId Organization ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsTransformIdGetAsync(String transformId, String organizationId, final ApiCallback<RoutesGetTransformResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdTransformsTransformIdGetValidateBeforeCall(transformId, organizationId, _callback);
        Type localVarReturnType = new TypeToken<RoutesGetTransformResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdTransformsTransformIdPatch
     * @param organizationId Organization ID (required)
     * @param transformId Transform ID (required)
     * @param routesUpdateTransformRequest Request body for updating a transform (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsTransformIdPatchCall(String organizationId, String transformId, RoutesUpdateTransformRequest routesUpdateTransformRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesUpdateTransformRequest;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/transforms/{transform_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "transform_id" + "}", localVarApiClient.escapeString(transformId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdTransformsTransformIdPatchValidateBeforeCall(String organizationId, String transformId, RoutesUpdateTransformRequest routesUpdateTransformRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdTransformsTransformIdPatch(Async)");
        }

        // verify the required parameter 'transformId' is set
        if (transformId == null) {
            throw new ApiException("Missing the required parameter 'transformId' when calling v1OrganizationIdTransformsTransformIdPatch(Async)");
        }

        // verify the required parameter 'routesUpdateTransformRequest' is set
        if (routesUpdateTransformRequest == null) {
            throw new ApiException("Missing the required parameter 'routesUpdateTransformRequest' when calling v1OrganizationIdTransformsTransformIdPatch(Async)");
        }

        return v1OrganizationIdTransformsTransformIdPatchCall(organizationId, transformId, routesUpdateTransformRequest, _callback);

    }

    /**
     * Update transform
     * Update transform
     * @param organizationId Organization ID (required)
     * @param transformId Transform ID (required)
     * @param routesUpdateTransformRequest Request body for updating a transform (required)
     * @return ModelsTransform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update transform </td><td>  -  </td></tr>
     </table>
     */
    public ModelsTransform v1OrganizationIdTransformsTransformIdPatch(String organizationId, String transformId, RoutesUpdateTransformRequest routesUpdateTransformRequest) throws ApiException {
        ApiResponse<ModelsTransform> localVarResp = v1OrganizationIdTransformsTransformIdPatchWithHttpInfo(organizationId, transformId, routesUpdateTransformRequest);
        return localVarResp.getData();
    }

    /**
     * Update transform
     * Update transform
     * @param organizationId Organization ID (required)
     * @param transformId Transform ID (required)
     * @param routesUpdateTransformRequest Request body for updating a transform (required)
     * @return ApiResponse&lt;ModelsTransform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update transform </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsTransform> v1OrganizationIdTransformsTransformIdPatchWithHttpInfo(String organizationId, String transformId, RoutesUpdateTransformRequest routesUpdateTransformRequest) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdTransformsTransformIdPatchValidateBeforeCall(organizationId, transformId, routesUpdateTransformRequest, null);
        Type localVarReturnType = new TypeToken<ModelsTransform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update transform (asynchronously)
     * Update transform
     * @param organizationId Organization ID (required)
     * @param transformId Transform ID (required)
     * @param routesUpdateTransformRequest Request body for updating a transform (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdTransformsTransformIdPatchAsync(String organizationId, String transformId, RoutesUpdateTransformRequest routesUpdateTransformRequest, final ApiCallback<ModelsTransform> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdTransformsTransformIdPatchValidateBeforeCall(organizationId, transformId, routesUpdateTransformRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsTransform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
