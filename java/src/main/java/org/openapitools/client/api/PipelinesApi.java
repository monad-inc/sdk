/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsPipeline;
import org.openapitools.client.model.ModelsPipelineConfigV2;
import org.openapitools.client.model.ModelsPipelineList;
import org.openapitools.client.model.ModelsPipelineNodeMetrics;
import org.openapitools.client.model.ModelsPipelineNodeStatus;
import org.openapitools.client.model.ModelsPipelineStatus;
import org.openapitools.client.model.RoutesUpdatePipelineRequest;
import org.openapitools.client.model.RoutesV2CreatePipelineRequest;
import org.openapitools.client.model.RoutesV2GetOrganizationSummaryResponse;
import org.openapitools.client.model.RoutesV2PipelineWithStatus;
import org.openapitools.client.model.RoutesV2UpdatePipelineRequest;
import org.openapitools.client.model.V2OrganizationIdPipelinesPipelineIdNodeIdMetricsGet500Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PipelinesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PipelinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PipelinesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1OrganizationIdPipelinesGet
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid limit or offset </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list pipelines </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdPipelinesGetCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/pipelines"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdPipelinesGetValidateBeforeCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdPipelinesGet(Async)");
        }

        return v1OrganizationIdPipelinesGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List pipelines
     * List pipelines
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ModelsPipelineList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid limit or offset </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list pipelines </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipelineList v1OrganizationIdPipelinesGet(String organizationId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ModelsPipelineList> localVarResp = v1OrganizationIdPipelinesGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List pipelines
     * List pipelines
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ApiResponse&lt;ModelsPipelineList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid limit or offset </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list pipelines </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipelineList> v1OrganizationIdPipelinesGetWithHttpInfo(String organizationId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdPipelinesGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsPipelineList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pipelines (asynchronously)
     * List pipelines
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid limit or offset </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list pipelines </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdPipelinesGetAsync(String organizationId, Integer limit, Integer offset, final ApiCallback<ModelsPipelineList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdPipelinesGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipelineList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdPipelinesPipelineIdDelete
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdPipelinesPipelineIdDeleteCall(String organizationId, String pipelineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/pipelines/{pipeline_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdPipelinesPipelineIdDeleteValidateBeforeCall(String organizationId, String pipelineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdPipelinesPipelineIdDelete(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v1OrganizationIdPipelinesPipelineIdDelete(Async)");
        }

        return v1OrganizationIdPipelinesPipelineIdDeleteCall(organizationId, pipelineId, _callback);

    }

    /**
     * Delete pipeline
     * Delete pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete pipeline </td><td>  -  </td></tr>
     </table>
     */
    public String v1OrganizationIdPipelinesPipelineIdDelete(String organizationId, String pipelineId) throws ApiException {
        ApiResponse<String> localVarResp = v1OrganizationIdPipelinesPipelineIdDeleteWithHttpInfo(organizationId, pipelineId);
        return localVarResp.getData();
    }

    /**
     * Delete pipeline
     * Delete pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1OrganizationIdPipelinesPipelineIdDeleteWithHttpInfo(String organizationId, String pipelineId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdPipelinesPipelineIdDeleteValidateBeforeCall(organizationId, pipelineId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete pipeline (asynchronously)
     * Delete pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdPipelinesPipelineIdDeleteAsync(String organizationId, String pipelineId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdPipelinesPipelineIdDeleteValidateBeforeCall(organizationId, pipelineId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdPipelinesPipelineIdGet
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdPipelinesPipelineIdGetCall(String organizationId, String pipelineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/pipelines/{pipeline_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdPipelinesPipelineIdGetValidateBeforeCall(String organizationId, String pipelineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdPipelinesPipelineIdGet(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v1OrganizationIdPipelinesPipelineIdGet(Async)");
        }

        return v1OrganizationIdPipelinesPipelineIdGetCall(organizationId, pipelineId, _callback);

    }

    /**
     * Get pipeline
     * Get pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @return ModelsPipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipeline v1OrganizationIdPipelinesPipelineIdGet(String organizationId, String pipelineId) throws ApiException {
        ApiResponse<ModelsPipeline> localVarResp = v1OrganizationIdPipelinesPipelineIdGetWithHttpInfo(organizationId, pipelineId);
        return localVarResp.getData();
    }

    /**
     * Get pipeline
     * Get pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @return ApiResponse&lt;ModelsPipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipeline> v1OrganizationIdPipelinesPipelineIdGetWithHttpInfo(String organizationId, String pipelineId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdPipelinesPipelineIdGetValidateBeforeCall(organizationId, pipelineId, null);
        Type localVarReturnType = new TypeToken<ModelsPipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pipeline (asynchronously)
     * Get pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline details </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdPipelinesPipelineIdGetAsync(String organizationId, String pipelineId, final ApiCallback<ModelsPipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdPipelinesPipelineIdGetValidateBeforeCall(organizationId, pipelineId, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdPipelinesPipelineIdPatch
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param routesUpdatePipelineRequest Request body for updating a pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for updating a pipeline </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdPipelinesPipelineIdPatchCall(String organizationId, String pipelineId, RoutesUpdatePipelineRequest routesUpdatePipelineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesUpdatePipelineRequest;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/pipelines/{pipeline_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdPipelinesPipelineIdPatchValidateBeforeCall(String organizationId, String pipelineId, RoutesUpdatePipelineRequest routesUpdatePipelineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdPipelinesPipelineIdPatch(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v1OrganizationIdPipelinesPipelineIdPatch(Async)");
        }

        // verify the required parameter 'routesUpdatePipelineRequest' is set
        if (routesUpdatePipelineRequest == null) {
            throw new ApiException("Missing the required parameter 'routesUpdatePipelineRequest' when calling v1OrganizationIdPipelinesPipelineIdPatch(Async)");
        }

        return v1OrganizationIdPipelinesPipelineIdPatchCall(organizationId, pipelineId, routesUpdatePipelineRequest, _callback);

    }

    /**
     * Update pipeline
     * Update pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param routesUpdatePipelineRequest Request body for updating a pipeline (required)
     * @return ModelsPipeline
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for updating a pipeline </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipeline v1OrganizationIdPipelinesPipelineIdPatch(String organizationId, String pipelineId, RoutesUpdatePipelineRequest routesUpdatePipelineRequest) throws ApiException {
        ApiResponse<ModelsPipeline> localVarResp = v1OrganizationIdPipelinesPipelineIdPatchWithHttpInfo(organizationId, pipelineId, routesUpdatePipelineRequest);
        return localVarResp.getData();
    }

    /**
     * Update pipeline
     * Update pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param routesUpdatePipelineRequest Request body for updating a pipeline (required)
     * @return ApiResponse&lt;ModelsPipeline&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for updating a pipeline </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipeline> v1OrganizationIdPipelinesPipelineIdPatchWithHttpInfo(String organizationId, String pipelineId, RoutesUpdatePipelineRequest routesUpdatePipelineRequest) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdPipelinesPipelineIdPatchValidateBeforeCall(organizationId, pipelineId, routesUpdatePipelineRequest, null);
        Type localVarReturnType = new TypeToken<ModelsPipeline>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update pipeline (asynchronously)
     * Update pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param routesUpdatePipelineRequest Request body for updating a pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for updating a pipeline </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdPipelinesPipelineIdPatchAsync(String organizationId, String pipelineId, RoutesUpdatePipelineRequest routesUpdatePipelineRequest, final ApiCallback<ModelsPipeline> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdPipelinesPipelineIdPatchValidateBeforeCall(organizationId, pipelineId, routesUpdatePipelineRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipeline>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelineSummaryGet
     * @param organizationId Organization ID (required)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Pipeline Summary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipelines for organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelineSummaryGetCall(String organizationId, String start, String end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipeline_summary"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelineSummaryGetValidateBeforeCall(String organizationId, String start, String end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelineSummaryGet(Async)");
        }

        return v2OrganizationIdPipelineSummaryGetCall(organizationId, start, end, _callback);

    }

    /**
     * Get status of all pipelines for an organization
     * Get status of all pipelines for an organization
     * @param organizationId Organization ID (required)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @return RoutesV2GetOrganizationSummaryResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Pipeline Summary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipelines for organization </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV2GetOrganizationSummaryResponse v2OrganizationIdPipelineSummaryGet(String organizationId, String start, String end) throws ApiException {
        ApiResponse<RoutesV2GetOrganizationSummaryResponse> localVarResp = v2OrganizationIdPipelineSummaryGetWithHttpInfo(organizationId, start, end);
        return localVarResp.getData();
    }

    /**
     * Get status of all pipelines for an organization
     * Get status of all pipelines for an organization
     * @param organizationId Organization ID (required)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @return ApiResponse&lt;RoutesV2GetOrganizationSummaryResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Pipeline Summary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipelines for organization </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV2GetOrganizationSummaryResponse> v2OrganizationIdPipelineSummaryGetWithHttpInfo(String organizationId, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelineSummaryGetValidateBeforeCall(organizationId, start, end, null);
        Type localVarReturnType = new TypeToken<RoutesV2GetOrganizationSummaryResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get status of all pipelines for an organization (asynchronously)
     * Get status of all pipelines for an organization
     * @param organizationId Organization ID (required)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Organization Pipeline Summary </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipelines for organization </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelineSummaryGetAsync(String organizationId, String start, String end, final ApiCallback<RoutesV2GetOrganizationSummaryResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelineSummaryGetValidateBeforeCall(organizationId, start, end, _callback);
        Type localVarReturnType = new TypeToken<RoutesV2GetOrganizationSummaryResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelinesGet
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid limit or offset </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list pipelines </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesGetCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipelines"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelinesGetValidateBeforeCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelinesGet(Async)");
        }

        return v2OrganizationIdPipelinesGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List pipelines
     * List pipelines
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ModelsPipelineList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid limit or offset </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list pipelines </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipelineList v2OrganizationIdPipelinesGet(String organizationId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ModelsPipelineList> localVarResp = v2OrganizationIdPipelinesGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List pipelines
     * List pipelines
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ApiResponse&lt;ModelsPipelineList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid limit or offset </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list pipelines </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipelineList> v2OrganizationIdPipelinesGetWithHttpInfo(String organizationId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelinesGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsPipelineList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List pipelines (asynchronously)
     * List pipelines
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid limit or offset </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list pipelines </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesGetAsync(String organizationId, Integer limit, Integer offset, final ApiCallback<ModelsPipelineList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelinesGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipelineList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelinesPipelineIdDelete
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdDeleteCall(String organizationId, String pipelineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipelines/{pipeline_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelinesPipelineIdDeleteValidateBeforeCall(String organizationId, String pipelineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelinesPipelineIdDelete(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v2OrganizationIdPipelinesPipelineIdDelete(Async)");
        }

        return v2OrganizationIdPipelinesPipelineIdDeleteCall(organizationId, pipelineId, _callback);

    }

    /**
     * Delete pipeline
     * Delete pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete pipeline </td><td>  -  </td></tr>
     </table>
     */
    public String v2OrganizationIdPipelinesPipelineIdDelete(String organizationId, String pipelineId) throws ApiException {
        ApiResponse<String> localVarResp = v2OrganizationIdPipelinesPipelineIdDeleteWithHttpInfo(organizationId, pipelineId);
        return localVarResp.getData();
    }

    /**
     * Delete pipeline
     * Delete pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v2OrganizationIdPipelinesPipelineIdDeleteWithHttpInfo(String organizationId, String pipelineId) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdDeleteValidateBeforeCall(organizationId, pipelineId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete pipeline (asynchronously)
     * Delete pipeline
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdDeleteAsync(String organizationId, String pipelineId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdDeleteValidateBeforeCall(organizationId, pipelineId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelinesPipelineIdGet
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline configuration retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdGetCall(String organizationId, String pipelineId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipelines/{pipeline_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelinesPipelineIdGetValidateBeforeCall(String organizationId, String pipelineId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelinesPipelineIdGet(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v2OrganizationIdPipelinesPipelineIdGet(Async)");
        }

        return v2OrganizationIdPipelinesPipelineIdGetCall(organizationId, pipelineId, _callback);

    }

    /**
     * Get pipeline configuration
     * Retrieve a specific pipeline configuration by pipeline ID
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @return ModelsPipelineConfigV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline configuration retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipelineConfigV2 v2OrganizationIdPipelinesPipelineIdGet(String organizationId, String pipelineId) throws ApiException {
        ApiResponse<ModelsPipelineConfigV2> localVarResp = v2OrganizationIdPipelinesPipelineIdGetWithHttpInfo(organizationId, pipelineId);
        return localVarResp.getData();
    }

    /**
     * Get pipeline configuration
     * Retrieve a specific pipeline configuration by pipeline ID
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @return ApiResponse&lt;ModelsPipelineConfigV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline configuration retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipelineConfigV2> v2OrganizationIdPipelinesPipelineIdGetWithHttpInfo(String organizationId, String pipelineId) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdGetValidateBeforeCall(organizationId, pipelineId, null);
        Type localVarReturnType = new TypeToken<ModelsPipelineConfigV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pipeline configuration (asynchronously)
     * Retrieve a specific pipeline configuration by pipeline ID
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline configuration retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdGetAsync(String organizationId, String pipelineId, final ApiCallback<ModelsPipelineConfigV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdGetValidateBeforeCall(organizationId, pipelineId, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipelineConfigV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGet
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param metric Metric to retrieve (ingress_bytes|egress_bytes|ingress_records|egress_records) (required)
     * @param start ISO3339 start time, default 6 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param resolution Resolution of the data, default 15m (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline node metrics </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get node </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGetCall(String organizationId, String pipelineId, String nodeId, String metric, String start, String end, String resolution, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipelines/{pipeline_id}/{node_id}/metrics"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()))
            .replace("{" + "node_id" + "}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metric != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("metric", metric));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGetValidateBeforeCall(String organizationId, String pipelineId, String nodeId, String metric, String start, String end, String resolution, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGet(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGet(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGet(Async)");
        }

        // verify the required parameter 'metric' is set
        if (metric == null) {
            throw new ApiException("Missing the required parameter 'metric' when calling v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGet(Async)");
        }

        return v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGetCall(organizationId, pipelineId, nodeId, metric, start, end, resolution, _callback);

    }

    /**
     * Get pipeline node metrics
     * Get pipeline node metrics
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param metric Metric to retrieve (ingress_bytes|egress_bytes|ingress_records|egress_records) (required)
     * @param start ISO3339 start time, default 6 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param resolution Resolution of the data, default 15m (optional)
     * @return ModelsPipelineNodeMetrics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline node metrics </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get node </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipelineNodeMetrics v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGet(String organizationId, String pipelineId, String nodeId, String metric, String start, String end, String resolution) throws ApiException {
        ApiResponse<ModelsPipelineNodeMetrics> localVarResp = v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGetWithHttpInfo(organizationId, pipelineId, nodeId, metric, start, end, resolution);
        return localVarResp.getData();
    }

    /**
     * Get pipeline node metrics
     * Get pipeline node metrics
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param metric Metric to retrieve (ingress_bytes|egress_bytes|ingress_records|egress_records) (required)
     * @param start ISO3339 start time, default 6 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param resolution Resolution of the data, default 15m (optional)
     * @return ApiResponse&lt;ModelsPipelineNodeMetrics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline node metrics </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get node </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipelineNodeMetrics> v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGetWithHttpInfo(String organizationId, String pipelineId, String nodeId, String metric, String start, String end, String resolution) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGetValidateBeforeCall(organizationId, pipelineId, nodeId, metric, start, end, resolution, null);
        Type localVarReturnType = new TypeToken<ModelsPipelineNodeMetrics>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pipeline node metrics (asynchronously)
     * Get pipeline node metrics
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param metric Metric to retrieve (ingress_bytes|egress_bytes|ingress_records|egress_records) (required)
     * @param start ISO3339 start time, default 6 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param resolution Resolution of the data, default 15m (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline node metrics </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get node </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGetAsync(String organizationId, String pipelineId, String nodeId, String metric, String start, String end, String resolution, final ApiCallback<ModelsPipelineNodeMetrics> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdNodeIdMetricsGetValidateBeforeCall(organizationId, pipelineId, nodeId, metric, start, end, resolution, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipelineNodeMetrics>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelinesPipelineIdPatch
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param routesV2UpdatePipelineRequest Request body for updating a pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdPatchCall(String organizationId, String pipelineId, RoutesV2UpdatePipelineRequest routesV2UpdatePipelineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2UpdatePipelineRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipelines/{pipeline_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelinesPipelineIdPatchValidateBeforeCall(String organizationId, String pipelineId, RoutesV2UpdatePipelineRequest routesV2UpdatePipelineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelinesPipelineIdPatch(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v2OrganizationIdPipelinesPipelineIdPatch(Async)");
        }

        // verify the required parameter 'routesV2UpdatePipelineRequest' is set
        if (routesV2UpdatePipelineRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2UpdatePipelineRequest' when calling v2OrganizationIdPipelinesPipelineIdPatch(Async)");
        }

        return v2OrganizationIdPipelinesPipelineIdPatchCall(organizationId, pipelineId, routesV2UpdatePipelineRequest, _callback);

    }

    /**
     * Update pipeline
     * Update an existing pipeline with the specified configuration
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param routesV2UpdatePipelineRequest Request body for updating a pipeline (required)
     * @return ModelsPipelineConfigV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipelineConfigV2 v2OrganizationIdPipelinesPipelineIdPatch(String organizationId, String pipelineId, RoutesV2UpdatePipelineRequest routesV2UpdatePipelineRequest) throws ApiException {
        ApiResponse<ModelsPipelineConfigV2> localVarResp = v2OrganizationIdPipelinesPipelineIdPatchWithHttpInfo(organizationId, pipelineId, routesV2UpdatePipelineRequest);
        return localVarResp.getData();
    }

    /**
     * Update pipeline
     * Update an existing pipeline with the specified configuration
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param routesV2UpdatePipelineRequest Request body for updating a pipeline (required)
     * @return ApiResponse&lt;ModelsPipelineConfigV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipelineConfigV2> v2OrganizationIdPipelinesPipelineIdPatchWithHttpInfo(String organizationId, String pipelineId, RoutesV2UpdatePipelineRequest routesV2UpdatePipelineRequest) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdPatchValidateBeforeCall(organizationId, pipelineId, routesV2UpdatePipelineRequest, null);
        Type localVarReturnType = new TypeToken<ModelsPipelineConfigV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update pipeline (asynchronously)
     * Update an existing pipeline with the specified configuration
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param routesV2UpdatePipelineRequest Request body for updating a pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdPatchAsync(String organizationId, String pipelineId, RoutesV2UpdatePipelineRequest routesV2UpdatePipelineRequest, final ApiCallback<ModelsPipelineConfigV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdPatchValidateBeforeCall(organizationId, pipelineId, routesV2UpdatePipelineRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipelineConfigV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelinesPipelineIdStatusGet
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param metrics Metrics to retrieve (all|health|ingress_bytes|egress_bytes|ingress_records|egress_records) (optional)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdStatusGetCall(String organizationId, String pipelineId, List<String> metrics, String start, String end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipelines/{pipeline_id}/status"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "metrics", metrics));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelinesPipelineIdStatusGetValidateBeforeCall(String organizationId, String pipelineId, List<String> metrics, String start, String end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelinesPipelineIdStatusGet(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v2OrganizationIdPipelinesPipelineIdStatusGet(Async)");
        }

        return v2OrganizationIdPipelinesPipelineIdStatusGetCall(organizationId, pipelineId, metrics, start, end, _callback);

    }

    /**
     * Get pipeline status
     * Get pipeline status
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param metrics Metrics to retrieve (all|health|ingress_bytes|egress_bytes|ingress_records|egress_records) (optional)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @return ModelsPipelineStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipelineStatus v2OrganizationIdPipelinesPipelineIdStatusGet(String organizationId, String pipelineId, List<String> metrics, String start, String end) throws ApiException {
        ApiResponse<ModelsPipelineStatus> localVarResp = v2OrganizationIdPipelinesPipelineIdStatusGetWithHttpInfo(organizationId, pipelineId, metrics, start, end);
        return localVarResp.getData();
    }

    /**
     * Get pipeline status
     * Get pipeline status
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param metrics Metrics to retrieve (all|health|ingress_bytes|egress_bytes|ingress_records|egress_records) (optional)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @return ApiResponse&lt;ModelsPipelineStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipelineStatus> v2OrganizationIdPipelinesPipelineIdStatusGetWithHttpInfo(String organizationId, String pipelineId, List<String> metrics, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdStatusGetValidateBeforeCall(organizationId, pipelineId, metrics, start, end, null);
        Type localVarReturnType = new TypeToken<ModelsPipelineStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pipeline status (asynchronously)
     * Get pipeline status
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param metrics Metrics to retrieve (all|health|ingress_bytes|egress_bytes|ingress_records|egress_records) (optional)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdStatusGetAsync(String organizationId, String pipelineId, List<String> metrics, String start, String end, final ApiCallback<ModelsPipelineStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdStatusGetValidateBeforeCall(organizationId, pipelineId, metrics, start, end, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipelineStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelinesPipelineIdStatusNodeIdGet
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param metrics Metrics to retrieve (all|health|ingress_bytes|egress_bytes|ingress_records|egress_records) (optional)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline Node status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline node status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdStatusNodeIdGetCall(String organizationId, String pipelineId, String nodeId, List<String> metrics, String start, String end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipelines/{pipeline_id}/status/{node_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()))
            .replace("{" + "node_id" + "}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (metrics != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "metrics", metrics));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelinesPipelineIdStatusNodeIdGetValidateBeforeCall(String organizationId, String pipelineId, String nodeId, List<String> metrics, String start, String end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelinesPipelineIdStatusNodeIdGet(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v2OrganizationIdPipelinesPipelineIdStatusNodeIdGet(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling v2OrganizationIdPipelinesPipelineIdStatusNodeIdGet(Async)");
        }

        return v2OrganizationIdPipelinesPipelineIdStatusNodeIdGetCall(organizationId, pipelineId, nodeId, metrics, start, end, _callback);

    }

    /**
     * Get pipeline node status
     * Get pipeline node status
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param metrics Metrics to retrieve (all|health|ingress_bytes|egress_bytes|ingress_records|egress_records) (optional)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @return ModelsPipelineNodeStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline Node status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline node status </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipelineNodeStatus v2OrganizationIdPipelinesPipelineIdStatusNodeIdGet(String organizationId, String pipelineId, String nodeId, List<String> metrics, String start, String end) throws ApiException {
        ApiResponse<ModelsPipelineNodeStatus> localVarResp = v2OrganizationIdPipelinesPipelineIdStatusNodeIdGetWithHttpInfo(organizationId, pipelineId, nodeId, metrics, start, end);
        return localVarResp.getData();
    }

    /**
     * Get pipeline node status
     * Get pipeline node status
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param metrics Metrics to retrieve (all|health|ingress_bytes|egress_bytes|ingress_records|egress_records) (optional)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @return ApiResponse&lt;ModelsPipelineNodeStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline Node status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline node status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipelineNodeStatus> v2OrganizationIdPipelinesPipelineIdStatusNodeIdGetWithHttpInfo(String organizationId, String pipelineId, String nodeId, List<String> metrics, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdStatusNodeIdGetValidateBeforeCall(organizationId, pipelineId, nodeId, metrics, start, end, null);
        Type localVarReturnType = new TypeToken<ModelsPipelineNodeStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pipeline node status (asynchronously)
     * Get pipeline node status
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param metrics Metrics to retrieve (all|health|ingress_bytes|egress_bytes|ingress_records|egress_records) (optional)
     * @param start ISO3339 start time, default 24 hours ago (optional)
     * @param end ISO3339 end time, default now (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Pipeline Node status </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get pipeline node status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPipelineIdStatusNodeIdGetAsync(String organizationId, String pipelineId, String nodeId, List<String> metrics, String start, String end, final ApiCallback<ModelsPipelineNodeStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPipelineIdStatusNodeIdGetValidateBeforeCall(organizationId, pipelineId, nodeId, metrics, start, end, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipelineNodeStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelinesPost
     * @param organizationId Organization ID (required)
     * @param routesV2CreatePipelineRequest Request body for creating a pipeline (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Pipeline created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body or Failed to create pipeline </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPostCall(String organizationId, RoutesV2CreatePipelineRequest routesV2CreatePipelineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2CreatePipelineRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipelines"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelinesPostValidateBeforeCall(String organizationId, RoutesV2CreatePipelineRequest routesV2CreatePipelineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelinesPost(Async)");
        }

        // verify the required parameter 'routesV2CreatePipelineRequest' is set
        if (routesV2CreatePipelineRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2CreatePipelineRequest' when calling v2OrganizationIdPipelinesPost(Async)");
        }

        return v2OrganizationIdPipelinesPostCall(organizationId, routesV2CreatePipelineRequest, _callback);

    }

    /**
     * Create pipeline
     * Create a new pipeline with specified configuration
     * @param organizationId Organization ID (required)
     * @param routesV2CreatePipelineRequest Request body for creating a pipeline (required)
     * @return ModelsPipelineConfigV2
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Pipeline created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body or Failed to create pipeline </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsPipelineConfigV2 v2OrganizationIdPipelinesPost(String organizationId, RoutesV2CreatePipelineRequest routesV2CreatePipelineRequest) throws ApiException {
        ApiResponse<ModelsPipelineConfigV2> localVarResp = v2OrganizationIdPipelinesPostWithHttpInfo(organizationId, routesV2CreatePipelineRequest);
        return localVarResp.getData();
    }

    /**
     * Create pipeline
     * Create a new pipeline with specified configuration
     * @param organizationId Organization ID (required)
     * @param routesV2CreatePipelineRequest Request body for creating a pipeline (required)
     * @return ApiResponse&lt;ModelsPipelineConfigV2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Pipeline created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body or Failed to create pipeline </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsPipelineConfigV2> v2OrganizationIdPipelinesPostWithHttpInfo(String organizationId, RoutesV2CreatePipelineRequest routesV2CreatePipelineRequest) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPostValidateBeforeCall(organizationId, routesV2CreatePipelineRequest, null);
        Type localVarReturnType = new TypeToken<ModelsPipelineConfigV2>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create pipeline (asynchronously)
     * Create a new pipeline with specified configuration
     * @param organizationId Organization ID (required)
     * @param routesV2CreatePipelineRequest Request body for creating a pipeline (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Pipeline created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body or Failed to create pipeline </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesPostAsync(String organizationId, RoutesV2CreatePipelineRequest routesV2CreatePipelineRequest, final ApiCallback<ModelsPipelineConfigV2> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelinesPostValidateBeforeCall(organizationId, routesV2CreatePipelineRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsPipelineConfigV2>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdPipelinesStatusesGet
     * @param organizationId Organization ID (required)
     * @param limit Maximum number of pipelines to return (default is 10) (optional)
     * @param offset Offset for pagination (default is 0) (optional)
     * @param start Start time (RFC3339 format) for status metrics (default: 24 hours ago) (optional)
     * @param end End time (RFC3339 format) for status metrics (default: now) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines with status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters or time range </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to retrieve pipeline status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesStatusesGetCall(String organizationId, Integer limit, Integer offset, String start, String end, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/pipelines/statuses"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (end != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end", end));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdPipelinesStatusesGetValidateBeforeCall(String organizationId, Integer limit, Integer offset, String start, String end, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdPipelinesStatusesGet(Async)");
        }

        return v2OrganizationIdPipelinesStatusesGetCall(organizationId, limit, offset, start, end, _callback);

    }

    /**
     * Get pipeline status
     * Retrieve the status of pipelines within an organization for a specified time period.
     * @param organizationId Organization ID (required)
     * @param limit Maximum number of pipelines to return (default is 10) (optional)
     * @param offset Offset for pagination (default is 0) (optional)
     * @param start Start time (RFC3339 format) for status metrics (default: 24 hours ago) (optional)
     * @param end End time (RFC3339 format) for status metrics (default: now) (optional)
     * @return List&lt;RoutesV2PipelineWithStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines with status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters or time range </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to retrieve pipeline status </td><td>  -  </td></tr>
     </table>
     */
    public List<RoutesV2PipelineWithStatus> v2OrganizationIdPipelinesStatusesGet(String organizationId, Integer limit, Integer offset, String start, String end) throws ApiException {
        ApiResponse<List<RoutesV2PipelineWithStatus>> localVarResp = v2OrganizationIdPipelinesStatusesGetWithHttpInfo(organizationId, limit, offset, start, end);
        return localVarResp.getData();
    }

    /**
     * Get pipeline status
     * Retrieve the status of pipelines within an organization for a specified time period.
     * @param organizationId Organization ID (required)
     * @param limit Maximum number of pipelines to return (default is 10) (optional)
     * @param offset Offset for pagination (default is 0) (optional)
     * @param start Start time (RFC3339 format) for status metrics (default: 24 hours ago) (optional)
     * @param end End time (RFC3339 format) for status metrics (default: now) (optional)
     * @return ApiResponse&lt;List&lt;RoutesV2PipelineWithStatus&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines with status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters or time range </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to retrieve pipeline status </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RoutesV2PipelineWithStatus>> v2OrganizationIdPipelinesStatusesGetWithHttpInfo(String organizationId, Integer limit, Integer offset, String start, String end) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdPipelinesStatusesGetValidateBeforeCall(organizationId, limit, offset, start, end, null);
        Type localVarReturnType = new TypeToken<List<RoutesV2PipelineWithStatus>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get pipeline status (asynchronously)
     * Retrieve the status of pipelines within an organization for a specified time period.
     * @param organizationId Organization ID (required)
     * @param limit Maximum number of pipelines to return (default is 10) (optional)
     * @param offset Offset for pagination (default is 0) (optional)
     * @param start Start time (RFC3339 format) for status metrics (default: 24 hours ago) (optional)
     * @param end End time (RFC3339 format) for status metrics (default: now) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of pipelines with status </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid query parameters or time range </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to retrieve pipeline status </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdPipelinesStatusesGetAsync(String organizationId, Integer limit, Integer offset, String start, String end, final ApiCallback<List<RoutesV2PipelineWithStatus>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdPipelinesStatusesGetValidateBeforeCall(organizationId, limit, offset, start, end, _callback);
        Type localVarReturnType = new TypeToken<List<RoutesV2PipelineWithStatus>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
