/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsOrganizationUser;
import org.openapitools.client.model.ModelsOrganizationUserList;
import org.openapitools.client.model.RoutesAddUserToOrganizationRequest;
import org.openapitools.client.model.RoutesUpdateUserInOrganizationRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationUsersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationUsersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationUsersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1OrganizationIdUsersGet
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organization users </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdUsersGetCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/users"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdUsersGetValidateBeforeCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdUsersGet(Async)");
        }

        return v1OrganizationIdUsersGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List organization users
     * List organization users
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ModelsOrganizationUserList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organization users </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsOrganizationUserList v1OrganizationIdUsersGet(String organizationId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ModelsOrganizationUserList> localVarResp = v1OrganizationIdUsersGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List organization users
     * List organization users
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ApiResponse&lt;ModelsOrganizationUserList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organization users </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsOrganizationUserList> v1OrganizationIdUsersGetWithHttpInfo(String organizationId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdUsersGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsOrganizationUserList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List organization users (asynchronously)
     * List organization users
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of organization users </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdUsersGetAsync(String organizationId, Integer limit, Integer offset, final ApiCallback<ModelsOrganizationUserList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdUsersGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsOrganizationUserList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdUsersPost
     * @param organizationId organization ID (required)
     * @param routesAddUserToOrganizationRequest Request body for adding a user to an organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for adding a user to an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdUsersPostCall(String organizationId, RoutesAddUserToOrganizationRequest routesAddUserToOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesAddUserToOrganizationRequest;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/users"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdUsersPostValidateBeforeCall(String organizationId, RoutesAddUserToOrganizationRequest routesAddUserToOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdUsersPost(Async)");
        }

        // verify the required parameter 'routesAddUserToOrganizationRequest' is set
        if (routesAddUserToOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'routesAddUserToOrganizationRequest' when calling v1OrganizationIdUsersPost(Async)");
        }

        return v1OrganizationIdUsersPostCall(organizationId, routesAddUserToOrganizationRequest, _callback);

    }

    /**
     * Add user to organization
     * Add user to organization
     * @param organizationId organization ID (required)
     * @param routesAddUserToOrganizationRequest Request body for adding a user to an organization (required)
     * @return ModelsOrganizationUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for adding a user to an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsOrganizationUser v1OrganizationIdUsersPost(String organizationId, RoutesAddUserToOrganizationRequest routesAddUserToOrganizationRequest) throws ApiException {
        ApiResponse<ModelsOrganizationUser> localVarResp = v1OrganizationIdUsersPostWithHttpInfo(organizationId, routesAddUserToOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * Add user to organization
     * Add user to organization
     * @param organizationId organization ID (required)
     * @param routesAddUserToOrganizationRequest Request body for adding a user to an organization (required)
     * @return ApiResponse&lt;ModelsOrganizationUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for adding a user to an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsOrganizationUser> v1OrganizationIdUsersPostWithHttpInfo(String organizationId, RoutesAddUserToOrganizationRequest routesAddUserToOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdUsersPostValidateBeforeCall(organizationId, routesAddUserToOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<ModelsOrganizationUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add user to organization (asynchronously)
     * Add user to organization
     * @param organizationId organization ID (required)
     * @param routesAddUserToOrganizationRequest Request body for adding a user to an organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for adding a user to an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdUsersPostAsync(String organizationId, RoutesAddUserToOrganizationRequest routesAddUserToOrganizationRequest, final ApiCallback<ModelsOrganizationUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdUsersPostValidateBeforeCall(organizationId, routesAddUserToOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsOrganizationUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdUsersUserIdDelete
     * @param organizationId Organization ID (required)
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdUsersUserIdDeleteCall(String organizationId, String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/users/{user_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdUsersUserIdDeleteValidateBeforeCall(String organizationId, String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdUsersUserIdDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v1OrganizationIdUsersUserIdDelete(Async)");
        }

        return v1OrganizationIdUsersUserIdDeleteCall(organizationId, userId, _callback);

    }

    /**
     * Remove user from organization
     * Remove user from organization
     * @param organizationId Organization ID (required)
     * @param userId User ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public Object v1OrganizationIdUsersUserIdDelete(String organizationId, String userId) throws ApiException {
        ApiResponse<Object> localVarResp = v1OrganizationIdUsersUserIdDeleteWithHttpInfo(organizationId, userId);
        return localVarResp.getData();
    }

    /**
     * Remove user from organization
     * Remove user from organization
     * @param organizationId Organization ID (required)
     * @param userId User ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> v1OrganizationIdUsersUserIdDeleteWithHttpInfo(String organizationId, String userId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdUsersUserIdDeleteValidateBeforeCall(organizationId, userId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove user from organization (asynchronously)
     * Remove user from organization
     * @param organizationId Organization ID (required)
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdUsersUserIdDeleteAsync(String organizationId, String userId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdUsersUserIdDeleteValidateBeforeCall(organizationId, userId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdUsersUserIdPatch
     * @param organizationId Organization ID (required)
     * @param userId User ID (required)
     * @param routesUpdateUserInOrganizationRequest Request body for updating a user in an organization (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for updating a user in an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdUsersUserIdPatchCall(String organizationId, String userId, RoutesUpdateUserInOrganizationRequest routesUpdateUserInOrganizationRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesUpdateUserInOrganizationRequest;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/users/{user_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdUsersUserIdPatchValidateBeforeCall(String organizationId, String userId, RoutesUpdateUserInOrganizationRequest routesUpdateUserInOrganizationRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdUsersUserIdPatch(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v1OrganizationIdUsersUserIdPatch(Async)");
        }

        // verify the required parameter 'routesUpdateUserInOrganizationRequest' is set
        if (routesUpdateUserInOrganizationRequest == null) {
            throw new ApiException("Missing the required parameter 'routesUpdateUserInOrganizationRequest' when calling v1OrganizationIdUsersUserIdPatch(Async)");
        }

        return v1OrganizationIdUsersUserIdPatchCall(organizationId, userId, routesUpdateUserInOrganizationRequest, _callback);

    }

    /**
     * Update user in organization
     * Update user in organization
     * @param organizationId Organization ID (required)
     * @param userId User ID (required)
     * @param routesUpdateUserInOrganizationRequest Request body for updating a user in an organization (required)
     * @return ModelsOrganizationUser
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for updating a user in an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsOrganizationUser v1OrganizationIdUsersUserIdPatch(String organizationId, String userId, RoutesUpdateUserInOrganizationRequest routesUpdateUserInOrganizationRequest) throws ApiException {
        ApiResponse<ModelsOrganizationUser> localVarResp = v1OrganizationIdUsersUserIdPatchWithHttpInfo(organizationId, userId, routesUpdateUserInOrganizationRequest);
        return localVarResp.getData();
    }

    /**
     * Update user in organization
     * Update user in organization
     * @param organizationId Organization ID (required)
     * @param userId User ID (required)
     * @param routesUpdateUserInOrganizationRequest Request body for updating a user in an organization (required)
     * @return ApiResponse&lt;ModelsOrganizationUser&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for updating a user in an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsOrganizationUser> v1OrganizationIdUsersUserIdPatchWithHttpInfo(String organizationId, String userId, RoutesUpdateUserInOrganizationRequest routesUpdateUserInOrganizationRequest) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdUsersUserIdPatchValidateBeforeCall(organizationId, userId, routesUpdateUserInOrganizationRequest, null);
        Type localVarReturnType = new TypeToken<ModelsOrganizationUser>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update user in organization (asynchronously)
     * Update user in organization
     * @param organizationId Organization ID (required)
     * @param userId User ID (required)
     * @param routesUpdateUserInOrganizationRequest Request body for updating a user in an organization (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Response body for updating a user in an organization </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdUsersUserIdPatchAsync(String organizationId, String userId, RoutesUpdateUserInOrganizationRequest routesUpdateUserInOrganizationRequest, final ApiCallback<ModelsOrganizationUser> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdUsersUserIdPatchValidateBeforeCall(organizationId, userId, routesUpdateUserInOrganizationRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsOrganizationUser>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
