/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsBillingAccountPermission;
import org.openapitools.client.model.ModelsBillingAccountRole;
import org.openapitools.client.model.RoutesV2CreateBillingAccountRoleRequest;
import org.openapitools.client.model.RoutesV2CreatebillingAccountUserRoleRequest;
import org.openapitools.client.model.RoutesV2UpdateBillingAccountRoleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingAccountsRbacApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingAccountsRbacApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingAccountsRbacApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2BillingAccountsBillingAccountIdRolesGet
     * @param billingAccountId Billing Account ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account roles successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Roles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesGetCall(@javax.annotation.Nonnull String billingAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/roles"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdRolesGetValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdRolesGet(Async)");
        }

        return v2BillingAccountsBillingAccountIdRolesGetCall(billingAccountId, _callback);

    }

    /**
     * Get Billing Account Roles
     * Get Billing Account Roles
     * @param billingAccountId Billing Account ID (required)
     * @return List&lt;ModelsBillingAccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account roles successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Roles </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsBillingAccountRole> v2BillingAccountsBillingAccountIdRolesGet(@javax.annotation.Nonnull String billingAccountId) throws ApiException {
        ApiResponse<List<ModelsBillingAccountRole>> localVarResp = v2BillingAccountsBillingAccountIdRolesGetWithHttpInfo(billingAccountId);
        return localVarResp.getData();
    }

    /**
     * Get Billing Account Roles
     * Get Billing Account Roles
     * @param billingAccountId Billing Account ID (required)
     * @return ApiResponse&lt;List&lt;ModelsBillingAccountRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account roles successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Roles </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsBillingAccountRole>> v2BillingAccountsBillingAccountIdRolesGetWithHttpInfo(@javax.annotation.Nonnull String billingAccountId) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesGetValidateBeforeCall(billingAccountId, null);
        Type localVarReturnType = new TypeToken<List<ModelsBillingAccountRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Billing Account Roles (asynchronously)
     * Get Billing Account Roles
     * @param billingAccountId Billing Account ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account roles successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Roles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesGetAsync(@javax.annotation.Nonnull String billingAccountId, final ApiCallback<List<ModelsBillingAccountRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesGetValidateBeforeCall(billingAccountId, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsBillingAccountRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingAccountsBillingAccountIdRolesPost
     * @param billingAccountId Billing Account ID (required)
     * @param routesV2CreateBillingAccountRoleRequest Create Billing Account Role Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesPostCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountRoleRequest routesV2CreateBillingAccountRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2CreateBillingAccountRoleRequest;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/roles"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdRolesPostValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountRoleRequest routesV2CreateBillingAccountRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdRolesPost(Async)");
        }

        // verify the required parameter 'routesV2CreateBillingAccountRoleRequest' is set
        if (routesV2CreateBillingAccountRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2CreateBillingAccountRoleRequest' when calling v2BillingAccountsBillingAccountIdRolesPost(Async)");
        }

        return v2BillingAccountsBillingAccountIdRolesPostCall(billingAccountId, routesV2CreateBillingAccountRoleRequest, _callback);

    }

    /**
     * Create Billing Account Role
     * Create Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param routesV2CreateBillingAccountRoleRequest Create Billing Account Role Request (required)
     * @return ModelsBillingAccountRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public ModelsBillingAccountRole v2BillingAccountsBillingAccountIdRolesPost(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountRoleRequest routesV2CreateBillingAccountRoleRequest) throws ApiException {
        ApiResponse<ModelsBillingAccountRole> localVarResp = v2BillingAccountsBillingAccountIdRolesPostWithHttpInfo(billingAccountId, routesV2CreateBillingAccountRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Create Billing Account Role
     * Create Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param routesV2CreateBillingAccountRoleRequest Create Billing Account Role Request (required)
     * @return ApiResponse&lt;ModelsBillingAccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsBillingAccountRole> v2BillingAccountsBillingAccountIdRolesPostWithHttpInfo(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountRoleRequest routesV2CreateBillingAccountRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesPostValidateBeforeCall(billingAccountId, routesV2CreateBillingAccountRoleRequest, null);
        Type localVarReturnType = new TypeToken<ModelsBillingAccountRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Billing Account Role (asynchronously)
     * Create Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param routesV2CreateBillingAccountRoleRequest Create Billing Account Role Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesPostAsync(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountRoleRequest routesV2CreateBillingAccountRoleRequest, final ApiCallback<ModelsBillingAccountRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesPostValidateBeforeCall(billingAccountId, routesV2CreateBillingAccountRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsBillingAccountRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingAccountsBillingAccountIdRolesRoleIdDelete
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> delete billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdDeleteCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/roles/{role_id}"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdDelete(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdDelete(Async)");
        }

        return v2BillingAccountsBillingAccountIdRolesRoleIdDeleteCall(billingAccountId, roleId, _callback);

    }

    /**
     * Delete Billing Account Role
     * Delete Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> delete billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public String v2BillingAccountsBillingAccountIdRolesRoleIdDelete(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId) throws ApiException {
        ApiResponse<String> localVarResp = v2BillingAccountsBillingAccountIdRolesRoleIdDeleteWithHttpInfo(billingAccountId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete Billing Account Role
     * Delete Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> delete billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v2BillingAccountsBillingAccountIdRolesRoleIdDeleteWithHttpInfo(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdDeleteValidateBeforeCall(billingAccountId, roleId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Billing Account Role (asynchronously)
     * Delete Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> delete billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdDeleteAsync(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdDeleteValidateBeforeCall(billingAccountId, roleId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingAccountsBillingAccountIdRolesRoleIdGet
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdGetCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/roles/{role_id}"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdGetValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdGet(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdGet(Async)");
        }

        return v2BillingAccountsBillingAccountIdRolesRoleIdGetCall(billingAccountId, roleId, _callback);

    }

    /**
     * Get Billing Account Role
     * Get Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @return ModelsBillingAccountRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public ModelsBillingAccountRole v2BillingAccountsBillingAccountIdRolesRoleIdGet(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId) throws ApiException {
        ApiResponse<ModelsBillingAccountRole> localVarResp = v2BillingAccountsBillingAccountIdRolesRoleIdGetWithHttpInfo(billingAccountId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get Billing Account Role
     * Get Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @return ApiResponse&lt;ModelsBillingAccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsBillingAccountRole> v2BillingAccountsBillingAccountIdRolesRoleIdGetWithHttpInfo(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdGetValidateBeforeCall(billingAccountId, roleId, null);
        Type localVarReturnType = new TypeToken<ModelsBillingAccountRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Billing Account Role (asynchronously)
     * Get Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdGetAsync(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, final ApiCallback<ModelsBillingAccountRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdGetValidateBeforeCall(billingAccountId, roleId, _callback);
        Type localVarReturnType = new TypeToken<ModelsBillingAccountRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingAccountsBillingAccountIdRolesRoleIdPatch
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param routesV2UpdateBillingAccountRoleRequest Update Billing Account Role Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdPatchCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2UpdateBillingAccountRoleRequest routesV2UpdateBillingAccountRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2UpdateBillingAccountRoleRequest;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/roles/{role_id}"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdPatchValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2UpdateBillingAccountRoleRequest routesV2UpdateBillingAccountRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdPatch(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdPatch(Async)");
        }

        // verify the required parameter 'routesV2UpdateBillingAccountRoleRequest' is set
        if (routesV2UpdateBillingAccountRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2UpdateBillingAccountRoleRequest' when calling v2BillingAccountsBillingAccountIdRolesRoleIdPatch(Async)");
        }

        return v2BillingAccountsBillingAccountIdRolesRoleIdPatchCall(billingAccountId, roleId, routesV2UpdateBillingAccountRoleRequest, _callback);

    }

    /**
     * Update Billing Account Role
     * Update Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param routesV2UpdateBillingAccountRoleRequest Update Billing Account Role Request (required)
     * @return ModelsBillingAccountRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public ModelsBillingAccountRole v2BillingAccountsBillingAccountIdRolesRoleIdPatch(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2UpdateBillingAccountRoleRequest routesV2UpdateBillingAccountRoleRequest) throws ApiException {
        ApiResponse<ModelsBillingAccountRole> localVarResp = v2BillingAccountsBillingAccountIdRolesRoleIdPatchWithHttpInfo(billingAccountId, roleId, routesV2UpdateBillingAccountRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Update Billing Account Role
     * Update Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param routesV2UpdateBillingAccountRoleRequest Update Billing Account Role Request (required)
     * @return ApiResponse&lt;ModelsBillingAccountRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsBillingAccountRole> v2BillingAccountsBillingAccountIdRolesRoleIdPatchWithHttpInfo(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2UpdateBillingAccountRoleRequest routesV2UpdateBillingAccountRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdPatchValidateBeforeCall(billingAccountId, roleId, routesV2UpdateBillingAccountRoleRequest, null);
        Type localVarReturnType = new TypeToken<ModelsBillingAccountRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Billing Account Role (asynchronously)
     * Update Billing Account Role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param routesV2UpdateBillingAccountRoleRequest Update Billing Account Role Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update billing account role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update Billing Account Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdPatchAsync(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2UpdateBillingAccountRoleRequest routesV2UpdateBillingAccountRoleRequest, final ApiCallback<ModelsBillingAccountRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdPatchValidateBeforeCall(billingAccountId, roleId, routesV2UpdateBillingAccountRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsBillingAccountRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingAccountsBillingAccountIdRolesRoleIdUsersPost
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param routesV2CreatebillingAccountUserRoleRequest Create Billing Account User Role Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create billing account user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Billing Account User Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdUsersPostCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2CreatebillingAccountUserRoleRequest routesV2CreatebillingAccountUserRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2CreatebillingAccountUserRoleRequest;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/roles/{role_id}/users"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdUsersPostValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2CreatebillingAccountUserRoleRequest routesV2CreatebillingAccountUserRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdUsersPost(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdUsersPost(Async)");
        }

        // verify the required parameter 'routesV2CreatebillingAccountUserRoleRequest' is set
        if (routesV2CreatebillingAccountUserRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2CreatebillingAccountUserRoleRequest' when calling v2BillingAccountsBillingAccountIdRolesRoleIdUsersPost(Async)");
        }

        return v2BillingAccountsBillingAccountIdRolesRoleIdUsersPostCall(billingAccountId, roleId, routesV2CreatebillingAccountUserRoleRequest, _callback);

    }

    /**
     * Create Billing Account User Role
     * Add a user to a billing account role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param routesV2CreatebillingAccountUserRoleRequest Create Billing Account User Role Request (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create billing account user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Billing Account User Role </td><td>  -  </td></tr>
     </table>
     */
    public String v2BillingAccountsBillingAccountIdRolesRoleIdUsersPost(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2CreatebillingAccountUserRoleRequest routesV2CreatebillingAccountUserRoleRequest) throws ApiException {
        ApiResponse<String> localVarResp = v2BillingAccountsBillingAccountIdRolesRoleIdUsersPostWithHttpInfo(billingAccountId, roleId, routesV2CreatebillingAccountUserRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Create Billing Account User Role
     * Add a user to a billing account role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param routesV2CreatebillingAccountUserRoleRequest Create Billing Account User Role Request (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create billing account user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Billing Account User Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v2BillingAccountsBillingAccountIdRolesRoleIdUsersPostWithHttpInfo(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2CreatebillingAccountUserRoleRequest routesV2CreatebillingAccountUserRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdUsersPostValidateBeforeCall(billingAccountId, roleId, routesV2CreatebillingAccountUserRoleRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Billing Account User Role (asynchronously)
     * Add a user to a billing account role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param routesV2CreatebillingAccountUserRoleRequest Create Billing Account User Role Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create billing account user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Billing Account User Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdUsersPostAsync(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV2CreatebillingAccountUserRoleRequest routesV2CreatebillingAccountUserRoleRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdUsersPostValidateBeforeCall(billingAccountId, roleId, routesV2CreatebillingAccountUserRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDelete
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> delete billing account user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Billing Account User Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/roles/{role_id}/users/{user_id}"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDelete(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDelete(Async)");
        }

        return v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteCall(billingAccountId, roleId, userId, _callback);

    }

    /**
     * Delete Billing Account User Role
     * Remove a user to a billing account role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param userId User ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> delete billing account user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Billing Account User Role </td><td>  -  </td></tr>
     </table>
     */
    public String v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDelete(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId) throws ApiException {
        ApiResponse<String> localVarResp = v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteWithHttpInfo(billingAccountId, roleId, userId);
        return localVarResp.getData();
    }

    /**
     * Delete Billing Account User Role
     * Remove a user to a billing account role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param userId User ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> delete billing account user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Billing Account User Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteWithHttpInfo(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteValidateBeforeCall(billingAccountId, roleId, userId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Billing Account User Role (asynchronously)
     * Remove a user to a billing account role
     * @param billingAccountId Billing Account ID (required)
     * @param roleId Role ID (required)
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> delete billing account user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Billing Account User Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteAsync(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteValidateBeforeCall(billingAccountId, roleId, userId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingPermissionsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account permissions successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Permissions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingPermissionsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/billing/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingPermissionsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v2BillingPermissionsGetCall(_callback);

    }

    /**
     * Get Billing Permissions
     * Get Billing Permissions
     * @return List&lt;ModelsBillingAccountPermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account permissions successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Permissions </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsBillingAccountPermission> v2BillingPermissionsGet() throws ApiException {
        ApiResponse<List<ModelsBillingAccountPermission>> localVarResp = v2BillingPermissionsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Billing Permissions
     * Get Billing Permissions
     * @return ApiResponse&lt;List&lt;ModelsBillingAccountPermission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account permissions successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Permissions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsBillingAccountPermission>> v2BillingPermissionsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v2BillingPermissionsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ModelsBillingAccountPermission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Billing Permissions (asynchronously)
     * Get Billing Permissions
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get billing account permissions successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Billing Account Permissions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingPermissionsGetAsync(final ApiCallback<List<ModelsBillingAccountPermission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingPermissionsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ModelsBillingAccountPermission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
