/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsRole;
import org.openapitools.client.model.ModelsRoleList;
import org.openapitools.client.model.RoutesCreateRoleRequest;
import org.openapitools.client.model.RoutesUpdateRoleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RolesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RolesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1OrganizationIdRolesGet
     * @param organizationId Organization ID (required)
     * @param limit Limit the number of roles returned (default: 10) (optional)
     * @param offset Offset the roles returned (default: 0) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error listing roles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesGetCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/roles"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdRolesGetValidateBeforeCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdRolesGet(Async)");
        }

        return v1OrganizationIdRolesGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List roles
     * List roles
     * @param organizationId Organization ID (required)
     * @param limit Limit the number of roles returned (default: 10) (optional)
     * @param offset Offset the roles returned (default: 0) (optional)
     * @return ModelsRoleList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error listing roles </td><td>  -  </td></tr>
     </table>
     */
    public ModelsRoleList v1OrganizationIdRolesGet(String organizationId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ModelsRoleList> localVarResp = v1OrganizationIdRolesGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List roles
     * List roles
     * @param organizationId Organization ID (required)
     * @param limit Limit the number of roles returned (default: 10) (optional)
     * @param offset Offset the roles returned (default: 0) (optional)
     * @return ApiResponse&lt;ModelsRoleList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error listing roles </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsRoleList> v1OrganizationIdRolesGetWithHttpInfo(String organizationId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdRolesGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsRoleList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List roles (asynchronously)
     * List roles
     * @param organizationId Organization ID (required)
     * @param limit Limit the number of roles returned (default: 10) (optional)
     * @param offset Offset the roles returned (default: 0) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error listing roles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesGetAsync(String organizationId, Integer limit, Integer offset, final ApiCallback<ModelsRoleList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdRolesGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsRoleList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdRolesPost
     * @param organizationId Organization ID (required)
     * @param routesCreateRoleRequest Request body for creating a role (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesPostCall(String organizationId, RoutesCreateRoleRequest routesCreateRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesCreateRoleRequest;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/roles"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdRolesPostValidateBeforeCall(String organizationId, RoutesCreateRoleRequest routesCreateRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdRolesPost(Async)");
        }

        // verify the required parameter 'routesCreateRoleRequest' is set
        if (routesCreateRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'routesCreateRoleRequest' when calling v1OrganizationIdRolesPost(Async)");
        }

        return v1OrganizationIdRolesPostCall(organizationId, routesCreateRoleRequest, _callback);

    }

    /**
     * Create role
     * Create role
     * @param organizationId Organization ID (required)
     * @param routesCreateRoleRequest Request body for creating a role (required)
     * @return ModelsRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create role </td><td>  -  </td></tr>
     </table>
     */
    public ModelsRole v1OrganizationIdRolesPost(String organizationId, RoutesCreateRoleRequest routesCreateRoleRequest) throws ApiException {
        ApiResponse<ModelsRole> localVarResp = v1OrganizationIdRolesPostWithHttpInfo(organizationId, routesCreateRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Create role
     * Create role
     * @param organizationId Organization ID (required)
     * @param routesCreateRoleRequest Request body for creating a role (required)
     * @return ApiResponse&lt;ModelsRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsRole> v1OrganizationIdRolesPostWithHttpInfo(String organizationId, RoutesCreateRoleRequest routesCreateRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdRolesPostValidateBeforeCall(organizationId, routesCreateRoleRequest, null);
        Type localVarReturnType = new TypeToken<ModelsRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create role (asynchronously)
     * Create role
     * @param organizationId Organization ID (required)
     * @param routesCreateRoleRequest Request body for creating a role (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesPostAsync(String organizationId, RoutesCreateRoleRequest routesCreateRoleRequest, final ApiCallback<ModelsRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdRolesPostValidateBeforeCall(organizationId, routesCreateRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdRolesRoleIdDelete
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesRoleIdDeleteCall(String organizationId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/roles/{role_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdRolesRoleIdDeleteValidateBeforeCall(String organizationId, String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdRolesRoleIdDelete(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v1OrganizationIdRolesRoleIdDelete(Async)");
        }

        return v1OrganizationIdRolesRoleIdDeleteCall(organizationId, roleId, _callback);

    }

    /**
     * Delete role
     * Delete role
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete role </td><td>  -  </td></tr>
     </table>
     */
    public Object v1OrganizationIdRolesRoleIdDelete(String organizationId, String roleId) throws ApiException {
        ApiResponse<Object> localVarResp = v1OrganizationIdRolesRoleIdDeleteWithHttpInfo(organizationId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete role
     * Delete role
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> v1OrganizationIdRolesRoleIdDeleteWithHttpInfo(String organizationId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdRolesRoleIdDeleteValidateBeforeCall(organizationId, roleId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete role (asynchronously)
     * Delete role
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesRoleIdDeleteAsync(String organizationId, String roleId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdRolesRoleIdDeleteValidateBeforeCall(organizationId, roleId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdRolesRoleIdGet
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error getting role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesRoleIdGetCall(String organizationId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/roles/{role_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdRolesRoleIdGetValidateBeforeCall(String organizationId, String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdRolesRoleIdGet(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v1OrganizationIdRolesRoleIdGet(Async)");
        }

        return v1OrganizationIdRolesRoleIdGetCall(organizationId, roleId, _callback);

    }

    /**
     * Get role
     * Get role
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @return ModelsRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error getting role </td><td>  -  </td></tr>
     </table>
     */
    public ModelsRole v1OrganizationIdRolesRoleIdGet(String organizationId, String roleId) throws ApiException {
        ApiResponse<ModelsRole> localVarResp = v1OrganizationIdRolesRoleIdGetWithHttpInfo(organizationId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get role
     * Get role
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @return ApiResponse&lt;ModelsRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error getting role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsRole> v1OrganizationIdRolesRoleIdGetWithHttpInfo(String organizationId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdRolesRoleIdGetValidateBeforeCall(organizationId, roleId, null);
        Type localVarReturnType = new TypeToken<ModelsRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get role (asynchronously)
     * Get role
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Roles retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Error getting role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesRoleIdGetAsync(String organizationId, String roleId, final ApiCallback<ModelsRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdRolesRoleIdGetValidateBeforeCall(organizationId, roleId, _callback);
        Type localVarReturnType = new TypeToken<ModelsRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdRolesRoleIdPatch
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @param routesUpdateRoleRequest Request body for updating a role (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesRoleIdPatchCall(String organizationId, String roleId, RoutesUpdateRoleRequest routesUpdateRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesUpdateRoleRequest;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/roles/{role_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdRolesRoleIdPatchValidateBeforeCall(String organizationId, String roleId, RoutesUpdateRoleRequest routesUpdateRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdRolesRoleIdPatch(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v1OrganizationIdRolesRoleIdPatch(Async)");
        }

        // verify the required parameter 'routesUpdateRoleRequest' is set
        if (routesUpdateRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'routesUpdateRoleRequest' when calling v1OrganizationIdRolesRoleIdPatch(Async)");
        }

        return v1OrganizationIdRolesRoleIdPatchCall(organizationId, roleId, routesUpdateRoleRequest, _callback);

    }

    /**
     * Update role
     * Update role
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @param routesUpdateRoleRequest Request body for updating a role (required)
     * @return ModelsRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update role </td><td>  -  </td></tr>
     </table>
     */
    public ModelsRole v1OrganizationIdRolesRoleIdPatch(String organizationId, String roleId, RoutesUpdateRoleRequest routesUpdateRoleRequest) throws ApiException {
        ApiResponse<ModelsRole> localVarResp = v1OrganizationIdRolesRoleIdPatchWithHttpInfo(organizationId, roleId, routesUpdateRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Update role
     * Update role
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @param routesUpdateRoleRequest Request body for updating a role (required)
     * @return ApiResponse&lt;ModelsRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsRole> v1OrganizationIdRolesRoleIdPatchWithHttpInfo(String organizationId, String roleId, RoutesUpdateRoleRequest routesUpdateRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdRolesRoleIdPatchValidateBeforeCall(organizationId, roleId, routesUpdateRoleRequest, null);
        Type localVarReturnType = new TypeToken<ModelsRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update role (asynchronously)
     * Update role
     * @param organizationId Organization ID (required)
     * @param roleId Role ID (required)
     * @param routesUpdateRoleRequest Request body for updating a role (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Role updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdRolesRoleIdPatchAsync(String organizationId, String roleId, RoutesUpdateRoleRequest routesUpdateRoleRequest, final ApiCallback<ModelsRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdRolesRoleIdPatchValidateBeforeCall(organizationId, roleId, routesUpdateRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
