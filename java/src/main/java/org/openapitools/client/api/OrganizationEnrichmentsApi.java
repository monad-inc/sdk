/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsEnrichment;
import org.openapitools.client.model.ModelsEnrichmentList;
import org.openapitools.client.model.ResponderErrorResponse;
import org.openapitools.client.model.RoutesV3CreateEnrichmentRequest;
import org.openapitools.client.model.RoutesV3SuccessResponse;
import org.openapitools.client.model.RoutesV3TestEnrichmentConnectionRequest;
import org.openapitools.client.model.RoutesV3UpdateEnrichmentRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationEnrichmentsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationEnrichmentsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationEnrichmentsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v3OrganizationIdEnrichmentsEnrichmentIdDelete
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsEnrichmentIdDeleteCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{organization_id}/enrichments/{enrichment_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "enrichment_id" + "}", localVarApiClient.escapeString(enrichmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3OrganizationIdEnrichmentsEnrichmentIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v3OrganizationIdEnrichmentsEnrichmentIdDelete(Async)");
        }

        // verify the required parameter 'enrichmentId' is set
        if (enrichmentId == null) {
            throw new ApiException("Missing the required parameter 'enrichmentId' when calling v3OrganizationIdEnrichmentsEnrichmentIdDelete(Async)");
        }

        return v3OrganizationIdEnrichmentsEnrichmentIdDeleteCall(organizationId, enrichmentId, _callback);

    }

    /**
     * Delete enrichment
     * Delete an enrichment by ID
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @return RoutesV3SuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV3SuccessResponse v3OrganizationIdEnrichmentsEnrichmentIdDelete(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId) throws ApiException {
        ApiResponse<RoutesV3SuccessResponse> localVarResp = v3OrganizationIdEnrichmentsEnrichmentIdDeleteWithHttpInfo(organizationId, enrichmentId);
        return localVarResp.getData();
    }

    /**
     * Delete enrichment
     * Delete an enrichment by ID
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @return ApiResponse&lt;RoutesV3SuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV3SuccessResponse> v3OrganizationIdEnrichmentsEnrichmentIdDeleteWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId) throws ApiException {
        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsEnrichmentIdDeleteValidateBeforeCall(organizationId, enrichmentId, null);
        Type localVarReturnType = new TypeToken<RoutesV3SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete enrichment (asynchronously)
     * Delete an enrichment by ID
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsEnrichmentIdDeleteAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, final ApiCallback<RoutesV3SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsEnrichmentIdDeleteValidateBeforeCall(organizationId, enrichmentId, _callback);
        Type localVarReturnType = new TypeToken<RoutesV3SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3OrganizationIdEnrichmentsEnrichmentIdGet
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsEnrichmentIdGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{organization_id}/enrichments/{enrichment_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "enrichment_id" + "}", localVarApiClient.escapeString(enrichmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3OrganizationIdEnrichmentsEnrichmentIdGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v3OrganizationIdEnrichmentsEnrichmentIdGet(Async)");
        }

        // verify the required parameter 'enrichmentId' is set
        if (enrichmentId == null) {
            throw new ApiException("Missing the required parameter 'enrichmentId' when calling v3OrganizationIdEnrichmentsEnrichmentIdGet(Async)");
        }

        return v3OrganizationIdEnrichmentsEnrichmentIdGetCall(organizationId, enrichmentId, _callback);

    }

    /**
     * Get enrichment
     * Get an enrichment by ID
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @return ModelsEnrichment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsEnrichment v3OrganizationIdEnrichmentsEnrichmentIdGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId) throws ApiException {
        ApiResponse<ModelsEnrichment> localVarResp = v3OrganizationIdEnrichmentsEnrichmentIdGetWithHttpInfo(organizationId, enrichmentId);
        return localVarResp.getData();
    }

    /**
     * Get enrichment
     * Get an enrichment by ID
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @return ApiResponse&lt;ModelsEnrichment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsEnrichment> v3OrganizationIdEnrichmentsEnrichmentIdGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId) throws ApiException {
        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsEnrichmentIdGetValidateBeforeCall(organizationId, enrichmentId, null);
        Type localVarReturnType = new TypeToken<ModelsEnrichment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get enrichment (asynchronously)
     * Get an enrichment by ID
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsEnrichmentIdGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, final ApiCallback<ModelsEnrichment> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsEnrichmentIdGetValidateBeforeCall(organizationId, enrichmentId, _callback);
        Type localVarReturnType = new TypeToken<ModelsEnrichment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3OrganizationIdEnrichmentsEnrichmentIdPatch
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @param routesV3UpdateEnrichmentRequest Enrichment configuration update (required)
     * @param testConnection Test connection before updating the enrichment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsEnrichmentIdPatchCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, @javax.annotation.Nonnull RoutesV3UpdateEnrichmentRequest routesV3UpdateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV3UpdateEnrichmentRequest;

        // create path and map variables
        String localVarPath = "/v3/{organization_id}/enrichments/{enrichment_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "enrichment_id" + "}", localVarApiClient.escapeString(enrichmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testConnection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test_connection", testConnection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3OrganizationIdEnrichmentsEnrichmentIdPatchValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, @javax.annotation.Nonnull RoutesV3UpdateEnrichmentRequest routesV3UpdateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v3OrganizationIdEnrichmentsEnrichmentIdPatch(Async)");
        }

        // verify the required parameter 'enrichmentId' is set
        if (enrichmentId == null) {
            throw new ApiException("Missing the required parameter 'enrichmentId' when calling v3OrganizationIdEnrichmentsEnrichmentIdPatch(Async)");
        }

        // verify the required parameter 'routesV3UpdateEnrichmentRequest' is set
        if (routesV3UpdateEnrichmentRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV3UpdateEnrichmentRequest' when calling v3OrganizationIdEnrichmentsEnrichmentIdPatch(Async)");
        }

        return v3OrganizationIdEnrichmentsEnrichmentIdPatchCall(organizationId, enrichmentId, routesV3UpdateEnrichmentRequest, testConnection, _callback);

    }

    /**
     * Update enrichment
     * Update an existing enrichment with new configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @param routesV3UpdateEnrichmentRequest Enrichment configuration update (required)
     * @param testConnection Test connection before updating the enrichment (optional)
     * @return ModelsEnrichment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsEnrichment v3OrganizationIdEnrichmentsEnrichmentIdPatch(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, @javax.annotation.Nonnull RoutesV3UpdateEnrichmentRequest routesV3UpdateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        ApiResponse<ModelsEnrichment> localVarResp = v3OrganizationIdEnrichmentsEnrichmentIdPatchWithHttpInfo(organizationId, enrichmentId, routesV3UpdateEnrichmentRequest, testConnection);
        return localVarResp.getData();
    }

    /**
     * Update enrichment
     * Update an existing enrichment with new configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @param routesV3UpdateEnrichmentRequest Enrichment configuration update (required)
     * @param testConnection Test connection before updating the enrichment (optional)
     * @return ApiResponse&lt;ModelsEnrichment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsEnrichment> v3OrganizationIdEnrichmentsEnrichmentIdPatchWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, @javax.annotation.Nonnull RoutesV3UpdateEnrichmentRequest routesV3UpdateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsEnrichmentIdPatchValidateBeforeCall(organizationId, enrichmentId, routesV3UpdateEnrichmentRequest, testConnection, null);
        Type localVarReturnType = new TypeToken<ModelsEnrichment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update enrichment (asynchronously)
     * Update an existing enrichment with new configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param enrichmentId Enrichment ID (required)
     * @param routesV3UpdateEnrichmentRequest Enrichment configuration update (required)
     * @param testConnection Test connection before updating the enrichment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Enrichment not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsEnrichmentIdPatchAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String enrichmentId, @javax.annotation.Nonnull RoutesV3UpdateEnrichmentRequest routesV3UpdateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback<ModelsEnrichment> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsEnrichmentIdPatchValidateBeforeCall(organizationId, enrichmentId, routesV3UpdateEnrichmentRequest, testConnection, _callback);
        Type localVarReturnType = new TypeToken<ModelsEnrichment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3OrganizationIdEnrichmentsGet
     * @param organizationId Organization ID (required)
     * @param limit Number of results to return (default 100) (optional)
     * @param offset Number of results to skip (default 0) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of enrichments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/{organization_id}/enrichments"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3OrganizationIdEnrichmentsGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v3OrganizationIdEnrichmentsGet(Async)");
        }

        return v3OrganizationIdEnrichmentsGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List enrichments
     * List all enrichments for an organization
     * @param organizationId Organization ID (required)
     * @param limit Number of results to return (default 100) (optional)
     * @param offset Number of results to skip (default 0) (optional)
     * @return ModelsEnrichmentList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of enrichments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsEnrichmentList v3OrganizationIdEnrichmentsGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<ModelsEnrichmentList> localVarResp = v3OrganizationIdEnrichmentsGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List enrichments
     * List all enrichments for an organization
     * @param organizationId Organization ID (required)
     * @param limit Number of results to return (default 100) (optional)
     * @param offset Number of results to skip (default 0) (optional)
     * @return ApiResponse&lt;ModelsEnrichmentList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of enrichments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsEnrichmentList> v3OrganizationIdEnrichmentsGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsEnrichmentList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List enrichments (asynchronously)
     * List all enrichments for an organization
     * @param organizationId Organization ID (required)
     * @param limit Number of results to return (default 100) (optional)
     * @param offset Number of results to skip (default 0) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of enrichments </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<ModelsEnrichmentList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsEnrichmentList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3OrganizationIdEnrichmentsPost
     * @param organizationId Organization ID (required)
     * @param routesV3CreateEnrichmentRequest Enrichment configuration (required)
     * @param testConnection Test connection before creating the enrichment (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsPostCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3CreateEnrichmentRequest routesV3CreateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV3CreateEnrichmentRequest;

        // create path and map variables
        String localVarPath = "/v3/{organization_id}/enrichments"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testConnection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test_connection", testConnection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3OrganizationIdEnrichmentsPostValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3CreateEnrichmentRequest routesV3CreateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v3OrganizationIdEnrichmentsPost(Async)");
        }

        // verify the required parameter 'routesV3CreateEnrichmentRequest' is set
        if (routesV3CreateEnrichmentRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV3CreateEnrichmentRequest' when calling v3OrganizationIdEnrichmentsPost(Async)");
        }

        return v3OrganizationIdEnrichmentsPostCall(organizationId, routesV3CreateEnrichmentRequest, testConnection, _callback);

    }

    /**
     * Create enrichment
     * Create a new enrichment with configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param routesV3CreateEnrichmentRequest Enrichment configuration (required)
     * @param testConnection Test connection before creating the enrichment (optional)
     * @return ModelsEnrichment
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsEnrichment v3OrganizationIdEnrichmentsPost(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3CreateEnrichmentRequest routesV3CreateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        ApiResponse<ModelsEnrichment> localVarResp = v3OrganizationIdEnrichmentsPostWithHttpInfo(organizationId, routesV3CreateEnrichmentRequest, testConnection);
        return localVarResp.getData();
    }

    /**
     * Create enrichment
     * Create a new enrichment with configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param routesV3CreateEnrichmentRequest Enrichment configuration (required)
     * @param testConnection Test connection before creating the enrichment (optional)
     * @return ApiResponse&lt;ModelsEnrichment&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsEnrichment> v3OrganizationIdEnrichmentsPostWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3CreateEnrichmentRequest routesV3CreateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsPostValidateBeforeCall(organizationId, routesV3CreateEnrichmentRequest, testConnection, null);
        Type localVarReturnType = new TypeToken<ModelsEnrichment>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create enrichment (asynchronously)
     * Create a new enrichment with configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param routesV3CreateEnrichmentRequest Enrichment configuration (required)
     * @param testConnection Test connection before creating the enrichment (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Enrichment created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsPostAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3CreateEnrichmentRequest routesV3CreateEnrichmentRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback<ModelsEnrichment> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsPostValidateBeforeCall(organizationId, routesV3CreateEnrichmentRequest, testConnection, _callback);
        Type localVarReturnType = new TypeToken<ModelsEnrichment>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3OrganizationIdEnrichmentsTestConnectionPost
     * @param organizationId Organization ID (required)
     * @param routesV3TestEnrichmentConnectionRequest Enrichment configuration to test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsTestConnectionPostCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3TestEnrichmentConnectionRequest routesV3TestEnrichmentConnectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV3TestEnrichmentConnectionRequest;

        // create path and map variables
        String localVarPath = "/v3/{organization_id}/enrichments/test-connection"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3OrganizationIdEnrichmentsTestConnectionPostValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3TestEnrichmentConnectionRequest routesV3TestEnrichmentConnectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v3OrganizationIdEnrichmentsTestConnectionPost(Async)");
        }

        // verify the required parameter 'routesV3TestEnrichmentConnectionRequest' is set
        if (routesV3TestEnrichmentConnectionRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV3TestEnrichmentConnectionRequest' when calling v3OrganizationIdEnrichmentsTestConnectionPost(Async)");
        }

        return v3OrganizationIdEnrichmentsTestConnectionPostCall(organizationId, routesV3TestEnrichmentConnectionRequest, _callback);

    }

    /**
     * Test enrichment connection
     * Tests the connection for a given enrichment type and configuration
     * @param organizationId Organization ID (required)
     * @param routesV3TestEnrichmentConnectionRequest Enrichment configuration to test (required)
     * @return RoutesV3SuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV3SuccessResponse v3OrganizationIdEnrichmentsTestConnectionPost(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3TestEnrichmentConnectionRequest routesV3TestEnrichmentConnectionRequest) throws ApiException {
        ApiResponse<RoutesV3SuccessResponse> localVarResp = v3OrganizationIdEnrichmentsTestConnectionPostWithHttpInfo(organizationId, routesV3TestEnrichmentConnectionRequest);
        return localVarResp.getData();
    }

    /**
     * Test enrichment connection
     * Tests the connection for a given enrichment type and configuration
     * @param organizationId Organization ID (required)
     * @param routesV3TestEnrichmentConnectionRequest Enrichment configuration to test (required)
     * @return ApiResponse&lt;RoutesV3SuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV3SuccessResponse> v3OrganizationIdEnrichmentsTestConnectionPostWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3TestEnrichmentConnectionRequest routesV3TestEnrichmentConnectionRequest) throws ApiException {
        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsTestConnectionPostValidateBeforeCall(organizationId, routesV3TestEnrichmentConnectionRequest, null);
        Type localVarReturnType = new TypeToken<RoutesV3SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test enrichment connection (asynchronously)
     * Tests the connection for a given enrichment type and configuration
     * @param organizationId Organization ID (required)
     * @param routesV3TestEnrichmentConnectionRequest Enrichment configuration to test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, enrichment type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3OrganizationIdEnrichmentsTestConnectionPostAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV3TestEnrichmentConnectionRequest routesV3TestEnrichmentConnectionRequest, final ApiCallback<RoutesV3SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3OrganizationIdEnrichmentsTestConnectionPostValidateBeforeCall(organizationId, routesV3TestEnrichmentConnectionRequest, _callback);
        Type localVarReturnType = new TypeToken<RoutesV3SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
