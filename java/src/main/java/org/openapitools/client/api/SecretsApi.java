/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsSecretWithComponents;
import org.openapitools.client.model.ModelsSecretWithComponentsList;
import org.openapitools.client.model.ResponderErrorResponse;
import org.openapitools.client.model.RoutesV2CreateOrUpdateSecretRequest;
import org.openapitools.client.model.RoutesV2SecretResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecretsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecretsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecretsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2OrganizationIdSecretsGet
     * @param organizationId Organization ID (required)
     * @param limit Limit number of results (optional)
     * @param offset Offset results (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/secrets"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdSecretsGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdSecretsGet(Async)");
        }

        return v2OrganizationIdSecretsGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List secrets with components
     * Lists all secrets for the specified organization including inputs and outputs that use them
     * @param organizationId Organization ID (required)
     * @param limit Limit number of results (optional)
     * @param offset Offset results (optional)
     * @return ModelsSecretWithComponentsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsSecretWithComponentsList v2OrganizationIdSecretsGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<ModelsSecretWithComponentsList> localVarResp = v2OrganizationIdSecretsGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List secrets with components
     * Lists all secrets for the specified organization including inputs and outputs that use them
     * @param organizationId Organization ID (required)
     * @param limit Limit number of results (optional)
     * @param offset Offset results (optional)
     * @return ApiResponse&lt;ModelsSecretWithComponentsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsSecretWithComponentsList> v2OrganizationIdSecretsGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdSecretsGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsSecretWithComponentsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List secrets with components (asynchronously)
     * Lists all secrets for the specified organization including inputs and outputs that use them
     * @param organizationId Organization ID (required)
     * @param limit Limit number of results (optional)
     * @param offset Offset results (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<ModelsSecretWithComponentsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdSecretsGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsSecretWithComponentsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdSecretsPost
     * @param organizationId Organization ID (required)
     * @param routesV2CreateOrUpdateSecretRequest Secret to create (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsPostCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2CreateOrUpdateSecretRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/secrets"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdSecretsPostValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdSecretsPost(Async)");
        }

        // verify the required parameter 'routesV2CreateOrUpdateSecretRequest' is set
        if (routesV2CreateOrUpdateSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2CreateOrUpdateSecretRequest' when calling v2OrganizationIdSecretsPost(Async)");
        }

        return v2OrganizationIdSecretsPostCall(organizationId, routesV2CreateOrUpdateSecretRequest, _callback);

    }

    /**
     * Create secret
     * Creates a new secret for the specified organization
     * @param organizationId Organization ID (required)
     * @param routesV2CreateOrUpdateSecretRequest Secret to create (required)
     * @return RoutesV2SecretResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV2SecretResponse v2OrganizationIdSecretsPost(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest) throws ApiException {
        ApiResponse<RoutesV2SecretResponse> localVarResp = v2OrganizationIdSecretsPostWithHttpInfo(organizationId, routesV2CreateOrUpdateSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Create secret
     * Creates a new secret for the specified organization
     * @param organizationId Organization ID (required)
     * @param routesV2CreateOrUpdateSecretRequest Secret to create (required)
     * @return ApiResponse&lt;RoutesV2SecretResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV2SecretResponse> v2OrganizationIdSecretsPostWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdSecretsPostValidateBeforeCall(organizationId, routesV2CreateOrUpdateSecretRequest, null);
        Type localVarReturnType = new TypeToken<RoutesV2SecretResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create secret (asynchronously)
     * Creates a new secret for the specified organization
     * @param organizationId Organization ID (required)
     * @param routesV2CreateOrUpdateSecretRequest Secret to create (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsPostAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest, final ApiCallback<RoutesV2SecretResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdSecretsPostValidateBeforeCall(organizationId, routesV2CreateOrUpdateSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<RoutesV2SecretResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdSecretsSecretIdDelete
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsSecretIdDeleteCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/secrets/{secret_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "secret_id" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdSecretsSecretIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdSecretsSecretIdDelete(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling v2OrganizationIdSecretsSecretIdDelete(Async)");
        }

        return v2OrganizationIdSecretsSecretIdDeleteCall(organizationId, secretId, _callback);

    }

    /**
     * Delete secret
     * Deletes a specific secret by ID
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public void v2OrganizationIdSecretsSecretIdDelete(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId) throws ApiException {
        v2OrganizationIdSecretsSecretIdDeleteWithHttpInfo(organizationId, secretId);
    }

    /**
     * Delete secret
     * Deletes a specific secret by ID
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2OrganizationIdSecretsSecretIdDeleteWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdSecretsSecretIdDeleteValidateBeforeCall(organizationId, secretId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete secret (asynchronously)
     * Deletes a specific secret by ID
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsSecretIdDeleteAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdSecretsSecretIdDeleteValidateBeforeCall(organizationId, secretId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdSecretsSecretIdGet
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsSecretIdGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/secrets/{secret_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "secret_id" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdSecretsSecretIdGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdSecretsSecretIdGet(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling v2OrganizationIdSecretsSecretIdGet(Async)");
        }

        return v2OrganizationIdSecretsSecretIdGetCall(organizationId, secretId, _callback);

    }

    /**
     * Get secret with components
     * Gets a specific secret by ID including inputs and outputs that use it
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @return ModelsSecretWithComponents
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsSecretWithComponents v2OrganizationIdSecretsSecretIdGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId) throws ApiException {
        ApiResponse<ModelsSecretWithComponents> localVarResp = v2OrganizationIdSecretsSecretIdGetWithHttpInfo(organizationId, secretId);
        return localVarResp.getData();
    }

    /**
     * Get secret with components
     * Gets a specific secret by ID including inputs and outputs that use it
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @return ApiResponse&lt;ModelsSecretWithComponents&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsSecretWithComponents> v2OrganizationIdSecretsSecretIdGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdSecretsSecretIdGetValidateBeforeCall(organizationId, secretId, null);
        Type localVarReturnType = new TypeToken<ModelsSecretWithComponents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get secret with components (asynchronously)
     * Gets a specific secret by ID including inputs and outputs that use it
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsSecretIdGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, final ApiCallback<ModelsSecretWithComponents> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdSecretsSecretIdGetValidateBeforeCall(organizationId, secretId, _callback);
        Type localVarReturnType = new TypeToken<ModelsSecretWithComponents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdSecretsSecretIdPatch
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @param routesV2CreateOrUpdateSecretRequest Secret updates (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsSecretIdPatchCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2CreateOrUpdateSecretRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/secrets/{secret_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "secret_id" + "}", localVarApiClient.escapeString(secretId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdSecretsSecretIdPatchValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdSecretsSecretIdPatch(Async)");
        }

        // verify the required parameter 'secretId' is set
        if (secretId == null) {
            throw new ApiException("Missing the required parameter 'secretId' when calling v2OrganizationIdSecretsSecretIdPatch(Async)");
        }

        // verify the required parameter 'routesV2CreateOrUpdateSecretRequest' is set
        if (routesV2CreateOrUpdateSecretRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2CreateOrUpdateSecretRequest' when calling v2OrganizationIdSecretsSecretIdPatch(Async)");
        }

        return v2OrganizationIdSecretsSecretIdPatchCall(organizationId, secretId, routesV2CreateOrUpdateSecretRequest, _callback);

    }

    /**
     * Update secret
     * Updates a specific secret by ID
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @param routesV2CreateOrUpdateSecretRequest Secret updates (required)
     * @return RoutesV2SecretResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV2SecretResponse v2OrganizationIdSecretsSecretIdPatch(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest) throws ApiException {
        ApiResponse<RoutesV2SecretResponse> localVarResp = v2OrganizationIdSecretsSecretIdPatchWithHttpInfo(organizationId, secretId, routesV2CreateOrUpdateSecretRequest);
        return localVarResp.getData();
    }

    /**
     * Update secret
     * Updates a specific secret by ID
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @param routesV2CreateOrUpdateSecretRequest Secret updates (required)
     * @return ApiResponse&lt;RoutesV2SecretResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV2SecretResponse> v2OrganizationIdSecretsSecretIdPatchWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdSecretsSecretIdPatchValidateBeforeCall(organizationId, secretId, routesV2CreateOrUpdateSecretRequest, null);
        Type localVarReturnType = new TypeToken<RoutesV2SecretResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update secret (asynchronously)
     * Updates a specific secret by ID
     * @param organizationId Organization ID (required)
     * @param secretId Secret ID (required)
     * @param routesV2CreateOrUpdateSecretRequest Secret updates (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Secret not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdSecretsSecretIdPatchAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String secretId, @javax.annotation.Nonnull RoutesV2CreateOrUpdateSecretRequest routesV2CreateOrUpdateSecretRequest, final ApiCallback<RoutesV2SecretResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdSecretsSecretIdPatchValidateBeforeCall(organizationId, secretId, routesV2CreateOrUpdateSecretRequest, _callback);
        Type localVarReturnType = new TypeToken<RoutesV2SecretResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
