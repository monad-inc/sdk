/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsBillingProduct;
import org.openapitools.client.model.ModelsBillingProductList;
import org.openapitools.client.model.RoutesV2CreateBillingAccountSubscriptionRequest;
import org.openapitools.client.model.RoutesV2CreateBillingAccountSubscriptionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BillingProductsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BillingProductsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BillingProductsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2BillingAccountsBillingAccountIdSubscriptionDelete
     * @param billingAccountId Billing Account ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Billing subscription cancelled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to cancel billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdSubscriptionDeleteCall(@javax.annotation.Nonnull String billingAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/subscription"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdSubscriptionDeleteValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdSubscriptionDelete(Async)");
        }

        return v2BillingAccountsBillingAccountIdSubscriptionDeleteCall(billingAccountId, _callback);

    }

    /**
     * Cancel Billing Account Subscription
     * Cancel Billing Account Subscription
     * @param billingAccountId Billing Account ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Billing subscription cancelled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to cancel billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public void v2BillingAccountsBillingAccountIdSubscriptionDelete(@javax.annotation.Nonnull String billingAccountId) throws ApiException {
        v2BillingAccountsBillingAccountIdSubscriptionDeleteWithHttpInfo(billingAccountId);
    }

    /**
     * Cancel Billing Account Subscription
     * Cancel Billing Account Subscription
     * @param billingAccountId Billing Account ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Billing subscription cancelled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to cancel billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> v2BillingAccountsBillingAccountIdSubscriptionDeleteWithHttpInfo(@javax.annotation.Nonnull String billingAccountId) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdSubscriptionDeleteValidateBeforeCall(billingAccountId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cancel Billing Account Subscription (asynchronously)
     * Cancel Billing Account Subscription
     * @param billingAccountId Billing Account ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Billing subscription cancelled successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to cancel billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdSubscriptionDeleteAsync(@javax.annotation.Nonnull String billingAccountId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdSubscriptionDeleteValidateBeforeCall(billingAccountId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingAccountsBillingAccountIdSubscriptionGet
     * @param billingAccountId Billing Account ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing subscription retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdSubscriptionGetCall(@javax.annotation.Nonnull String billingAccountId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/subscription"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdSubscriptionGetValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdSubscriptionGet(Async)");
        }

        return v2BillingAccountsBillingAccountIdSubscriptionGetCall(billingAccountId, _callback);

    }

    /**
     * Get Billing Account Subscription
     * Get Billing Account Subscription
     * @param billingAccountId Billing Account ID (required)
     * @return ModelsBillingProduct
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing subscription retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public ModelsBillingProduct v2BillingAccountsBillingAccountIdSubscriptionGet(@javax.annotation.Nonnull String billingAccountId) throws ApiException {
        ApiResponse<ModelsBillingProduct> localVarResp = v2BillingAccountsBillingAccountIdSubscriptionGetWithHttpInfo(billingAccountId);
        return localVarResp.getData();
    }

    /**
     * Get Billing Account Subscription
     * Get Billing Account Subscription
     * @param billingAccountId Billing Account ID (required)
     * @return ApiResponse&lt;ModelsBillingProduct&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing subscription retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsBillingProduct> v2BillingAccountsBillingAccountIdSubscriptionGetWithHttpInfo(@javax.annotation.Nonnull String billingAccountId) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdSubscriptionGetValidateBeforeCall(billingAccountId, null);
        Type localVarReturnType = new TypeToken<ModelsBillingProduct>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Billing Account Subscription (asynchronously)
     * Get Billing Account Subscription
     * @param billingAccountId Billing Account ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing subscription retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdSubscriptionGetAsync(@javax.annotation.Nonnull String billingAccountId, final ApiCallback<ModelsBillingProduct> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdSubscriptionGetValidateBeforeCall(billingAccountId, _callback);
        Type localVarReturnType = new TypeToken<ModelsBillingProduct>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingAccountsBillingAccountIdSubscriptionPost
     * @param billingAccountId Billing Account ID (required)
     * @param routesV2CreateBillingAccountSubscriptionRequest Request body for creating a billing subscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing subscription intialized successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to created billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdSubscriptionPostCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountSubscriptionRequest routesV2CreateBillingAccountSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2CreateBillingAccountSubscriptionRequest;

        // create path and map variables
        String localVarPath = "/v2/billing/accounts/{billing_account_id}/subscription"
            .replace("{" + "billing_account_id" + "}", localVarApiClient.escapeString(billingAccountId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingAccountsBillingAccountIdSubscriptionPostValidateBeforeCall(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountSubscriptionRequest routesV2CreateBillingAccountSubscriptionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'billingAccountId' is set
        if (billingAccountId == null) {
            throw new ApiException("Missing the required parameter 'billingAccountId' when calling v2BillingAccountsBillingAccountIdSubscriptionPost(Async)");
        }

        // verify the required parameter 'routesV2CreateBillingAccountSubscriptionRequest' is set
        if (routesV2CreateBillingAccountSubscriptionRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2CreateBillingAccountSubscriptionRequest' when calling v2BillingAccountsBillingAccountIdSubscriptionPost(Async)");
        }

        return v2BillingAccountsBillingAccountIdSubscriptionPostCall(billingAccountId, routesV2CreateBillingAccountSubscriptionRequest, _callback);

    }

    /**
     * Create Billing Account Subscription
     * Create Billing Account Subscription
     * @param billingAccountId Billing Account ID (required)
     * @param routesV2CreateBillingAccountSubscriptionRequest Request body for creating a billing subscription (required)
     * @return RoutesV2CreateBillingAccountSubscriptionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing subscription intialized successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to created billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV2CreateBillingAccountSubscriptionResponse v2BillingAccountsBillingAccountIdSubscriptionPost(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountSubscriptionRequest routesV2CreateBillingAccountSubscriptionRequest) throws ApiException {
        ApiResponse<RoutesV2CreateBillingAccountSubscriptionResponse> localVarResp = v2BillingAccountsBillingAccountIdSubscriptionPostWithHttpInfo(billingAccountId, routesV2CreateBillingAccountSubscriptionRequest);
        return localVarResp.getData();
    }

    /**
     * Create Billing Account Subscription
     * Create Billing Account Subscription
     * @param billingAccountId Billing Account ID (required)
     * @param routesV2CreateBillingAccountSubscriptionRequest Request body for creating a billing subscription (required)
     * @return ApiResponse&lt;RoutesV2CreateBillingAccountSubscriptionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing subscription intialized successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to created billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV2CreateBillingAccountSubscriptionResponse> v2BillingAccountsBillingAccountIdSubscriptionPostWithHttpInfo(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountSubscriptionRequest routesV2CreateBillingAccountSubscriptionRequest) throws ApiException {
        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdSubscriptionPostValidateBeforeCall(billingAccountId, routesV2CreateBillingAccountSubscriptionRequest, null);
        Type localVarReturnType = new TypeToken<RoutesV2CreateBillingAccountSubscriptionResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Billing Account Subscription (asynchronously)
     * Create Billing Account Subscription
     * @param billingAccountId Billing Account ID (required)
     * @param routesV2CreateBillingAccountSubscriptionRequest Request body for creating a billing subscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing subscription intialized successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to created billing account subscription </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingAccountsBillingAccountIdSubscriptionPostAsync(@javax.annotation.Nonnull String billingAccountId, @javax.annotation.Nonnull RoutesV2CreateBillingAccountSubscriptionRequest routesV2CreateBillingAccountSubscriptionRequest, final ApiCallback<RoutesV2CreateBillingAccountSubscriptionResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingAccountsBillingAccountIdSubscriptionPostValidateBeforeCall(billingAccountId, routesV2CreateBillingAccountSubscriptionRequest, _callback);
        Type localVarReturnType = new TypeToken<RoutesV2CreateBillingAccountSubscriptionResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2BillingProductsGet
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing product listed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list billing products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingProductsGetCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/billing/products";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2BillingProductsGetValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return v2BillingProductsGetCall(limit, offset, _callback);

    }

    /**
     * List Billing Products
     * List Billing Products
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ModelsBillingProductList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing product listed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list billing products </td><td>  -  </td></tr>
     </table>
     */
    public ModelsBillingProductList v2BillingProductsGet(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<ModelsBillingProductList> localVarResp = v2BillingProductsGetWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * List Billing Products
     * List Billing Products
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ApiResponse&lt;ModelsBillingProductList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing product listed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list billing products </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsBillingProductList> v2BillingProductsGetWithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v2BillingProductsGetValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsBillingProductList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Billing Products (asynchronously)
     * List Billing Products
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> billing product listed successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list billing products </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2BillingProductsGetAsync(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<ModelsBillingProductList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2BillingProductsGetValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsBillingProductList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
