/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsConnectionPermission;
import org.openapitools.client.model.ModelsConnectionRole;
import org.openapitools.client.model.RoutesV3CreateConnectionRoleRequest;
import org.openapitools.client.model.RoutesV3CreateConnectionUserRoleRequest;
import org.openapitools.client.model.RoutesV3UpdateConnectionRoleRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectionsRbacApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectionsRbacApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectionsRbacApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v3ConnectionsConnectionIdRolesGet
     * @param connectionId Connection ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection roles successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Roles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesGetCall(@javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/connections/{connection_id}/roles"
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ConnectionsConnectionIdRolesGetValidateBeforeCall(@javax.annotation.Nonnull String connectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling v3ConnectionsConnectionIdRolesGet(Async)");
        }

        return v3ConnectionsConnectionIdRolesGetCall(connectionId, _callback);

    }

    /**
     * Get Connection Roles
     * Get Connection Roles
     * @param connectionId Connection ID (required)
     * @return List&lt;ModelsConnectionRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection roles successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Roles </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsConnectionRole> v3ConnectionsConnectionIdRolesGet(@javax.annotation.Nonnull String connectionId) throws ApiException {
        ApiResponse<List<ModelsConnectionRole>> localVarResp = v3ConnectionsConnectionIdRolesGetWithHttpInfo(connectionId);
        return localVarResp.getData();
    }

    /**
     * Get Connection Roles
     * Get Connection Roles
     * @param connectionId Connection ID (required)
     * @return ApiResponse&lt;List&lt;ModelsConnectionRole&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection roles successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Roles </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsConnectionRole>> v3ConnectionsConnectionIdRolesGetWithHttpInfo(@javax.annotation.Nonnull String connectionId) throws ApiException {
        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesGetValidateBeforeCall(connectionId, null);
        Type localVarReturnType = new TypeToken<List<ModelsConnectionRole>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Connection Roles (asynchronously)
     * Get Connection Roles
     * @param connectionId Connection ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection roles successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Roles </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesGetAsync(@javax.annotation.Nonnull String connectionId, final ApiCallback<List<ModelsConnectionRole>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesGetValidateBeforeCall(connectionId, _callback);
        Type localVarReturnType = new TypeToken<List<ModelsConnectionRole>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3ConnectionsConnectionIdRolesPost
     * @param connectionId Connection ID (required)
     * @param routesV3CreateConnectionRoleRequest Create Connection Role Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesPostCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull RoutesV3CreateConnectionRoleRequest routesV3CreateConnectionRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV3CreateConnectionRoleRequest;

        // create path and map variables
        String localVarPath = "/v3/connections/{connection_id}/roles"
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ConnectionsConnectionIdRolesPostValidateBeforeCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull RoutesV3CreateConnectionRoleRequest routesV3CreateConnectionRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling v3ConnectionsConnectionIdRolesPost(Async)");
        }

        // verify the required parameter 'routesV3CreateConnectionRoleRequest' is set
        if (routesV3CreateConnectionRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV3CreateConnectionRoleRequest' when calling v3ConnectionsConnectionIdRolesPost(Async)");
        }

        return v3ConnectionsConnectionIdRolesPostCall(connectionId, routesV3CreateConnectionRoleRequest, _callback);

    }

    /**
     * Create Connection Role
     * Create Connection Role
     * @param connectionId Connection ID (required)
     * @param routesV3CreateConnectionRoleRequest Create Connection Role Request (required)
     * @return ModelsConnectionRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public ModelsConnectionRole v3ConnectionsConnectionIdRolesPost(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull RoutesV3CreateConnectionRoleRequest routesV3CreateConnectionRoleRequest) throws ApiException {
        ApiResponse<ModelsConnectionRole> localVarResp = v3ConnectionsConnectionIdRolesPostWithHttpInfo(connectionId, routesV3CreateConnectionRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Create Connection Role
     * Create Connection Role
     * @param connectionId Connection ID (required)
     * @param routesV3CreateConnectionRoleRequest Create Connection Role Request (required)
     * @return ApiResponse&lt;ModelsConnectionRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsConnectionRole> v3ConnectionsConnectionIdRolesPostWithHttpInfo(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull RoutesV3CreateConnectionRoleRequest routesV3CreateConnectionRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesPostValidateBeforeCall(connectionId, routesV3CreateConnectionRoleRequest, null);
        Type localVarReturnType = new TypeToken<ModelsConnectionRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Connection Role (asynchronously)
     * Create Connection Role
     * @param connectionId Connection ID (required)
     * @param routesV3CreateConnectionRoleRequest Create Connection Role Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> create connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesPostAsync(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull RoutesV3CreateConnectionRoleRequest routesV3CreateConnectionRoleRequest, final ApiCallback<ModelsConnectionRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesPostValidateBeforeCall(connectionId, routesV3CreateConnectionRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsConnectionRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3ConnectionsConnectionIdRolesRoleIdDelete
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> delete connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdDeleteCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/connections/{connection_id}/roles/{role_id}"
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling v3ConnectionsConnectionIdRolesRoleIdDelete(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v3ConnectionsConnectionIdRolesRoleIdDelete(Async)");
        }

        return v3ConnectionsConnectionIdRolesRoleIdDeleteCall(connectionId, roleId, _callback);

    }

    /**
     * Delete Connection Role
     * Delete Connection Role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> delete connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public String v3ConnectionsConnectionIdRolesRoleIdDelete(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId) throws ApiException {
        ApiResponse<String> localVarResp = v3ConnectionsConnectionIdRolesRoleIdDeleteWithHttpInfo(connectionId, roleId);
        return localVarResp.getData();
    }

    /**
     * Delete Connection Role
     * Delete Connection Role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> delete connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v3ConnectionsConnectionIdRolesRoleIdDeleteWithHttpInfo(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId) throws ApiException {
        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdDeleteValidateBeforeCall(connectionId, roleId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Connection Role (asynchronously)
     * Delete Connection Role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> delete connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdDeleteAsync(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdDeleteValidateBeforeCall(connectionId, roleId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3ConnectionsConnectionIdRolesRoleIdGet
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdGetCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/connections/{connection_id}/roles/{role_id}"
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdGetValidateBeforeCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling v3ConnectionsConnectionIdRolesRoleIdGet(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v3ConnectionsConnectionIdRolesRoleIdGet(Async)");
        }

        return v3ConnectionsConnectionIdRolesRoleIdGetCall(connectionId, roleId, _callback);

    }

    /**
     * Get Connection Role
     * Get Connection Role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @return ModelsConnectionRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public ModelsConnectionRole v3ConnectionsConnectionIdRolesRoleIdGet(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId) throws ApiException {
        ApiResponse<ModelsConnectionRole> localVarResp = v3ConnectionsConnectionIdRolesRoleIdGetWithHttpInfo(connectionId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get Connection Role
     * Get Connection Role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @return ApiResponse&lt;ModelsConnectionRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsConnectionRole> v3ConnectionsConnectionIdRolesRoleIdGetWithHttpInfo(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId) throws ApiException {
        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdGetValidateBeforeCall(connectionId, roleId, null);
        Type localVarReturnType = new TypeToken<ModelsConnectionRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Connection Role (asynchronously)
     * Get Connection Role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdGetAsync(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, final ApiCallback<ModelsConnectionRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdGetValidateBeforeCall(connectionId, roleId, _callback);
        Type localVarReturnType = new TypeToken<ModelsConnectionRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3ConnectionsConnectionIdRolesRoleIdPatch
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param routesV3UpdateConnectionRoleRequest Update Connection Role Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdPatchCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3UpdateConnectionRoleRequest routesV3UpdateConnectionRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV3UpdateConnectionRoleRequest;

        // create path and map variables
        String localVarPath = "/v3/connections/{connection_id}/roles/{role_id}"
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdPatchValidateBeforeCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3UpdateConnectionRoleRequest routesV3UpdateConnectionRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling v3ConnectionsConnectionIdRolesRoleIdPatch(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v3ConnectionsConnectionIdRolesRoleIdPatch(Async)");
        }

        // verify the required parameter 'routesV3UpdateConnectionRoleRequest' is set
        if (routesV3UpdateConnectionRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV3UpdateConnectionRoleRequest' when calling v3ConnectionsConnectionIdRolesRoleIdPatch(Async)");
        }

        return v3ConnectionsConnectionIdRolesRoleIdPatchCall(connectionId, roleId, routesV3UpdateConnectionRoleRequest, _callback);

    }

    /**
     * Update Connection Role
     * Update Connection Role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param routesV3UpdateConnectionRoleRequest Update Connection Role Request (required)
     * @return ModelsConnectionRole
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public ModelsConnectionRole v3ConnectionsConnectionIdRolesRoleIdPatch(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3UpdateConnectionRoleRequest routesV3UpdateConnectionRoleRequest) throws ApiException {
        ApiResponse<ModelsConnectionRole> localVarResp = v3ConnectionsConnectionIdRolesRoleIdPatchWithHttpInfo(connectionId, roleId, routesV3UpdateConnectionRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Update Connection Role
     * Update Connection Role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param routesV3UpdateConnectionRoleRequest Update Connection Role Request (required)
     * @return ApiResponse&lt;ModelsConnectionRole&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsConnectionRole> v3ConnectionsConnectionIdRolesRoleIdPatchWithHttpInfo(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3UpdateConnectionRoleRequest routesV3UpdateConnectionRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdPatchValidateBeforeCall(connectionId, roleId, routesV3UpdateConnectionRoleRequest, null);
        Type localVarReturnType = new TypeToken<ModelsConnectionRole>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Connection Role (asynchronously)
     * Update Connection Role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param routesV3UpdateConnectionRoleRequest Update Connection Role Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> update connection role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update Connection Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdPatchAsync(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3UpdateConnectionRoleRequest routesV3UpdateConnectionRoleRequest, final ApiCallback<ModelsConnectionRole> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdPatchValidateBeforeCall(connectionId, roleId, routesV3UpdateConnectionRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsConnectionRole>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3ConnectionsConnectionIdRolesRoleIdUsersPost
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param routesV3CreateConnectionUserRoleRequest Create Connection User Role Request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create connection user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Connection User Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdUsersPostCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3CreateConnectionUserRoleRequest routesV3CreateConnectionUserRoleRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV3CreateConnectionUserRoleRequest;

        // create path and map variables
        String localVarPath = "/v3/connections/{connection_id}/roles/{role_id}/users"
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdUsersPostValidateBeforeCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3CreateConnectionUserRoleRequest routesV3CreateConnectionUserRoleRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling v3ConnectionsConnectionIdRolesRoleIdUsersPost(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v3ConnectionsConnectionIdRolesRoleIdUsersPost(Async)");
        }

        // verify the required parameter 'routesV3CreateConnectionUserRoleRequest' is set
        if (routesV3CreateConnectionUserRoleRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV3CreateConnectionUserRoleRequest' when calling v3ConnectionsConnectionIdRolesRoleIdUsersPost(Async)");
        }

        return v3ConnectionsConnectionIdRolesRoleIdUsersPostCall(connectionId, roleId, routesV3CreateConnectionUserRoleRequest, _callback);

    }

    /**
     * Create Connection User Role
     * Add a user to a connection role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param routesV3CreateConnectionUserRoleRequest Create Connection User Role Request (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create connection user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Connection User Role </td><td>  -  </td></tr>
     </table>
     */
    public String v3ConnectionsConnectionIdRolesRoleIdUsersPost(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3CreateConnectionUserRoleRequest routesV3CreateConnectionUserRoleRequest) throws ApiException {
        ApiResponse<String> localVarResp = v3ConnectionsConnectionIdRolesRoleIdUsersPostWithHttpInfo(connectionId, roleId, routesV3CreateConnectionUserRoleRequest);
        return localVarResp.getData();
    }

    /**
     * Create Connection User Role
     * Add a user to a connection role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param routesV3CreateConnectionUserRoleRequest Create Connection User Role Request (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create connection user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Connection User Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v3ConnectionsConnectionIdRolesRoleIdUsersPostWithHttpInfo(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3CreateConnectionUserRoleRequest routesV3CreateConnectionUserRoleRequest) throws ApiException {
        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdUsersPostValidateBeforeCall(connectionId, roleId, routesV3CreateConnectionUserRoleRequest, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Connection User Role (asynchronously)
     * Add a user to a connection role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param routesV3CreateConnectionUserRoleRequest Create Connection User Role Request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> create connection user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create Connection User Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdUsersPostAsync(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull RoutesV3CreateConnectionUserRoleRequest routesV3CreateConnectionUserRoleRequest, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdUsersPostValidateBeforeCall(connectionId, roleId, routesV3CreateConnectionUserRoleRequest, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDelete
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param userId User ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> delete connection user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Connection User Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDeleteCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/connections/{connection_id}/roles/{role_id}/users/{user_id}"
            .replace("{" + "connection_id" + "}", localVarApiClient.escapeString(connectionId.toString()))
            .replace("{" + "role_id" + "}", localVarApiClient.escapeString(roleId.toString()))
            .replace("{" + "user_id" + "}", localVarApiClient.escapeString(userId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'connectionId' is set
        if (connectionId == null) {
            throw new ApiException("Missing the required parameter 'connectionId' when calling v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDelete(Async)");
        }

        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDelete(Async)");
        }

        // verify the required parameter 'userId' is set
        if (userId == null) {
            throw new ApiException("Missing the required parameter 'userId' when calling v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDelete(Async)");
        }

        return v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDeleteCall(connectionId, roleId, userId, _callback);

    }

    /**
     * Delete Connection User Role
     * Remove a user to a connection role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param userId User ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> delete connection user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Connection User Role </td><td>  -  </td></tr>
     </table>
     */
    public String v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDelete(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId) throws ApiException {
        ApiResponse<String> localVarResp = v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDeleteWithHttpInfo(connectionId, roleId, userId);
        return localVarResp.getData();
    }

    /**
     * Delete Connection User Role
     * Remove a user to a connection role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param userId User ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> delete connection user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Connection User Role </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDeleteWithHttpInfo(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId) throws ApiException {
        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDeleteValidateBeforeCall(connectionId, roleId, userId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Connection User Role (asynchronously)
     * Remove a user to a connection role
     * @param connectionId Connection ID (required)
     * @param roleId Role ID (required)
     * @param userId User ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> delete connection user role successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete Connection User Role </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDeleteAsync(@javax.annotation.Nonnull String connectionId, @javax.annotation.Nonnull String roleId, @javax.annotation.Nonnull String userId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ConnectionsConnectionIdRolesRoleIdUsersUserIdDeleteValidateBeforeCall(connectionId, roleId, userId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3ConnectionsPermissionsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection permissions successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Permissions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsPermissionsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/connections/permissions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3ConnectionsPermissionsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v3ConnectionsPermissionsGetCall(_callback);

    }

    /**
     * Get Connection Permissions
     * Get Connection Permissions
     * @return List&lt;ModelsConnectionPermission&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection permissions successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Permissions </td><td>  -  </td></tr>
     </table>
     */
    public List<ModelsConnectionPermission> v3ConnectionsPermissionsGet() throws ApiException {
        ApiResponse<List<ModelsConnectionPermission>> localVarResp = v3ConnectionsPermissionsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Connection Permissions
     * Get Connection Permissions
     * @return ApiResponse&lt;List&lt;ModelsConnectionPermission&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection permissions successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Permissions </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ModelsConnectionPermission>> v3ConnectionsPermissionsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v3ConnectionsPermissionsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ModelsConnectionPermission>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Connection Permissions (asynchronously)
     * Get Connection Permissions
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> get connection permissions successfull </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get Connection Permissions </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3ConnectionsPermissionsGetAsync(final ApiCallback<List<ModelsConnectionPermission>> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3ConnectionsPermissionsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ModelsConnectionPermission>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
