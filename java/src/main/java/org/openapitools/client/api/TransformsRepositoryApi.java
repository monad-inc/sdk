/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CommunityTransformsInternalTransformConfig;
import org.openapitools.client.model.CommunityTransformsInternalTransformsIndex;
import org.openapitools.client.model.ModelsTransformsRepositoryList;
import org.openapitools.client.model.ModelsTransformsRepositoryTransform;
import org.openapitools.client.model.RoutesV3ImportTransformResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransformsRepositoryApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransformsRepositoryApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransformsRepositoryApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2TransformsRepositoryGet
     * @param limit Number of items to return (default: 10) (optional)
     * @param offset Number of items to skip (default: 0) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transforms retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list transforms </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TransformsRepositoryGetCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/transforms/repository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2TransformsRepositoryGetValidateBeforeCall(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        return v2TransformsRepositoryGetCall(limit, offset, _callback);

    }

    /**
     * List transforms
     * List transforms from repository with pagination
     * @param limit Number of items to return (default: 10) (optional)
     * @param offset Number of items to skip (default: 0) (optional)
     * @return ModelsTransformsRepositoryList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transforms retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list transforms </td><td>  -  </td></tr>
     </table>
     */
    public ModelsTransformsRepositoryList v2TransformsRepositoryGet(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<ModelsTransformsRepositoryList> localVarResp = v2TransformsRepositoryGetWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * List transforms
     * List transforms from repository with pagination
     * @param limit Number of items to return (default: 10) (optional)
     * @param offset Number of items to skip (default: 0) (optional)
     * @return ApiResponse&lt;ModelsTransformsRepositoryList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transforms retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list transforms </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsTransformsRepositoryList> v2TransformsRepositoryGetWithHttpInfo(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v2TransformsRepositoryGetValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsTransformsRepositoryList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List transforms (asynchronously)
     * List transforms from repository with pagination
     * @param limit Number of items to return (default: 10) (optional)
     * @param offset Number of items to skip (default: 0) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transforms retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list transforms </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TransformsRepositoryGetAsync(@javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<ModelsTransformsRepositoryList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2TransformsRepositoryGetValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsTransformsRepositoryList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2TransformsRepositoryTransformIdGet
     * @param transformId Transform ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TransformsRepositoryTransformIdGetCall(@javax.annotation.Nonnull String transformId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/transforms/repository/{transform_id}"
            .replace("{" + "transform_id" + "}", localVarApiClient.escapeString(transformId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2TransformsRepositoryTransformIdGetValidateBeforeCall(@javax.annotation.Nonnull String transformId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transformId' is set
        if (transformId == null) {
            throw new ApiException("Missing the required parameter 'transformId' when calling v2TransformsRepositoryTransformIdGet(Async)");
        }

        return v2TransformsRepositoryTransformIdGetCall(transformId, _callback);

    }

    /**
     * Get transform details
     * Get detailed information about a specific transform from repository
     * @param transformId Transform ID (required)
     * @return ModelsTransformsRepositoryTransform
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform details </td><td>  -  </td></tr>
     </table>
     */
    public ModelsTransformsRepositoryTransform v2TransformsRepositoryTransformIdGet(@javax.annotation.Nonnull String transformId) throws ApiException {
        ApiResponse<ModelsTransformsRepositoryTransform> localVarResp = v2TransformsRepositoryTransformIdGetWithHttpInfo(transformId);
        return localVarResp.getData();
    }

    /**
     * Get transform details
     * Get detailed information about a specific transform from repository
     * @param transformId Transform ID (required)
     * @return ApiResponse&lt;ModelsTransformsRepositoryTransform&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsTransformsRepositoryTransform> v2TransformsRepositoryTransformIdGetWithHttpInfo(@javax.annotation.Nonnull String transformId) throws ApiException {
        okhttp3.Call localVarCall = v2TransformsRepositoryTransformIdGetValidateBeforeCall(transformId, null);
        Type localVarReturnType = new TypeToken<ModelsTransformsRepositoryTransform>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transform details (asynchronously)
     * Get detailed information about a specific transform from repository
     * @param transformId Transform ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2TransformsRepositoryTransformIdGetAsync(@javax.annotation.Nonnull String transformId, final ApiCallback<ModelsTransformsRepositoryTransform> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2TransformsRepositoryTransformIdGetValidateBeforeCall(transformId, _callback);
        Type localVarReturnType = new TypeToken<ModelsTransformsRepositoryTransform>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3TransformsRepositoryExportPost
     * @param communityTransformsInternalTransformConfig Transform to export and optional metadata (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> YAML-formatted transform </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to export transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3TransformsRepositoryExportPostCall(@javax.annotation.Nonnull CommunityTransformsInternalTransformConfig communityTransformsInternalTransformConfig, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = communityTransformsInternalTransformConfig;

        // create path and map variables
        String localVarPath = "/v3/transforms/repository/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3TransformsRepositoryExportPostValidateBeforeCall(@javax.annotation.Nonnull CommunityTransformsInternalTransformConfig communityTransformsInternalTransformConfig, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'communityTransformsInternalTransformConfig' is set
        if (communityTransformsInternalTransformConfig == null) {
            throw new ApiException("Missing the required parameter 'communityTransformsInternalTransformConfig' when calling v3TransformsRepositoryExportPost(Async)");
        }

        return v3TransformsRepositoryExportPostCall(communityTransformsInternalTransformConfig, _callback);

    }

    /**
     * Export transform to YAML
     * Export transform to YAML format
     * @param communityTransformsInternalTransformConfig Transform to export and optional metadata (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> YAML-formatted transform </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to export transform </td><td>  -  </td></tr>
     </table>
     */
    public String v3TransformsRepositoryExportPost(@javax.annotation.Nonnull CommunityTransformsInternalTransformConfig communityTransformsInternalTransformConfig) throws ApiException {
        ApiResponse<String> localVarResp = v3TransformsRepositoryExportPostWithHttpInfo(communityTransformsInternalTransformConfig);
        return localVarResp.getData();
    }

    /**
     * Export transform to YAML
     * Export transform to YAML format
     * @param communityTransformsInternalTransformConfig Transform to export and optional metadata (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> YAML-formatted transform </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to export transform </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v3TransformsRepositoryExportPostWithHttpInfo(@javax.annotation.Nonnull CommunityTransformsInternalTransformConfig communityTransformsInternalTransformConfig) throws ApiException {
        okhttp3.Call localVarCall = v3TransformsRepositoryExportPostValidateBeforeCall(communityTransformsInternalTransformConfig, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export transform to YAML (asynchronously)
     * Export transform to YAML format
     * @param communityTransformsInternalTransformConfig Transform to export and optional metadata (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> YAML-formatted transform </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to export transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3TransformsRepositoryExportPostAsync(@javax.annotation.Nonnull CommunityTransformsInternalTransformConfig communityTransformsInternalTransformConfig, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3TransformsRepositoryExportPostValidateBeforeCall(communityTransformsInternalTransformConfig, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3TransformsRepositoryGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transforms retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list transforms </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3TransformsRepositoryGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/transforms/repository";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3TransformsRepositoryGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return v3TransformsRepositoryGetCall(_callback);

    }

    /**
     * List community transforms
     * List transforms from repository index
     * @return CommunityTransformsInternalTransformsIndex
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transforms retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list transforms </td><td>  -  </td></tr>
     </table>
     */
    public CommunityTransformsInternalTransformsIndex v3TransformsRepositoryGet() throws ApiException {
        ApiResponse<CommunityTransformsInternalTransformsIndex> localVarResp = v3TransformsRepositoryGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List community transforms
     * List transforms from repository index
     * @return ApiResponse&lt;CommunityTransformsInternalTransformsIndex&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transforms retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list transforms </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityTransformsInternalTransformsIndex> v3TransformsRepositoryGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = v3TransformsRepositoryGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CommunityTransformsInternalTransformsIndex>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List community transforms (asynchronously)
     * List transforms from repository index
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transforms retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list transforms </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3TransformsRepositoryGetAsync(final ApiCallback<CommunityTransformsInternalTransformsIndex> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3TransformsRepositoryGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CommunityTransformsInternalTransformsIndex>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3TransformsRepositoryImportPost
     * @param body YAML transform definition (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform imported successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid YAML or transform validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to import transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3TransformsRepositoryImportPostCall(@javax.annotation.Nonnull String body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/v3/transforms/repository/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3TransformsRepositoryImportPostValidateBeforeCall(@javax.annotation.Nonnull String body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling v3TransformsRepositoryImportPost(Async)");
        }

        return v3TransformsRepositoryImportPostCall(body, _callback);

    }

    /**
     * Import transform from YAML
     * Import transform from YAML file
     * @param body YAML transform definition (required)
     * @return RoutesV3ImportTransformResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform imported successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid YAML or transform validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to import transform </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV3ImportTransformResponse v3TransformsRepositoryImportPost(@javax.annotation.Nonnull String body) throws ApiException {
        ApiResponse<RoutesV3ImportTransformResponse> localVarResp = v3TransformsRepositoryImportPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Import transform from YAML
     * Import transform from YAML file
     * @param body YAML transform definition (required)
     * @return ApiResponse&lt;RoutesV3ImportTransformResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform imported successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid YAML or transform validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to import transform </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV3ImportTransformResponse> v3TransformsRepositoryImportPostWithHttpInfo(@javax.annotation.Nonnull String body) throws ApiException {
        okhttp3.Call localVarCall = v3TransformsRepositoryImportPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<RoutesV3ImportTransformResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Import transform from YAML (asynchronously)
     * Import transform from YAML file
     * @param body YAML transform definition (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform imported successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid YAML or transform validation failed </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to import transform </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3TransformsRepositoryImportPostAsync(@javax.annotation.Nonnull String body, final ApiCallback<RoutesV3ImportTransformResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3TransformsRepositoryImportPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<RoutesV3ImportTransformResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v3TransformsRepositoryTransformIdGet
     * @param transformId Transform ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transform not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3TransformsRepositoryTransformIdGetCall(@javax.annotation.Nonnull String transformId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v3/transforms/repository/{transform_id}"
            .replace("{" + "transform_id" + "}", localVarApiClient.escapeString(transformId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v3TransformsRepositoryTransformIdGetValidateBeforeCall(@javax.annotation.Nonnull String transformId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transformId' is set
        if (transformId == null) {
            throw new ApiException("Missing the required parameter 'transformId' when calling v3TransformsRepositoryTransformIdGet(Async)");
        }

        return v3TransformsRepositoryTransformIdGetCall(transformId, _callback);

    }

    /**
     * Get transform details
     * Get detailed information about a specific transform from repository
     * @param transformId Transform ID (required)
     * @return CommunityTransformsInternalTransformConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transform not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform details </td><td>  -  </td></tr>
     </table>
     */
    public CommunityTransformsInternalTransformConfig v3TransformsRepositoryTransformIdGet(@javax.annotation.Nonnull String transformId) throws ApiException {
        ApiResponse<CommunityTransformsInternalTransformConfig> localVarResp = v3TransformsRepositoryTransformIdGetWithHttpInfo(transformId);
        return localVarResp.getData();
    }

    /**
     * Get transform details
     * Get detailed information about a specific transform from repository
     * @param transformId Transform ID (required)
     * @return ApiResponse&lt;CommunityTransformsInternalTransformConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transform not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform details </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CommunityTransformsInternalTransformConfig> v3TransformsRepositoryTransformIdGetWithHttpInfo(@javax.annotation.Nonnull String transformId) throws ApiException {
        okhttp3.Call localVarCall = v3TransformsRepositoryTransformIdGetValidateBeforeCall(transformId, null);
        Type localVarReturnType = new TypeToken<CommunityTransformsInternalTransformConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get transform details (asynchronously)
     * Get detailed information about a specific transform from repository
     * @param transformId Transform ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Transform details retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Transform not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get transform details </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v3TransformsRepositoryTransformIdGetAsync(@javax.annotation.Nonnull String transformId, final ApiCallback<CommunityTransformsInternalTransformConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = v3TransformsRepositoryTransformIdGetValidateBeforeCall(transformId, _callback);
        Type localVarReturnType = new TypeToken<CommunityTransformsInternalTransformConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
