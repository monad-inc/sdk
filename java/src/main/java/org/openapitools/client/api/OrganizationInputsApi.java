/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsInput;
import org.openapitools.client.model.ModelsInputList;
import org.openapitools.client.model.ResponderErrorResponse;
import org.openapitools.client.model.RoutesGetInputResponse;
import org.openapitools.client.model.RoutesV2CreateInputRequest;
import org.openapitools.client.model.RoutesV2SuccessResponse;
import org.openapitools.client.model.RoutesV2TestInputConnectionRequest;
import org.openapitools.client.model.RoutesV2UpdateInputRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationInputsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationInputsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationInputsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1OrganizationIdInputsGet
     * @param organizationId Organization ID (required)
     * @param limit Limit the number of organizations returned (default: DefaultLimit) (optional)
     * @param offset Offset the organizations returned (default: 0) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inputs retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdInputsGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/inputs"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdInputsGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdInputsGet(Async)");
        }

        return v1OrganizationIdInputsGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List inputs
     * List inputs
     * @param organizationId Organization ID (required)
     * @param limit Limit the number of organizations returned (default: DefaultLimit) (optional)
     * @param offset Offset the organizations returned (default: 0) (optional)
     * @return ModelsInputList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inputs retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public ModelsInputList v1OrganizationIdInputsGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<ModelsInputList> localVarResp = v1OrganizationIdInputsGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List inputs
     * List inputs
     * @param organizationId Organization ID (required)
     * @param limit Limit the number of organizations returned (default: DefaultLimit) (optional)
     * @param offset Offset the organizations returned (default: 0) (optional)
     * @return ApiResponse&lt;ModelsInputList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inputs retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsInputList> v1OrganizationIdInputsGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdInputsGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsInputList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List inputs (asynchronously)
     * List inputs
     * @param organizationId Organization ID (required)
     * @param limit Limit the number of organizations returned (default: DefaultLimit) (optional)
     * @param offset Offset the organizations returned (default: 0) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Inputs retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdInputsGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<ModelsInputList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdInputsGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsInputList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdInputsInputIdDelete
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdInputsInputIdDeleteCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/inputs/{input_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "input_id" + "}", localVarApiClient.escapeString(inputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdInputsInputIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdInputsInputIdDelete(Async)");
        }

        // verify the required parameter 'inputId' is set
        if (inputId == null) {
            throw new ApiException("Missing the required parameter 'inputId' when calling v1OrganizationIdInputsInputIdDelete(Async)");
        }

        return v1OrganizationIdInputsInputIdDeleteCall(organizationId, inputId, _callback);

    }

    /**
     * Delete input
     * Delete input
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete input </td><td>  -  </td></tr>
     </table>
     */
    public Object v1OrganizationIdInputsInputIdDelete(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId) throws ApiException {
        ApiResponse<Object> localVarResp = v1OrganizationIdInputsInputIdDeleteWithHttpInfo(organizationId, inputId);
        return localVarResp.getData();
    }

    /**
     * Delete input
     * Delete input
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete input </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> v1OrganizationIdInputsInputIdDeleteWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdInputsInputIdDeleteValidateBeforeCall(organizationId, inputId, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete input (asynchronously)
     * Delete input
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete input </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdInputsInputIdDeleteAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdInputsInputIdDeleteValidateBeforeCall(organizationId, inputId, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdInputsInputIdGet
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdInputsInputIdGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/inputs/{input_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "input_id" + "}", localVarApiClient.escapeString(inputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdInputsInputIdGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdInputsInputIdGet(Async)");
        }

        // verify the required parameter 'inputId' is set
        if (inputId == null) {
            throw new ApiException("Missing the required parameter 'inputId' when calling v1OrganizationIdInputsInputIdGet(Async)");
        }

        return v1OrganizationIdInputsInputIdGetCall(organizationId, inputId, _callback);

    }

    /**
     * Get input
     * Get input
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @return RoutesGetInputResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public RoutesGetInputResponse v1OrganizationIdInputsInputIdGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId) throws ApiException {
        ApiResponse<RoutesGetInputResponse> localVarResp = v1OrganizationIdInputsInputIdGetWithHttpInfo(organizationId, inputId);
        return localVarResp.getData();
    }

    /**
     * Get input
     * Get input
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @return ApiResponse&lt;RoutesGetInputResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesGetInputResponse> v1OrganizationIdInputsInputIdGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdInputsInputIdGetValidateBeforeCall(organizationId, inputId, null);
        Type localVarReturnType = new TypeToken<RoutesGetInputResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get input (asynchronously)
     * Get input
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input retrieved successfully </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdInputsInputIdGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, final ApiCallback<RoutesGetInputResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdInputsInputIdGetValidateBeforeCall(organizationId, inputId, _callback);
        Type localVarReturnType = new TypeToken<RoutesGetInputResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdInputsInputIdPatch
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @param routesV2UpdateInputRequest Input configuration update (required)
     * @param testConnection Test connection before creating the input (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Input not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdInputsInputIdPatchCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, @javax.annotation.Nonnull RoutesV2UpdateInputRequest routesV2UpdateInputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2UpdateInputRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/inputs/{input_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "input_id" + "}", localVarApiClient.escapeString(inputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testConnection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test_connection", testConnection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdInputsInputIdPatchValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, @javax.annotation.Nonnull RoutesV2UpdateInputRequest routesV2UpdateInputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdInputsInputIdPatch(Async)");
        }

        // verify the required parameter 'inputId' is set
        if (inputId == null) {
            throw new ApiException("Missing the required parameter 'inputId' when calling v2OrganizationIdInputsInputIdPatch(Async)");
        }

        // verify the required parameter 'routesV2UpdateInputRequest' is set
        if (routesV2UpdateInputRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2UpdateInputRequest' when calling v2OrganizationIdInputsInputIdPatch(Async)");
        }

        return v2OrganizationIdInputsInputIdPatchCall(organizationId, inputId, routesV2UpdateInputRequest, testConnection, _callback);

    }

    /**
     * Update input
     * Update an existing input with new configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @param routesV2UpdateInputRequest Input configuration update (required)
     * @param testConnection Test connection before creating the input (optional)
     * @return ModelsInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Input not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsInput v2OrganizationIdInputsInputIdPatch(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, @javax.annotation.Nonnull RoutesV2UpdateInputRequest routesV2UpdateInputRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        ApiResponse<ModelsInput> localVarResp = v2OrganizationIdInputsInputIdPatchWithHttpInfo(organizationId, inputId, routesV2UpdateInputRequest, testConnection);
        return localVarResp.getData();
    }

    /**
     * Update input
     * Update an existing input with new configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @param routesV2UpdateInputRequest Input configuration update (required)
     * @param testConnection Test connection before creating the input (optional)
     * @return ApiResponse&lt;ModelsInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Input not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsInput> v2OrganizationIdInputsInputIdPatchWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, @javax.annotation.Nonnull RoutesV2UpdateInputRequest routesV2UpdateInputRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdInputsInputIdPatchValidateBeforeCall(organizationId, inputId, routesV2UpdateInputRequest, testConnection, null);
        Type localVarReturnType = new TypeToken<ModelsInput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update input (asynchronously)
     * Update an existing input with new configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param inputId Input ID (required)
     * @param routesV2UpdateInputRequest Input configuration update (required)
     * @param testConnection Test connection before creating the input (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Input not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdInputsInputIdPatchAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String inputId, @javax.annotation.Nonnull RoutesV2UpdateInputRequest routesV2UpdateInputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback<ModelsInput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdInputsInputIdPatchValidateBeforeCall(organizationId, inputId, routesV2UpdateInputRequest, testConnection, _callback);
        Type localVarReturnType = new TypeToken<ModelsInput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdInputsPost
     * @param organizationId Organization ID (required)
     * @param routesV2CreateInputRequest Input configuration (required)
     * @param testConnection Test connection before creating the input (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdInputsPostCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateInputRequest routesV2CreateInputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2CreateInputRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/inputs"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testConnection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test_connection", testConnection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdInputsPostValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateInputRequest routesV2CreateInputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdInputsPost(Async)");
        }

        // verify the required parameter 'routesV2CreateInputRequest' is set
        if (routesV2CreateInputRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2CreateInputRequest' when calling v2OrganizationIdInputsPost(Async)");
        }

        return v2OrganizationIdInputsPostCall(organizationId, routesV2CreateInputRequest, testConnection, _callback);

    }

    /**
     * Create input
     * Create a new input with configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param routesV2CreateInputRequest Input configuration (required)
     * @param testConnection Test connection before creating the input (optional)
     * @return ModelsInput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsInput v2OrganizationIdInputsPost(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateInputRequest routesV2CreateInputRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        ApiResponse<ModelsInput> localVarResp = v2OrganizationIdInputsPostWithHttpInfo(organizationId, routesV2CreateInputRequest, testConnection);
        return localVarResp.getData();
    }

    /**
     * Create input
     * Create a new input with configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param routesV2CreateInputRequest Input configuration (required)
     * @param testConnection Test connection before creating the input (optional)
     * @return ApiResponse&lt;ModelsInput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsInput> v2OrganizationIdInputsPostWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateInputRequest routesV2CreateInputRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdInputsPostValidateBeforeCall(organizationId, routesV2CreateInputRequest, testConnection, null);
        Type localVarReturnType = new TypeToken<ModelsInput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create input (asynchronously)
     * Create a new input with configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param routesV2CreateInputRequest Input configuration (required)
     * @param testConnection Test connection before creating the input (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Input created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdInputsPostAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateInputRequest routesV2CreateInputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback<ModelsInput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdInputsPostValidateBeforeCall(organizationId, routesV2CreateInputRequest, testConnection, _callback);
        Type localVarReturnType = new TypeToken<ModelsInput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdInputsTestConnectionPost
     * @param organizationId Organization ID (required)
     * @param routesV2TestInputConnectionRequest Input configuration to test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdInputsTestConnectionPostCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestInputConnectionRequest routesV2TestInputConnectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2TestInputConnectionRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/inputs/test-connection"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdInputsTestConnectionPostValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestInputConnectionRequest routesV2TestInputConnectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdInputsTestConnectionPost(Async)");
        }

        // verify the required parameter 'routesV2TestInputConnectionRequest' is set
        if (routesV2TestInputConnectionRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2TestInputConnectionRequest' when calling v2OrganizationIdInputsTestConnectionPost(Async)");
        }

        return v2OrganizationIdInputsTestConnectionPostCall(organizationId, routesV2TestInputConnectionRequest, _callback);

    }

    /**
     * Test input connection
     * Tests the connection for a given input type and configuration
     * @param organizationId Organization ID (required)
     * @param routesV2TestInputConnectionRequest Input configuration to test (required)
     * @return RoutesV2SuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV2SuccessResponse v2OrganizationIdInputsTestConnectionPost(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestInputConnectionRequest routesV2TestInputConnectionRequest) throws ApiException {
        ApiResponse<RoutesV2SuccessResponse> localVarResp = v2OrganizationIdInputsTestConnectionPostWithHttpInfo(organizationId, routesV2TestInputConnectionRequest);
        return localVarResp.getData();
    }

    /**
     * Test input connection
     * Tests the connection for a given input type and configuration
     * @param organizationId Organization ID (required)
     * @param routesV2TestInputConnectionRequest Input configuration to test (required)
     * @return ApiResponse&lt;RoutesV2SuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV2SuccessResponse> v2OrganizationIdInputsTestConnectionPostWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestInputConnectionRequest routesV2TestInputConnectionRequest) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdInputsTestConnectionPostValidateBeforeCall(organizationId, routesV2TestInputConnectionRequest, null);
        Type localVarReturnType = new TypeToken<RoutesV2SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test input connection (asynchronously)
     * Tests the connection for a given input type and configuration
     * @param organizationId Organization ID (required)
     * @param routesV2TestInputConnectionRequest Input configuration to test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, input type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdInputsTestConnectionPostAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestInputConnectionRequest routesV2TestInputConnectionRequest, final ApiCallback<RoutesV2SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdInputsTestConnectionPostValidateBeforeCall(organizationId, routesV2TestInputConnectionRequest, _callback);
        Type localVarReturnType = new TypeToken<RoutesV2SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
