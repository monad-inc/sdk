/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class LogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public LogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public LogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1OrganizationIdLogsApiGet
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsApiGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/logs/api"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdLogsApiGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdLogsApiGet(Async)");
        }

        return v1OrganizationIdLogsApiGetCall(organizationId, since, _callback);

    }

    /**
     * Stream organization api logs
     * Stream api logs for an organization
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public String v1OrganizationIdLogsApiGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since) throws ApiException {
        ApiResponse<String> localVarResp = v1OrganizationIdLogsApiGetWithHttpInfo(organizationId, since);
        return localVarResp.getData();
    }

    /**
     * Stream organization api logs
     * Stream api logs for an organization
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1OrganizationIdLogsApiGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdLogsApiGetValidateBeforeCall(organizationId, since, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream organization api logs (asynchronously)
     * Stream api logs for an organization
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsApiGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdLogsApiGetValidateBeforeCall(organizationId, since, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdLogsGet
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/logs"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (last != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last", last));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdLogsGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdLogsGet(Async)");
        }

        return v1OrganizationIdLogsGetCall(organizationId, since, last, _callback);

    }

    /**
     * Stream organization logs
     * Stream logs for an entire organization
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public String v1OrganizationIdLogsGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last) throws ApiException {
        ApiResponse<String> localVarResp = v1OrganizationIdLogsGetWithHttpInfo(organizationId, since, last);
        return localVarResp.getData();
    }

    /**
     * Stream organization logs
     * Stream logs for an entire organization
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1OrganizationIdLogsGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdLogsGetValidateBeforeCall(organizationId, since, last, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream organization logs (asynchronously)
     * Stream logs for an entire organization
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdLogsGetValidateBeforeCall(organizationId, since, last, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdLogsPipelinesGet
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsPipelinesGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/logs/pipelines"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdLogsPipelinesGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdLogsPipelinesGet(Async)");
        }

        return v1OrganizationIdLogsPipelinesGetCall(organizationId, since, _callback);

    }

    /**
     * Stream organization pipeline logs
     * Stream pipeline logs for an organization
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public String v1OrganizationIdLogsPipelinesGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since) throws ApiException {
        ApiResponse<String> localVarResp = v1OrganizationIdLogsPipelinesGetWithHttpInfo(organizationId, since);
        return localVarResp.getData();
    }

    /**
     * Stream organization pipeline logs
     * Stream pipeline logs for an organization
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1OrganizationIdLogsPipelinesGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdLogsPipelinesGetValidateBeforeCall(organizationId, since, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream organization pipeline logs (asynchronously)
     * Stream pipeline logs for an organization
     * @param organizationId Organization ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsPipelinesGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable String since, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdLogsPipelinesGetValidateBeforeCall(organizationId, since, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdLogsPipelinesPipelineIdGet
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsPipelinesPipelineIdGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/logs/pipelines/{pipeline_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (last != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last", last));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdLogsPipelinesPipelineIdGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdLogsPipelinesPipelineIdGet(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v1OrganizationIdLogsPipelinesPipelineIdGet(Async)");
        }

        return v1OrganizationIdLogsPipelinesPipelineIdGetCall(organizationId, pipelineId, since, last, _callback);

    }

    /**
     * Stream pipeline logs
     * Stream logs for a specific pipeline within an organization
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public String v1OrganizationIdLogsPipelinesPipelineIdGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last) throws ApiException {
        ApiResponse<String> localVarResp = v1OrganizationIdLogsPipelinesPipelineIdGetWithHttpInfo(organizationId, pipelineId, since, last);
        return localVarResp.getData();
    }

    /**
     * Stream pipeline logs
     * Stream logs for a specific pipeline within an organization
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1OrganizationIdLogsPipelinesPipelineIdGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdLogsPipelinesPipelineIdGetValidateBeforeCall(organizationId, pipelineId, since, last, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream pipeline logs (asynchronously)
     * Stream logs for a specific pipeline within an organization
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsPipelinesPipelineIdGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdLogsPipelinesPipelineIdGetValidateBeforeCall(organizationId, pipelineId, since, last, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdLogsPipelinesPipelineIdNodeIdGet
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsPipelinesPipelineIdNodeIdGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/logs/pipelines/{pipeline_id}/{node_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "pipeline_id" + "}", localVarApiClient.escapeString(pipelineId.toString()))
            .replace("{" + "node_id" + "}", localVarApiClient.escapeString(nodeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (last != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("last", last));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/event-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdLogsPipelinesPipelineIdNodeIdGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdLogsPipelinesPipelineIdNodeIdGet(Async)");
        }

        // verify the required parameter 'pipelineId' is set
        if (pipelineId == null) {
            throw new ApiException("Missing the required parameter 'pipelineId' when calling v1OrganizationIdLogsPipelinesPipelineIdNodeIdGet(Async)");
        }

        // verify the required parameter 'nodeId' is set
        if (nodeId == null) {
            throw new ApiException("Missing the required parameter 'nodeId' when calling v1OrganizationIdLogsPipelinesPipelineIdNodeIdGet(Async)");
        }

        return v1OrganizationIdLogsPipelinesPipelineIdNodeIdGetCall(organizationId, pipelineId, nodeId, since, last, _callback);

    }

    /**
     * Stream node logs
     * Stream logs for a specific node within a pipeline and organization
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public String v1OrganizationIdLogsPipelinesPipelineIdNodeIdGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last) throws ApiException {
        ApiResponse<String> localVarResp = v1OrganizationIdLogsPipelinesPipelineIdNodeIdGetWithHttpInfo(organizationId, pipelineId, nodeId, since, last);
        return localVarResp.getData();
    }

    /**
     * Stream node logs
     * Stream logs for a specific node within a pipeline and organization
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1OrganizationIdLogsPipelinesPipelineIdNodeIdGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdLogsPipelinesPipelineIdNodeIdGetValidateBeforeCall(organizationId, pipelineId, nodeId, since, last, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Stream node logs (asynchronously)
     * Stream logs for a specific node within a pipeline and organization
     * @param organizationId Organization ID (required)
     * @param pipelineId Pipeline ID (required)
     * @param nodeId Node ID (required)
     * @param since RFC3339 timestamp to start streaming from (optional)
     * @param last Duration to start streaming from (e.g., &#39;5h&#39; or &#39;30m&#39;) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Log stream </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid &#39;since&#39; timestamp or &#39;last&#39; duration format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdLogsPipelinesPipelineIdNodeIdGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String pipelineId, @javax.annotation.Nonnull String nodeId, @javax.annotation.Nullable String since, @javax.annotation.Nullable String last, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdLogsPipelinesPipelineIdNodeIdGetValidateBeforeCall(organizationId, pipelineId, nodeId, since, last, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
