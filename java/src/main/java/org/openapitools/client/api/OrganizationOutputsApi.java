/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsOutput;
import org.openapitools.client.model.ModelsOutputList;
import org.openapitools.client.model.ResponderErrorResponse;
import org.openapitools.client.model.RoutesGetOutputResponse;
import org.openapitools.client.model.RoutesV2CreateOutputRequest;
import org.openapitools.client.model.RoutesV2SuccessResponse;
import org.openapitools.client.model.RoutesV2TestOutputConnectionRequest;
import org.openapitools.client.model.RoutesV2UpdateOutputRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationOutputsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationOutputsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationOutputsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v1OrganizationIdOutputsGet
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of outputs </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to marshal outputs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdOutputsGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/outputs"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdOutputsGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdOutputsGet(Async)");
        }

        return v1OrganizationIdOutputsGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List outputs
     * List outputs
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ModelsOutputList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of outputs </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to marshal outputs </td><td>  -  </td></tr>
     </table>
     */
    public ModelsOutputList v1OrganizationIdOutputsGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        ApiResponse<ModelsOutputList> localVarResp = v1OrganizationIdOutputsGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List outputs
     * List outputs
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ApiResponse&lt;ModelsOutputList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of outputs </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to marshal outputs </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsOutputList> v1OrganizationIdOutputsGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdOutputsGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsOutputList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List outputs (asynchronously)
     * List outputs
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of outputs </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to marshal outputs </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdOutputsGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable Integer offset, final ApiCallback<ModelsOutputList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdOutputsGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsOutputList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdOutputsOutputIdDelete
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete output </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdOutputsOutputIdDeleteCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/outputs/{output_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdOutputsOutputIdDeleteValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdOutputsOutputIdDelete(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling v1OrganizationIdOutputsOutputIdDelete(Async)");
        }

        return v1OrganizationIdOutputsOutputIdDeleteCall(organizationId, outputId, _callback);

    }

    /**
     * Delete output
     * Delete output
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete output </td><td>  -  </td></tr>
     </table>
     */
    public String v1OrganizationIdOutputsOutputIdDelete(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId) throws ApiException {
        ApiResponse<String> localVarResp = v1OrganizationIdOutputsOutputIdDeleteWithHttpInfo(organizationId, outputId);
        return localVarResp.getData();
    }

    /**
     * Delete output
     * Delete output
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete output </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v1OrganizationIdOutputsOutputIdDeleteWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdOutputsOutputIdDeleteValidateBeforeCall(organizationId, outputId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete output (asynchronously)
     * Delete output
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output deleted successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete output </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdOutputsOutputIdDeleteAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdOutputsOutputIdDeleteValidateBeforeCall(organizationId, outputId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v1OrganizationIdOutputsOutputIdGet
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get output </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdOutputsOutputIdGetCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/{organization_id}/outputs/{output_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v1OrganizationIdOutputsOutputIdGetValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v1OrganizationIdOutputsOutputIdGet(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling v1OrganizationIdOutputsOutputIdGet(Async)");
        }

        return v1OrganizationIdOutputsOutputIdGetCall(organizationId, outputId, _callback);

    }

    /**
     * Get output
     * Get output
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @return RoutesGetOutputResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get output </td><td>  -  </td></tr>
     </table>
     */
    public RoutesGetOutputResponse v1OrganizationIdOutputsOutputIdGet(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId) throws ApiException {
        ApiResponse<RoutesGetOutputResponse> localVarResp = v1OrganizationIdOutputsOutputIdGetWithHttpInfo(organizationId, outputId);
        return localVarResp.getData();
    }

    /**
     * Get output
     * Get output
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @return ApiResponse&lt;RoutesGetOutputResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get output </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesGetOutputResponse> v1OrganizationIdOutputsOutputIdGetWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId) throws ApiException {
        okhttp3.Call localVarCall = v1OrganizationIdOutputsOutputIdGetValidateBeforeCall(organizationId, outputId, null);
        Type localVarReturnType = new TypeToken<RoutesGetOutputResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get output (asynchronously)
     * Get output
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output retrieved successfully </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get output </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v1OrganizationIdOutputsOutputIdGetAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, final ApiCallback<RoutesGetOutputResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v1OrganizationIdOutputsOutputIdGetValidateBeforeCall(organizationId, outputId, _callback);
        Type localVarReturnType = new TypeToken<RoutesGetOutputResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdOutputsOutputIdPatch
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @param routesV2UpdateOutputRequest Output configuration update (required)
     * @param testConnection Test connection before creating the input (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Output not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdOutputsOutputIdPatchCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, @javax.annotation.Nonnull RoutesV2UpdateOutputRequest routesV2UpdateOutputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2UpdateOutputRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/outputs/{output_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "output_id" + "}", localVarApiClient.escapeString(outputId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testConnection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test_connection", testConnection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdOutputsOutputIdPatchValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, @javax.annotation.Nonnull RoutesV2UpdateOutputRequest routesV2UpdateOutputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdOutputsOutputIdPatch(Async)");
        }

        // verify the required parameter 'outputId' is set
        if (outputId == null) {
            throw new ApiException("Missing the required parameter 'outputId' when calling v2OrganizationIdOutputsOutputIdPatch(Async)");
        }

        // verify the required parameter 'routesV2UpdateOutputRequest' is set
        if (routesV2UpdateOutputRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2UpdateOutputRequest' when calling v2OrganizationIdOutputsOutputIdPatch(Async)");
        }

        return v2OrganizationIdOutputsOutputIdPatchCall(organizationId, outputId, routesV2UpdateOutputRequest, testConnection, _callback);

    }

    /**
     * Update output
     * Update an existing output with new configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @param routesV2UpdateOutputRequest Output configuration update (required)
     * @param testConnection Test connection before creating the input (optional)
     * @return ModelsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Output not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsOutput v2OrganizationIdOutputsOutputIdPatch(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, @javax.annotation.Nonnull RoutesV2UpdateOutputRequest routesV2UpdateOutputRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        ApiResponse<ModelsOutput> localVarResp = v2OrganizationIdOutputsOutputIdPatchWithHttpInfo(organizationId, outputId, routesV2UpdateOutputRequest, testConnection);
        return localVarResp.getData();
    }

    /**
     * Update output
     * Update an existing output with new configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @param routesV2UpdateOutputRequest Output configuration update (required)
     * @param testConnection Test connection before creating the input (optional)
     * @return ApiResponse&lt;ModelsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Output not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsOutput> v2OrganizationIdOutputsOutputIdPatchWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, @javax.annotation.Nonnull RoutesV2UpdateOutputRequest routesV2UpdateOutputRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdOutputsOutputIdPatchValidateBeforeCall(organizationId, outputId, routesV2UpdateOutputRequest, testConnection, null);
        Type localVarReturnType = new TypeToken<ModelsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update output (asynchronously)
     * Update an existing output with new configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param outputId Output ID (required)
     * @param routesV2UpdateOutputRequest Output configuration update (required)
     * @param testConnection Test connection before creating the input (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Output not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdOutputsOutputIdPatchAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull String outputId, @javax.annotation.Nonnull RoutesV2UpdateOutputRequest routesV2UpdateOutputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback<ModelsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdOutputsOutputIdPatchValidateBeforeCall(organizationId, outputId, routesV2UpdateOutputRequest, testConnection, _callback);
        Type localVarReturnType = new TypeToken<ModelsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdOutputsPost
     * @param organizationId Organization ID (required)
     * @param routesV2CreateOutputRequest Output configuration (required)
     * @param testConnection Test connection before creating the input (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdOutputsPostCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOutputRequest routesV2CreateOutputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2CreateOutputRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/outputs"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (testConnection != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("test_connection", testConnection));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdOutputsPostValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOutputRequest routesV2CreateOutputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdOutputsPost(Async)");
        }

        // verify the required parameter 'routesV2CreateOutputRequest' is set
        if (routesV2CreateOutputRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2CreateOutputRequest' when calling v2OrganizationIdOutputsPost(Async)");
        }

        return v2OrganizationIdOutputsPostCall(organizationId, routesV2CreateOutputRequest, testConnection, _callback);

    }

    /**
     * Create output
     * Create a new output with configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param routesV2CreateOutputRequest Output configuration (required)
     * @param testConnection Test connection before creating the input (optional)
     * @return ModelsOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ModelsOutput v2OrganizationIdOutputsPost(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOutputRequest routesV2CreateOutputRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        ApiResponse<ModelsOutput> localVarResp = v2OrganizationIdOutputsPostWithHttpInfo(organizationId, routesV2CreateOutputRequest, testConnection);
        return localVarResp.getData();
    }

    /**
     * Create output
     * Create a new output with configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param routesV2CreateOutputRequest Output configuration (required)
     * @param testConnection Test connection before creating the input (optional)
     * @return ApiResponse&lt;ModelsOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsOutput> v2OrganizationIdOutputsPostWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOutputRequest routesV2CreateOutputRequest, @javax.annotation.Nullable Boolean testConnection) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdOutputsPostValidateBeforeCall(organizationId, routesV2CreateOutputRequest, testConnection, null);
        Type localVarReturnType = new TypeToken<ModelsOutput>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create output (asynchronously)
     * Create a new output with configuration including secrets handling
     * @param organizationId Organization ID (required)
     * @param routesV2CreateOutputRequest Output configuration (required)
     * @param testConnection Test connection before creating the input (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Output created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, configuration validation error, or secret processing error </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdOutputsPostAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2CreateOutputRequest routesV2CreateOutputRequest, @javax.annotation.Nullable Boolean testConnection, final ApiCallback<ModelsOutput> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdOutputsPostValidateBeforeCall(organizationId, routesV2CreateOutputRequest, testConnection, _callback);
        Type localVarReturnType = new TypeToken<ModelsOutput>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdOutputsTestConnectionPost
     * @param organizationId Organization ID (required)
     * @param routesV2TestOutputConnectionRequest Output configuration to test (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdOutputsTestConnectionPostCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestOutputConnectionRequest routesV2TestOutputConnectionRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2TestOutputConnectionRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/outputs/test-connection"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdOutputsTestConnectionPostValidateBeforeCall(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestOutputConnectionRequest routesV2TestOutputConnectionRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdOutputsTestConnectionPost(Async)");
        }

        // verify the required parameter 'routesV2TestOutputConnectionRequest' is set
        if (routesV2TestOutputConnectionRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2TestOutputConnectionRequest' when calling v2OrganizationIdOutputsTestConnectionPost(Async)");
        }

        return v2OrganizationIdOutputsTestConnectionPostCall(organizationId, routesV2TestOutputConnectionRequest, _callback);

    }

    /**
     * Test output connection
     * Tests the connection for a given output type and configuration
     * @param organizationId Organization ID (required)
     * @param routesV2TestOutputConnectionRequest Output configuration to test (required)
     * @return RoutesV2SuccessResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public RoutesV2SuccessResponse v2OrganizationIdOutputsTestConnectionPost(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestOutputConnectionRequest routesV2TestOutputConnectionRequest) throws ApiException {
        ApiResponse<RoutesV2SuccessResponse> localVarResp = v2OrganizationIdOutputsTestConnectionPostWithHttpInfo(organizationId, routesV2TestOutputConnectionRequest);
        return localVarResp.getData();
    }

    /**
     * Test output connection
     * Tests the connection for a given output type and configuration
     * @param organizationId Organization ID (required)
     * @param routesV2TestOutputConnectionRequest Output configuration to test (required)
     * @return ApiResponse&lt;RoutesV2SuccessResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RoutesV2SuccessResponse> v2OrganizationIdOutputsTestConnectionPostWithHttpInfo(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestOutputConnectionRequest routesV2TestOutputConnectionRequest) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdOutputsTestConnectionPostValidateBeforeCall(organizationId, routesV2TestOutputConnectionRequest, null);
        Type localVarReturnType = new TypeToken<RoutesV2SuccessResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Test output connection (asynchronously)
     * Tests the connection for a given output type and configuration
     * @param organizationId Organization ID (required)
     * @param routesV2TestOutputConnectionRequest Output configuration to test (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Connection test successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid request body, output type, or configuration </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal server error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdOutputsTestConnectionPostAsync(@javax.annotation.Nonnull String organizationId, @javax.annotation.Nonnull RoutesV2TestOutputConnectionRequest routesV2TestOutputConnectionRequest, final ApiCallback<RoutesV2SuccessResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdOutputsTestConnectionPostValidateBeforeCall(organizationId, routesV2TestOutputConnectionRequest, _callback);
        Type localVarReturnType = new TypeToken<RoutesV2SuccessResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
