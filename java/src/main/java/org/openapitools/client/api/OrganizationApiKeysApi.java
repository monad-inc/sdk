/*
 * Monad Swagger API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ModelsAPIKey;
import org.openapitools.client.model.ModelsAPIKeyList;
import org.openapitools.client.model.ModelsAPIKeyWithToken;
import org.openapitools.client.model.RoutesV2CreateAPIKeyRequest;
import org.openapitools.client.model.RoutesV2UpdateAPIKeyRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrganizationApiKeysApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OrganizationApiKeysApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrganizationApiKeysApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for v2OrganizationIdApiKeysApiKeyIdDelete
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysApiKeyIdDeleteCall(String organizationId, String apiKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/api_keys/{api_key_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "api_key_id" + "}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdApiKeysApiKeyIdDeleteValidateBeforeCall(String organizationId, String apiKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdApiKeysApiKeyIdDelete(Async)");
        }

        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling v2OrganizationIdApiKeysApiKeyIdDelete(Async)");
        }

        return v2OrganizationIdApiKeysApiKeyIdDeleteCall(organizationId, apiKeyId, _callback);

    }

    /**
     * Delete API key
     * Delete API key
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete API key </td><td>  -  </td></tr>
     </table>
     */
    public String v2OrganizationIdApiKeysApiKeyIdDelete(String organizationId, String apiKeyId) throws ApiException {
        ApiResponse<String> localVarResp = v2OrganizationIdApiKeysApiKeyIdDeleteWithHttpInfo(organizationId, apiKeyId);
        return localVarResp.getData();
    }

    /**
     * Delete API key
     * Delete API key
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> v2OrganizationIdApiKeysApiKeyIdDeleteWithHttpInfo(String organizationId, String apiKeyId) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdApiKeysApiKeyIdDeleteValidateBeforeCall(organizationId, apiKeyId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete API key (asynchronously)
     * Delete API key
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key deleted successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to delete API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysApiKeyIdDeleteAsync(String organizationId, String apiKeyId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdApiKeysApiKeyIdDeleteValidateBeforeCall(organizationId, apiKeyId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdApiKeysApiKeyIdGet
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysApiKeyIdGetCall(String organizationId, String apiKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/api_keys/{api_key_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "api_key_id" + "}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdApiKeysApiKeyIdGetValidateBeforeCall(String organizationId, String apiKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdApiKeysApiKeyIdGet(Async)");
        }

        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling v2OrganizationIdApiKeysApiKeyIdGet(Async)");
        }

        return v2OrganizationIdApiKeysApiKeyIdGetCall(organizationId, apiKeyId, _callback);

    }

    /**
     * Get API key
     * Get API key
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @return ModelsAPIKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get API key </td><td>  -  </td></tr>
     </table>
     */
    public ModelsAPIKey v2OrganizationIdApiKeysApiKeyIdGet(String organizationId, String apiKeyId) throws ApiException {
        ApiResponse<ModelsAPIKey> localVarResp = v2OrganizationIdApiKeysApiKeyIdGetWithHttpInfo(organizationId, apiKeyId);
        return localVarResp.getData();
    }

    /**
     * Get API key
     * Get API key
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @return ApiResponse&lt;ModelsAPIKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsAPIKey> v2OrganizationIdApiKeysApiKeyIdGetWithHttpInfo(String organizationId, String apiKeyId) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdApiKeysApiKeyIdGetValidateBeforeCall(organizationId, apiKeyId, null);
        Type localVarReturnType = new TypeToken<ModelsAPIKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get API key (asynchronously)
     * Get API key
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key details </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to get API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysApiKeyIdGetAsync(String organizationId, String apiKeyId, final ApiCallback<ModelsAPIKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdApiKeysApiKeyIdGetValidateBeforeCall(organizationId, apiKeyId, _callback);
        Type localVarReturnType = new TypeToken<ModelsAPIKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdApiKeysApiKeyIdPatch
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param routesV2UpdateAPIKeyRequest Request body for updating an API key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysApiKeyIdPatchCall(String organizationId, String apiKeyId, RoutesV2UpdateAPIKeyRequest routesV2UpdateAPIKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2UpdateAPIKeyRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/api_keys/{api_key_id}"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "api_key_id" + "}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdApiKeysApiKeyIdPatchValidateBeforeCall(String organizationId, String apiKeyId, RoutesV2UpdateAPIKeyRequest routesV2UpdateAPIKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdApiKeysApiKeyIdPatch(Async)");
        }

        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling v2OrganizationIdApiKeysApiKeyIdPatch(Async)");
        }

        // verify the required parameter 'routesV2UpdateAPIKeyRequest' is set
        if (routesV2UpdateAPIKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2UpdateAPIKeyRequest' when calling v2OrganizationIdApiKeysApiKeyIdPatch(Async)");
        }

        return v2OrganizationIdApiKeysApiKeyIdPatchCall(organizationId, apiKeyId, routesV2UpdateAPIKeyRequest, _callback);

    }

    /**
     * Update API key
     * Update API key
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param routesV2UpdateAPIKeyRequest Request body for updating an API key (required)
     * @return ModelsAPIKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update API key </td><td>  -  </td></tr>
     </table>
     */
    public ModelsAPIKey v2OrganizationIdApiKeysApiKeyIdPatch(String organizationId, String apiKeyId, RoutesV2UpdateAPIKeyRequest routesV2UpdateAPIKeyRequest) throws ApiException {
        ApiResponse<ModelsAPIKey> localVarResp = v2OrganizationIdApiKeysApiKeyIdPatchWithHttpInfo(organizationId, apiKeyId, routesV2UpdateAPIKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Update API key
     * Update API key
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param routesV2UpdateAPIKeyRequest Request body for updating an API key (required)
     * @return ApiResponse&lt;ModelsAPIKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsAPIKey> v2OrganizationIdApiKeysApiKeyIdPatchWithHttpInfo(String organizationId, String apiKeyId, RoutesV2UpdateAPIKeyRequest routesV2UpdateAPIKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdApiKeysApiKeyIdPatchValidateBeforeCall(organizationId, apiKeyId, routesV2UpdateAPIKeyRequest, null);
        Type localVarReturnType = new TypeToken<ModelsAPIKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update API key (asynchronously)
     * Update API key
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param routesV2UpdateAPIKeyRequest Request body for updating an API key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key updated successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to update API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysApiKeyIdPatchAsync(String organizationId, String apiKeyId, RoutesV2UpdateAPIKeyRequest routesV2UpdateAPIKeyRequest, final ApiCallback<ModelsAPIKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdApiKeysApiKeyIdPatchValidateBeforeCall(organizationId, apiKeyId, routesV2UpdateAPIKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsAPIKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdApiKeysApiKeyIdRegeneratePost
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New API key generated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to regenerate API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysApiKeyIdRegeneratePostCall(String organizationId, String apiKeyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/api_keys/{api_key_id}/regenerate"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()))
            .replace("{" + "api_key_id" + "}", localVarApiClient.escapeString(apiKeyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdApiKeysApiKeyIdRegeneratePostValidateBeforeCall(String organizationId, String apiKeyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdApiKeysApiKeyIdRegeneratePost(Async)");
        }

        // verify the required parameter 'apiKeyId' is set
        if (apiKeyId == null) {
            throw new ApiException("Missing the required parameter 'apiKeyId' when calling v2OrganizationIdApiKeysApiKeyIdRegeneratePost(Async)");
        }

        return v2OrganizationIdApiKeysApiKeyIdRegeneratePostCall(organizationId, apiKeyId, _callback);

    }

    /**
     * Regenerate API key
     * Regenerates an API key by creating a new one with the same metadata and deleting the old one
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @return ModelsAPIKeyWithToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New API key generated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to regenerate API key </td><td>  -  </td></tr>
     </table>
     */
    public ModelsAPIKeyWithToken v2OrganizationIdApiKeysApiKeyIdRegeneratePost(String organizationId, String apiKeyId) throws ApiException {
        ApiResponse<ModelsAPIKeyWithToken> localVarResp = v2OrganizationIdApiKeysApiKeyIdRegeneratePostWithHttpInfo(organizationId, apiKeyId);
        return localVarResp.getData();
    }

    /**
     * Regenerate API key
     * Regenerates an API key by creating a new one with the same metadata and deleting the old one
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @return ApiResponse&lt;ModelsAPIKeyWithToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New API key generated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to regenerate API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsAPIKeyWithToken> v2OrganizationIdApiKeysApiKeyIdRegeneratePostWithHttpInfo(String organizationId, String apiKeyId) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdApiKeysApiKeyIdRegeneratePostValidateBeforeCall(organizationId, apiKeyId, null);
        Type localVarReturnType = new TypeToken<ModelsAPIKeyWithToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Regenerate API key (asynchronously)
     * Regenerates an API key by creating a new one with the same metadata and deleting the old one
     * @param organizationId Organization ID (required)
     * @param apiKeyId API Key ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New API key generated successfully </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> API key not found </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to regenerate API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysApiKeyIdRegeneratePostAsync(String organizationId, String apiKeyId, final ApiCallback<ModelsAPIKeyWithToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdApiKeysApiKeyIdRegeneratePostValidateBeforeCall(organizationId, apiKeyId, _callback);
        Type localVarReturnType = new TypeToken<ModelsAPIKeyWithToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdApiKeysGet
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of API keys </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list API keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysGetCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/api_keys"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdApiKeysGetValidateBeforeCall(String organizationId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdApiKeysGet(Async)");
        }

        return v2OrganizationIdApiKeysGetCall(organizationId, limit, offset, _callback);

    }

    /**
     * List API keys
     * List API keys
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ModelsAPIKeyList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of API keys </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list API keys </td><td>  -  </td></tr>
     </table>
     */
    public ModelsAPIKeyList v2OrganizationIdApiKeysGet(String organizationId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<ModelsAPIKeyList> localVarResp = v2OrganizationIdApiKeysGetWithHttpInfo(organizationId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * List API keys
     * List API keys
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @return ApiResponse&lt;ModelsAPIKeyList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of API keys </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list API keys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsAPIKeyList> v2OrganizationIdApiKeysGetWithHttpInfo(String organizationId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdApiKeysGetValidateBeforeCall(organizationId, limit, offset, null);
        Type localVarReturnType = new TypeToken<ModelsAPIKeyList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List API keys (asynchronously)
     * List API keys
     * @param organizationId Organization ID (required)
     * @param limit Limit (optional)
     * @param offset Offset (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of API keys </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to list API keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysGetAsync(String organizationId, Integer limit, Integer offset, final ApiCallback<ModelsAPIKeyList> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdApiKeysGetValidateBeforeCall(organizationId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<ModelsAPIKeyList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2OrganizationIdApiKeysPost
     * @param organizationId Organization ID (required)
     * @param routesV2CreateAPIKeyRequest Request body for creating an API key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysPostCall(String organizationId, RoutesV2CreateAPIKeyRequest routesV2CreateAPIKeyRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = routesV2CreateAPIKeyRequest;

        // create path and map variables
        String localVarPath = "/v2/{organization_id}/api_keys"
            .replace("{" + "organization_id" + "}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "Bearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2OrganizationIdApiKeysPostValidateBeforeCall(String organizationId, RoutesV2CreateAPIKeyRequest routesV2CreateAPIKeyRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling v2OrganizationIdApiKeysPost(Async)");
        }

        // verify the required parameter 'routesV2CreateAPIKeyRequest' is set
        if (routesV2CreateAPIKeyRequest == null) {
            throw new ApiException("Missing the required parameter 'routesV2CreateAPIKeyRequest' when calling v2OrganizationIdApiKeysPost(Async)");
        }

        return v2OrganizationIdApiKeysPostCall(organizationId, routesV2CreateAPIKeyRequest, _callback);

    }

    /**
     * Create API key
     * Create API key
     * @param organizationId Organization ID (required)
     * @param routesV2CreateAPIKeyRequest Request body for creating an API key (required)
     * @return ModelsAPIKeyWithToken
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create API key </td><td>  -  </td></tr>
     </table>
     */
    public ModelsAPIKeyWithToken v2OrganizationIdApiKeysPost(String organizationId, RoutesV2CreateAPIKeyRequest routesV2CreateAPIKeyRequest) throws ApiException {
        ApiResponse<ModelsAPIKeyWithToken> localVarResp = v2OrganizationIdApiKeysPostWithHttpInfo(organizationId, routesV2CreateAPIKeyRequest);
        return localVarResp.getData();
    }

    /**
     * Create API key
     * Create API key
     * @param organizationId Organization ID (required)
     * @param routesV2CreateAPIKeyRequest Request body for creating an API key (required)
     * @return ApiResponse&lt;ModelsAPIKeyWithToken&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ModelsAPIKeyWithToken> v2OrganizationIdApiKeysPostWithHttpInfo(String organizationId, RoutesV2CreateAPIKeyRequest routesV2CreateAPIKeyRequest) throws ApiException {
        okhttp3.Call localVarCall = v2OrganizationIdApiKeysPostValidateBeforeCall(organizationId, routesV2CreateAPIKeyRequest, null);
        Type localVarReturnType = new TypeToken<ModelsAPIKeyWithToken>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create API key (asynchronously)
     * Create API key
     * @param organizationId Organization ID (required)
     * @param routesV2CreateAPIKeyRequest Request body for creating an API key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> API key created successfully </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid JSON request body </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Failed to create API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call v2OrganizationIdApiKeysPostAsync(String organizationId, RoutesV2CreateAPIKeyRequest routesV2CreateAPIKeyRequest, final ApiCallback<ModelsAPIKeyWithToken> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2OrganizationIdApiKeysPostValidateBeforeCall(organizationId, routesV2CreateAPIKeyRequest, _callback);
        Type localVarReturnType = new TypeToken<ModelsAPIKeyWithToken>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
