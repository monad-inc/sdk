/*
 * Monad API
 * This is the monad API
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.BatchConfigBatchConfig;
import org.openapitools.client.model.BigquerySettingsConfig;
import org.openapitools.client.model.CriblHttpSettingsConfig;
import org.openapitools.client.model.ElasticsearchSettingsConfig;
import org.openapitools.client.model.FormatterFormatConfig;
import org.openapitools.client.model.HttpSettingsConfig;
import org.openapitools.client.model.NextGenSiemSettingsConfig;
import org.openapitools.client.model.OpensearchSettingsConfig;
import org.openapitools.client.model.ParquetParquetFormatter;
import org.openapitools.client.model.PostgresqlSettingsConfig;
import org.openapitools.client.model.S3SettingsConfig;
import org.openapitools.client.model.SecurityLakeSettingsConfig;
import org.openapitools.client.model.SecurityLakeSourceAccountDetails;
import org.openapitools.client.model.SentinelSettingsConfig;
import org.openapitools.client.model.SnowflakeOutputSettingsConfig;
import org.openapitools.client.model.SplunkSettingsConfig;
import org.openapitools.client.model.SumologicSettingsConfig;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

/**
 * Model tests for SecretProcessesorOutputConfigSettings
 */
public class SecretProcessesorOutputConfigSettingsTest {
    private final SecretProcessesorOutputConfigSettings model = new SecretProcessesorOutputConfigSettings();

    /**
     * Model tests for SecretProcessesorOutputConfigSettings
     */
    @Test
    public void testSecretProcessesorOutputConfigSettings() {
        // TODO: test SecretProcessesorOutputConfigSettings
    }

    /**
     * Test the property 'dataset'
     */
    @Test
    public void datasetTest() {
        // TODO: test dataset
    }

    /**
     * Test the property 'projectId'
     */
    @Test
    public void projectIdTest() {
        // TODO: test projectId
    }

    /**
     * Test the property 'table'
     */
    @Test
    public void tableTest() {
        // TODO: test table
    }

    /**
     * Test the property 'ingressAddress'
     */
    @Test
    public void ingressAddressTest() {
        // TODO: test ingressAddress
    }

    /**
     * Test the property 'path'
     */
    @Test
    public void pathTest() {
        // TODO: test path
    }

    /**
     * Test the property 'port'
     */
    @Test
    public void portTest() {
        // TODO: test port
    }

    /**
     * Test the property 'authType'
     */
    @Test
    public void authTypeTest() {
        // TODO: test authType
    }

    /**
     * Test the property 'cloudId'
     */
    @Test
    public void cloudIdTest() {
        // TODO: test cloudId
    }

    /**
     * Test the property 'connectionType'
     */
    @Test
    public void connectionTypeTest() {
        // TODO: test connectionType
    }

    /**
     * Test the property 'index'
     */
    @Test
    public void indexTest() {
        // TODO: test index
    }

    /**
     * Test the property 'insecureSkipVerify'
     */
    @Test
    public void insecureSkipVerifyTest() {
        // TODO: test insecureSkipVerify
    }

    /**
     * Test the property 'url'
     */
    @Test
    public void urlTest() {
        // TODO: test url
    }

    /**
     * Test the property 'username'
     */
    @Test
    public void usernameTest() {
        // TODO: test username
    }

    /**
     * Test the property 'endpoint'
     */
    @Test
    public void endpointTest() {
        // TODO: test endpoint
    }

    /**
     * Test the property 'headers'
     */
    @Test
    public void headersTest() {
        // TODO: test headers
    }

    /**
     * Test the property 'maxBatchDataSize'
     */
    @Test
    public void maxBatchDataSizeTest() {
        // TODO: test maxBatchDataSize
    }

    /**
     * Test the property 'maxBatchRecordCount'
     */
    @Test
    public void maxBatchRecordCountTest() {
        // TODO: test maxBatchRecordCount
    }

    /**
     * Test the property 'method'
     */
    @Test
    public void methodTest() {
        // TODO: test method
    }

    /**
     * Test the property 'payloadStructure'
     */
    @Test
    public void payloadStructureTest() {
        // TODO: test payloadStructure
    }

    /**
     * Test the property 'rateLimit'
     */
    @Test
    public void rateLimitTest() {
        // TODO: test rateLimit
    }

    /**
     * Test the property 'tlsSkipVerify'
     */
    @Test
    public void tlsSkipVerifyTest() {
        // TODO: test tlsSkipVerify
    }

    /**
     * Test the property 'wrapperKey'
     */
    @Test
    public void wrapperKeyTest() {
        // TODO: test wrapperKey
    }

    /**
     * Test the property 'authMode'
     */
    @Test
    public void authModeTest() {
        // TODO: test authMode
    }

    /**
     * Test the property 'region'
     */
    @Test
    public void regionTest() {
        // TODO: test region
    }

    /**
     * Test the property 'roleArn'
     */
    @Test
    public void roleArnTest() {
        // TODO: test roleArn
    }

    /**
     * Test the property 'columnNames'
     */
    @Test
    public void columnNamesTest() {
        // TODO: test columnNames
    }

    /**
     * Test the property 'database'
     */
    @Test
    public void databaseTest() {
        // TODO: test database
    }

    /**
     * Test the property 'host'
     */
    @Test
    public void hostTest() {
        // TODO: test host
    }

    /**
     * Test the property 'user'
     */
    @Test
    public void userTest() {
        // TODO: test user
    }

    /**
     * Test the property 'batchConfig'
     */
    @Test
    public void batchConfigTest() {
        // TODO: test batchConfig
    }

    /**
     * Test the property 'bucket'
     */
    @Test
    public void bucketTest() {
        // TODO: test bucket
    }

    /**
     * Test the property 'compression'
     */
    @Test
    public void compressionTest() {
        // TODO: test compression
    }

    /**
     * Test the property 'formatConfig'
     */
    @Test
    public void formatConfigTest() {
        // TODO: test formatConfig
    }

    /**
     * Test the property 'partitionFormat'
     */
    @Test
    public void partitionFormatTest() {
        // TODO: test partitionFormat
    }

    /**
     * Test the property 'prefix'
     */
    @Test
    public void prefixTest() {
        // TODO: test prefix
    }

    /**
     * Test the property 'bucketName'
     */
    @Test
    public void bucketNameTest() {
        // TODO: test bucketName
    }

    /**
     * Test the property 'bucketUrl'
     */
    @Test
    public void bucketUrlTest() {
        // TODO: test bucketUrl
    }

    /**
     * Test the property 'key'
     */
    @Test
    public void keyTest() {
        // TODO: test key
    }

    /**
     * Test the property 'parquetFormat'
     */
    @Test
    public void parquetFormatTest() {
        // TODO: test parquetFormat
    }

    /**
     * Test the property 'sourceAccountDetails'
     */
    @Test
    public void sourceAccountDetailsTest() {
        // TODO: test sourceAccountDetails
    }

    /**
     * Test the property 'ruleId'
     */
    @Test
    public void ruleIdTest() {
        // TODO: test ruleId
    }

    /**
     * Test the property 'streamName'
     */
    @Test
    public void streamNameTest() {
        // TODO: test streamName
    }

    /**
     * Test the property 'account'
     */
    @Test
    public void accountTest() {
        // TODO: test account
    }

    /**
     * Test the property 'role'
     */
    @Test
    public void roleTest() {
        // TODO: test role
    }

    /**
     * Test the property 'schema'
     */
    @Test
    public void schemaTest() {
        // TODO: test schema
    }

    /**
     * Test the property 'stage'
     */
    @Test
    public void stageTest() {
        // TODO: test stage
    }

    /**
     * Test the property 'warehouse'
     */
    @Test
    public void warehouseTest() {
        // TODO: test warehouse
    }

    /**
     * Test the property 'allowInsecure'
     */
    @Test
    public void allowInsecureTest() {
        // TODO: test allowInsecure
    }

    /**
     * Test the property 'toCreate'
     */
    @Test
    public void toCreateTest() {
        // TODO: test toCreate
    }

}
