# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OutputsConnectorMeta(BaseModel):
    """
    OutputsConnectorMeta
    """ # noqa: E501
    auth_type: Optional[StrictStr] = None
    billing_type: Optional[StrictInt] = None
    category: Optional[StrictStr] = None
    config: Optional[Any] = None
    description: Optional[StrictStr] = None
    house: Optional[StrictStr] = None
    internal: Optional[StrictBool] = None
    logo_key: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    tier: Optional[StrictInt] = None
    type_id: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["auth_type", "billing_type", "category", "config", "description", "house", "internal", "logo_key", "name", "tier", "type_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OutputsConnectorMeta from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if config (nullable) is None
        # and model_fields_set contains the field
        if self.config is None and "config" in self.model_fields_set:
            _dict['config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OutputsConnectorMeta from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth_type": obj.get("auth_type"),
            "billing_type": obj.get("billing_type"),
            "category": obj.get("category"),
            "config": obj.get("config"),
            "description": obj.get("description"),
            "house": obj.get("house"),
            "internal": obj.get("internal"),
            "logo_key": obj.get("logo_key"),
            "name": obj.get("name"),
            "tier": obj.get("tier"),
            "type_id": obj.get("type_id")
        })
        return _obj


