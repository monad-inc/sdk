# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from monad.models.models_secret import ModelsSecret
from typing import Optional, Set
from typing_extensions import Self

class UsersSecretsConfig(BaseModel):
    """
    Google Workspace Users secrets
    """ # noqa: E501
    credentials_json: Optional[ModelsSecret] = None
    customer_id: Optional[ModelsSecret] = None
    domain: Optional[ModelsSecret] = None
    oauth_token: Optional[ModelsSecret] = None
    __properties: ClassVar[List[str]] = ["credentials_json", "customer_id", "domain", "oauth_token"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UsersSecretsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of credentials_json
        if self.credentials_json:
            _dict['credentials_json'] = self.credentials_json.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer_id
        if self.customer_id:
            _dict['customer_id'] = self.customer_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of oauth_token
        if self.oauth_token:
            _dict['oauth_token'] = self.oauth_token.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UsersSecretsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "credentials_json": ModelsSecret.from_dict(obj["credentials_json"]) if obj.get("credentials_json") is not None else None,
            "customer_id": ModelsSecret.from_dict(obj["customer_id"]) if obj.get("customer_id") is not None else None,
            "domain": ModelsSecret.from_dict(obj["domain"]) if obj.get("domain") is not None else None,
            "oauth_token": ModelsSecret.from_dict(obj["oauth_token"]) if obj.get("oauth_token") is not None else None
        })
        return _obj


