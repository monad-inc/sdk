# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AuthenticationtypesAuthenticationMethod(BaseModel):
    """
    AuthenticationtypesAuthenticationMethod
    """ # noqa: E501
    confirmed: Optional[StrictBool] = None
    created_at: Optional[StrictStr] = None
    credential_backed_up: Optional[StrictBool] = None
    credential_device_type: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    key_id: Optional[StrictStr] = None
    link_id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    phone_number: Optional[StrictStr] = None
    public_key: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    user_agent: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["confirmed", "created_at", "credential_backed_up", "credential_device_type", "email", "id", "key_id", "link_id", "name", "phone_number", "public_key", "type", "user_agent"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthenticationtypesAuthenticationMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthenticationtypesAuthenticationMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "confirmed": obj.get("confirmed"),
            "created_at": obj.get("created_at"),
            "credential_backed_up": obj.get("credential_backed_up"),
            "credential_device_type": obj.get("credential_device_type"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "key_id": obj.get("key_id"),
            "link_id": obj.get("link_id"),
            "name": obj.get("name"),
            "phone_number": obj.get("phone_number"),
            "public_key": obj.get("public_key"),
            "type": obj.get("type"),
            "user_agent": obj.get("user_agent")
        })
        return _obj


