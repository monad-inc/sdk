# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from monad.models.models_pipeline_metrics_value import ModelsPipelineMetricsValue
from typing import Optional, Set
from typing_extensions import Self

class ModelsPipelineMetrics(BaseModel):
    """
    ModelsPipelineMetrics
    """ # noqa: E501
    end_at: Optional[StrictStr] = None
    metric: Optional[StrictStr] = None
    node_id: Optional[StrictStr] = None
    node_slug: Optional[StrictStr] = None
    organization_id: Optional[StrictStr] = None
    organization_name: Optional[StrictStr] = None
    pipeline_id: Optional[StrictStr] = None
    pipeline_name: Optional[StrictStr] = None
    resolution: Optional[StrictStr] = None
    start_at: Optional[StrictStr] = None
    values: Optional[List[ModelsPipelineMetricsValue]] = None
    __properties: ClassVar[List[str]] = ["end_at", "metric", "node_id", "node_slug", "organization_id", "organization_name", "pipeline_id", "pipeline_name", "resolution", "start_at", "values"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsPipelineMetrics from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in values (list)
        _items = []
        if self.values:
            for _item_values in self.values:
                if _item_values:
                    _items.append(_item_values.to_dict())
            _dict['values'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsPipelineMetrics from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "end_at": obj.get("end_at"),
            "metric": obj.get("metric"),
            "node_id": obj.get("node_id"),
            "node_slug": obj.get("node_slug"),
            "organization_id": obj.get("organization_id"),
            "organization_name": obj.get("organization_name"),
            "pipeline_id": obj.get("pipeline_id"),
            "pipeline_name": obj.get("pipeline_name"),
            "resolution": obj.get("resolution"),
            "start_at": obj.get("start_at"),
            "values": [ModelsPipelineMetricsValue.from_dict(_item) for _item in obj["values"]] if obj.get("values") is not None else None
        })
        return _obj


