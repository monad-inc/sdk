# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from monad.models.delimited_delimiter_formatter import DelimitedDelimiterFormatter
from monad.models.json_json_formatter import JsonJsonFormatter
from monad.models.parquet_parquet_formatter import ParquetParquetFormatter
from typing import Optional, Set
from typing_extensions import Self

class FormatterFormatConfig(BaseModel):
    """
    The format config to use
    """ # noqa: E501
    format: Optional[StrictStr] = Field(default=None, alias="Format")
    delimited_format: Optional[DelimitedDelimiterFormatter] = None
    json_format: Optional[JsonJsonFormatter] = None
    parquet_format: Optional[ParquetParquetFormatter] = None
    __properties: ClassVar[List[str]] = ["Format", "delimited_format", "json_format", "parquet_format"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of FormatterFormatConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of delimited_format
        if self.delimited_format:
            _dict['delimited_format'] = self.delimited_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of json_format
        if self.json_format:
            _dict['json_format'] = self.json_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parquet_format
        if self.parquet_format:
            _dict['parquet_format'] = self.parquet_format.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of FormatterFormatConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "Format": obj.get("Format"),
            "delimited_format": DelimitedDelimiterFormatter.from_dict(obj["delimited_format"]) if obj.get("delimited_format") is not None else None,
            "json_format": JsonJsonFormatter.from_dict(obj["json_format"]) if obj.get("json_format") is not None else None,
            "parquet_format": ParquetParquetFormatter.from_dict(obj["parquet_format"]) if obj.get("parquet_format") is not None else None
        })
        return _obj


