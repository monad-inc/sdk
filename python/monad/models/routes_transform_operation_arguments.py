# coding: utf-8

"""
    Monad Swagger API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, Dict, List, Optional
from monad.models.add_add import AddAdd
from monad.models.create_key_value_if_key_value_create_key_value_if_key_value import CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
from monad.models.drop_key_drop_key import DropKeyDropKey
from monad.models.drop_key_where_value_eq_drop_key_where_value_eq import DropKeyWhereValueEqDropKeyWhereValueEq
from monad.models.drop_record_where_value_eq_drop_record_where_value_eq import DropRecordWhereValueEqDropRecordWhereValueEq
from monad.models.duplicate_key_value_to_key_duplicate_key_value_to_key import DuplicateKeyValueToKeyDuplicateKeyValueToKey
from monad.models.flatten_flatten import FlattenFlatten
from monad.models.jq_jq import JqJQ
from monad.models.math_multiply_with_value_math_multiply_with_value import MathMultiplyWithValueMathMultiplyWithValue
from monad.models.mutate_type_mutate_type import MutateTypeMutateType
from monad.models.mutate_value_where_key_eq_and_value_eq_mutate_value_where_key_eq_and_value_eq import MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
from monad.models.mutate_value_where_key_eq_mutate_value_where_key_eq import MutateValueWhereKeyEqMutateValueWhereKeyEq
from monad.models.rename_key_rename_key import RenameKeyRenameKey
from monad.models.rename_key_where_value_eq_rename_key_where_value_eq import RenameKeyWhereValueEqRenameKeyWhereValueEq
from monad.models.utc_timestamp_timestamp import UtcTimestampTimestamp
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ROUTESTRANSFORMOPERATIONARGUMENTS_ONE_OF_SCHEMAS = ["AddAdd", "CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue", "Dict[str, object]", "DropKeyDropKey", "DropKeyWhereValueEqDropKeyWhereValueEq", "DropRecordWhereValueEqDropRecordWhereValueEq", "DuplicateKeyValueToKeyDuplicateKeyValueToKey", "FlattenFlatten", "JqJQ", "MathMultiplyWithValueMathMultiplyWithValue", "MutateTypeMutateType", "MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq", "MutateValueWhereKeyEqMutateValueWhereKeyEq", "RenameKeyRenameKey", "RenameKeyWhereValueEqRenameKeyWhereValueEq", "UtcTimestampTimestamp"]

class RoutesTransformOperationArguments(BaseModel):
    """
    RoutesTransformOperationArguments
    """
    # data type: AddAdd
    oneof_schema_1_validator: Optional[AddAdd] = None
    # data type: CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
    oneof_schema_2_validator: Optional[CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue] = None
    # data type: DropKeyDropKey
    oneof_schema_3_validator: Optional[DropKeyDropKey] = None
    # data type: DropKeyWhereValueEqDropKeyWhereValueEq
    oneof_schema_4_validator: Optional[DropKeyWhereValueEqDropKeyWhereValueEq] = None
    # data type: DropRecordWhereValueEqDropRecordWhereValueEq
    oneof_schema_5_validator: Optional[DropRecordWhereValueEqDropRecordWhereValueEq] = None
    # data type: DuplicateKeyValueToKeyDuplicateKeyValueToKey
    oneof_schema_6_validator: Optional[DuplicateKeyValueToKeyDuplicateKeyValueToKey] = None
    # data type: FlattenFlatten
    oneof_schema_7_validator: Optional[FlattenFlatten] = None
    # data type: JqJQ
    oneof_schema_8_validator: Optional[JqJQ] = None
    # data type: MathMultiplyWithValueMathMultiplyWithValue
    oneof_schema_9_validator: Optional[MathMultiplyWithValueMathMultiplyWithValue] = None
    # data type: Dict[str, object]
    oneof_schema_10_validator: Optional[Dict[str, Any]] = None
    # data type: MutateTypeMutateType
    oneof_schema_11_validator: Optional[MutateTypeMutateType] = None
    # data type: MutateValueWhereKeyEqMutateValueWhereKeyEq
    oneof_schema_12_validator: Optional[MutateValueWhereKeyEqMutateValueWhereKeyEq] = None
    # data type: MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
    oneof_schema_13_validator: Optional[MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq] = None
    # data type: RenameKeyRenameKey
    oneof_schema_14_validator: Optional[RenameKeyRenameKey] = None
    # data type: RenameKeyWhereValueEqRenameKeyWhereValueEq
    oneof_schema_15_validator: Optional[RenameKeyWhereValueEqRenameKeyWhereValueEq] = None
    # data type: UtcTimestampTimestamp
    oneof_schema_16_validator: Optional[UtcTimestampTimestamp] = None
    actual_instance: Optional[Union[AddAdd, CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue, Dict[str, object], DropKeyDropKey, DropKeyWhereValueEqDropKeyWhereValueEq, DropRecordWhereValueEqDropRecordWhereValueEq, DuplicateKeyValueToKeyDuplicateKeyValueToKey, FlattenFlatten, JqJQ, MathMultiplyWithValueMathMultiplyWithValue, MutateTypeMutateType, MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq, MutateValueWhereKeyEqMutateValueWhereKeyEq, RenameKeyRenameKey, RenameKeyWhereValueEqRenameKeyWhereValueEq, UtcTimestampTimestamp]] = None
    one_of_schemas: Set[str] = { "AddAdd", "CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue", "Dict[str, object]", "DropKeyDropKey", "DropKeyWhereValueEqDropKeyWhereValueEq", "DropRecordWhereValueEqDropRecordWhereValueEq", "DuplicateKeyValueToKeyDuplicateKeyValueToKey", "FlattenFlatten", "JqJQ", "MathMultiplyWithValueMathMultiplyWithValue", "MutateTypeMutateType", "MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq", "MutateValueWhereKeyEqMutateValueWhereKeyEq", "RenameKeyRenameKey", "RenameKeyWhereValueEqRenameKeyWhereValueEq", "UtcTimestampTimestamp" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RoutesTransformOperationArguments.model_construct()
        error_messages = []
        match = 0
        # validate data type: AddAdd
        if not isinstance(v, AddAdd):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AddAdd`")
        else:
            match += 1
        # validate data type: CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
        if not isinstance(v, CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue`")
        else:
            match += 1
        # validate data type: DropKeyDropKey
        if not isinstance(v, DropKeyDropKey):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropKeyDropKey`")
        else:
            match += 1
        # validate data type: DropKeyWhereValueEqDropKeyWhereValueEq
        if not isinstance(v, DropKeyWhereValueEqDropKeyWhereValueEq):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropKeyWhereValueEqDropKeyWhereValueEq`")
        else:
            match += 1
        # validate data type: DropRecordWhereValueEqDropRecordWhereValueEq
        if not isinstance(v, DropRecordWhereValueEqDropRecordWhereValueEq):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DropRecordWhereValueEqDropRecordWhereValueEq`")
        else:
            match += 1
        # validate data type: DuplicateKeyValueToKeyDuplicateKeyValueToKey
        if not isinstance(v, DuplicateKeyValueToKeyDuplicateKeyValueToKey):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DuplicateKeyValueToKeyDuplicateKeyValueToKey`")
        else:
            match += 1
        # validate data type: FlattenFlatten
        if not isinstance(v, FlattenFlatten):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FlattenFlatten`")
        else:
            match += 1
        # validate data type: JqJQ
        if not isinstance(v, JqJQ):
            error_messages.append(f"Error! Input type `{type(v)}` is not `JqJQ`")
        else:
            match += 1
        # validate data type: MathMultiplyWithValueMathMultiplyWithValue
        if not isinstance(v, MathMultiplyWithValueMathMultiplyWithValue):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MathMultiplyWithValueMathMultiplyWithValue`")
        else:
            match += 1
        # validate data type: Dict[str, object]
        try:
            instance.oneof_schema_10_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: MutateTypeMutateType
        if not isinstance(v, MutateTypeMutateType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MutateTypeMutateType`")
        else:
            match += 1
        # validate data type: MutateValueWhereKeyEqMutateValueWhereKeyEq
        if not isinstance(v, MutateValueWhereKeyEqMutateValueWhereKeyEq):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MutateValueWhereKeyEqMutateValueWhereKeyEq`")
        else:
            match += 1
        # validate data type: MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
        if not isinstance(v, MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq`")
        else:
            match += 1
        # validate data type: RenameKeyRenameKey
        if not isinstance(v, RenameKeyRenameKey):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RenameKeyRenameKey`")
        else:
            match += 1
        # validate data type: RenameKeyWhereValueEqRenameKeyWhereValueEq
        if not isinstance(v, RenameKeyWhereValueEqRenameKeyWhereValueEq):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RenameKeyWhereValueEqRenameKeyWhereValueEq`")
        else:
            match += 1
        # validate data type: UtcTimestampTimestamp
        if not isinstance(v, UtcTimestampTimestamp):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UtcTimestampTimestamp`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RoutesTransformOperationArguments with oneOf schemas: AddAdd, CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue, Dict[str, object], DropKeyDropKey, DropKeyWhereValueEqDropKeyWhereValueEq, DropRecordWhereValueEqDropRecordWhereValueEq, DuplicateKeyValueToKeyDuplicateKeyValueToKey, FlattenFlatten, JqJQ, MathMultiplyWithValueMathMultiplyWithValue, MutateTypeMutateType, MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq, MutateValueWhereKeyEqMutateValueWhereKeyEq, RenameKeyRenameKey, RenameKeyWhereValueEqRenameKeyWhereValueEq, UtcTimestampTimestamp. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RoutesTransformOperationArguments with oneOf schemas: AddAdd, CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue, Dict[str, object], DropKeyDropKey, DropKeyWhereValueEqDropKeyWhereValueEq, DropRecordWhereValueEqDropRecordWhereValueEq, DuplicateKeyValueToKeyDuplicateKeyValueToKey, FlattenFlatten, JqJQ, MathMultiplyWithValueMathMultiplyWithValue, MutateTypeMutateType, MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq, MutateValueWhereKeyEqMutateValueWhereKeyEq, RenameKeyRenameKey, RenameKeyWhereValueEqRenameKeyWhereValueEq, UtcTimestampTimestamp. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into AddAdd
        try:
            instance.actual_instance = AddAdd.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
        try:
            instance.actual_instance = CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropKeyDropKey
        try:
            instance.actual_instance = DropKeyDropKey.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropKeyWhereValueEqDropKeyWhereValueEq
        try:
            instance.actual_instance = DropKeyWhereValueEqDropKeyWhereValueEq.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DropRecordWhereValueEqDropRecordWhereValueEq
        try:
            instance.actual_instance = DropRecordWhereValueEqDropRecordWhereValueEq.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DuplicateKeyValueToKeyDuplicateKeyValueToKey
        try:
            instance.actual_instance = DuplicateKeyValueToKeyDuplicateKeyValueToKey.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FlattenFlatten
        try:
            instance.actual_instance = FlattenFlatten.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into JqJQ
        try:
            instance.actual_instance = JqJQ.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MathMultiplyWithValueMathMultiplyWithValue
        try:
            instance.actual_instance = MathMultiplyWithValueMathMultiplyWithValue.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dict[str, object]
        try:
            # validation
            instance.oneof_schema_10_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_10_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MutateTypeMutateType
        try:
            instance.actual_instance = MutateTypeMutateType.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MutateValueWhereKeyEqMutateValueWhereKeyEq
        try:
            instance.actual_instance = MutateValueWhereKeyEqMutateValueWhereKeyEq.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
        try:
            instance.actual_instance = MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RenameKeyRenameKey
        try:
            instance.actual_instance = RenameKeyRenameKey.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RenameKeyWhereValueEqRenameKeyWhereValueEq
        try:
            instance.actual_instance = RenameKeyWhereValueEqRenameKeyWhereValueEq.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UtcTimestampTimestamp
        try:
            instance.actual_instance = UtcTimestampTimestamp.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RoutesTransformOperationArguments with oneOf schemas: AddAdd, CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue, Dict[str, object], DropKeyDropKey, DropKeyWhereValueEqDropKeyWhereValueEq, DropRecordWhereValueEqDropRecordWhereValueEq, DuplicateKeyValueToKeyDuplicateKeyValueToKey, FlattenFlatten, JqJQ, MathMultiplyWithValueMathMultiplyWithValue, MutateTypeMutateType, MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq, MutateValueWhereKeyEqMutateValueWhereKeyEq, RenameKeyRenameKey, RenameKeyWhereValueEqRenameKeyWhereValueEq, UtcTimestampTimestamp. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RoutesTransformOperationArguments with oneOf schemas: AddAdd, CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue, Dict[str, object], DropKeyDropKey, DropKeyWhereValueEqDropKeyWhereValueEq, DropRecordWhereValueEqDropRecordWhereValueEq, DuplicateKeyValueToKeyDuplicateKeyValueToKey, FlattenFlatten, JqJQ, MathMultiplyWithValueMathMultiplyWithValue, MutateTypeMutateType, MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq, MutateValueWhereKeyEqMutateValueWhereKeyEq, RenameKeyRenameKey, RenameKeyWhereValueEqRenameKeyWhereValueEq, UtcTimestampTimestamp. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AddAdd, CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue, Dict[str, object], DropKeyDropKey, DropKeyWhereValueEqDropKeyWhereValueEq, DropRecordWhereValueEqDropRecordWhereValueEq, DuplicateKeyValueToKeyDuplicateKeyValueToKey, FlattenFlatten, JqJQ, MathMultiplyWithValueMathMultiplyWithValue, MutateTypeMutateType, MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq, MutateValueWhereKeyEqMutateValueWhereKeyEq, RenameKeyRenameKey, RenameKeyWhereValueEqRenameKeyWhereValueEq, UtcTimestampTimestamp]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


