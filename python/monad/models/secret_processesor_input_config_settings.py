# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, Dict, List, Optional
from monad.models.activity_logs_settings_config import ActivityLogsSettingsConfig
from monad.models.actors_info_settings_config import ActorsInfoSettingsConfig
from monad.models.admin_activity_settings_config import AdminActivitySettingsConfig
from monad.models.admin_logs_settings_config import AdminLogsSettingsConfig
from monad.models.audit_logs_settings_config import AuditLogsSettingsConfig
from monad.models.auth_logs_settings_config import AuthLogsSettingsConfig
from monad.models.aws_s3_settings_config import AwsS3SettingsConfig
from monad.models.awssqs_settings_config import AwssqsSettingsConfig
from monad.models.azure_activity_logs_settings_config import AzureActivityLogsSettingsConfig
from monad.models.bigquery_input_settings_config import BigqueryInputSettingsConfig
from monad.models.box_events_settings_config import BoxEventsSettingsConfig
from monad.models.box_users_settings_config import BoxUsersSettingsConfig
from monad.models.cloud_asset_inventory_settings_config import CloudAssetInventorySettingsConfig
from monad.models.cloud_configuration_findings_settings_config import CloudConfigurationFindingsSettingsConfig
from monad.models.cloud_logs_settings_config import CloudLogsSettingsConfig
from monad.models.cloud_resource_inventory_settings_config import CloudResourceInventorySettingsConfig
from monad.models.cloudtrail_settings_config import CloudtrailSettingsConfig
from monad.models.crowdstrike_fdr_settings_config import CrowdstrikeFdrSettingsConfig
from monad.models.defender_for_endpoint_alerts_settings_config import DefenderForEndpointAlertsSettingsConfig
from monad.models.demo_custom_settings_config import DemoCustomSettingsConfig
from monad.models.demo_settings_config import DemoSettingsConfig
from monad.models.detect_summaries_settings_config import DetectSummariesSettingsConfig
from monad.models.device_activity_settings_config import DeviceActivitySettingsConfig
from monad.models.device_details_settings_config import DeviceDetailsSettingsConfig
from monad.models.devices_settings_config import DevicesSettingsConfig
from monad.models.drive_activity_settings_config import DriveActivitySettingsConfig
from monad.models.entra_id_settings_config import EntraIdSettingsConfig
from monad.models.event_settings_config import EventSettingsConfig
from monad.models.events_logs_settings_config import EventsLogsSettingsConfig
from monad.models.full_scans_settings_config import FullScansSettingsConfig
from monad.models.google_cloud_storage_settings_config import GoogleCloudStorageSettingsConfig
from monad.models.issues_settings_config import IssuesSettingsConfig
from monad.models.log_analytics_query_settings_config import LogAnalyticsQuerySettingsConfig
from monad.models.login_activity_settings_config import LoginActivitySettingsConfig
from monad.models.login_sessions_settings_config import LoginSessionsSettingsConfig
from monad.models.monad_log_settings_config import MonadLogSettingsConfig
from monad.models.oauth_activity_settings_config import OauthActivitySettingsConfig
from monad.models.object_storage_input_settings_config import ObjectStorageInputSettingsConfig
from monad.models.onelogin_events_settings_config import OneloginEventsSettingsConfig
from monad.models.roles_info_settings_config import RolesInfoSettingsConfig
from monad.models.semgrep_deployments_settings_config import SemgrepDeploymentsSettingsConfig
from monad.models.semgrep_project_details_settings_config import SemgrepProjectDetailsSettingsConfig
from monad.models.semgrep_projects_settings_config import SemgrepProjectsSettingsConfig
from monad.models.slack_users_settings_config import SlackUsersSettingsConfig
from monad.models.slackgroups_settings_config import SlackgroupsSettingsConfig
from monad.models.snowflake_input_settings_config import SnowflakeInputSettingsConfig
from monad.models.snyk_organizations_settings_config import SnykOrganizationsSettingsConfig
from monad.models.snyk_projects_settings_config import SnykProjectsSettingsConfig
from monad.models.tailscale_users_settings_config import TailscaleUsersSettingsConfig
from monad.models.tenable_assets_cron_settings_config import TenableAssetsCronSettingsConfig
from monad.models.tenable_vulnerabilities_cron_settings_config import TenableVulnerabilitiesCronSettingsConfig
from monad.models.users_info_settings_config import UsersInfoSettingsConfig
from monad.models.users_settings_config import UsersSettingsConfig
from monad.models.vulnerabilities_cron_settings_config import VulnerabilitiesCronSettingsConfig
from monad.models.vulnerabilities_settings_config import VulnerabilitiesSettingsConfig
from monad.models.vulnerability_findings_settings_config import VulnerabilityFindingsSettingsConfig
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SECRETPROCESSESORINPUTCONFIGSETTINGS_ONE_OF_SCHEMAS = ["ActivityLogsSettingsConfig", "ActorsInfoSettingsConfig", "AdminActivitySettingsConfig", "AdminLogsSettingsConfig", "AuditLogsSettingsConfig", "AuthLogsSettingsConfig", "AwsS3SettingsConfig", "AwssqsSettingsConfig", "AzureActivityLogsSettingsConfig", "BigqueryInputSettingsConfig", "BoxEventsSettingsConfig", "BoxUsersSettingsConfig", "CloudAssetInventorySettingsConfig", "CloudConfigurationFindingsSettingsConfig", "CloudLogsSettingsConfig", "CloudResourceInventorySettingsConfig", "CloudtrailSettingsConfig", "CrowdstrikeFdrSettingsConfig", "DefenderForEndpointAlertsSettingsConfig", "DemoCustomSettingsConfig", "DemoSettingsConfig", "DetectSummariesSettingsConfig", "DeviceActivitySettingsConfig", "DeviceDetailsSettingsConfig", "DevicesSettingsConfig", "Dict[str, object]", "DriveActivitySettingsConfig", "EntraIdSettingsConfig", "EventSettingsConfig", "EventsLogsSettingsConfig", "FullScansSettingsConfig", "GoogleCloudStorageSettingsConfig", "IssuesSettingsConfig", "LogAnalyticsQuerySettingsConfig", "LoginActivitySettingsConfig", "LoginSessionsSettingsConfig", "MonadLogSettingsConfig", "OauthActivitySettingsConfig", "ObjectStorageInputSettingsConfig", "OneloginEventsSettingsConfig", "RolesInfoSettingsConfig", "SemgrepDeploymentsSettingsConfig", "SemgrepProjectDetailsSettingsConfig", "SemgrepProjectsSettingsConfig", "SlackUsersSettingsConfig", "SlackgroupsSettingsConfig", "SnowflakeInputSettingsConfig", "SnykOrganizationsSettingsConfig", "SnykProjectsSettingsConfig", "TailscaleUsersSettingsConfig", "TenableAssetsCronSettingsConfig", "TenableVulnerabilitiesCronSettingsConfig", "UsersInfoSettingsConfig", "UsersSettingsConfig", "VulnerabilitiesCronSettingsConfig", "VulnerabilitiesSettingsConfig", "VulnerabilityFindingsSettingsConfig", "object"]

class SecretProcessesorInputConfigSettings(BaseModel):
    """
    SecretProcessesorInputConfigSettings
    """
    # data type: ActivityLogsSettingsConfig
    oneof_schema_1_validator: Optional[ActivityLogsSettingsConfig] = None
    # data type: ActorsInfoSettingsConfig
    oneof_schema_2_validator: Optional[ActorsInfoSettingsConfig] = None
    # data type: AdminActivitySettingsConfig
    oneof_schema_3_validator: Optional[AdminActivitySettingsConfig] = None
    # data type: AdminLogsSettingsConfig
    oneof_schema_4_validator: Optional[AdminLogsSettingsConfig] = None
    # data type: AuditLogsSettingsConfig
    oneof_schema_5_validator: Optional[AuditLogsSettingsConfig] = None
    # data type: AuthLogsSettingsConfig
    oneof_schema_6_validator: Optional[AuthLogsSettingsConfig] = None
    # data type: AwsS3SettingsConfig
    oneof_schema_7_validator: Optional[AwsS3SettingsConfig] = None
    # data type: AwssqsSettingsConfig
    oneof_schema_8_validator: Optional[AwssqsSettingsConfig] = None
    # data type: AzureActivityLogsSettingsConfig
    oneof_schema_9_validator: Optional[AzureActivityLogsSettingsConfig] = None
    # data type: BigqueryInputSettingsConfig
    oneof_schema_10_validator: Optional[BigqueryInputSettingsConfig] = None
    # data type: BoxEventsSettingsConfig
    oneof_schema_11_validator: Optional[BoxEventsSettingsConfig] = None
    # data type: BoxUsersSettingsConfig
    oneof_schema_12_validator: Optional[BoxUsersSettingsConfig] = None
    # data type: object
    oneof_schema_13_validator: Optional[Dict[str, Any]] = Field(default=None, description="CISA KEV settings")
    # data type: CloudAssetInventorySettingsConfig
    oneof_schema_14_validator: Optional[CloudAssetInventorySettingsConfig] = None
    # data type: CloudConfigurationFindingsSettingsConfig
    oneof_schema_15_validator: Optional[CloudConfigurationFindingsSettingsConfig] = None
    # data type: CloudLogsSettingsConfig
    oneof_schema_16_validator: Optional[CloudLogsSettingsConfig] = None
    # data type: CloudResourceInventorySettingsConfig
    oneof_schema_17_validator: Optional[CloudResourceInventorySettingsConfig] = None
    # data type: CloudtrailSettingsConfig
    oneof_schema_18_validator: Optional[CloudtrailSettingsConfig] = None
    # data type: CrowdstrikeFdrSettingsConfig
    oneof_schema_19_validator: Optional[CrowdstrikeFdrSettingsConfig] = None
    # data type: DefenderForEndpointAlertsSettingsConfig
    oneof_schema_20_validator: Optional[DefenderForEndpointAlertsSettingsConfig] = None
    # data type: DemoSettingsConfig
    oneof_schema_21_validator: Optional[DemoSettingsConfig] = None
    # data type: DemoCustomSettingsConfig
    oneof_schema_22_validator: Optional[DemoCustomSettingsConfig] = None
    # data type: DetectSummariesSettingsConfig
    oneof_schema_23_validator: Optional[DetectSummariesSettingsConfig] = None
    # data type: DeviceActivitySettingsConfig
    oneof_schema_24_validator: Optional[DeviceActivitySettingsConfig] = None
    # data type: DeviceDetailsSettingsConfig
    oneof_schema_25_validator: Optional[DeviceDetailsSettingsConfig] = None
    # data type: DevicesSettingsConfig
    oneof_schema_26_validator: Optional[DevicesSettingsConfig] = None
    # data type: DriveActivitySettingsConfig
    oneof_schema_27_validator: Optional[DriveActivitySettingsConfig] = None
    # data type: EntraIdSettingsConfig
    oneof_schema_28_validator: Optional[EntraIdSettingsConfig] = None
    # data type: EventSettingsConfig
    oneof_schema_29_validator: Optional[EventSettingsConfig] = None
    # data type: EventsLogsSettingsConfig
    oneof_schema_30_validator: Optional[EventsLogsSettingsConfig] = None
    # data type: FullScansSettingsConfig
    oneof_schema_31_validator: Optional[FullScansSettingsConfig] = None
    # data type: object
    oneof_schema_32_validator: Optional[Dict[str, Any]] = Field(default=None, description="Github Advisory Database settings")
    # data type: GoogleCloudStorageSettingsConfig
    oneof_schema_33_validator: Optional[GoogleCloudStorageSettingsConfig] = None
    # data type: IssuesSettingsConfig
    oneof_schema_34_validator: Optional[IssuesSettingsConfig] = None
    # data type: LogAnalyticsQuerySettingsConfig
    oneof_schema_35_validator: Optional[LogAnalyticsQuerySettingsConfig] = None
    # data type: LoginActivitySettingsConfig
    oneof_schema_36_validator: Optional[LoginActivitySettingsConfig] = None
    # data type: LoginSessionsSettingsConfig
    oneof_schema_37_validator: Optional[LoginSessionsSettingsConfig] = None
    # data type: Dict[str, object]
    oneof_schema_38_validator: Optional[Dict[str, Any]] = None
    # data type: object
    oneof_schema_39_validator: Optional[Dict[str, Any]] = Field(default=None, description="Monad HTTP settings")
    # data type: MonadLogSettingsConfig
    oneof_schema_40_validator: Optional[MonadLogSettingsConfig] = None
    # data type: OauthActivitySettingsConfig
    oneof_schema_41_validator: Optional[OauthActivitySettingsConfig] = None
    # data type: ObjectStorageInputSettingsConfig
    oneof_schema_42_validator: Optional[ObjectStorageInputSettingsConfig] = None
    # data type: OneloginEventsSettingsConfig
    oneof_schema_43_validator: Optional[OneloginEventsSettingsConfig] = None
    # data type: RolesInfoSettingsConfig
    oneof_schema_44_validator: Optional[RolesInfoSettingsConfig] = None
    # data type: object
    oneof_schema_45_validator: Optional[Dict[str, Any]] = Field(default=None, description="Semgrep code findings settings")
    # data type: SemgrepDeploymentsSettingsConfig
    oneof_schema_46_validator: Optional[SemgrepDeploymentsSettingsConfig] = None
    # data type: SemgrepProjectDetailsSettingsConfig
    oneof_schema_47_validator: Optional[SemgrepProjectDetailsSettingsConfig] = None
    # data type: SemgrepProjectsSettingsConfig
    oneof_schema_48_validator: Optional[SemgrepProjectsSettingsConfig] = None
    # data type: object
    oneof_schema_49_validator: Optional[Dict[str, Any]] = Field(default=None, description="Semgrep supply chain findings settings")
    # data type: SlackUsersSettingsConfig
    oneof_schema_50_validator: Optional[SlackUsersSettingsConfig] = None
    # data type: SlackgroupsSettingsConfig
    oneof_schema_51_validator: Optional[SlackgroupsSettingsConfig] = None
    # data type: SnowflakeInputSettingsConfig
    oneof_schema_52_validator: Optional[SnowflakeInputSettingsConfig] = None
    # data type: object
    oneof_schema_53_validator: Optional[Dict[str, Any]] = Field(default=None, description="Snyk issues settings")
    # data type: SnykOrganizationsSettingsConfig
    oneof_schema_54_validator: Optional[SnykOrganizationsSettingsConfig] = None
    # data type: SnykProjectsSettingsConfig
    oneof_schema_55_validator: Optional[SnykProjectsSettingsConfig] = None
    # data type: object
    oneof_schema_56_validator: Optional[Dict[str, Any]] = Field(default=None, description="Snyk targets settings")
    # data type: TailscaleUsersSettingsConfig
    oneof_schema_57_validator: Optional[TailscaleUsersSettingsConfig] = None
    # data type: object
    oneof_schema_58_validator: Optional[Dict[str, Any]] = Field(default=None, description="Tenable assets settings")
    # data type: TenableAssetsCronSettingsConfig
    oneof_schema_59_validator: Optional[TenableAssetsCronSettingsConfig] = None
    # data type: object
    oneof_schema_60_validator: Optional[Dict[str, Any]] = Field(default=None, description="Tenable assets settings")
    # data type: TenableVulnerabilitiesCronSettingsConfig
    oneof_schema_61_validator: Optional[TenableVulnerabilitiesCronSettingsConfig] = None
    # data type: UsersSettingsConfig
    oneof_schema_62_validator: Optional[UsersSettingsConfig] = None
    # data type: UsersInfoSettingsConfig
    oneof_schema_63_validator: Optional[UsersInfoSettingsConfig] = None
    # data type: VulnerabilitiesSettingsConfig
    oneof_schema_64_validator: Optional[VulnerabilitiesSettingsConfig] = None
    # data type: VulnerabilitiesCronSettingsConfig
    oneof_schema_65_validator: Optional[VulnerabilitiesCronSettingsConfig] = None
    # data type: VulnerabilityFindingsSettingsConfig
    oneof_schema_66_validator: Optional[VulnerabilityFindingsSettingsConfig] = None
    actual_instance: Optional[Union[ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, Dict[str, object], DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, FullScansSettingsConfig, GoogleCloudStorageSettingsConfig, IssuesSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig, object]] = None
    one_of_schemas: Set[str] = { "ActivityLogsSettingsConfig", "ActorsInfoSettingsConfig", "AdminActivitySettingsConfig", "AdminLogsSettingsConfig", "AuditLogsSettingsConfig", "AuthLogsSettingsConfig", "AwsS3SettingsConfig", "AwssqsSettingsConfig", "AzureActivityLogsSettingsConfig", "BigqueryInputSettingsConfig", "BoxEventsSettingsConfig", "BoxUsersSettingsConfig", "CloudAssetInventorySettingsConfig", "CloudConfigurationFindingsSettingsConfig", "CloudLogsSettingsConfig", "CloudResourceInventorySettingsConfig", "CloudtrailSettingsConfig", "CrowdstrikeFdrSettingsConfig", "DefenderForEndpointAlertsSettingsConfig", "DemoCustomSettingsConfig", "DemoSettingsConfig", "DetectSummariesSettingsConfig", "DeviceActivitySettingsConfig", "DeviceDetailsSettingsConfig", "DevicesSettingsConfig", "Dict[str, object]", "DriveActivitySettingsConfig", "EntraIdSettingsConfig", "EventSettingsConfig", "EventsLogsSettingsConfig", "FullScansSettingsConfig", "GoogleCloudStorageSettingsConfig", "IssuesSettingsConfig", "LogAnalyticsQuerySettingsConfig", "LoginActivitySettingsConfig", "LoginSessionsSettingsConfig", "MonadLogSettingsConfig", "OauthActivitySettingsConfig", "ObjectStorageInputSettingsConfig", "OneloginEventsSettingsConfig", "RolesInfoSettingsConfig", "SemgrepDeploymentsSettingsConfig", "SemgrepProjectDetailsSettingsConfig", "SemgrepProjectsSettingsConfig", "SlackUsersSettingsConfig", "SlackgroupsSettingsConfig", "SnowflakeInputSettingsConfig", "SnykOrganizationsSettingsConfig", "SnykProjectsSettingsConfig", "TailscaleUsersSettingsConfig", "TenableAssetsCronSettingsConfig", "TenableVulnerabilitiesCronSettingsConfig", "UsersInfoSettingsConfig", "UsersSettingsConfig", "VulnerabilitiesCronSettingsConfig", "VulnerabilitiesSettingsConfig", "VulnerabilityFindingsSettingsConfig", "object" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SecretProcessesorInputConfigSettings.model_construct()
        error_messages = []
        match = 0
        # validate data type: ActivityLogsSettingsConfig
        if not isinstance(v, ActivityLogsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ActivityLogsSettingsConfig`")
        else:
            match += 1
        # validate data type: ActorsInfoSettingsConfig
        if not isinstance(v, ActorsInfoSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ActorsInfoSettingsConfig`")
        else:
            match += 1
        # validate data type: AdminActivitySettingsConfig
        if not isinstance(v, AdminActivitySettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdminActivitySettingsConfig`")
        else:
            match += 1
        # validate data type: AdminLogsSettingsConfig
        if not isinstance(v, AdminLogsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdminLogsSettingsConfig`")
        else:
            match += 1
        # validate data type: AuditLogsSettingsConfig
        if not isinstance(v, AuditLogsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AuditLogsSettingsConfig`")
        else:
            match += 1
        # validate data type: AuthLogsSettingsConfig
        if not isinstance(v, AuthLogsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AuthLogsSettingsConfig`")
        else:
            match += 1
        # validate data type: AwsS3SettingsConfig
        if not isinstance(v, AwsS3SettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AwsS3SettingsConfig`")
        else:
            match += 1
        # validate data type: AwssqsSettingsConfig
        if not isinstance(v, AwssqsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AwssqsSettingsConfig`")
        else:
            match += 1
        # validate data type: AzureActivityLogsSettingsConfig
        if not isinstance(v, AzureActivityLogsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AzureActivityLogsSettingsConfig`")
        else:
            match += 1
        # validate data type: BigqueryInputSettingsConfig
        if not isinstance(v, BigqueryInputSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BigqueryInputSettingsConfig`")
        else:
            match += 1
        # validate data type: BoxEventsSettingsConfig
        if not isinstance(v, BoxEventsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BoxEventsSettingsConfig`")
        else:
            match += 1
        # validate data type: BoxUsersSettingsConfig
        if not isinstance(v, BoxUsersSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BoxUsersSettingsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_13_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: CloudAssetInventorySettingsConfig
        if not isinstance(v, CloudAssetInventorySettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudAssetInventorySettingsConfig`")
        else:
            match += 1
        # validate data type: CloudConfigurationFindingsSettingsConfig
        if not isinstance(v, CloudConfigurationFindingsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudConfigurationFindingsSettingsConfig`")
        else:
            match += 1
        # validate data type: CloudLogsSettingsConfig
        if not isinstance(v, CloudLogsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudLogsSettingsConfig`")
        else:
            match += 1
        # validate data type: CloudResourceInventorySettingsConfig
        if not isinstance(v, CloudResourceInventorySettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudResourceInventorySettingsConfig`")
        else:
            match += 1
        # validate data type: CloudtrailSettingsConfig
        if not isinstance(v, CloudtrailSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudtrailSettingsConfig`")
        else:
            match += 1
        # validate data type: CrowdstrikeFdrSettingsConfig
        if not isinstance(v, CrowdstrikeFdrSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CrowdstrikeFdrSettingsConfig`")
        else:
            match += 1
        # validate data type: DefenderForEndpointAlertsSettingsConfig
        if not isinstance(v, DefenderForEndpointAlertsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DefenderForEndpointAlertsSettingsConfig`")
        else:
            match += 1
        # validate data type: DemoSettingsConfig
        if not isinstance(v, DemoSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DemoSettingsConfig`")
        else:
            match += 1
        # validate data type: DemoCustomSettingsConfig
        if not isinstance(v, DemoCustomSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DemoCustomSettingsConfig`")
        else:
            match += 1
        # validate data type: DetectSummariesSettingsConfig
        if not isinstance(v, DetectSummariesSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DetectSummariesSettingsConfig`")
        else:
            match += 1
        # validate data type: DeviceActivitySettingsConfig
        if not isinstance(v, DeviceActivitySettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeviceActivitySettingsConfig`")
        else:
            match += 1
        # validate data type: DeviceDetailsSettingsConfig
        if not isinstance(v, DeviceDetailsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeviceDetailsSettingsConfig`")
        else:
            match += 1
        # validate data type: DevicesSettingsConfig
        if not isinstance(v, DevicesSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesSettingsConfig`")
        else:
            match += 1
        # validate data type: DriveActivitySettingsConfig
        if not isinstance(v, DriveActivitySettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DriveActivitySettingsConfig`")
        else:
            match += 1
        # validate data type: EntraIdSettingsConfig
        if not isinstance(v, EntraIdSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EntraIdSettingsConfig`")
        else:
            match += 1
        # validate data type: EventSettingsConfig
        if not isinstance(v, EventSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventSettingsConfig`")
        else:
            match += 1
        # validate data type: EventsLogsSettingsConfig
        if not isinstance(v, EventsLogsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventsLogsSettingsConfig`")
        else:
            match += 1
        # validate data type: FullScansSettingsConfig
        if not isinstance(v, FullScansSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FullScansSettingsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_32_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: GoogleCloudStorageSettingsConfig
        if not isinstance(v, GoogleCloudStorageSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleCloudStorageSettingsConfig`")
        else:
            match += 1
        # validate data type: IssuesSettingsConfig
        if not isinstance(v, IssuesSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IssuesSettingsConfig`")
        else:
            match += 1
        # validate data type: LogAnalyticsQuerySettingsConfig
        if not isinstance(v, LogAnalyticsQuerySettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LogAnalyticsQuerySettingsConfig`")
        else:
            match += 1
        # validate data type: LoginActivitySettingsConfig
        if not isinstance(v, LoginActivitySettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LoginActivitySettingsConfig`")
        else:
            match += 1
        # validate data type: LoginSessionsSettingsConfig
        if not isinstance(v, LoginSessionsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LoginSessionsSettingsConfig`")
        else:
            match += 1
        # validate data type: Dict[str, object]
        try:
            instance.oneof_schema_38_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: object
        try:
            instance.oneof_schema_39_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: MonadLogSettingsConfig
        if not isinstance(v, MonadLogSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MonadLogSettingsConfig`")
        else:
            match += 1
        # validate data type: OauthActivitySettingsConfig
        if not isinstance(v, OauthActivitySettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OauthActivitySettingsConfig`")
        else:
            match += 1
        # validate data type: ObjectStorageInputSettingsConfig
        if not isinstance(v, ObjectStorageInputSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObjectStorageInputSettingsConfig`")
        else:
            match += 1
        # validate data type: OneloginEventsSettingsConfig
        if not isinstance(v, OneloginEventsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OneloginEventsSettingsConfig`")
        else:
            match += 1
        # validate data type: RolesInfoSettingsConfig
        if not isinstance(v, RolesInfoSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RolesInfoSettingsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_45_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: SemgrepDeploymentsSettingsConfig
        if not isinstance(v, SemgrepDeploymentsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SemgrepDeploymentsSettingsConfig`")
        else:
            match += 1
        # validate data type: SemgrepProjectDetailsSettingsConfig
        if not isinstance(v, SemgrepProjectDetailsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SemgrepProjectDetailsSettingsConfig`")
        else:
            match += 1
        # validate data type: SemgrepProjectsSettingsConfig
        if not isinstance(v, SemgrepProjectsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SemgrepProjectsSettingsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_49_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: SlackUsersSettingsConfig
        if not isinstance(v, SlackUsersSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SlackUsersSettingsConfig`")
        else:
            match += 1
        # validate data type: SlackgroupsSettingsConfig
        if not isinstance(v, SlackgroupsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SlackgroupsSettingsConfig`")
        else:
            match += 1
        # validate data type: SnowflakeInputSettingsConfig
        if not isinstance(v, SnowflakeInputSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnowflakeInputSettingsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_53_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: SnykOrganizationsSettingsConfig
        if not isinstance(v, SnykOrganizationsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnykOrganizationsSettingsConfig`")
        else:
            match += 1
        # validate data type: SnykProjectsSettingsConfig
        if not isinstance(v, SnykProjectsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnykProjectsSettingsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_56_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: TailscaleUsersSettingsConfig
        if not isinstance(v, TailscaleUsersSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TailscaleUsersSettingsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_58_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: TenableAssetsCronSettingsConfig
        if not isinstance(v, TenableAssetsCronSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TenableAssetsCronSettingsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_60_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: TenableVulnerabilitiesCronSettingsConfig
        if not isinstance(v, TenableVulnerabilitiesCronSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TenableVulnerabilitiesCronSettingsConfig`")
        else:
            match += 1
        # validate data type: UsersSettingsConfig
        if not isinstance(v, UsersSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsersSettingsConfig`")
        else:
            match += 1
        # validate data type: UsersInfoSettingsConfig
        if not isinstance(v, UsersInfoSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsersInfoSettingsConfig`")
        else:
            match += 1
        # validate data type: VulnerabilitiesSettingsConfig
        if not isinstance(v, VulnerabilitiesSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnerabilitiesSettingsConfig`")
        else:
            match += 1
        # validate data type: VulnerabilitiesCronSettingsConfig
        if not isinstance(v, VulnerabilitiesCronSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnerabilitiesCronSettingsConfig`")
        else:
            match += 1
        # validate data type: VulnerabilityFindingsSettingsConfig
        if not isinstance(v, VulnerabilityFindingsSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnerabilityFindingsSettingsConfig`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SecretProcessesorInputConfigSettings with oneOf schemas: ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, Dict[str, object], DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, FullScansSettingsConfig, GoogleCloudStorageSettingsConfig, IssuesSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SecretProcessesorInputConfigSettings with oneOf schemas: ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, Dict[str, object], DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, FullScansSettingsConfig, GoogleCloudStorageSettingsConfig, IssuesSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig, object. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ActivityLogsSettingsConfig
        try:
            instance.actual_instance = ActivityLogsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ActorsInfoSettingsConfig
        try:
            instance.actual_instance = ActorsInfoSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdminActivitySettingsConfig
        try:
            instance.actual_instance = AdminActivitySettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdminLogsSettingsConfig
        try:
            instance.actual_instance = AdminLogsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AuditLogsSettingsConfig
        try:
            instance.actual_instance = AuditLogsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AuthLogsSettingsConfig
        try:
            instance.actual_instance = AuthLogsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AwsS3SettingsConfig
        try:
            instance.actual_instance = AwsS3SettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AwssqsSettingsConfig
        try:
            instance.actual_instance = AwssqsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AzureActivityLogsSettingsConfig
        try:
            instance.actual_instance = AzureActivityLogsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BigqueryInputSettingsConfig
        try:
            instance.actual_instance = BigqueryInputSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BoxEventsSettingsConfig
        try:
            instance.actual_instance = BoxEventsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BoxUsersSettingsConfig
        try:
            instance.actual_instance = BoxUsersSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_13_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_13_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CloudAssetInventorySettingsConfig
        try:
            instance.actual_instance = CloudAssetInventorySettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CloudConfigurationFindingsSettingsConfig
        try:
            instance.actual_instance = CloudConfigurationFindingsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CloudLogsSettingsConfig
        try:
            instance.actual_instance = CloudLogsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CloudResourceInventorySettingsConfig
        try:
            instance.actual_instance = CloudResourceInventorySettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CloudtrailSettingsConfig
        try:
            instance.actual_instance = CloudtrailSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CrowdstrikeFdrSettingsConfig
        try:
            instance.actual_instance = CrowdstrikeFdrSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DefenderForEndpointAlertsSettingsConfig
        try:
            instance.actual_instance = DefenderForEndpointAlertsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DemoSettingsConfig
        try:
            instance.actual_instance = DemoSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DemoCustomSettingsConfig
        try:
            instance.actual_instance = DemoCustomSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DetectSummariesSettingsConfig
        try:
            instance.actual_instance = DetectSummariesSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DeviceActivitySettingsConfig
        try:
            instance.actual_instance = DeviceActivitySettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DeviceDetailsSettingsConfig
        try:
            instance.actual_instance = DeviceDetailsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesSettingsConfig
        try:
            instance.actual_instance = DevicesSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DriveActivitySettingsConfig
        try:
            instance.actual_instance = DriveActivitySettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EntraIdSettingsConfig
        try:
            instance.actual_instance = EntraIdSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventSettingsConfig
        try:
            instance.actual_instance = EventSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventsLogsSettingsConfig
        try:
            instance.actual_instance = EventsLogsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FullScansSettingsConfig
        try:
            instance.actual_instance = FullScansSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_32_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_32_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleCloudStorageSettingsConfig
        try:
            instance.actual_instance = GoogleCloudStorageSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IssuesSettingsConfig
        try:
            instance.actual_instance = IssuesSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LogAnalyticsQuerySettingsConfig
        try:
            instance.actual_instance = LogAnalyticsQuerySettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LoginActivitySettingsConfig
        try:
            instance.actual_instance = LoginActivitySettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LoginSessionsSettingsConfig
        try:
            instance.actual_instance = LoginSessionsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dict[str, object]
        try:
            # validation
            instance.oneof_schema_38_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_38_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_39_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_39_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MonadLogSettingsConfig
        try:
            instance.actual_instance = MonadLogSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OauthActivitySettingsConfig
        try:
            instance.actual_instance = OauthActivitySettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObjectStorageInputSettingsConfig
        try:
            instance.actual_instance = ObjectStorageInputSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OneloginEventsSettingsConfig
        try:
            instance.actual_instance = OneloginEventsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RolesInfoSettingsConfig
        try:
            instance.actual_instance = RolesInfoSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_45_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_45_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SemgrepDeploymentsSettingsConfig
        try:
            instance.actual_instance = SemgrepDeploymentsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SemgrepProjectDetailsSettingsConfig
        try:
            instance.actual_instance = SemgrepProjectDetailsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SemgrepProjectsSettingsConfig
        try:
            instance.actual_instance = SemgrepProjectsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_49_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_49_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SlackUsersSettingsConfig
        try:
            instance.actual_instance = SlackUsersSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SlackgroupsSettingsConfig
        try:
            instance.actual_instance = SlackgroupsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnowflakeInputSettingsConfig
        try:
            instance.actual_instance = SnowflakeInputSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_53_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_53_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnykOrganizationsSettingsConfig
        try:
            instance.actual_instance = SnykOrganizationsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnykProjectsSettingsConfig
        try:
            instance.actual_instance = SnykProjectsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_56_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_56_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TailscaleUsersSettingsConfig
        try:
            instance.actual_instance = TailscaleUsersSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_58_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_58_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TenableAssetsCronSettingsConfig
        try:
            instance.actual_instance = TenableAssetsCronSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_60_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_60_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TenableVulnerabilitiesCronSettingsConfig
        try:
            instance.actual_instance = TenableVulnerabilitiesCronSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsersSettingsConfig
        try:
            instance.actual_instance = UsersSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsersInfoSettingsConfig
        try:
            instance.actual_instance = UsersInfoSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VulnerabilitiesSettingsConfig
        try:
            instance.actual_instance = VulnerabilitiesSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VulnerabilitiesCronSettingsConfig
        try:
            instance.actual_instance = VulnerabilitiesCronSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VulnerabilityFindingsSettingsConfig
        try:
            instance.actual_instance = VulnerabilityFindingsSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SecretProcessesorInputConfigSettings with oneOf schemas: ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, Dict[str, object], DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, FullScansSettingsConfig, GoogleCloudStorageSettingsConfig, IssuesSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SecretProcessesorInputConfigSettings with oneOf schemas: ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, Dict[str, object], DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, FullScansSettingsConfig, GoogleCloudStorageSettingsConfig, IssuesSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig, object. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ActivityLogsSettingsConfig, ActorsInfoSettingsConfig, AdminActivitySettingsConfig, AdminLogsSettingsConfig, AuditLogsSettingsConfig, AuthLogsSettingsConfig, AwsS3SettingsConfig, AwssqsSettingsConfig, AzureActivityLogsSettingsConfig, BigqueryInputSettingsConfig, BoxEventsSettingsConfig, BoxUsersSettingsConfig, CloudAssetInventorySettingsConfig, CloudConfigurationFindingsSettingsConfig, CloudLogsSettingsConfig, CloudResourceInventorySettingsConfig, CloudtrailSettingsConfig, CrowdstrikeFdrSettingsConfig, DefenderForEndpointAlertsSettingsConfig, DemoCustomSettingsConfig, DemoSettingsConfig, DetectSummariesSettingsConfig, DeviceActivitySettingsConfig, DeviceDetailsSettingsConfig, DevicesSettingsConfig, Dict[str, object], DriveActivitySettingsConfig, EntraIdSettingsConfig, EventSettingsConfig, EventsLogsSettingsConfig, FullScansSettingsConfig, GoogleCloudStorageSettingsConfig, IssuesSettingsConfig, LogAnalyticsQuerySettingsConfig, LoginActivitySettingsConfig, LoginSessionsSettingsConfig, MonadLogSettingsConfig, OauthActivitySettingsConfig, ObjectStorageInputSettingsConfig, OneloginEventsSettingsConfig, RolesInfoSettingsConfig, SemgrepDeploymentsSettingsConfig, SemgrepProjectDetailsSettingsConfig, SemgrepProjectsSettingsConfig, SlackUsersSettingsConfig, SlackgroupsSettingsConfig, SnowflakeInputSettingsConfig, SnykOrganizationsSettingsConfig, SnykProjectsSettingsConfig, TailscaleUsersSettingsConfig, TenableAssetsCronSettingsConfig, TenableVulnerabilitiesCronSettingsConfig, UsersInfoSettingsConfig, UsersSettingsConfig, VulnerabilitiesCronSettingsConfig, VulnerabilitiesSettingsConfig, VulnerabilityFindingsSettingsConfig, object]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


