# coding: utf-8

"""
    Monad Swagger API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ModelsQuota(BaseModel):
    """
    ModelsQuota
    """ # noqa: E501
    action: Optional[StrictStr] = None
    billing_account_id: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    current_usage: Optional[StrictInt] = None
    current_usage_updated_at: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    limit_amount: Optional[StrictInt] = None
    limit_type: Optional[StrictStr] = None
    limit_unit: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    organization_id: Optional[StrictStr] = None
    timeframe: Optional[StrictStr] = None
    updated_at: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["action", "billing_account_id", "created_at", "current_usage", "current_usage_updated_at", "id", "limit_amount", "limit_type", "limit_unit", "name", "organization_id", "timeframe", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsQuota from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsQuota from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "action": obj.get("action"),
            "billing_account_id": obj.get("billing_account_id"),
            "created_at": obj.get("created_at"),
            "current_usage": obj.get("current_usage"),
            "current_usage_updated_at": obj.get("current_usage_updated_at"),
            "id": obj.get("id"),
            "limit_amount": obj.get("limit_amount"),
            "limit_type": obj.get("limit_type"),
            "limit_unit": obj.get("limit_unit"),
            "name": obj.get("name"),
            "organization_id": obj.get("organization_id"),
            "timeframe": obj.get("timeframe"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


