# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from monad.models.models_pipeline_edge import ModelsPipelineEdge
from monad.models.models_pipeline_node import ModelsPipelineNode
from monad.models.models_pipeline_retention_policy import ModelsPipelineRetentionPolicy
from typing import Optional, Set
from typing_extensions import Self

class ModelsPipelineConfigV2(BaseModel):
    """
    ModelsPipelineConfigV2
    """ # noqa: E501
    billing_account_id: Optional[StrictStr] = Field(default=None, alias="billingAccountId")
    component_tier: Optional[StrictInt] = None
    created_at: Optional[StrictStr] = Field(default=None, alias="createdAt")
    description: Optional[StrictStr] = None
    edges: Optional[List[ModelsPipelineEdge]] = None
    enabled: Optional[StrictBool] = None
    endpoint: Optional[StrictStr] = None
    endpoint_hash: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    nodes: Optional[List[ModelsPipelineNode]] = None
    organization_id: Optional[StrictStr] = Field(default=None, alias="organizationId")
    organization_name: Optional[StrictStr] = Field(default=None, alias="organizationName")
    retention_policy: Optional[ModelsPipelineRetentionPolicy] = None
    updated_at: Optional[StrictStr] = Field(default=None, alias="updatedAt")
    __properties: ClassVar[List[str]] = ["billingAccountId", "component_tier", "createdAt", "description", "edges", "enabled", "endpoint", "endpoint_hash", "id", "name", "nodes", "organizationId", "organizationName", "retention_policy", "updatedAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsPipelineConfigV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in edges (list)
        _items = []
        if self.edges:
            for _item_edges in self.edges:
                if _item_edges:
                    _items.append(_item_edges.to_dict())
            _dict['edges'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in nodes (list)
        _items = []
        if self.nodes:
            for _item_nodes in self.nodes:
                if _item_nodes:
                    _items.append(_item_nodes.to_dict())
            _dict['nodes'] = _items
        # override the default output from pydantic by calling `to_dict()` of retention_policy
        if self.retention_policy:
            _dict['retention_policy'] = self.retention_policy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsPipelineConfigV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billingAccountId": obj.get("billingAccountId"),
            "component_tier": obj.get("component_tier"),
            "createdAt": obj.get("createdAt"),
            "description": obj.get("description"),
            "edges": [ModelsPipelineEdge.from_dict(_item) for _item in obj["edges"]] if obj.get("edges") is not None else None,
            "enabled": obj.get("enabled"),
            "endpoint": obj.get("endpoint"),
            "endpoint_hash": obj.get("endpoint_hash"),
            "id": obj.get("id"),
            "name": obj.get("name"),
            "nodes": [ModelsPipelineNode.from_dict(_item) for _item in obj["nodes"]] if obj.get("nodes") is not None else None,
            "organizationId": obj.get("organizationId"),
            "organizationName": obj.get("organizationName"),
            "retention_policy": ModelsPipelineRetentionPolicy.from_dict(obj["retention_policy"]) if obj.get("retention_policy") is not None else None,
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


