# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from monad.models.pagerduty_alerts_config import PagerdutyAlertsConfig
from monad.models.pagerduty_summary_config import PagerdutySummaryConfig
from typing import Optional, Set
from typing_extensions import Self

class PagerdutySettingsConfig(BaseModel):
    """
    PagerDuty Output Settings
    """ # noqa: E501
    alerts_config: Optional[PagerdutyAlertsConfig] = None
    default_event_type: Optional[StrictStr] = Field(default=None, description="EventType determines whether events are sent as 'change' or 'alert' events. We recommend reading the docs for this output before making this choice.")
    summary_config: Optional[PagerdutySummaryConfig] = None
    __properties: ClassVar[List[str]] = ["alerts_config", "default_event_type", "summary_config"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PagerdutySettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of alerts_config
        if self.alerts_config:
            _dict['alerts_config'] = self.alerts_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of summary_config
        if self.summary_config:
            _dict['summary_config'] = self.summary_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PagerdutySettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "alerts_config": PagerdutyAlertsConfig.from_dict(obj["alerts_config"]) if obj.get("alerts_config") is not None else None,
            "default_event_type": obj.get("default_event_type"),
            "summary_config": PagerdutySummaryConfig.from_dict(obj["summary_config"]) if obj.get("summary_config") is not None else None
        })
        return _obj


