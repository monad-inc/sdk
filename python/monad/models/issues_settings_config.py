# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class IssuesSettingsConfig(BaseModel):
    """
    Wiz Issues settings
    """ # noqa: E501
    control_ids: Optional[List[StrictStr]] = Field(default=None, description="@Description Filter Issues created by specific control IDs")
    has_note: Optional[StrictStr] = Field(default=None, description="@Description Filter Issues with or without a note")
    has_remediation: Optional[StrictStr] = Field(default=None, description="@Description Filter Issues with or without remediation")
    has_service_ticket: Optional[StrictStr] = Field(default=None, description="@Description Filter Issues with or without related service ticket")
    issue_ids: Optional[List[StrictStr]] = Field(default=None, description="@Description Filter only Issues that match these specific IDs")
    issue_types: Optional[List[StrictStr]] = Field(default=None, description="@Description Filter by Issue type")
    project_ids: Optional[List[StrictStr]] = Field(default=None, description="@Description Filter Issues associated with specific project IDs")
    related_entity_id: Optional[StrictStr] = Field(default=None, description="@Description Filter by related entity ids")
    resolution_reasons: Optional[List[StrictStr]] = Field(default=None, description="@Description Filter Issues by resolution reason")
    risk_equals_all: Optional[List[StrictStr]] = Field(default=None, description="@Description Filters Issues by risk type according to Wiz-defined types of risk @Description Use the risk ID and not the risk name @Description All specified risks must be present")
    risk_equals_any: Optional[List[StrictStr]] = Field(default=None, description="@Description Filters Issues by risk type according to Wiz-defined types of risk @Description Use the risk ID and not the risk name")
    search_query: Optional[StrictStr] = Field(default=None, description="@Description Free text search on Issue title or object name @Description Returns NULL if no match is found")
    security_scan: Optional[StrictStr] = Field(default=None, description="@Description Filter by security scan source")
    severities: Optional[List[StrictStr]] = Field(default=None, description="@Description Filter Issues according to Control severity")
    stack_layers: Optional[List[StrictStr]] = Field(default=None, description="@Description Filter Issues from specific stack layers")
    status: Optional[List[StrictStr]] = Field(default=None, description="@Description Filter by Issue handling status @Description Default: OPEN")
    tenant_data_center: Optional[StrictStr] = Field(default=None, description="DataCenter represents the tenant's data center location @Description Enter a tenant data center, e.g., \"us1\", \"us2\", \"us3\" @Description Find your tenant data center on the Tenant Info page in Wiz, or request it from your Wiz customer contact")
    use_synthetic_data: Optional[StrictBool] = Field(default=None, description="Generate synthetic demo data instead of connecting to the real data source.")
    __properties: ClassVar[List[str]] = ["control_ids", "has_note", "has_remediation", "has_service_ticket", "issue_ids", "issue_types", "project_ids", "related_entity_id", "resolution_reasons", "risk_equals_all", "risk_equals_any", "search_query", "security_scan", "severities", "stack_layers", "status", "tenant_data_center", "use_synthetic_data"]

    @field_validator('issue_types')
    def issue_types_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['TOXIC_COMBINATION', 'THREAT_DETECTION', 'CLOUD_CONFIGURATION']):
                raise ValueError("each list item must be one of ('TOXIC_COMBINATION', 'THREAT_DETECTION', 'CLOUD_CONFIGURATION')")
        return value

    @field_validator('resolution_reasons')
    def resolution_reasons_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['CONTROL_CHANGED', 'CONTROL_DISABLED', 'CONTROL_DELETED', 'EXCEPTION', 'FALSE_POSITIVE', 'WONT_FIX', 'OBJECT_DELETED', 'ISSUE_FIXED']):
                raise ValueError("each list item must be one of ('CONTROL_CHANGED', 'CONTROL_DISABLED', 'CONTROL_DELETED', 'EXCEPTION', 'FALSE_POSITIVE', 'WONT_FIX', 'OBJECT_DELETED', 'ISSUE_FIXED')")
        return value

    @field_validator('severities')
    def severities_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['INFORMATIONAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL']):
                raise ValueError("each list item must be one of ('INFORMATIONAL', 'LOW', 'MEDIUM', 'HIGH', 'CRITICAL')")
        return value

    @field_validator('stack_layers')
    def stack_layers_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['APPLICATION_AND_DATA', 'CI_CD', 'SECURITY_AND_IDENTITY', 'COMPUTE_PLATFORMS', 'CODE', 'CLOUD_ENTITLEMENTS', 'DATA_STORES']):
                raise ValueError("each list item must be one of ('APPLICATION_AND_DATA', 'CI_CD', 'SECURITY_AND_IDENTITY', 'COMPUTE_PLATFORMS', 'CODE', 'CLOUD_ENTITLEMENTS', 'DATA_STORES')")
        return value

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        for i in value:
            if i not in set(['OPEN', 'IN_PROGRESS', 'RESOLVED', 'REJECTED']):
                raise ValueError("each list item must be one of ('OPEN', 'IN_PROGRESS', 'RESOLVED', 'REJECTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IssuesSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IssuesSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "control_ids": obj.get("control_ids"),
            "has_note": obj.get("has_note"),
            "has_remediation": obj.get("has_remediation"),
            "has_service_ticket": obj.get("has_service_ticket"),
            "issue_ids": obj.get("issue_ids"),
            "issue_types": obj.get("issue_types"),
            "project_ids": obj.get("project_ids"),
            "related_entity_id": obj.get("related_entity_id"),
            "resolution_reasons": obj.get("resolution_reasons"),
            "risk_equals_all": obj.get("risk_equals_all"),
            "risk_equals_any": obj.get("risk_equals_any"),
            "search_query": obj.get("search_query"),
            "security_scan": obj.get("security_scan"),
            "severities": obj.get("severities"),
            "stack_layers": obj.get("stack_layers"),
            "status": obj.get("status"),
            "tenant_data_center": obj.get("tenant_data_center"),
            "use_synthetic_data": obj.get("use_synthetic_data")
        })
        return _obj


