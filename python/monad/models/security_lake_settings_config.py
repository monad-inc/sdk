# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from monad.models.batch_config_batch_config import BatchConfigBatchConfig
from monad.models.parquet_parquet_formatter import ParquetParquetFormatter
from monad.models.security_lake_source_account_details import SecurityLakeSourceAccountDetails
from typing import Optional, Set
from typing_extensions import Self

class SecurityLakeSettingsConfig(BaseModel):
    """
    Security Lake Output Settings
    """ # noqa: E501
    batch_config: Optional[BatchConfigBatchConfig] = None
    bucket_name: Optional[StrictStr] = Field(default=None, description="Bucket Name", alias="bucketName")
    bucket_url: Optional[StrictStr] = Field(default=None, description="The name of the S3 bucket where data will be stored")
    key: Optional[StrictStr] = Field(default=None, description="S3 Key")
    parquet_format: Optional[ParquetParquetFormatter] = None
    role_arn: Optional[StrictStr] = Field(default=None, description="The Amazon Resource Name (ARN) of the IAM role to assume which grants access to the S3 bucket")
    source_account_details: Optional[SecurityLakeSourceAccountDetails] = None
    __properties: ClassVar[List[str]] = ["batch_config", "bucketName", "bucket_url", "key", "parquet_format", "role_arn", "source_account_details"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SecurityLakeSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of batch_config
        if self.batch_config:
            _dict['batch_config'] = self.batch_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of parquet_format
        if self.parquet_format:
            _dict['parquet_format'] = self.parquet_format.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source_account_details
        if self.source_account_details:
            _dict['source_account_details'] = self.source_account_details.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SecurityLakeSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batch_config": BatchConfigBatchConfig.from_dict(obj["batch_config"]) if obj.get("batch_config") is not None else None,
            "bucketName": obj.get("bucketName"),
            "bucket_url": obj.get("bucket_url"),
            "key": obj.get("key"),
            "parquet_format": ParquetParquetFormatter.from_dict(obj["parquet_format"]) if obj.get("parquet_format") is not None else None,
            "role_arn": obj.get("role_arn"),
            "source_account_details": SecurityLakeSourceAccountDetails.from_dict(obj["source_account_details"]) if obj.get("source_account_details") is not None else None
        })
        return _obj


