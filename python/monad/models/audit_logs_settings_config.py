# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AuditLogsSettingsConfig(BaseModel):
    """
    GitHub audit logs settings
    """ # noqa: E501
    actions: Optional[List[StrictStr]] = Field(default=None, description="Filter by specific actions. Use wildcards for broader matches (e.g., repo.*)")
    actor: Optional[StrictStr] = Field(default=None, description="Filter by the username that initiated the action")
    country: Optional[StrictStr] = Field(default=None, description="Filter by actor's country code (e.g., US)")
    created_after: Optional[StrictStr] = Field(default=None, description="Only return audit log entries after this RFC3339 formatted time stamp")
    enterprise: Optional[StrictStr] = Field(default=None, description="Your GitHub enterprise slug or ID")
    include: Optional[StrictStr] = Field(default=None, description="Event types to include. web: Gets all web (non-git) events. git: Gets git events. all: Gets both.")
    organization: Optional[StrictStr] = Field(default=None, description="Filter by organization name")
    repository: Optional[StrictStr] = Field(default=None, description="Filter by repository (format: org-name/repo-name)")
    use_synthetic_data: Optional[StrictBool] = Field(default=None, description="Generate synthetic demo data instead of connecting to the real data source.")
    user: Optional[StrictStr] = Field(default=None, description="Filter by the username that was affected by the action")
    __properties: ClassVar[List[str]] = ["actions", "actor", "country", "created_after", "enterprise", "include", "organization", "repository", "use_synthetic_data", "user"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuditLogsSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuditLogsSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actions": obj.get("actions"),
            "actor": obj.get("actor"),
            "country": obj.get("country"),
            "created_after": obj.get("created_after"),
            "enterprise": obj.get("enterprise"),
            "include": obj.get("include"),
            "organization": obj.get("organization"),
            "repository": obj.get("repository"),
            "use_synthetic_data": obj.get("use_synthetic_data"),
            "user": obj.get("user")
        })
        return _obj


