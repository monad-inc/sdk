# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, Dict, List, Optional
from monad.models.bigquery_secrets_config import BigquerySecretsConfig
from monad.models.cribl_http_secrets_config import CriblHttpSecretsConfig
from monad.models.elasticsearch_secrets_config import ElasticsearchSecretsConfig
from monad.models.google_cloud_storage_output_secrets_config import GoogleCloudStorageOutputSecretsConfig
from monad.models.http_secrets_config import HttpSecretsConfig
from monad.models.next_gen_siem_secrets_config import NextGenSiemSecretsConfig
from monad.models.object_storage_secrets_config import ObjectStorageSecretsConfig
from monad.models.opensearch_secrets_config import OpensearchSecretsConfig
from monad.models.pagerduty_secrets_config import PagerdutySecretsConfig
from monad.models.postgresql_secrets_config import PostgresqlSecretsConfig
from monad.models.sentinel_secrets_config import SentinelSecretsConfig
from monad.models.snowflake_output_secrets_config import SnowflakeOutputSecretsConfig
from monad.models.splunk_secrets_config import SplunkSecretsConfig
from monad.models.sumologic_secrets_config import SumologicSecretsConfig
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SECRETPROCESSESOROUTPUTCONFIGSECRETS_ONE_OF_SCHEMAS = ["BigquerySecretsConfig", "CriblHttpSecretsConfig", "Dict[str, object]", "ElasticsearchSecretsConfig", "GoogleCloudStorageOutputSecretsConfig", "HttpSecretsConfig", "NextGenSiemSecretsConfig", "ObjectStorageSecretsConfig", "OpensearchSecretsConfig", "PagerdutySecretsConfig", "PostgresqlSecretsConfig", "SentinelSecretsConfig", "SnowflakeOutputSecretsConfig", "SplunkSecretsConfig", "SumologicSecretsConfig", "object"]

class SecretProcessesorOutputConfigSecrets(BaseModel):
    """
    SecretProcessesorOutputConfigSecrets
    """
    # data type: object
    oneof_schema_1_validator: Optional[Dict[str, Any]] = Field(default=None, description="SQS Output Secrets")
    # data type: BigquerySecretsConfig
    oneof_schema_2_validator: Optional[BigquerySecretsConfig] = None
    # data type: CriblHttpSecretsConfig
    oneof_schema_3_validator: Optional[CriblHttpSecretsConfig] = None
    # data type: ElasticsearchSecretsConfig
    oneof_schema_4_validator: Optional[ElasticsearchSecretsConfig] = None
    # data type: GoogleCloudStorageOutputSecretsConfig
    oneof_schema_5_validator: Optional[GoogleCloudStorageOutputSecretsConfig] = None
    # data type: HttpSecretsConfig
    oneof_schema_6_validator: Optional[HttpSecretsConfig] = None
    # data type: Dict[str, object]
    oneof_schema_7_validator: Optional[Dict[str, Any]] = None
    # data type: NextGenSiemSecretsConfig
    oneof_schema_8_validator: Optional[NextGenSiemSecretsConfig] = None
    # data type: ObjectStorageSecretsConfig
    oneof_schema_9_validator: Optional[ObjectStorageSecretsConfig] = None
    # data type: OpensearchSecretsConfig
    oneof_schema_10_validator: Optional[OpensearchSecretsConfig] = None
    # data type: PagerdutySecretsConfig
    oneof_schema_11_validator: Optional[PagerdutySecretsConfig] = None
    # data type: PostgresqlSecretsConfig
    oneof_schema_12_validator: Optional[PostgresqlSecretsConfig] = None
    # data type: object
    oneof_schema_13_validator: Optional[Dict[str, Any]] = Field(default=None, description="S3 Output Secrets")
    # data type: object
    oneof_schema_14_validator: Optional[Dict[str, Any]] = Field(default=None, description="Security Lake Output Secrets")
    # data type: SentinelSecretsConfig
    oneof_schema_15_validator: Optional[SentinelSecretsConfig] = None
    # data type: SnowflakeOutputSecretsConfig
    oneof_schema_16_validator: Optional[SnowflakeOutputSecretsConfig] = None
    # data type: SplunkSecretsConfig
    oneof_schema_17_validator: Optional[SplunkSecretsConfig] = None
    # data type: SumologicSecretsConfig
    oneof_schema_18_validator: Optional[SumologicSecretsConfig] = None
    actual_instance: Optional[Union[BigquerySecretsConfig, CriblHttpSecretsConfig, Dict[str, object], ElasticsearchSecretsConfig, GoogleCloudStorageOutputSecretsConfig, HttpSecretsConfig, NextGenSiemSecretsConfig, ObjectStorageSecretsConfig, OpensearchSecretsConfig, PagerdutySecretsConfig, PostgresqlSecretsConfig, SentinelSecretsConfig, SnowflakeOutputSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig, object]] = None
    one_of_schemas: Set[str] = { "BigquerySecretsConfig", "CriblHttpSecretsConfig", "Dict[str, object]", "ElasticsearchSecretsConfig", "GoogleCloudStorageOutputSecretsConfig", "HttpSecretsConfig", "NextGenSiemSecretsConfig", "ObjectStorageSecretsConfig", "OpensearchSecretsConfig", "PagerdutySecretsConfig", "PostgresqlSecretsConfig", "SentinelSecretsConfig", "SnowflakeOutputSecretsConfig", "SplunkSecretsConfig", "SumologicSecretsConfig", "object" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SecretProcessesorOutputConfigSecrets.model_construct()
        error_messages = []
        match = 0
        # validate data type: object
        try:
            instance.oneof_schema_1_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: BigquerySecretsConfig
        if not isinstance(v, BigquerySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BigquerySecretsConfig`")
        else:
            match += 1
        # validate data type: CriblHttpSecretsConfig
        if not isinstance(v, CriblHttpSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CriblHttpSecretsConfig`")
        else:
            match += 1
        # validate data type: ElasticsearchSecretsConfig
        if not isinstance(v, ElasticsearchSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ElasticsearchSecretsConfig`")
        else:
            match += 1
        # validate data type: GoogleCloudStorageOutputSecretsConfig
        if not isinstance(v, GoogleCloudStorageOutputSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleCloudStorageOutputSecretsConfig`")
        else:
            match += 1
        # validate data type: HttpSecretsConfig
        if not isinstance(v, HttpSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HttpSecretsConfig`")
        else:
            match += 1
        # validate data type: Dict[str, object]
        try:
            instance.oneof_schema_7_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: NextGenSiemSecretsConfig
        if not isinstance(v, NextGenSiemSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `NextGenSiemSecretsConfig`")
        else:
            match += 1
        # validate data type: ObjectStorageSecretsConfig
        if not isinstance(v, ObjectStorageSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObjectStorageSecretsConfig`")
        else:
            match += 1
        # validate data type: OpensearchSecretsConfig
        if not isinstance(v, OpensearchSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OpensearchSecretsConfig`")
        else:
            match += 1
        # validate data type: PagerdutySecretsConfig
        if not isinstance(v, PagerdutySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PagerdutySecretsConfig`")
        else:
            match += 1
        # validate data type: PostgresqlSecretsConfig
        if not isinstance(v, PostgresqlSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PostgresqlSecretsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_13_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: object
        try:
            instance.oneof_schema_14_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: SentinelSecretsConfig
        if not isinstance(v, SentinelSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SentinelSecretsConfig`")
        else:
            match += 1
        # validate data type: SnowflakeOutputSecretsConfig
        if not isinstance(v, SnowflakeOutputSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnowflakeOutputSecretsConfig`")
        else:
            match += 1
        # validate data type: SplunkSecretsConfig
        if not isinstance(v, SplunkSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SplunkSecretsConfig`")
        else:
            match += 1
        # validate data type: SumologicSecretsConfig
        if not isinstance(v, SumologicSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SumologicSecretsConfig`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SecretProcessesorOutputConfigSecrets with oneOf schemas: BigquerySecretsConfig, CriblHttpSecretsConfig, Dict[str, object], ElasticsearchSecretsConfig, GoogleCloudStorageOutputSecretsConfig, HttpSecretsConfig, NextGenSiemSecretsConfig, ObjectStorageSecretsConfig, OpensearchSecretsConfig, PagerdutySecretsConfig, PostgresqlSecretsConfig, SentinelSecretsConfig, SnowflakeOutputSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SecretProcessesorOutputConfigSecrets with oneOf schemas: BigquerySecretsConfig, CriblHttpSecretsConfig, Dict[str, object], ElasticsearchSecretsConfig, GoogleCloudStorageOutputSecretsConfig, HttpSecretsConfig, NextGenSiemSecretsConfig, ObjectStorageSecretsConfig, OpensearchSecretsConfig, PagerdutySecretsConfig, PostgresqlSecretsConfig, SentinelSecretsConfig, SnowflakeOutputSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig, object. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_1_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_1_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BigquerySecretsConfig
        try:
            instance.actual_instance = BigquerySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CriblHttpSecretsConfig
        try:
            instance.actual_instance = CriblHttpSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ElasticsearchSecretsConfig
        try:
            instance.actual_instance = ElasticsearchSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleCloudStorageOutputSecretsConfig
        try:
            instance.actual_instance = GoogleCloudStorageOutputSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into HttpSecretsConfig
        try:
            instance.actual_instance = HttpSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dict[str, object]
        try:
            # validation
            instance.oneof_schema_7_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_7_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into NextGenSiemSecretsConfig
        try:
            instance.actual_instance = NextGenSiemSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObjectStorageSecretsConfig
        try:
            instance.actual_instance = ObjectStorageSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OpensearchSecretsConfig
        try:
            instance.actual_instance = OpensearchSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PagerdutySecretsConfig
        try:
            instance.actual_instance = PagerdutySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PostgresqlSecretsConfig
        try:
            instance.actual_instance = PostgresqlSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_13_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_13_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_14_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_14_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SentinelSecretsConfig
        try:
            instance.actual_instance = SentinelSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnowflakeOutputSecretsConfig
        try:
            instance.actual_instance = SnowflakeOutputSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SplunkSecretsConfig
        try:
            instance.actual_instance = SplunkSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SumologicSecretsConfig
        try:
            instance.actual_instance = SumologicSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SecretProcessesorOutputConfigSecrets with oneOf schemas: BigquerySecretsConfig, CriblHttpSecretsConfig, Dict[str, object], ElasticsearchSecretsConfig, GoogleCloudStorageOutputSecretsConfig, HttpSecretsConfig, NextGenSiemSecretsConfig, ObjectStorageSecretsConfig, OpensearchSecretsConfig, PagerdutySecretsConfig, PostgresqlSecretsConfig, SentinelSecretsConfig, SnowflakeOutputSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SecretProcessesorOutputConfigSecrets with oneOf schemas: BigquerySecretsConfig, CriblHttpSecretsConfig, Dict[str, object], ElasticsearchSecretsConfig, GoogleCloudStorageOutputSecretsConfig, HttpSecretsConfig, NextGenSiemSecretsConfig, ObjectStorageSecretsConfig, OpensearchSecretsConfig, PagerdutySecretsConfig, PostgresqlSecretsConfig, SentinelSecretsConfig, SnowflakeOutputSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig, object. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BigquerySecretsConfig, CriblHttpSecretsConfig, Dict[str, object], ElasticsearchSecretsConfig, GoogleCloudStorageOutputSecretsConfig, HttpSecretsConfig, NextGenSiemSecretsConfig, ObjectStorageSecretsConfig, OpensearchSecretsConfig, PagerdutySecretsConfig, PostgresqlSecretsConfig, SentinelSecretsConfig, SnowflakeOutputSecretsConfig, SplunkSecretsConfig, SumologicSecretsConfig, object]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


