# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class OpensearchSettingsConfig(BaseModel):
    """
    OpenSearch Output Settings
    """ # noqa: E501
    auth_mode: Optional[StrictStr] = Field(default=None, description="The authentication mode (basic, aws_role)")
    index: Optional[StrictStr] = Field(default=None, description="The name of the OpenSearch index to use.")
    insecure_skip_verify: Optional[StrictBool] = Field(default=None, description="Whether to skip TLS certificate verification (not recommended for production).")
    region: Optional[StrictStr] = Field(default=None, description="The AWS Region where the OpenSearch domain is located")
    role_arn: Optional[StrictStr] = Field(default=None, description="The AWS IAM Role ARN to assume (used for aws_role auth)")
    url: Optional[StrictStr] = Field(default=None, description="The URL of the OpenSearch instance (must start with https).")
    username: Optional[StrictStr] = Field(default=None, description="The username for authenticating with OpenSearch (used for basic auth).")
    __properties: ClassVar[List[str]] = ["auth_mode", "index", "insecure_skip_verify", "region", "role_arn", "url", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpensearchSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpensearchSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth_mode": obj.get("auth_mode"),
            "index": obj.get("index"),
            "insecure_skip_verify": obj.get("insecure_skip_verify"),
            "region": obj.get("region"),
            "role_arn": obj.get("role_arn"),
            "url": obj.get("url"),
            "username": obj.get("username")
        })
        return _obj


