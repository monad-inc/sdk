# coding: utf-8

"""
    Monad Swagger API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from monad.models.models_component_reference import ModelsComponentReference
from typing import Optional, Set
from typing_extensions import Self

class ModelsSecretWithComponents(BaseModel):
    """
    ModelsSecretWithComponents
    """ # noqa: E501
    created_at: Optional[StrictStr] = Field(default=None, description="When the secret was created")
    description: Optional[StrictStr] = Field(default=None, description="The user set Description of the secret")
    id: Optional[StrictStr] = Field(default=None, description="The ID of the secret")
    inputs: Optional[List[ModelsComponentReference]] = None
    name: Optional[StrictStr] = Field(default=None, description="The user set Name of the secret")
    organization_id: Optional[StrictStr] = Field(default=None, description="The OrganizationID the secret belongs to")
    outputs: Optional[List[ModelsComponentReference]] = None
    updated_at: Optional[StrictStr] = Field(default=None, description="When the secret was updated")
    value: Optional[StrictStr] = Field(default=None, description="The value of the secret. This will never be returned to the client but can be used to set new values when used in a request payload.")
    __properties: ClassVar[List[str]] = ["created_at", "description", "id", "inputs", "name", "organization_id", "outputs", "updated_at", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelsSecretWithComponents from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in inputs (list)
        _items = []
        if self.inputs:
            for _item_inputs in self.inputs:
                if _item_inputs:
                    _items.append(_item_inputs.to_dict())
            _dict['inputs'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in outputs (list)
        _items = []
        if self.outputs:
            for _item_outputs in self.outputs:
                if _item_outputs:
                    _items.append(_item_outputs.to_dict())
            _dict['outputs'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelsSecretWithComponents from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_at": obj.get("created_at"),
            "description": obj.get("description"),
            "id": obj.get("id"),
            "inputs": [ModelsComponentReference.from_dict(_item) for _item in obj["inputs"]] if obj.get("inputs") is not None else None,
            "name": obj.get("name"),
            "organization_id": obj.get("organization_id"),
            "outputs": [ModelsComponentReference.from_dict(_item) for _item in obj["outputs"]] if obj.get("outputs") is not None else None,
            "updated_at": obj.get("updated_at"),
            "value": obj.get("value")
        })
        return _obj


