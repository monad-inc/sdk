# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from monad.models.models_user_role_with_permissions import ModelsUserRoleWithPermissions
from monad.models.routes_user_auth_provider import RoutesUserAuthProvider
from typing import Optional, Set
from typing_extensions import Self

class RoutesUserWithRoles(BaseModel):
    """
    RoutesUserWithRoles
    """ # noqa: E501
    auth_providers: Optional[List[RoutesUserAuthProvider]] = None
    created_at: Optional[StrictStr] = None
    email: Optional[StrictStr] = None
    id: Optional[StrictStr] = None
    organization_roles: Optional[Dict[str, ModelsUserRoleWithPermissions]] = None
    updated_at: Optional[StrictStr] = None
    username: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["auth_providers", "created_at", "email", "id", "organization_roles", "updated_at", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoutesUserWithRoles from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in auth_providers (list)
        _items = []
        if self.auth_providers:
            for _item_auth_providers in self.auth_providers:
                if _item_auth_providers:
                    _items.append(_item_auth_providers.to_dict())
            _dict['auth_providers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each value in organization_roles (dict)
        _field_dict = {}
        if self.organization_roles:
            for _key_organization_roles in self.organization_roles:
                if self.organization_roles[_key_organization_roles]:
                    _field_dict[_key_organization_roles] = self.organization_roles[_key_organization_roles].to_dict()
            _dict['organization_roles'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoutesUserWithRoles from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth_providers": [RoutesUserAuthProvider.from_dict(_item) for _item in obj["auth_providers"]] if obj.get("auth_providers") is not None else None,
            "created_at": obj.get("created_at"),
            "email": obj.get("email"),
            "id": obj.get("id"),
            "organization_roles": dict(
                (_k, ModelsUserRoleWithPermissions.from_dict(_v))
                for _k, _v in obj["organization_roles"].items()
            )
            if obj.get("organization_roles") is not None
            else None,
            "updated_at": obj.get("updated_at"),
            "username": obj.get("username")
        })
        return _obj


