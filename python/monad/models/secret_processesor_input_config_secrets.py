# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, Dict, List, Optional
from monad.models.activity_logs_secrets_config import ActivityLogsSecretsConfig
from monad.models.actors_info_secrets_config import ActorsInfoSecretsConfig
from monad.models.admin_activity_secrets_config import AdminActivitySecretsConfig
from monad.models.admin_logs_secrets_config import AdminLogsSecretsConfig
from monad.models.audit_logs_secrets_config import AuditLogsSecretsConfig
from monad.models.auth_logs_secrets_config import AuthLogsSecretsConfig
from monad.models.azure_activity_logs_secrets_config import AzureActivityLogsSecretsConfig
from monad.models.azure_blob_storage_secrets_config import AzureBlobStorageSecretsConfig
from monad.models.bigquery_input_secrets_config import BigqueryInputSecretsConfig
from monad.models.box_events_secrets_config import BoxEventsSecretsConfig
from monad.models.box_users_secrets_config import BoxUsersSecretsConfig
from monad.models.cloud_asset_inventory_secrets_config import CloudAssetInventorySecretsConfig
from monad.models.cloud_configuration_findings_secrets_config import CloudConfigurationFindingsSecretsConfig
from monad.models.cloud_logs_secrets_config import CloudLogsSecretsConfig
from monad.models.cloud_resource_inventory_secrets_config import CloudResourceInventorySecretsConfig
from monad.models.crowdstrike_fdr_secrets_config import CrowdstrikeFdrSecretsConfig
from monad.models.defender_for_endpoint_alerts_secrets_config import DefenderForEndpointAlertsSecretsConfig
from monad.models.detect_summaries_secrets_config import DetectSummariesSecretsConfig
from monad.models.device_activity_secrets_config import DeviceActivitySecretsConfig
from monad.models.device_details_secrets_config import DeviceDetailsSecretsConfig
from monad.models.devices_secrets_config import DevicesSecretsConfig
from monad.models.drive_activity_secrets_config import DriveActivitySecretsConfig
from monad.models.entra_id_secrets_config import EntraIdSecretsConfig
from monad.models.event_secrets_config import EventSecretsConfig
from monad.models.events_logs_secrets_config import EventsLogsSecretsConfig
from monad.models.full_scans_secrets_config import FullScansSecretsConfig
from monad.models.gitlab_issues_secrets_config import GitlabIssuesSecretsConfig
from monad.models.google_cloud_storage_secrets_config import GoogleCloudStorageSecretsConfig
from monad.models.issues_secrets_config import IssuesSecretsConfig
from monad.models.log_analytics_query_secrets_config import LogAnalyticsQuerySecretsConfig
from monad.models.login_activity_secrets_config import LoginActivitySecretsConfig
from monad.models.login_sessions_secrets_config import LoginSessionsSecretsConfig
from monad.models.oauth_activity_secrets_config import OauthActivitySecretsConfig
from monad.models.object_storage_input_secrets_config import ObjectStorageInputSecretsConfig
from monad.models.onelogin_events_secrets_config import OneloginEventsSecretsConfig
from monad.models.roles_info_secrets_config import RolesInfoSecretsConfig
from monad.models.semgrep_code_findings_secrets_config import SemgrepCodeFindingsSecretsConfig
from monad.models.semgrep_deployments_secrets_config import SemgrepDeploymentsSecretsConfig
from monad.models.semgrep_project_details_secrets_config import SemgrepProjectDetailsSecretsConfig
from monad.models.semgrep_projects_secrets_config import SemgrepProjectsSecretsConfig
from monad.models.semgrep_supply_chain_findings_secrets_config import SemgrepSupplyChainFindingsSecretsConfig
from monad.models.slack_users_secrets_config import SlackUsersSecretsConfig
from monad.models.slackgroups_secrets_config import SlackgroupsSecretsConfig
from monad.models.snowflake_input_secrets_config import SnowflakeInputSecretsConfig
from monad.models.snyk_issues_secrets_config import SnykIssuesSecretsConfig
from monad.models.snyk_organizations_secrets_config import SnykOrganizationsSecretsConfig
from monad.models.snyk_projects_secrets_config import SnykProjectsSecretsConfig
from monad.models.snyk_targets_secrets_config import SnykTargetsSecretsConfig
from monad.models.tailscale_users_secrets_config import TailscaleUsersSecretsConfig
from monad.models.tenable_assets_cron_secrets_config import TenableAssetsCronSecretsConfig
from monad.models.tenable_assets_secrets_config import TenableAssetsSecretsConfig
from monad.models.tenable_vulnerabilities_cron_secrets_config import TenableVulnerabilitiesCronSecretsConfig
from monad.models.tenable_vulnerabilities_secrets_config import TenableVulnerabilitiesSecretsConfig
from monad.models.users_info_secrets_config import UsersInfoSecretsConfig
from monad.models.users_secrets_config import UsersSecretsConfig
from monad.models.vulnerabilities_cron_secrets_config import VulnerabilitiesCronSecretsConfig
from monad.models.vulnerabilities_secrets_config import VulnerabilitiesSecretsConfig
from monad.models.vulnerability_findings_secrets_config import VulnerabilityFindingsSecretsConfig
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

SECRETPROCESSESORINPUTCONFIGSECRETS_ONE_OF_SCHEMAS = ["ActivityLogsSecretsConfig", "ActorsInfoSecretsConfig", "AdminActivitySecretsConfig", "AdminLogsSecretsConfig", "AuditLogsSecretsConfig", "AuthLogsSecretsConfig", "AzureActivityLogsSecretsConfig", "AzureBlobStorageSecretsConfig", "BigqueryInputSecretsConfig", "BoxEventsSecretsConfig", "BoxUsersSecretsConfig", "CloudAssetInventorySecretsConfig", "CloudConfigurationFindingsSecretsConfig", "CloudLogsSecretsConfig", "CloudResourceInventorySecretsConfig", "CrowdstrikeFdrSecretsConfig", "DefenderForEndpointAlertsSecretsConfig", "DetectSummariesSecretsConfig", "DeviceActivitySecretsConfig", "DeviceDetailsSecretsConfig", "DevicesSecretsConfig", "Dict[str, object]", "DriveActivitySecretsConfig", "EntraIdSecretsConfig", "EventSecretsConfig", "EventsLogsSecretsConfig", "FullScansSecretsConfig", "GitlabIssuesSecretsConfig", "GoogleCloudStorageSecretsConfig", "IssuesSecretsConfig", "LogAnalyticsQuerySecretsConfig", "LoginActivitySecretsConfig", "LoginSessionsSecretsConfig", "OauthActivitySecretsConfig", "ObjectStorageInputSecretsConfig", "OneloginEventsSecretsConfig", "RolesInfoSecretsConfig", "SemgrepCodeFindingsSecretsConfig", "SemgrepDeploymentsSecretsConfig", "SemgrepProjectDetailsSecretsConfig", "SemgrepProjectsSecretsConfig", "SemgrepSupplyChainFindingsSecretsConfig", "SlackUsersSecretsConfig", "SlackgroupsSecretsConfig", "SnowflakeInputSecretsConfig", "SnykIssuesSecretsConfig", "SnykOrganizationsSecretsConfig", "SnykProjectsSecretsConfig", "SnykTargetsSecretsConfig", "TailscaleUsersSecretsConfig", "TenableAssetsCronSecretsConfig", "TenableAssetsSecretsConfig", "TenableVulnerabilitiesCronSecretsConfig", "TenableVulnerabilitiesSecretsConfig", "UsersInfoSecretsConfig", "UsersSecretsConfig", "VulnerabilitiesCronSecretsConfig", "VulnerabilitiesSecretsConfig", "VulnerabilityFindingsSecretsConfig", "object"]

class SecretProcessesorInputConfigSecrets(BaseModel):
    """
    SecretProcessesorInputConfigSecrets
    """
    # data type: ActivityLogsSecretsConfig
    oneof_schema_1_validator: Optional[ActivityLogsSecretsConfig] = None
    # data type: ActorsInfoSecretsConfig
    oneof_schema_2_validator: Optional[ActorsInfoSecretsConfig] = None
    # data type: AdminActivitySecretsConfig
    oneof_schema_3_validator: Optional[AdminActivitySecretsConfig] = None
    # data type: AdminLogsSecretsConfig
    oneof_schema_4_validator: Optional[AdminLogsSecretsConfig] = None
    # data type: AuditLogsSecretsConfig
    oneof_schema_5_validator: Optional[AuditLogsSecretsConfig] = None
    # data type: AuthLogsSecretsConfig
    oneof_schema_6_validator: Optional[AuthLogsSecretsConfig] = None
    # data type: object
    oneof_schema_7_validator: Optional[Dict[str, Any]] = Field(default=None, description="AWS S3 secrets")
    # data type: object
    oneof_schema_8_validator: Optional[Dict[str, Any]] = Field(default=None, description="AWS SQS secrets")
    # data type: AzureActivityLogsSecretsConfig
    oneof_schema_9_validator: Optional[AzureActivityLogsSecretsConfig] = None
    # data type: AzureBlobStorageSecretsConfig
    oneof_schema_10_validator: Optional[AzureBlobStorageSecretsConfig] = None
    # data type: BigqueryInputSecretsConfig
    oneof_schema_11_validator: Optional[BigqueryInputSecretsConfig] = None
    # data type: BoxEventsSecretsConfig
    oneof_schema_12_validator: Optional[BoxEventsSecretsConfig] = None
    # data type: BoxUsersSecretsConfig
    oneof_schema_13_validator: Optional[BoxUsersSecretsConfig] = None
    # data type: object
    oneof_schema_14_validator: Optional[Dict[str, Any]] = Field(default=None, description="AWS Certificate Manager secrets")
    # data type: object
    oneof_schema_15_validator: Optional[Dict[str, Any]] = Field(default=None, description="CISA KEV secrets")
    # data type: CloudAssetInventorySecretsConfig
    oneof_schema_16_validator: Optional[CloudAssetInventorySecretsConfig] = None
    # data type: CloudConfigurationFindingsSecretsConfig
    oneof_schema_17_validator: Optional[CloudConfigurationFindingsSecretsConfig] = None
    # data type: CloudLogsSecretsConfig
    oneof_schema_18_validator: Optional[CloudLogsSecretsConfig] = None
    # data type: CloudResourceInventorySecretsConfig
    oneof_schema_19_validator: Optional[CloudResourceInventorySecretsConfig] = None
    # data type: object
    oneof_schema_20_validator: Optional[Dict[str, Any]] = Field(default=None, description="AWS Cloudtrail secrets")
    # data type: CrowdstrikeFdrSecretsConfig
    oneof_schema_21_validator: Optional[CrowdstrikeFdrSecretsConfig] = None
    # data type: DefenderForEndpointAlertsSecretsConfig
    oneof_schema_22_validator: Optional[DefenderForEndpointAlertsSecretsConfig] = None
    # data type: object
    oneof_schema_23_validator: Optional[Dict[str, Any]] = Field(default=None, description="Demo secrets")
    # data type: object
    oneof_schema_24_validator: Optional[Dict[str, Any]] = Field(default=None, description="Demo Custom secrets")
    # data type: DetectSummariesSecretsConfig
    oneof_schema_25_validator: Optional[DetectSummariesSecretsConfig] = None
    # data type: DeviceActivitySecretsConfig
    oneof_schema_26_validator: Optional[DeviceActivitySecretsConfig] = None
    # data type: DeviceDetailsSecretsConfig
    oneof_schema_27_validator: Optional[DeviceDetailsSecretsConfig] = None
    # data type: DevicesSecretsConfig
    oneof_schema_28_validator: Optional[DevicesSecretsConfig] = None
    # data type: DriveActivitySecretsConfig
    oneof_schema_29_validator: Optional[DriveActivitySecretsConfig] = None
    # data type: EntraIdSecretsConfig
    oneof_schema_30_validator: Optional[EntraIdSecretsConfig] = None
    # data type: EventSecretsConfig
    oneof_schema_31_validator: Optional[EventSecretsConfig] = None
    # data type: EventsLogsSecretsConfig
    oneof_schema_32_validator: Optional[EventsLogsSecretsConfig] = None
    # data type: FullScansSecretsConfig
    oneof_schema_33_validator: Optional[FullScansSecretsConfig] = None
    # data type: object
    oneof_schema_34_validator: Optional[Dict[str, Any]] = Field(default=None, description="Github Advisory Database secrets")
    # data type: GitlabIssuesSecretsConfig
    oneof_schema_35_validator: Optional[GitlabIssuesSecretsConfig] = None
    # data type: GoogleCloudStorageSecretsConfig
    oneof_schema_36_validator: Optional[GoogleCloudStorageSecretsConfig] = None
    # data type: IssuesSecretsConfig
    oneof_schema_37_validator: Optional[IssuesSecretsConfig] = None
    # data type: LogAnalyticsQuerySecretsConfig
    oneof_schema_38_validator: Optional[LogAnalyticsQuerySecretsConfig] = None
    # data type: LoginActivitySecretsConfig
    oneof_schema_39_validator: Optional[LoginActivitySecretsConfig] = None
    # data type: LoginSessionsSecretsConfig
    oneof_schema_40_validator: Optional[LoginSessionsSecretsConfig] = None
    # data type: Dict[str, object]
    oneof_schema_41_validator: Optional[Dict[str, Any]] = None
    # data type: object
    oneof_schema_42_validator: Optional[Dict[str, Any]] = Field(default=None, description="Monad HTTP secrets")
    # data type: object
    oneof_schema_43_validator: Optional[Dict[str, Any]] = Field(default=None, description="Monad Log secrets")
    # data type: OauthActivitySecretsConfig
    oneof_schema_44_validator: Optional[OauthActivitySecretsConfig] = None
    # data type: ObjectStorageInputSecretsConfig
    oneof_schema_45_validator: Optional[ObjectStorageInputSecretsConfig] = None
    # data type: OneloginEventsSecretsConfig
    oneof_schema_46_validator: Optional[OneloginEventsSecretsConfig] = None
    # data type: RolesInfoSecretsConfig
    oneof_schema_47_validator: Optional[RolesInfoSecretsConfig] = None
    # data type: object
    oneof_schema_48_validator: Optional[Dict[str, Any]] = None
    # data type: SemgrepCodeFindingsSecretsConfig
    oneof_schema_49_validator: Optional[SemgrepCodeFindingsSecretsConfig] = None
    # data type: SemgrepDeploymentsSecretsConfig
    oneof_schema_50_validator: Optional[SemgrepDeploymentsSecretsConfig] = None
    # data type: SemgrepProjectDetailsSecretsConfig
    oneof_schema_51_validator: Optional[SemgrepProjectDetailsSecretsConfig] = None
    # data type: SemgrepProjectsSecretsConfig
    oneof_schema_52_validator: Optional[SemgrepProjectsSecretsConfig] = None
    # data type: SemgrepSupplyChainFindingsSecretsConfig
    oneof_schema_53_validator: Optional[SemgrepSupplyChainFindingsSecretsConfig] = None
    # data type: SlackUsersSecretsConfig
    oneof_schema_54_validator: Optional[SlackUsersSecretsConfig] = None
    # data type: SlackgroupsSecretsConfig
    oneof_schema_55_validator: Optional[SlackgroupsSecretsConfig] = None
    # data type: SnowflakeInputSecretsConfig
    oneof_schema_56_validator: Optional[SnowflakeInputSecretsConfig] = None
    # data type: SnykIssuesSecretsConfig
    oneof_schema_57_validator: Optional[SnykIssuesSecretsConfig] = None
    # data type: SnykOrganizationsSecretsConfig
    oneof_schema_58_validator: Optional[SnykOrganizationsSecretsConfig] = None
    # data type: SnykProjectsSecretsConfig
    oneof_schema_59_validator: Optional[SnykProjectsSecretsConfig] = None
    # data type: SnykTargetsSecretsConfig
    oneof_schema_60_validator: Optional[SnykTargetsSecretsConfig] = None
    # data type: TailscaleUsersSecretsConfig
    oneof_schema_61_validator: Optional[TailscaleUsersSecretsConfig] = None
    # data type: TenableAssetsSecretsConfig
    oneof_schema_62_validator: Optional[TenableAssetsSecretsConfig] = None
    # data type: TenableAssetsCronSecretsConfig
    oneof_schema_63_validator: Optional[TenableAssetsCronSecretsConfig] = None
    # data type: TenableVulnerabilitiesSecretsConfig
    oneof_schema_64_validator: Optional[TenableVulnerabilitiesSecretsConfig] = None
    # data type: TenableVulnerabilitiesCronSecretsConfig
    oneof_schema_65_validator: Optional[TenableVulnerabilitiesCronSecretsConfig] = None
    # data type: UsersSecretsConfig
    oneof_schema_66_validator: Optional[UsersSecretsConfig] = None
    # data type: UsersInfoSecretsConfig
    oneof_schema_67_validator: Optional[UsersInfoSecretsConfig] = None
    # data type: VulnerabilitiesSecretsConfig
    oneof_schema_68_validator: Optional[VulnerabilitiesSecretsConfig] = None
    # data type: VulnerabilitiesCronSecretsConfig
    oneof_schema_69_validator: Optional[VulnerabilitiesCronSecretsConfig] = None
    # data type: VulnerabilityFindingsSecretsConfig
    oneof_schema_70_validator: Optional[VulnerabilityFindingsSecretsConfig] = None
    actual_instance: Optional[Union[ActivityLogsSecretsConfig, ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, AzureBlobStorageSecretsConfig, BigqueryInputSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, CrowdstrikeFdrSecretsConfig, DefenderForEndpointAlertsSecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DevicesSecretsConfig, Dict[str, object], DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, FullScansSecretsConfig, GitlabIssuesSecretsConfig, GoogleCloudStorageSecretsConfig, IssuesSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, OauthActivitySecretsConfig, ObjectStorageInputSecretsConfig, OneloginEventsSecretsConfig, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnowflakeInputSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TailscaleUsersSecretsConfig, TenableAssetsCronSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesCronSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesCronSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig, object]] = None
    one_of_schemas: Set[str] = { "ActivityLogsSecretsConfig", "ActorsInfoSecretsConfig", "AdminActivitySecretsConfig", "AdminLogsSecretsConfig", "AuditLogsSecretsConfig", "AuthLogsSecretsConfig", "AzureActivityLogsSecretsConfig", "AzureBlobStorageSecretsConfig", "BigqueryInputSecretsConfig", "BoxEventsSecretsConfig", "BoxUsersSecretsConfig", "CloudAssetInventorySecretsConfig", "CloudConfigurationFindingsSecretsConfig", "CloudLogsSecretsConfig", "CloudResourceInventorySecretsConfig", "CrowdstrikeFdrSecretsConfig", "DefenderForEndpointAlertsSecretsConfig", "DetectSummariesSecretsConfig", "DeviceActivitySecretsConfig", "DeviceDetailsSecretsConfig", "DevicesSecretsConfig", "Dict[str, object]", "DriveActivitySecretsConfig", "EntraIdSecretsConfig", "EventSecretsConfig", "EventsLogsSecretsConfig", "FullScansSecretsConfig", "GitlabIssuesSecretsConfig", "GoogleCloudStorageSecretsConfig", "IssuesSecretsConfig", "LogAnalyticsQuerySecretsConfig", "LoginActivitySecretsConfig", "LoginSessionsSecretsConfig", "OauthActivitySecretsConfig", "ObjectStorageInputSecretsConfig", "OneloginEventsSecretsConfig", "RolesInfoSecretsConfig", "SemgrepCodeFindingsSecretsConfig", "SemgrepDeploymentsSecretsConfig", "SemgrepProjectDetailsSecretsConfig", "SemgrepProjectsSecretsConfig", "SemgrepSupplyChainFindingsSecretsConfig", "SlackUsersSecretsConfig", "SlackgroupsSecretsConfig", "SnowflakeInputSecretsConfig", "SnykIssuesSecretsConfig", "SnykOrganizationsSecretsConfig", "SnykProjectsSecretsConfig", "SnykTargetsSecretsConfig", "TailscaleUsersSecretsConfig", "TenableAssetsCronSecretsConfig", "TenableAssetsSecretsConfig", "TenableVulnerabilitiesCronSecretsConfig", "TenableVulnerabilitiesSecretsConfig", "UsersInfoSecretsConfig", "UsersSecretsConfig", "VulnerabilitiesCronSecretsConfig", "VulnerabilitiesSecretsConfig", "VulnerabilityFindingsSecretsConfig", "object" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = SecretProcessesorInputConfigSecrets.model_construct()
        error_messages = []
        match = 0
        # validate data type: ActivityLogsSecretsConfig
        if not isinstance(v, ActivityLogsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ActivityLogsSecretsConfig`")
        else:
            match += 1
        # validate data type: ActorsInfoSecretsConfig
        if not isinstance(v, ActorsInfoSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ActorsInfoSecretsConfig`")
        else:
            match += 1
        # validate data type: AdminActivitySecretsConfig
        if not isinstance(v, AdminActivitySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdminActivitySecretsConfig`")
        else:
            match += 1
        # validate data type: AdminLogsSecretsConfig
        if not isinstance(v, AdminLogsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AdminLogsSecretsConfig`")
        else:
            match += 1
        # validate data type: AuditLogsSecretsConfig
        if not isinstance(v, AuditLogsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AuditLogsSecretsConfig`")
        else:
            match += 1
        # validate data type: AuthLogsSecretsConfig
        if not isinstance(v, AuthLogsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AuthLogsSecretsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_7_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: object
        try:
            instance.oneof_schema_8_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: AzureActivityLogsSecretsConfig
        if not isinstance(v, AzureActivityLogsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AzureActivityLogsSecretsConfig`")
        else:
            match += 1
        # validate data type: AzureBlobStorageSecretsConfig
        if not isinstance(v, AzureBlobStorageSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AzureBlobStorageSecretsConfig`")
        else:
            match += 1
        # validate data type: BigqueryInputSecretsConfig
        if not isinstance(v, BigqueryInputSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BigqueryInputSecretsConfig`")
        else:
            match += 1
        # validate data type: BoxEventsSecretsConfig
        if not isinstance(v, BoxEventsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BoxEventsSecretsConfig`")
        else:
            match += 1
        # validate data type: BoxUsersSecretsConfig
        if not isinstance(v, BoxUsersSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BoxUsersSecretsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_14_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: object
        try:
            instance.oneof_schema_15_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: CloudAssetInventorySecretsConfig
        if not isinstance(v, CloudAssetInventorySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudAssetInventorySecretsConfig`")
        else:
            match += 1
        # validate data type: CloudConfigurationFindingsSecretsConfig
        if not isinstance(v, CloudConfigurationFindingsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudConfigurationFindingsSecretsConfig`")
        else:
            match += 1
        # validate data type: CloudLogsSecretsConfig
        if not isinstance(v, CloudLogsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudLogsSecretsConfig`")
        else:
            match += 1
        # validate data type: CloudResourceInventorySecretsConfig
        if not isinstance(v, CloudResourceInventorySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CloudResourceInventorySecretsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_20_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: CrowdstrikeFdrSecretsConfig
        if not isinstance(v, CrowdstrikeFdrSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CrowdstrikeFdrSecretsConfig`")
        else:
            match += 1
        # validate data type: DefenderForEndpointAlertsSecretsConfig
        if not isinstance(v, DefenderForEndpointAlertsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DefenderForEndpointAlertsSecretsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_23_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: object
        try:
            instance.oneof_schema_24_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: DetectSummariesSecretsConfig
        if not isinstance(v, DetectSummariesSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DetectSummariesSecretsConfig`")
        else:
            match += 1
        # validate data type: DeviceActivitySecretsConfig
        if not isinstance(v, DeviceActivitySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeviceActivitySecretsConfig`")
        else:
            match += 1
        # validate data type: DeviceDetailsSecretsConfig
        if not isinstance(v, DeviceDetailsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DeviceDetailsSecretsConfig`")
        else:
            match += 1
        # validate data type: DevicesSecretsConfig
        if not isinstance(v, DevicesSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DevicesSecretsConfig`")
        else:
            match += 1
        # validate data type: DriveActivitySecretsConfig
        if not isinstance(v, DriveActivitySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DriveActivitySecretsConfig`")
        else:
            match += 1
        # validate data type: EntraIdSecretsConfig
        if not isinstance(v, EntraIdSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EntraIdSecretsConfig`")
        else:
            match += 1
        # validate data type: EventSecretsConfig
        if not isinstance(v, EventSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventSecretsConfig`")
        else:
            match += 1
        # validate data type: EventsLogsSecretsConfig
        if not isinstance(v, EventsLogsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `EventsLogsSecretsConfig`")
        else:
            match += 1
        # validate data type: FullScansSecretsConfig
        if not isinstance(v, FullScansSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `FullScansSecretsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_34_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: GitlabIssuesSecretsConfig
        if not isinstance(v, GitlabIssuesSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GitlabIssuesSecretsConfig`")
        else:
            match += 1
        # validate data type: GoogleCloudStorageSecretsConfig
        if not isinstance(v, GoogleCloudStorageSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GoogleCloudStorageSecretsConfig`")
        else:
            match += 1
        # validate data type: IssuesSecretsConfig
        if not isinstance(v, IssuesSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `IssuesSecretsConfig`")
        else:
            match += 1
        # validate data type: LogAnalyticsQuerySecretsConfig
        if not isinstance(v, LogAnalyticsQuerySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LogAnalyticsQuerySecretsConfig`")
        else:
            match += 1
        # validate data type: LoginActivitySecretsConfig
        if not isinstance(v, LoginActivitySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LoginActivitySecretsConfig`")
        else:
            match += 1
        # validate data type: LoginSessionsSecretsConfig
        if not isinstance(v, LoginSessionsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `LoginSessionsSecretsConfig`")
        else:
            match += 1
        # validate data type: Dict[str, object]
        try:
            instance.oneof_schema_41_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: object
        try:
            instance.oneof_schema_42_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: object
        try:
            instance.oneof_schema_43_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: OauthActivitySecretsConfig
        if not isinstance(v, OauthActivitySecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OauthActivitySecretsConfig`")
        else:
            match += 1
        # validate data type: ObjectStorageInputSecretsConfig
        if not isinstance(v, ObjectStorageInputSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ObjectStorageInputSecretsConfig`")
        else:
            match += 1
        # validate data type: OneloginEventsSecretsConfig
        if not isinstance(v, OneloginEventsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OneloginEventsSecretsConfig`")
        else:
            match += 1
        # validate data type: RolesInfoSecretsConfig
        if not isinstance(v, RolesInfoSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RolesInfoSecretsConfig`")
        else:
            match += 1
        # validate data type: object
        try:
            instance.oneof_schema_48_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: SemgrepCodeFindingsSecretsConfig
        if not isinstance(v, SemgrepCodeFindingsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SemgrepCodeFindingsSecretsConfig`")
        else:
            match += 1
        # validate data type: SemgrepDeploymentsSecretsConfig
        if not isinstance(v, SemgrepDeploymentsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SemgrepDeploymentsSecretsConfig`")
        else:
            match += 1
        # validate data type: SemgrepProjectDetailsSecretsConfig
        if not isinstance(v, SemgrepProjectDetailsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SemgrepProjectDetailsSecretsConfig`")
        else:
            match += 1
        # validate data type: SemgrepProjectsSecretsConfig
        if not isinstance(v, SemgrepProjectsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SemgrepProjectsSecretsConfig`")
        else:
            match += 1
        # validate data type: SemgrepSupplyChainFindingsSecretsConfig
        if not isinstance(v, SemgrepSupplyChainFindingsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SemgrepSupplyChainFindingsSecretsConfig`")
        else:
            match += 1
        # validate data type: SlackUsersSecretsConfig
        if not isinstance(v, SlackUsersSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SlackUsersSecretsConfig`")
        else:
            match += 1
        # validate data type: SlackgroupsSecretsConfig
        if not isinstance(v, SlackgroupsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SlackgroupsSecretsConfig`")
        else:
            match += 1
        # validate data type: SnowflakeInputSecretsConfig
        if not isinstance(v, SnowflakeInputSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnowflakeInputSecretsConfig`")
        else:
            match += 1
        # validate data type: SnykIssuesSecretsConfig
        if not isinstance(v, SnykIssuesSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnykIssuesSecretsConfig`")
        else:
            match += 1
        # validate data type: SnykOrganizationsSecretsConfig
        if not isinstance(v, SnykOrganizationsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnykOrganizationsSecretsConfig`")
        else:
            match += 1
        # validate data type: SnykProjectsSecretsConfig
        if not isinstance(v, SnykProjectsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnykProjectsSecretsConfig`")
        else:
            match += 1
        # validate data type: SnykTargetsSecretsConfig
        if not isinstance(v, SnykTargetsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnykTargetsSecretsConfig`")
        else:
            match += 1
        # validate data type: TailscaleUsersSecretsConfig
        if not isinstance(v, TailscaleUsersSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TailscaleUsersSecretsConfig`")
        else:
            match += 1
        # validate data type: TenableAssetsSecretsConfig
        if not isinstance(v, TenableAssetsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TenableAssetsSecretsConfig`")
        else:
            match += 1
        # validate data type: TenableAssetsCronSecretsConfig
        if not isinstance(v, TenableAssetsCronSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TenableAssetsCronSecretsConfig`")
        else:
            match += 1
        # validate data type: TenableVulnerabilitiesSecretsConfig
        if not isinstance(v, TenableVulnerabilitiesSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TenableVulnerabilitiesSecretsConfig`")
        else:
            match += 1
        # validate data type: TenableVulnerabilitiesCronSecretsConfig
        if not isinstance(v, TenableVulnerabilitiesCronSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `TenableVulnerabilitiesCronSecretsConfig`")
        else:
            match += 1
        # validate data type: UsersSecretsConfig
        if not isinstance(v, UsersSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsersSecretsConfig`")
        else:
            match += 1
        # validate data type: UsersInfoSecretsConfig
        if not isinstance(v, UsersInfoSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UsersInfoSecretsConfig`")
        else:
            match += 1
        # validate data type: VulnerabilitiesSecretsConfig
        if not isinstance(v, VulnerabilitiesSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnerabilitiesSecretsConfig`")
        else:
            match += 1
        # validate data type: VulnerabilitiesCronSecretsConfig
        if not isinstance(v, VulnerabilitiesCronSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnerabilitiesCronSecretsConfig`")
        else:
            match += 1
        # validate data type: VulnerabilityFindingsSecretsConfig
        if not isinstance(v, VulnerabilityFindingsSecretsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnerabilityFindingsSecretsConfig`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in SecretProcessesorInputConfigSecrets with oneOf schemas: ActivityLogsSecretsConfig, ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, AzureBlobStorageSecretsConfig, BigqueryInputSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, CrowdstrikeFdrSecretsConfig, DefenderForEndpointAlertsSecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DevicesSecretsConfig, Dict[str, object], DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, FullScansSecretsConfig, GitlabIssuesSecretsConfig, GoogleCloudStorageSecretsConfig, IssuesSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, OauthActivitySecretsConfig, ObjectStorageInputSecretsConfig, OneloginEventsSecretsConfig, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnowflakeInputSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TailscaleUsersSecretsConfig, TenableAssetsCronSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesCronSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesCronSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in SecretProcessesorInputConfigSecrets with oneOf schemas: ActivityLogsSecretsConfig, ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, AzureBlobStorageSecretsConfig, BigqueryInputSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, CrowdstrikeFdrSecretsConfig, DefenderForEndpointAlertsSecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DevicesSecretsConfig, Dict[str, object], DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, FullScansSecretsConfig, GitlabIssuesSecretsConfig, GoogleCloudStorageSecretsConfig, IssuesSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, OauthActivitySecretsConfig, ObjectStorageInputSecretsConfig, OneloginEventsSecretsConfig, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnowflakeInputSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TailscaleUsersSecretsConfig, TenableAssetsCronSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesCronSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesCronSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig, object. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into ActivityLogsSecretsConfig
        try:
            instance.actual_instance = ActivityLogsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ActorsInfoSecretsConfig
        try:
            instance.actual_instance = ActorsInfoSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdminActivitySecretsConfig
        try:
            instance.actual_instance = AdminActivitySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AdminLogsSecretsConfig
        try:
            instance.actual_instance = AdminLogsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AuditLogsSecretsConfig
        try:
            instance.actual_instance = AuditLogsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AuthLogsSecretsConfig
        try:
            instance.actual_instance = AuthLogsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_7_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_7_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_8_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_8_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AzureActivityLogsSecretsConfig
        try:
            instance.actual_instance = AzureActivityLogsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AzureBlobStorageSecretsConfig
        try:
            instance.actual_instance = AzureBlobStorageSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BigqueryInputSecretsConfig
        try:
            instance.actual_instance = BigqueryInputSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BoxEventsSecretsConfig
        try:
            instance.actual_instance = BoxEventsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BoxUsersSecretsConfig
        try:
            instance.actual_instance = BoxUsersSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_14_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_14_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_15_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_15_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CloudAssetInventorySecretsConfig
        try:
            instance.actual_instance = CloudAssetInventorySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CloudConfigurationFindingsSecretsConfig
        try:
            instance.actual_instance = CloudConfigurationFindingsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CloudLogsSecretsConfig
        try:
            instance.actual_instance = CloudLogsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CloudResourceInventorySecretsConfig
        try:
            instance.actual_instance = CloudResourceInventorySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_20_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_20_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CrowdstrikeFdrSecretsConfig
        try:
            instance.actual_instance = CrowdstrikeFdrSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DefenderForEndpointAlertsSecretsConfig
        try:
            instance.actual_instance = DefenderForEndpointAlertsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_23_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_23_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_24_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_24_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DetectSummariesSecretsConfig
        try:
            instance.actual_instance = DetectSummariesSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DeviceActivitySecretsConfig
        try:
            instance.actual_instance = DeviceActivitySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DeviceDetailsSecretsConfig
        try:
            instance.actual_instance = DeviceDetailsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DevicesSecretsConfig
        try:
            instance.actual_instance = DevicesSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DriveActivitySecretsConfig
        try:
            instance.actual_instance = DriveActivitySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EntraIdSecretsConfig
        try:
            instance.actual_instance = EntraIdSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventSecretsConfig
        try:
            instance.actual_instance = EventSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into EventsLogsSecretsConfig
        try:
            instance.actual_instance = EventsLogsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into FullScansSecretsConfig
        try:
            instance.actual_instance = FullScansSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_34_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_34_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GitlabIssuesSecretsConfig
        try:
            instance.actual_instance = GitlabIssuesSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GoogleCloudStorageSecretsConfig
        try:
            instance.actual_instance = GoogleCloudStorageSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into IssuesSecretsConfig
        try:
            instance.actual_instance = IssuesSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LogAnalyticsQuerySecretsConfig
        try:
            instance.actual_instance = LogAnalyticsQuerySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LoginActivitySecretsConfig
        try:
            instance.actual_instance = LoginActivitySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into LoginSessionsSecretsConfig
        try:
            instance.actual_instance = LoginSessionsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Dict[str, object]
        try:
            # validation
            instance.oneof_schema_41_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_41_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_42_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_42_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_43_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_43_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OauthActivitySecretsConfig
        try:
            instance.actual_instance = OauthActivitySecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ObjectStorageInputSecretsConfig
        try:
            instance.actual_instance = ObjectStorageInputSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OneloginEventsSecretsConfig
        try:
            instance.actual_instance = OneloginEventsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RolesInfoSecretsConfig
        try:
            instance.actual_instance = RolesInfoSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into object
        try:
            # validation
            instance.oneof_schema_48_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_48_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SemgrepCodeFindingsSecretsConfig
        try:
            instance.actual_instance = SemgrepCodeFindingsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SemgrepDeploymentsSecretsConfig
        try:
            instance.actual_instance = SemgrepDeploymentsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SemgrepProjectDetailsSecretsConfig
        try:
            instance.actual_instance = SemgrepProjectDetailsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SemgrepProjectsSecretsConfig
        try:
            instance.actual_instance = SemgrepProjectsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SemgrepSupplyChainFindingsSecretsConfig
        try:
            instance.actual_instance = SemgrepSupplyChainFindingsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SlackUsersSecretsConfig
        try:
            instance.actual_instance = SlackUsersSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SlackgroupsSecretsConfig
        try:
            instance.actual_instance = SlackgroupsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnowflakeInputSecretsConfig
        try:
            instance.actual_instance = SnowflakeInputSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnykIssuesSecretsConfig
        try:
            instance.actual_instance = SnykIssuesSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnykOrganizationsSecretsConfig
        try:
            instance.actual_instance = SnykOrganizationsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnykProjectsSecretsConfig
        try:
            instance.actual_instance = SnykProjectsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnykTargetsSecretsConfig
        try:
            instance.actual_instance = SnykTargetsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TailscaleUsersSecretsConfig
        try:
            instance.actual_instance = TailscaleUsersSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TenableAssetsSecretsConfig
        try:
            instance.actual_instance = TenableAssetsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TenableAssetsCronSecretsConfig
        try:
            instance.actual_instance = TenableAssetsCronSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TenableVulnerabilitiesSecretsConfig
        try:
            instance.actual_instance = TenableVulnerabilitiesSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into TenableVulnerabilitiesCronSecretsConfig
        try:
            instance.actual_instance = TenableVulnerabilitiesCronSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsersSecretsConfig
        try:
            instance.actual_instance = UsersSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UsersInfoSecretsConfig
        try:
            instance.actual_instance = UsersInfoSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VulnerabilitiesSecretsConfig
        try:
            instance.actual_instance = VulnerabilitiesSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VulnerabilitiesCronSecretsConfig
        try:
            instance.actual_instance = VulnerabilitiesCronSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VulnerabilityFindingsSecretsConfig
        try:
            instance.actual_instance = VulnerabilityFindingsSecretsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into SecretProcessesorInputConfigSecrets with oneOf schemas: ActivityLogsSecretsConfig, ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, AzureBlobStorageSecretsConfig, BigqueryInputSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, CrowdstrikeFdrSecretsConfig, DefenderForEndpointAlertsSecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DevicesSecretsConfig, Dict[str, object], DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, FullScansSecretsConfig, GitlabIssuesSecretsConfig, GoogleCloudStorageSecretsConfig, IssuesSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, OauthActivitySecretsConfig, ObjectStorageInputSecretsConfig, OneloginEventsSecretsConfig, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnowflakeInputSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TailscaleUsersSecretsConfig, TenableAssetsCronSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesCronSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesCronSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig, object. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into SecretProcessesorInputConfigSecrets with oneOf schemas: ActivityLogsSecretsConfig, ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, AzureBlobStorageSecretsConfig, BigqueryInputSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, CrowdstrikeFdrSecretsConfig, DefenderForEndpointAlertsSecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DevicesSecretsConfig, Dict[str, object], DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, FullScansSecretsConfig, GitlabIssuesSecretsConfig, GoogleCloudStorageSecretsConfig, IssuesSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, OauthActivitySecretsConfig, ObjectStorageInputSecretsConfig, OneloginEventsSecretsConfig, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnowflakeInputSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TailscaleUsersSecretsConfig, TenableAssetsCronSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesCronSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesCronSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig, object. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], ActivityLogsSecretsConfig, ActorsInfoSecretsConfig, AdminActivitySecretsConfig, AdminLogsSecretsConfig, AuditLogsSecretsConfig, AuthLogsSecretsConfig, AzureActivityLogsSecretsConfig, AzureBlobStorageSecretsConfig, BigqueryInputSecretsConfig, BoxEventsSecretsConfig, BoxUsersSecretsConfig, CloudAssetInventorySecretsConfig, CloudConfigurationFindingsSecretsConfig, CloudLogsSecretsConfig, CloudResourceInventorySecretsConfig, CrowdstrikeFdrSecretsConfig, DefenderForEndpointAlertsSecretsConfig, DetectSummariesSecretsConfig, DeviceActivitySecretsConfig, DeviceDetailsSecretsConfig, DevicesSecretsConfig, Dict[str, object], DriveActivitySecretsConfig, EntraIdSecretsConfig, EventSecretsConfig, EventsLogsSecretsConfig, FullScansSecretsConfig, GitlabIssuesSecretsConfig, GoogleCloudStorageSecretsConfig, IssuesSecretsConfig, LogAnalyticsQuerySecretsConfig, LoginActivitySecretsConfig, LoginSessionsSecretsConfig, OauthActivitySecretsConfig, ObjectStorageInputSecretsConfig, OneloginEventsSecretsConfig, RolesInfoSecretsConfig, SemgrepCodeFindingsSecretsConfig, SemgrepDeploymentsSecretsConfig, SemgrepProjectDetailsSecretsConfig, SemgrepProjectsSecretsConfig, SemgrepSupplyChainFindingsSecretsConfig, SlackUsersSecretsConfig, SlackgroupsSecretsConfig, SnowflakeInputSecretsConfig, SnykIssuesSecretsConfig, SnykOrganizationsSecretsConfig, SnykProjectsSecretsConfig, SnykTargetsSecretsConfig, TailscaleUsersSecretsConfig, TenableAssetsCronSecretsConfig, TenableAssetsSecretsConfig, TenableVulnerabilitiesCronSecretsConfig, TenableVulnerabilitiesSecretsConfig, UsersInfoSecretsConfig, UsersSecretsConfig, VulnerabilitiesCronSecretsConfig, VulnerabilitiesSecretsConfig, VulnerabilityFindingsSecretsConfig, object]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


