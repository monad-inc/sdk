# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class HttpSettingsConfig(BaseModel):
    """
    HTTP Output Settings
    """ # noqa: E501
    endpoint: Optional[StrictStr] = Field(default=None, description="The full URL of the HTTP endpoint to send data to. Must include the scheme (http or https).")
    headers: Optional[Dict[str, StrictStr]] = Field(default=None, description="Non secret headers")
    max_batch_data_size: Optional[StrictInt] = Field(default=None, description="The maximum size in KB for a single batch of data to be sent in one request. This does not effect the single payload structure.")
    max_batch_record_count: Optional[StrictInt] = Field(default=None, description="The maximum number of records to include in a single batch. For single payload structure, this is automatically set to 1. For other payload structures, this determines the maximum number of records sent in a single request.")
    method: Optional[StrictStr] = Field(default=None, description="The HTTP method to use for requests (GET, POST, PUT, PATCH, or DELETE).")
    payload_structure: Optional[StrictStr] = Field(default=None, description="Determines how the payload is structured. 'single' sends each record as a separate request, 'array' sends multiple records as an array, 'wrapped' sends multiple records within a wrapper object.")
    rate_limit: Optional[StrictInt] = Field(default=None, description="Maximum number of requests per second to send to the endpoint.")
    tls_skip_verify: Optional[StrictBool] = Field(default=None, description="Skip TLS verification.")
    wrapper_key: Optional[StrictStr] = Field(default=None, description="The key to use for wrapping the payload when PayloadStructure is set to 'wrapped'.")
    __properties: ClassVar[List[str]] = ["endpoint", "headers", "max_batch_data_size", "max_batch_record_count", "method", "payload_structure", "rate_limit", "tls_skip_verify", "wrapper_key"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of HttpSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of HttpSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endpoint": obj.get("endpoint"),
            "headers": obj.get("headers"),
            "max_batch_data_size": obj.get("max_batch_data_size"),
            "max_batch_record_count": obj.get("max_batch_record_count"),
            "method": obj.get("method"),
            "payload_structure": obj.get("payload_structure"),
            "rate_limit": obj.get("rate_limit"),
            "tls_skip_verify": obj.get("tls_skip_verify"),
            "wrapper_key": obj.get("wrapper_key")
        })
        return _obj


