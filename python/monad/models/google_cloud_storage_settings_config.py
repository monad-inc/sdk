# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class GoogleCloudStorageSettingsConfig(BaseModel):
    """
    Google Cloud Storage settings
    """ # noqa: E501
    bucket_name: Optional[StrictStr] = Field(default=None, description="The name of the Google Cloud Storage bucket to use")
    compression: Optional[StrictStr] = Field(default=None, description="Compression format of the Google Cloud Storage objects.")
    format: Optional[StrictStr] = Field(default=None, description="The format of the files in the bucket, e.g., \"json\", \"csv\", etc.")
    partition_format: Optional[StrictStr] = Field(default=None, description="Specifies the partition format of your bucket. Select the option that matches how your data is currently organized. This ensures that the system can correctly navigate your bucket structure. Options include Hive-compatible format ('year=2024/month=01/day=01') commonly used in data lake setups, and simple date format ('2024/01/01') for basic chronological organization.")
    prefix: Optional[StrictStr] = Field(default=None, description="The prefix to use when reading from the bucket. This is used to filter objects in the bucket.")
    project_id: Optional[StrictStr] = Field(default=None, description="The Google Cloud project ID to use")
    record_location: Optional[StrictStr] = Field(default=None, description="Location of the record in the JSON object. Applies only if the format is JSON.")
    __properties: ClassVar[List[str]] = ["bucket_name", "compression", "format", "partition_format", "prefix", "project_id", "record_location"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleCloudStorageSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleCloudStorageSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucket_name": obj.get("bucket_name"),
            "compression": obj.get("compression"),
            "format": obj.get("format"),
            "partition_format": obj.get("partition_format"),
            "prefix": obj.get("prefix"),
            "project_id": obj.get("project_id"),
            "record_location": obj.get("record_location")
        })
        return _obj


