# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AwsS3SettingsConfig(BaseModel):
    """
    AWS S3 settings
    """ # noqa: E501
    bucket: Optional[StrictStr] = Field(default=None, description="Name of the S3 bucket.")
    compression: Optional[StrictStr] = Field(default=None, description="Compression format of the S3 objects.")
    format: Optional[StrictStr] = Field(default=None, description="File format of the S3 objects.")
    partition_format: Optional[StrictStr] = Field(default=None, description="Role ARN to assume when reading from S3.")
    prefix: Optional[StrictStr] = Field(default=None, description="Prefix of the S3 object keys to read.")
    record_location: Optional[StrictStr] = Field(default=None, description="Specifies the partition format of your S3 bucket. Select the option that matches how your data is currently organized in S3. This ensures that the system can correctly navigate your bucket structure. Options include Hive-compatible format ('year=2024/month=01/day=01') commonly used in data lake setups, and simple date format ('2024/01/01') for basic chronological organization.")
    region: Optional[StrictStr] = Field(default=None, description="AWS Region of your bucket.")
    role_arn: Optional[StrictStr] = Field(default=None, description="Location of the record in the JSON object. This can be ignored if the record is not in JSON format.")
    __properties: ClassVar[List[str]] = ["bucket", "compression", "format", "partition_format", "prefix", "record_location", "region", "role_arn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AwsS3SettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AwsS3SettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bucket": obj.get("bucket"),
            "compression": obj.get("compression"),
            "format": obj.get("format"),
            "partition_format": obj.get("partition_format"),
            "prefix": obj.get("prefix"),
            "record_location": obj.get("record_location"),
            "region": obj.get("region"),
            "role_arn": obj.get("role_arn")
        })
        return _obj


