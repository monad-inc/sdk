# coding: utf-8

"""
    Monad Swagger API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from monad.models.cribl_http_settings_config import CriblHttpSettingsConfig
from monad.models.elasticsearch_settings_config import ElasticsearchSettingsConfig
from monad.models.http_settings_config import HttpSettingsConfig
from monad.models.opensearch_settings_config import OpensearchSettingsConfig
from monad.models.s3_settings_config import S3SettingsConfig
from monad.models.sentinel_settings_config import SentinelSettingsConfig
from monad.models.snowflake_settings_config import SnowflakeSettingsConfig
from monad.models.splunk_settings_config import SplunkSettingsConfig
from monad.models.sumologic_settings_config import SumologicSettingsConfig
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

ROUTESV2OUTPUTCONFIGSETTINGS_ONE_OF_SCHEMAS = ["CriblHttpSettingsConfig", "ElasticsearchSettingsConfig", "HttpSettingsConfig", "OpensearchSettingsConfig", "S3SettingsConfig", "SentinelSettingsConfig", "SnowflakeSettingsConfig", "SplunkSettingsConfig", "SumologicSettingsConfig"]

class RoutesV2OutputConfigSettings(BaseModel):
    """
    RoutesV2OutputConfigSettings
    """
    # data type: CriblHttpSettingsConfig
    oneof_schema_1_validator: Optional[CriblHttpSettingsConfig] = None
    # data type: ElasticsearchSettingsConfig
    oneof_schema_2_validator: Optional[ElasticsearchSettingsConfig] = None
    # data type: HttpSettingsConfig
    oneof_schema_3_validator: Optional[HttpSettingsConfig] = None
    # data type: OpensearchSettingsConfig
    oneof_schema_4_validator: Optional[OpensearchSettingsConfig] = None
    # data type: S3SettingsConfig
    oneof_schema_5_validator: Optional[S3SettingsConfig] = None
    # data type: SentinelSettingsConfig
    oneof_schema_6_validator: Optional[SentinelSettingsConfig] = None
    # data type: SnowflakeSettingsConfig
    oneof_schema_7_validator: Optional[SnowflakeSettingsConfig] = None
    # data type: SplunkSettingsConfig
    oneof_schema_8_validator: Optional[SplunkSettingsConfig] = None
    # data type: SumologicSettingsConfig
    oneof_schema_9_validator: Optional[SumologicSettingsConfig] = None
    actual_instance: Optional[Union[CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig]] = None
    one_of_schemas: Set[str] = { "CriblHttpSettingsConfig", "ElasticsearchSettingsConfig", "HttpSettingsConfig", "OpensearchSettingsConfig", "S3SettingsConfig", "SentinelSettingsConfig", "SnowflakeSettingsConfig", "SplunkSettingsConfig", "SumologicSettingsConfig" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = RoutesV2OutputConfigSettings.model_construct()
        error_messages = []
        match = 0
        # validate data type: CriblHttpSettingsConfig
        if not isinstance(v, CriblHttpSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CriblHttpSettingsConfig`")
        else:
            match += 1
        # validate data type: ElasticsearchSettingsConfig
        if not isinstance(v, ElasticsearchSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ElasticsearchSettingsConfig`")
        else:
            match += 1
        # validate data type: HttpSettingsConfig
        if not isinstance(v, HttpSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `HttpSettingsConfig`")
        else:
            match += 1
        # validate data type: OpensearchSettingsConfig
        if not isinstance(v, OpensearchSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OpensearchSettingsConfig`")
        else:
            match += 1
        # validate data type: S3SettingsConfig
        if not isinstance(v, S3SettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `S3SettingsConfig`")
        else:
            match += 1
        # validate data type: SentinelSettingsConfig
        if not isinstance(v, SentinelSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SentinelSettingsConfig`")
        else:
            match += 1
        # validate data type: SnowflakeSettingsConfig
        if not isinstance(v, SnowflakeSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SnowflakeSettingsConfig`")
        else:
            match += 1
        # validate data type: SplunkSettingsConfig
        if not isinstance(v, SplunkSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SplunkSettingsConfig`")
        else:
            match += 1
        # validate data type: SumologicSettingsConfig
        if not isinstance(v, SumologicSettingsConfig):
            error_messages.append(f"Error! Input type `{type(v)}` is not `SumologicSettingsConfig`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in RoutesV2OutputConfigSettings with oneOf schemas: CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in RoutesV2OutputConfigSettings with oneOf schemas: CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into CriblHttpSettingsConfig
        try:
            instance.actual_instance = CriblHttpSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ElasticsearchSettingsConfig
        try:
            instance.actual_instance = ElasticsearchSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into HttpSettingsConfig
        try:
            instance.actual_instance = HttpSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OpensearchSettingsConfig
        try:
            instance.actual_instance = OpensearchSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into S3SettingsConfig
        try:
            instance.actual_instance = S3SettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SentinelSettingsConfig
        try:
            instance.actual_instance = SentinelSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SnowflakeSettingsConfig
        try:
            instance.actual_instance = SnowflakeSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SplunkSettingsConfig
        try:
            instance.actual_instance = SplunkSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into SumologicSettingsConfig
        try:
            instance.actual_instance = SumologicSettingsConfig.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into RoutesV2OutputConfigSettings with oneOf schemas: CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into RoutesV2OutputConfigSettings with oneOf schemas: CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CriblHttpSettingsConfig, ElasticsearchSettingsConfig, HttpSettingsConfig, OpensearchSettingsConfig, S3SettingsConfig, SentinelSettingsConfig, SnowflakeSettingsConfig, SplunkSettingsConfig, SumologicSettingsConfig]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


