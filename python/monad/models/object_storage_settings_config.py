# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from monad.models.batch_config_batch_config import BatchConfigBatchConfig
from monad.models.formatter_format_config import FormatterFormatConfig
from typing import Optional, Set
from typing_extensions import Self

class ObjectStorageSettingsConfig(BaseModel):
    """
    Object Storage Output Settings
    """ # noqa: E501
    batch_config: Optional[BatchConfigBatchConfig] = None
    bucket: Optional[StrictStr] = Field(default=None, description="The name of the object storage bucket where data will be stored")
    compression: Optional[StrictStr] = Field(default=None, description="The compression method to be applied to the data before storing")
    endpoint: Optional[StrictStr] = Field(default=None, description="The endpoint URL for the object storage service (e.g., https://fly.storage.tigris.dev, https://minio.example.com)")
    format_config: Optional[FormatterFormatConfig] = None
    partition_format: Optional[StrictStr] = Field(default=None, description="Specifies the format for organizing data into partitions within your bucket. This determines the directory structure and naming convention for stored objects, affecting data organization and query efficiency. Examples include Hive-style partitioning (e.g., 'year=2024/month=01/day=01') and simple date-based formats (e.g., '2024/01/01').")
    prefix: Optional[StrictStr] = Field(default=None, description="An optional prefix for object keys to organize data within the bucket")
    region: Optional[StrictStr] = Field(default=None, description="The region for the object storage service (optional for some providers)")
    skip_ssl_verification: Optional[StrictBool] = Field(default=None, description="Whether to skip SSL certificate verification (useful for self-signed certificates or development environments)")
    use_path_style: Optional[StrictBool] = Field(default=None, description="Whether to use path-style URLs (bucket.endpoint.com/object vs endpoint.com/bucket/object). Most S3-compatible services require this to be true.")
    __properties: ClassVar[List[str]] = ["batch_config", "bucket", "compression", "endpoint", "format_config", "partition_format", "prefix", "region", "skip_ssl_verification", "use_path_style"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObjectStorageSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of batch_config
        if self.batch_config:
            _dict['batch_config'] = self.batch_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of format_config
        if self.format_config:
            _dict['format_config'] = self.format_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObjectStorageSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "batch_config": BatchConfigBatchConfig.from_dict(obj["batch_config"]) if obj.get("batch_config") is not None else None,
            "bucket": obj.get("bucket"),
            "compression": obj.get("compression"),
            "endpoint": obj.get("endpoint"),
            "format_config": FormatterFormatConfig.from_dict(obj["format_config"]) if obj.get("format_config") is not None else None,
            "partition_format": obj.get("partition_format"),
            "prefix": obj.get("prefix"),
            "region": obj.get("region"),
            "skip_ssl_verification": obj.get("skip_ssl_verification"),
            "use_path_style": obj.get("use_path_style")
        })
        return _obj


