# coding: utf-8

"""
    Monad Swagger API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class ElasticsearchSettingsConfig(BaseModel):
    """
    Elasticsearch Output Settings
    """ # noqa: E501
    auth_type: Optional[StrictStr] = Field(default=None, description="The method of authentication to use with the Elasticsearch cluster. Choose between 'api_key' or 'password'.")
    cloud_id: Optional[StrictStr] = Field(default=None, description="The Cloud ID for connecting to an Elastic Cloud deployment. Required when connection_type is set to 'cloud_id'.")
    connection_type: Optional[StrictStr] = Field(default=None, description="The type of connection to use with Elasticsearch. Choose between 'cloud_id' for Elastic Cloud or 'url' for direct connection.")
    index: Optional[StrictStr] = Field(default=None, description="The name of the Elasticsearch index to write data to. If the index doesn't exist, it will be created automatically.")
    insecure_skip_verify: Optional[StrictBool] = Field(default=None, description="If set to true, it skips verification of the server's TLS certificate. This is insecure and should only be used for testing purposes.")
    url: Optional[StrictStr] = Field(default=None, description="The URL of the Elasticsearch cluster. Required when connection type is set to 'url'.")
    username: Optional[StrictStr] = Field(default=None, description="Username for authenticating with the Elasticsearch cluster.")
    __properties: ClassVar[List[str]] = ["auth_type", "cloud_id", "connection_type", "index", "insecure_skip_verify", "url", "username"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ElasticsearchSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ElasticsearchSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "auth_type": obj.get("auth_type"),
            "cloud_id": obj.get("cloud_id"),
            "connection_type": obj.get("connection_type"),
            "index": obj.get("index"),
            "insecure_skip_verify": obj.get("insecure_skip_verify"),
            "url": obj.get("url"),
            "username": obj.get("username")
        })
        return _obj


