# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class KvLookupSettingsConfig(BaseModel):
    """
    KVLookup enrichment settings
    """ # noqa: E501
    destination_key: Optional[StrictStr] = Field(default=None, description="DestinationKey the path where the result will be stored in the record. Use '.' for the root object, 'field.subfield' for nested properties, 'array[0]' for array elements, or combined paths like 'users[0].name'.")
    error_on_missing_key: Optional[StrictBool] = Field(default=None, description="ErrorOnMissingKey if true, will throw an error if the key is not found in the KV lookup output")
    join_key: Optional[StrictStr] = Field(default=None, description="JoinKey is the key in the record whose value will be used to join with the KV lookup output")
    kv_lookup_output_id: Optional[StrictStr] = Field(default=None, description="KVLookupOutputID is the ID of the KV lookup output to join with")
    __properties: ClassVar[List[str]] = ["destination_key", "error_on_missing_key", "join_key", "kv_lookup_output_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of KvLookupSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of KvLookupSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "destination_key": obj.get("destination_key"),
            "error_on_missing_key": obj.get("error_on_missing_key"),
            "join_key": obj.get("join_key"),
            "kv_lookup_output_id": obj.get("kv_lookup_output_id")
        })
        return _obj


