# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class AzureBlobStorageSettingsConfig(BaseModel):
    """
    AzureBlobStorageSettingsConfig
    """ # noqa: E501
    account_url: Optional[StrictStr] = Field(default=None, description="Represents your storage account in Azure. Typically of the format https://{account}.blob.core.windows.net.")
    compression: Optional[StrictStr] = Field(default=None, description="The compression format of objects in the Azure container")
    container: Optional[StrictStr] = Field(default=None, description="A container organizes a set of blobs, similar to a directory in a file system.")
    format: Optional[StrictStr] = Field(default=None, description="File format of the Blob storage objects in Azure.")
    partition_format: Optional[StrictStr] = Field(default=None, description="Specifies the format for organizing data into partitions within your Azure container. This determines the directory structure and naming convention for stored objects, affecting data organization and query efficiency. Examples include Hive-style partitioning (e.g., 'year=2024/month=01/day=01') and simple date-based formats (e.g., '2024/01/01').")
    prefix: Optional[StrictStr] = Field(default=None, description="An optional prefix for Azure object keys to organize data within the container")
    record_location: Optional[StrictStr] = Field(default=None, description="Location of the record in the JSON object. Applies only if the format is JSON.")
    __properties: ClassVar[List[str]] = ["account_url", "compression", "container", "format", "partition_format", "prefix", "record_location"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AzureBlobStorageSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AzureBlobStorageSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_url": obj.get("account_url"),
            "compression": obj.get("compression"),
            "container": obj.get("container"),
            "format": obj.get("format"),
            "partition_format": obj.get("partition_format"),
            "prefix": obj.get("prefix"),
            "record_location": obj.get("record_location")
        })
        return _obj


