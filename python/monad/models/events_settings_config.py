# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class EventsSettingsConfig(BaseModel):
    """
    Twilio Events settings
    """ # noqa: E501
    actor_sid: Optional[StrictStr] = Field(default=None, description="Only includes events initiated by this Actor. Useful for auditing actions taken by specific users or API credentials.")
    event_type: Optional[StrictStr] = Field(default=None, description="Only includes events of a specific event type: https://www.twilio.com/docs/usage/monitor-events#event-types")
    replication_start_time: Optional[StrictStr] = Field(default=None, description="Only include events after this time for the initial sync. If not specified, returns all events from the start. Must be a valid ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z'")
    resource_sid: Optional[StrictStr] = Field(default=None, description="Only include events that refer to this resource. Useful for discovering the history of a specific resource.")
    __properties: ClassVar[List[str]] = ["actor_sid", "event_type", "replication_start_time", "resource_sid"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventsSettingsConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventsSettingsConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "actor_sid": obj.get("actor_sid"),
            "event_type": obj.get("event_type"),
            "replication_start_time": obj.get("replication_start_time"),
            "resource_sid": obj.get("resource_sid")
        })
        return _obj


