# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from monad.models.security_lake_settings_config import SecurityLakeSettingsConfig

class TestSecurityLakeSettingsConfig(unittest.TestCase):
    """SecurityLakeSettingsConfig unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecurityLakeSettingsConfig:
        """Test SecurityLakeSettingsConfig
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecurityLakeSettingsConfig`
        """
        model = SecurityLakeSettingsConfig()
        if include_optional:
            return SecurityLakeSettingsConfig(
                batch_config = monad.models.batch_config/batch_config.batch_config.BatchConfig(
                    batch_data_size = 56, 
                    batch_record_count = 56, 
                    publish_rate = 56, ),
                bucket_name = '',
                bucket_url = '',
                key = '',
                parquet_format = monad.models.parquet/parquet_formatter.parquet.ParquetFormatter(
                    schema = '', ),
                role_arn = '',
                source_account_details = monad.models.security_lake/source_account_details.security_lake.SourceAccountDetails(
                    source_account_id = '', 
                    source_region = '', )
            )
        else:
            return SecurityLakeSettingsConfig(
        )
        """

    def testSecurityLakeSettingsConfig(self):
        """Test SecurityLakeSettingsConfig"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
