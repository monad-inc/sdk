# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from monad.models.secret_processesor_output_config_settings import SecretProcessesorOutputConfigSettings

class TestSecretProcessesorOutputConfigSettings(unittest.TestCase):
    """SecretProcessesorOutputConfigSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecretProcessesorOutputConfigSettings:
        """Test SecretProcessesorOutputConfigSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecretProcessesorOutputConfigSettings`
        """
        model = SecretProcessesorOutputConfigSettings()
        if include_optional:
            return SecretProcessesorOutputConfigSettings(
                dataset = '',
                project_id = '',
                table = '',
                ingress_address = '',
                path = '',
                port = '',
                auth_type = '',
                cloud_id = '',
                connection_type = '',
                index = '',
                insecure_skip_verify = True,
                url = '',
                username = '',
                endpoint = '',
                headers = {
                    'key' : ''
                    },
                max_batch_data_size = 56,
                max_batch_record_count = 56,
                method = '',
                payload_structure = '',
                rate_limit = 56,
                tls_skip_verify = True,
                wrapper_key = '',
                auth_mode = '',
                region = '',
                role_arn = '',
                column_names = [
                    ''
                    ],
                database = '',
                host = '',
                user = '',
                batch_config = monad.models.batch_config/batch_config.batch_config.BatchConfig(
                    batch_data_size = 56, 
                    batch_record_count = 56, 
                    publish_rate = 56, ),
                bucket = '',
                compression = '',
                format_config = monad.models.formatter/format_config.formatter.FormatConfig(
                    format = '', 
                    delimited_format = monad.models.delimited/delimiter_formatter.delimited.DelimiterFormatter(
                        delimiter = '', 
                        headers = [
                            ''
                            ], ), 
                    json_format = monad.models.json/json_formatter.json.JsonFormatter(
                        key = '', 
                        type = '', ), 
                    parquet_format = monad.models.parquet/parquet_formatter.parquet.ParquetFormatter(
                        schema = '', ), ),
                partition_format = '',
                prefix = '',
                bucket_name = '',
                bucket_url = '',
                key = '',
                parquet_format = monad.models.parquet/parquet_formatter.parquet.ParquetFormatter(
                    schema = '', ),
                source_account_details = monad.models.security_lake/source_account_details.security_lake.SourceAccountDetails(
                    source_account_id = '', 
                    source_region = '', ),
                rule_id = '',
                stream_name = '',
                account = '',
                role = '',
                var_schema = '',
                stage = '',
                warehouse = '',
                allow_insecure = True,
                to_create = True
            )
        else:
            return SecretProcessesorOutputConfigSettings(
        )
        """

    def testSecretProcessesorOutputConfigSettings(self):
        """Test SecretProcessesorOutputConfigSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
