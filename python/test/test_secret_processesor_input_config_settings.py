# coding: utf-8

"""
    Monad API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from monad.models.secret_processesor_input_config_settings import SecretProcessesorInputConfigSettings

class TestSecretProcessesorInputConfigSettings(unittest.TestCase):
    """SecretProcessesorInputConfigSettings unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> SecretProcessesorInputConfigSettings:
        """Test SecretProcessesorInputConfigSettings
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SecretProcessesorInputConfigSettings`
        """
        model = SecretProcessesorInputConfigSettings()
        if include_optional:
            return SecretProcessesorInputConfigSettings(
                actor_type = '',
                cloud_type = '',
                cron = '',
                sort = '',
                target_industries = '',
                auth_type = '',
                email = '',
                host = '',
                actions = [
                    ''
                    ],
                actor = '',
                country = '',
                created_after = '',
                enterprise = '',
                include = '',
                organization = '',
                repository = '',
                user = '',
                bucket = '',
                compression = '',
                format = '',
                partition_format = '',
                prefix = '',
                record_location = '',
                region = '',
                role_arn = '',
                correlation_id = '',
                resource_group_name = '',
                resource_provider = '',
                resource_uri = '',
                subscription_id = '',
                tenant_id = '',
                dataset = '',
                project = '',
                query = '',
                table = '',
                timestamp_column = '',
                event_type = [
                    ''
                    ],
                filter_term = '',
                asset_types = [
                    ''
                    ],
                resource_names = [
                    ''
                    ],
                endpoint_url = '',
                result = [
                    ''
                    ],
                severity = '',
                status = [
                    ''
                    ],
                enable_proto_payload_parsing = True,
                filter = '',
                cloud_platform = [
                    ''
                    ],
                entity_type = [
                    ''
                    ],
                full_snapshot = True,
                interval = 56,
                aws_queue_url = '',
                aws_region_name = '',
                aws_s3_url = '',
                visibility_timeout = 56,
                category = '',
                rate = 56,
                record_type = '',
                custom_template = '',
                field_option = '',
                organization_id = '',
                workspace_id = '',
                app_name = '',
                cloud = '',
                member_cid = '',
                story_id = '',
                team_id = '',
                tenant_url = '',
                org_slug = '',
                repo = '',
                control_ids = [
                    ''
                    ],
                has_note = '',
                has_remediation = '',
                has_service_ticket = '',
                issue_ids = [
                    ''
                    ],
                issue_types = [
                    'TOXIC_COMBINATION'
                    ],
                project_ids = [
                    ''
                    ],
                related_entity_id = '',
                resolution_reasons = [
                    'CONTROL_CHANGED'
                    ],
                risk_equals_all = [
                    ''
                    ],
                risk_equals_any = [
                    ''
                    ],
                search_query = '',
                security_scan = '',
                severities = [
                    'INFORMATIONAL'
                    ],
                stack_layers = [
                    'APPLICATION_AND_DATA'
                    ],
                tenant_data_center = '',
                log_type = '',
                account = '',
                database = '',
                role = '',
                var_schema = '',
                warehouse = '',
                user_role_option = '',
                user_type_option = '',
                full_sync = True,
                asset_status = [
                    ''
                    ],
                asset_type = '',
                detection_method = [
                    ''
                    ],
                vendor_severity = [
                    ''
                    ]
            )
        else:
            return SecretProcessesorInputConfigSettings(
        )
        """

    def testSecretProcessesorInputConfigSettings(self):
        """Test SecretProcessesorInputConfigSettings"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
