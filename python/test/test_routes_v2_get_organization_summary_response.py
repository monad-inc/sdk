# coding: utf-8

"""
    Monad Swagger API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from monad.models.routes_v2_get_organization_summary_response import RoutesV2GetOrganizationSummaryResponse

class TestRoutesV2GetOrganizationSummaryResponse(unittest.TestCase):
    """RoutesV2GetOrganizationSummaryResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RoutesV2GetOrganizationSummaryResponse:
        """Test RoutesV2GetOrganizationSummaryResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RoutesV2GetOrganizationSummaryResponse`
        """
        model = RoutesV2GetOrganizationSummaryResponse()
        if include_optional:
            return RoutesV2GetOrganizationSummaryResponse(
                organization_id = '',
                pipelines = [
                    monad.models.routes_v2/pipeline_status.routesV2.pipelineStatus(
                        egress = monad.models.models/data_usage.models.DataUsage(
                            bytes = 56, 
                            records = 56, ), 
                        ingress = monad.models.models/data_usage.models.DataUsage(
                            bytes = 56, 
                            records = 56, ), 
                        pipeline_id = '', 
                        pipeline_name = '', 
                        status = '', )
                    ],
                summary = monad.models.routes_v2/organization_overview.routesV2.organizationOverview(
                    disabled = 56, 
                    egress = monad.models.models/data_usage.models.DataUsage(
                        bytes = 56, 
                        records = 56, ), 
                    healthy = 56, 
                    ingress = monad.models.models/data_usage.models.DataUsage(
                        bytes = 56, 
                        records = 56, ), 
                    unhealthy = 56, )
            )
        else:
            return RoutesV2GetOrganizationSummaryResponse(
                organization_id = '',
        )
        """

    def testRoutesV2GetOrganizationSummaryResponse(self):
        """Test RoutesV2GetOrganizationSummaryResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
