# coding: utf-8

"""
    Monad Swagger API

    This is the monad API

    The version of the OpenAPI document: 1.0
    Contact: support@swagger.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from monad.models.models_pipeline_config_v2 import ModelsPipelineConfigV2

class TestModelsPipelineConfigV2(unittest.TestCase):
    """ModelsPipelineConfigV2 unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> ModelsPipelineConfigV2:
        """Test ModelsPipelineConfigV2
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `ModelsPipelineConfigV2`
        """
        model = ModelsPipelineConfigV2()
        if include_optional:
            return ModelsPipelineConfigV2(
                created_at = '',
                description = '',
                edges = [
                    monad.models.models/pipeline_edge.models.PipelineEdge(
                        conditions = monad.models.models/pipeline_edge_conditions.models.PipelineEdgeConditions(
                            operator = '', ), 
                        created_at = '', 
                        description = '', 
                        from_node_instance_id = '', 
                        id = '', 
                        name = '', 
                        organization_id = '', 
                        pipeline_id = '', 
                        to_node_instance_id = '', )
                    ],
                enabled = True,
                id = '',
                name = '',
                nodes = [
                    monad.models.models/pipeline_node.models.PipelineNode(
                        component = monad.models.models/node_component.models.NodeComponent(
                            config = {
                                'key' : null
                                }, 
                            description = '', 
                            id = '', 
                            name = '', 
                            type = '', ), 
                        component_id = '', 
                        component_sub_type = '', 
                        component_type = '', 
                        created_at = '', 
                        enabled = True, 
                        id = '', 
                        organization_id = '', 
                        pipeline_id = '', 
                        slug = '', )
                    ],
                organization_id = '',
                organization_name = '',
                updated_at = ''
            )
        else:
            return ModelsPipelineConfigV2(
                edges = [
                    monad.models.models/pipeline_edge.models.PipelineEdge(
                        conditions = monad.models.models/pipeline_edge_conditions.models.PipelineEdgeConditions(
                            operator = '', ), 
                        created_at = '', 
                        description = '', 
                        from_node_instance_id = '', 
                        id = '', 
                        name = '', 
                        organization_id = '', 
                        pipeline_id = '', 
                        to_node_instance_id = '', )
                    ],
                enabled = True,
                id = '',
                name = '',
                nodes = [
                    monad.models.models/pipeline_node.models.PipelineNode(
                        component = monad.models.models/node_component.models.NodeComponent(
                            config = {
                                'key' : null
                                }, 
                            description = '', 
                            id = '', 
                            name = '', 
                            type = '', ), 
                        component_id = '', 
                        component_sub_type = '', 
                        component_type = '', 
                        created_at = '', 
                        enabled = True, 
                        id = '', 
                        organization_id = '', 
                        pipeline_id = '', 
                        slug = '', )
                    ],
                organization_id = '',
        )
        """

    def testModelsPipelineConfigV2(self):
        """Test ModelsPipelineConfigV2"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
