/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the RoutesUserAuthProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutesUserAuthProvider{}

// RoutesUserAuthProvider struct for RoutesUserAuthProvider
type RoutesUserAuthProvider struct {
	Provider *string `json:"provider,omitempty"`
	ProviderId *string `json:"provider_id,omitempty"`
}

// NewRoutesUserAuthProvider instantiates a new RoutesUserAuthProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutesUserAuthProvider() *RoutesUserAuthProvider {
	this := RoutesUserAuthProvider{}
	return &this
}

// NewRoutesUserAuthProviderWithDefaults instantiates a new RoutesUserAuthProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutesUserAuthProviderWithDefaults() *RoutesUserAuthProvider {
	this := RoutesUserAuthProvider{}
	return &this
}

// GetProvider returns the Provider field value if set, zero value otherwise.
func (o *RoutesUserAuthProvider) GetProvider() string {
	if o == nil || IsNil(o.Provider) {
		var ret string
		return ret
	}
	return *o.Provider
}

// GetProviderOk returns a tuple with the Provider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesUserAuthProvider) GetProviderOk() (*string, bool) {
	if o == nil || IsNil(o.Provider) {
		return nil, false
	}
	return o.Provider, true
}

// HasProvider returns a boolean if a field has been set.
func (o *RoutesUserAuthProvider) HasProvider() bool {
	if o != nil && !IsNil(o.Provider) {
		return true
	}

	return false
}

// SetProvider gets a reference to the given string and assigns it to the Provider field.
func (o *RoutesUserAuthProvider) SetProvider(v string) {
	o.Provider = &v
}

// GetProviderId returns the ProviderId field value if set, zero value otherwise.
func (o *RoutesUserAuthProvider) GetProviderId() string {
	if o == nil || IsNil(o.ProviderId) {
		var ret string
		return ret
	}
	return *o.ProviderId
}

// GetProviderIdOk returns a tuple with the ProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesUserAuthProvider) GetProviderIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProviderId) {
		return nil, false
	}
	return o.ProviderId, true
}

// HasProviderId returns a boolean if a field has been set.
func (o *RoutesUserAuthProvider) HasProviderId() bool {
	if o != nil && !IsNil(o.ProviderId) {
		return true
	}

	return false
}

// SetProviderId gets a reference to the given string and assigns it to the ProviderId field.
func (o *RoutesUserAuthProvider) SetProviderId(v string) {
	o.ProviderId = &v
}

func (o RoutesUserAuthProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutesUserAuthProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Provider) {
		toSerialize["provider"] = o.Provider
	}
	if !IsNil(o.ProviderId) {
		toSerialize["provider_id"] = o.ProviderId
	}
	return toSerialize, nil
}

type NullableRoutesUserAuthProvider struct {
	value *RoutesUserAuthProvider
	isSet bool
}

func (v NullableRoutesUserAuthProvider) Get() *RoutesUserAuthProvider {
	return v.value
}

func (v *NullableRoutesUserAuthProvider) Set(val *RoutesUserAuthProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesUserAuthProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesUserAuthProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesUserAuthProvider(val *RoutesUserAuthProvider) *NullableRoutesUserAuthProvider {
	return &NullableRoutesUserAuthProvider{value: val, isSet: true}
}

func (v NullableRoutesUserAuthProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesUserAuthProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


