/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelsPipelineEdgeCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsPipelineEdgeCondition{}

// ModelsPipelineEdgeCondition struct for ModelsPipelineEdgeCondition
type ModelsPipelineEdgeCondition struct {
	Config map[string]interface{} `json:"config,omitempty"`
	TypeId string `json:"type_id"`
}

type _ModelsPipelineEdgeCondition ModelsPipelineEdgeCondition

// NewModelsPipelineEdgeCondition instantiates a new ModelsPipelineEdgeCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsPipelineEdgeCondition(typeId string) *ModelsPipelineEdgeCondition {
	this := ModelsPipelineEdgeCondition{}
	this.TypeId = typeId
	return &this
}

// NewModelsPipelineEdgeConditionWithDefaults instantiates a new ModelsPipelineEdgeCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsPipelineEdgeConditionWithDefaults() *ModelsPipelineEdgeCondition {
	this := ModelsPipelineEdgeCondition{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *ModelsPipelineEdgeCondition) GetConfig() map[string]interface{} {
	if o == nil || IsNil(o.Config) {
		var ret map[string]interface{}
		return ret
	}
	return o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineEdgeCondition) GetConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Config) {
		return map[string]interface{}{}, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *ModelsPipelineEdgeCondition) HasConfig() bool {
	if o != nil && !IsNil(o.Config) {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *ModelsPipelineEdgeCondition) SetConfig(v map[string]interface{}) {
	o.Config = v
}

// GetTypeId returns the TypeId field value
func (o *ModelsPipelineEdgeCondition) GetTypeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value
// and a boolean to check if the value has been set.
func (o *ModelsPipelineEdgeCondition) GetTypeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TypeId, true
}

// SetTypeId sets field value
func (o *ModelsPipelineEdgeCondition) SetTypeId(v string) {
	o.TypeId = v
}

func (o ModelsPipelineEdgeCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsPipelineEdgeCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Config) {
		toSerialize["config"] = o.Config
	}
	toSerialize["type_id"] = o.TypeId
	return toSerialize, nil
}

func (o *ModelsPipelineEdgeCondition) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelsPipelineEdgeCondition := _ModelsPipelineEdgeCondition{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelsPipelineEdgeCondition)

	if err != nil {
		return err
	}

	*o = ModelsPipelineEdgeCondition(varModelsPipelineEdgeCondition)

	return err
}

type NullableModelsPipelineEdgeCondition struct {
	value *ModelsPipelineEdgeCondition
	isSet bool
}

func (v NullableModelsPipelineEdgeCondition) Get() *ModelsPipelineEdgeCondition {
	return v.value
}

func (v *NullableModelsPipelineEdgeCondition) Set(val *ModelsPipelineEdgeCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsPipelineEdgeCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsPipelineEdgeCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsPipelineEdgeCondition(val *ModelsPipelineEdgeCondition) *NullableModelsPipelineEdgeCondition {
	return &NullableModelsPipelineEdgeCondition{value: val, isSet: true}
}

func (v NullableModelsPipelineEdgeCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsPipelineEdgeCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


