/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the RoutesUserWithRoles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutesUserWithRoles{}

// RoutesUserWithRoles struct for RoutesUserWithRoles
type RoutesUserWithRoles struct {
	AuthId *string `json:"auth_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Email *string `json:"email,omitempty"`
	Id *string `json:"id,omitempty"`
	OrganizationRoles map[string]ModelsUserRoleWithPermissions `json:"organization_roles,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Username *string `json:"username,omitempty"`
}

// NewRoutesUserWithRoles instantiates a new RoutesUserWithRoles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutesUserWithRoles() *RoutesUserWithRoles {
	this := RoutesUserWithRoles{}
	return &this
}

// NewRoutesUserWithRolesWithDefaults instantiates a new RoutesUserWithRoles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutesUserWithRolesWithDefaults() *RoutesUserWithRoles {
	this := RoutesUserWithRoles{}
	return &this
}

// GetAuthId returns the AuthId field value if set, zero value otherwise.
func (o *RoutesUserWithRoles) GetAuthId() string {
	if o == nil || IsNil(o.AuthId) {
		var ret string
		return ret
	}
	return *o.AuthId
}

// GetAuthIdOk returns a tuple with the AuthId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesUserWithRoles) GetAuthIdOk() (*string, bool) {
	if o == nil || IsNil(o.AuthId) {
		return nil, false
	}
	return o.AuthId, true
}

// HasAuthId returns a boolean if a field has been set.
func (o *RoutesUserWithRoles) HasAuthId() bool {
	if o != nil && !IsNil(o.AuthId) {
		return true
	}

	return false
}

// SetAuthId gets a reference to the given string and assigns it to the AuthId field.
func (o *RoutesUserWithRoles) SetAuthId(v string) {
	o.AuthId = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *RoutesUserWithRoles) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesUserWithRoles) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *RoutesUserWithRoles) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *RoutesUserWithRoles) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *RoutesUserWithRoles) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesUserWithRoles) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *RoutesUserWithRoles) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *RoutesUserWithRoles) SetEmail(v string) {
	o.Email = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *RoutesUserWithRoles) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesUserWithRoles) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *RoutesUserWithRoles) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *RoutesUserWithRoles) SetId(v string) {
	o.Id = &v
}

// GetOrganizationRoles returns the OrganizationRoles field value if set, zero value otherwise.
func (o *RoutesUserWithRoles) GetOrganizationRoles() map[string]ModelsUserRoleWithPermissions {
	if o == nil || IsNil(o.OrganizationRoles) {
		var ret map[string]ModelsUserRoleWithPermissions
		return ret
	}
	return o.OrganizationRoles
}

// GetOrganizationRolesOk returns a tuple with the OrganizationRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesUserWithRoles) GetOrganizationRolesOk() (map[string]ModelsUserRoleWithPermissions, bool) {
	if o == nil || IsNil(o.OrganizationRoles) {
		return map[string]ModelsUserRoleWithPermissions{}, false
	}
	return o.OrganizationRoles, true
}

// HasOrganizationRoles returns a boolean if a field has been set.
func (o *RoutesUserWithRoles) HasOrganizationRoles() bool {
	if o != nil && !IsNil(o.OrganizationRoles) {
		return true
	}

	return false
}

// SetOrganizationRoles gets a reference to the given map[string]ModelsUserRoleWithPermissions and assigns it to the OrganizationRoles field.
func (o *RoutesUserWithRoles) SetOrganizationRoles(v map[string]ModelsUserRoleWithPermissions) {
	o.OrganizationRoles = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *RoutesUserWithRoles) GetUpdatedAt() string {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesUserWithRoles) GetUpdatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *RoutesUserWithRoles) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *RoutesUserWithRoles) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *RoutesUserWithRoles) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesUserWithRoles) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *RoutesUserWithRoles) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *RoutesUserWithRoles) SetUsername(v string) {
	o.Username = &v
}

func (o RoutesUserWithRoles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutesUserWithRoles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthId) {
		toSerialize["auth_id"] = o.AuthId
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OrganizationRoles) {
		toSerialize["organization_roles"] = o.OrganizationRoles
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableRoutesUserWithRoles struct {
	value *RoutesUserWithRoles
	isSet bool
}

func (v NullableRoutesUserWithRoles) Get() *RoutesUserWithRoles {
	return v.value
}

func (v *NullableRoutesUserWithRoles) Set(val *RoutesUserWithRoles) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesUserWithRoles) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesUserWithRoles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesUserWithRoles(val *RoutesUserWithRoles) *NullableRoutesUserWithRoles {
	return &NullableRoutesUserWithRoles{value: val, isSet: true}
}

func (v NullableRoutesUserWithRoles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesUserWithRoles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


