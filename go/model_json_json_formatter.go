/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the JsonJsonFormatter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JsonJsonFormatter{}

// JsonJsonFormatter struct for JsonJsonFormatter
type JsonJsonFormatter struct {
	Key *string `json:"key,omitempty"`
	Type string `json:"type"`
}

type _JsonJsonFormatter JsonJsonFormatter

// NewJsonJsonFormatter instantiates a new JsonJsonFormatter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonJsonFormatter(type_ string) *JsonJsonFormatter {
	this := JsonJsonFormatter{}
	this.Type = type_
	return &this
}

// NewJsonJsonFormatterWithDefaults instantiates a new JsonJsonFormatter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonJsonFormatterWithDefaults() *JsonJsonFormatter {
	this := JsonJsonFormatter{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *JsonJsonFormatter) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonJsonFormatter) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *JsonJsonFormatter) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *JsonJsonFormatter) SetKey(v string) {
	o.Key = &v
}

// GetType returns the Type field value
func (o *JsonJsonFormatter) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *JsonJsonFormatter) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *JsonJsonFormatter) SetType(v string) {
	o.Type = v
}

func (o JsonJsonFormatter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JsonJsonFormatter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *JsonJsonFormatter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varJsonJsonFormatter := _JsonJsonFormatter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varJsonJsonFormatter)

	if err != nil {
		return err
	}

	*o = JsonJsonFormatter(varJsonJsonFormatter)

	return err
}

type NullableJsonJsonFormatter struct {
	value *JsonJsonFormatter
	isSet bool
}

func (v NullableJsonJsonFormatter) Get() *JsonJsonFormatter {
	return v.value
}

func (v *NullableJsonJsonFormatter) Set(val *JsonJsonFormatter) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonJsonFormatter) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonJsonFormatter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonJsonFormatter(val *JsonJsonFormatter) *NullableJsonJsonFormatter {
	return &NullableJsonJsonFormatter{value: val, isSet: true}
}

func (v NullableJsonJsonFormatter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonJsonFormatter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


