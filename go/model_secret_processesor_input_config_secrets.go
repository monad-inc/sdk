/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SecretProcessesorInputConfigSecrets - struct for SecretProcessesorInputConfigSecrets
type SecretProcessesorInputConfigSecrets struct {
	ActorsInfoSecretsConfig *ActorsInfoSecretsConfig
	AdminActivitySecretsConfig *AdminActivitySecretsConfig
	AdminLogsSecretsConfig *AdminLogsSecretsConfig
	AuditLogsSecretsConfig *AuditLogsSecretsConfig
	AuthLogsSecretsConfig *AuthLogsSecretsConfig
	AzureActivityLogsSecretsConfig *AzureActivityLogsSecretsConfig
	BigqueryInputSecretsConfig *BigqueryInputSecretsConfig
	BoxEventsSecretsConfig *BoxEventsSecretsConfig
	BoxUsersSecretsConfig *BoxUsersSecretsConfig
	CloudAssetInventorySecretsConfig *CloudAssetInventorySecretsConfig
	CloudConfigurationFindingsSecretsConfig *CloudConfigurationFindingsSecretsConfig
	CloudLogsSecretsConfig *CloudLogsSecretsConfig
	CloudResourceInventorySecretsConfig *CloudResourceInventorySecretsConfig
	CrowdstrikeFdrSecretsConfig *CrowdstrikeFdrSecretsConfig
	DefenderForEndpointAlertsSecretsConfig *DefenderForEndpointAlertsSecretsConfig
	DetectSummariesSecretsConfig *DetectSummariesSecretsConfig
	DeviceActivitySecretsConfig *DeviceActivitySecretsConfig
	DeviceDetailsSecretsConfig *DeviceDetailsSecretsConfig
	DevicesSecretsConfig *DevicesSecretsConfig
	DriveActivitySecretsConfig *DriveActivitySecretsConfig
	EntraIdSecretsConfig *EntraIdSecretsConfig
	EventSecretsConfig *EventSecretsConfig
	EventsLogsSecretsConfig *EventsLogsSecretsConfig
	FullScansSecretsConfig *FullScansSecretsConfig
	IssuesSecretsConfig *IssuesSecretsConfig
	LogAnalyticsQuerySecretsConfig *LogAnalyticsQuerySecretsConfig
	LoginActivitySecretsConfig *LoginActivitySecretsConfig
	LoginSessionsSecretsConfig *LoginSessionsSecretsConfig
	OauthActivitySecretsConfig *OauthActivitySecretsConfig
	RolesInfoSecretsConfig *RolesInfoSecretsConfig
	SemgrepCodeFindingsSecretsConfig *SemgrepCodeFindingsSecretsConfig
	SemgrepDeploymentsSecretsConfig *SemgrepDeploymentsSecretsConfig
	SemgrepProjectDetailsSecretsConfig *SemgrepProjectDetailsSecretsConfig
	SemgrepProjectsSecretsConfig *SemgrepProjectsSecretsConfig
	SemgrepSupplyChainFindingsSecretsConfig *SemgrepSupplyChainFindingsSecretsConfig
	SlackUsersSecretsConfig *SlackUsersSecretsConfig
	SlackgroupsSecretsConfig *SlackgroupsSecretsConfig
	SnowflakeInputSecretsConfig *SnowflakeInputSecretsConfig
	SnykIssuesSecretsConfig *SnykIssuesSecretsConfig
	SnykOrganizationsSecretsConfig *SnykOrganizationsSecretsConfig
	SnykProjectsSecretsConfig *SnykProjectsSecretsConfig
	SnykTargetsSecretsConfig *SnykTargetsSecretsConfig
	TailscaleUsersSecretsConfig *TailscaleUsersSecretsConfig
	TenableAssetsSecretsConfig *TenableAssetsSecretsConfig
	TenableVulnerabilitiesSecretsConfig *TenableVulnerabilitiesSecretsConfig
	UsersInfoSecretsConfig *UsersInfoSecretsConfig
	UsersSecretsConfig *UsersSecretsConfig
	VulnerabilitiesSecretsConfig *VulnerabilitiesSecretsConfig
	VulnerabilityFindingsSecretsConfig *VulnerabilityFindingsSecretsConfig
	MapmapOfStringAny *map[string]interface{}
}

// ActorsInfoSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns ActorsInfoSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func ActorsInfoSecretsConfigAsSecretProcessesorInputConfigSecrets(v *ActorsInfoSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		ActorsInfoSecretsConfig: v,
	}
}

// AdminActivitySecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns AdminActivitySecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func AdminActivitySecretsConfigAsSecretProcessesorInputConfigSecrets(v *AdminActivitySecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		AdminActivitySecretsConfig: v,
	}
}

// AdminLogsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns AdminLogsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func AdminLogsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *AdminLogsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		AdminLogsSecretsConfig: v,
	}
}

// AuditLogsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns AuditLogsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func AuditLogsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *AuditLogsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		AuditLogsSecretsConfig: v,
	}
}

// AuthLogsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns AuthLogsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func AuthLogsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *AuthLogsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		AuthLogsSecretsConfig: v,
	}
}

// AzureActivityLogsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns AzureActivityLogsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func AzureActivityLogsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *AzureActivityLogsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		AzureActivityLogsSecretsConfig: v,
	}
}

// BigqueryInputSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns BigqueryInputSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func BigqueryInputSecretsConfigAsSecretProcessesorInputConfigSecrets(v *BigqueryInputSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		BigqueryInputSecretsConfig: v,
	}
}

// BoxEventsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns BoxEventsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func BoxEventsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *BoxEventsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		BoxEventsSecretsConfig: v,
	}
}

// BoxUsersSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns BoxUsersSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func BoxUsersSecretsConfigAsSecretProcessesorInputConfigSecrets(v *BoxUsersSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		BoxUsersSecretsConfig: v,
	}
}

// CloudAssetInventorySecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns CloudAssetInventorySecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func CloudAssetInventorySecretsConfigAsSecretProcessesorInputConfigSecrets(v *CloudAssetInventorySecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		CloudAssetInventorySecretsConfig: v,
	}
}

// CloudConfigurationFindingsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns CloudConfigurationFindingsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func CloudConfigurationFindingsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *CloudConfigurationFindingsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		CloudConfigurationFindingsSecretsConfig: v,
	}
}

// CloudLogsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns CloudLogsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func CloudLogsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *CloudLogsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		CloudLogsSecretsConfig: v,
	}
}

// CloudResourceInventorySecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns CloudResourceInventorySecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func CloudResourceInventorySecretsConfigAsSecretProcessesorInputConfigSecrets(v *CloudResourceInventorySecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		CloudResourceInventorySecretsConfig: v,
	}
}

// CrowdstrikeFdrSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns CrowdstrikeFdrSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func CrowdstrikeFdrSecretsConfigAsSecretProcessesorInputConfigSecrets(v *CrowdstrikeFdrSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		CrowdstrikeFdrSecretsConfig: v,
	}
}

// DefenderForEndpointAlertsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns DefenderForEndpointAlertsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func DefenderForEndpointAlertsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *DefenderForEndpointAlertsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		DefenderForEndpointAlertsSecretsConfig: v,
	}
}

// DetectSummariesSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns DetectSummariesSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func DetectSummariesSecretsConfigAsSecretProcessesorInputConfigSecrets(v *DetectSummariesSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		DetectSummariesSecretsConfig: v,
	}
}

// DeviceActivitySecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns DeviceActivitySecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func DeviceActivitySecretsConfigAsSecretProcessesorInputConfigSecrets(v *DeviceActivitySecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		DeviceActivitySecretsConfig: v,
	}
}

// DeviceDetailsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns DeviceDetailsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func DeviceDetailsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *DeviceDetailsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		DeviceDetailsSecretsConfig: v,
	}
}

// DevicesSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns DevicesSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func DevicesSecretsConfigAsSecretProcessesorInputConfigSecrets(v *DevicesSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		DevicesSecretsConfig: v,
	}
}

// DriveActivitySecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns DriveActivitySecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func DriveActivitySecretsConfigAsSecretProcessesorInputConfigSecrets(v *DriveActivitySecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		DriveActivitySecretsConfig: v,
	}
}

// EntraIdSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns EntraIdSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func EntraIdSecretsConfigAsSecretProcessesorInputConfigSecrets(v *EntraIdSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		EntraIdSecretsConfig: v,
	}
}

// EventSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns EventSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func EventSecretsConfigAsSecretProcessesorInputConfigSecrets(v *EventSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		EventSecretsConfig: v,
	}
}

// EventsLogsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns EventsLogsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func EventsLogsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *EventsLogsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		EventsLogsSecretsConfig: v,
	}
}

// FullScansSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns FullScansSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func FullScansSecretsConfigAsSecretProcessesorInputConfigSecrets(v *FullScansSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		FullScansSecretsConfig: v,
	}
}

// IssuesSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns IssuesSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func IssuesSecretsConfigAsSecretProcessesorInputConfigSecrets(v *IssuesSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		IssuesSecretsConfig: v,
	}
}

// LogAnalyticsQuerySecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns LogAnalyticsQuerySecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func LogAnalyticsQuerySecretsConfigAsSecretProcessesorInputConfigSecrets(v *LogAnalyticsQuerySecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		LogAnalyticsQuerySecretsConfig: v,
	}
}

// LoginActivitySecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns LoginActivitySecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func LoginActivitySecretsConfigAsSecretProcessesorInputConfigSecrets(v *LoginActivitySecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		LoginActivitySecretsConfig: v,
	}
}

// LoginSessionsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns LoginSessionsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func LoginSessionsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *LoginSessionsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		LoginSessionsSecretsConfig: v,
	}
}

// OauthActivitySecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns OauthActivitySecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func OauthActivitySecretsConfigAsSecretProcessesorInputConfigSecrets(v *OauthActivitySecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		OauthActivitySecretsConfig: v,
	}
}

// RolesInfoSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns RolesInfoSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func RolesInfoSecretsConfigAsSecretProcessesorInputConfigSecrets(v *RolesInfoSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		RolesInfoSecretsConfig: v,
	}
}

// SemgrepCodeFindingsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SemgrepCodeFindingsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SemgrepCodeFindingsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SemgrepCodeFindingsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SemgrepCodeFindingsSecretsConfig: v,
	}
}

// SemgrepDeploymentsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SemgrepDeploymentsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SemgrepDeploymentsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SemgrepDeploymentsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SemgrepDeploymentsSecretsConfig: v,
	}
}

// SemgrepProjectDetailsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SemgrepProjectDetailsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SemgrepProjectDetailsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SemgrepProjectDetailsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SemgrepProjectDetailsSecretsConfig: v,
	}
}

// SemgrepProjectsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SemgrepProjectsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SemgrepProjectsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SemgrepProjectsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SemgrepProjectsSecretsConfig: v,
	}
}

// SemgrepSupplyChainFindingsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SemgrepSupplyChainFindingsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SemgrepSupplyChainFindingsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SemgrepSupplyChainFindingsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SemgrepSupplyChainFindingsSecretsConfig: v,
	}
}

// SlackUsersSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SlackUsersSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SlackUsersSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SlackUsersSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SlackUsersSecretsConfig: v,
	}
}

// SlackgroupsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SlackgroupsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SlackgroupsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SlackgroupsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SlackgroupsSecretsConfig: v,
	}
}

// SnowflakeInputSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SnowflakeInputSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SnowflakeInputSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SnowflakeInputSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SnowflakeInputSecretsConfig: v,
	}
}

// SnykIssuesSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SnykIssuesSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SnykIssuesSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SnykIssuesSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SnykIssuesSecretsConfig: v,
	}
}

// SnykOrganizationsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SnykOrganizationsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SnykOrganizationsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SnykOrganizationsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SnykOrganizationsSecretsConfig: v,
	}
}

// SnykProjectsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SnykProjectsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SnykProjectsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SnykProjectsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SnykProjectsSecretsConfig: v,
	}
}

// SnykTargetsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns SnykTargetsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func SnykTargetsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *SnykTargetsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		SnykTargetsSecretsConfig: v,
	}
}

// TailscaleUsersSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns TailscaleUsersSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func TailscaleUsersSecretsConfigAsSecretProcessesorInputConfigSecrets(v *TailscaleUsersSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		TailscaleUsersSecretsConfig: v,
	}
}

// TenableAssetsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns TenableAssetsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func TenableAssetsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *TenableAssetsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		TenableAssetsSecretsConfig: v,
	}
}

// TenableVulnerabilitiesSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns TenableVulnerabilitiesSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func TenableVulnerabilitiesSecretsConfigAsSecretProcessesorInputConfigSecrets(v *TenableVulnerabilitiesSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		TenableVulnerabilitiesSecretsConfig: v,
	}
}

// UsersInfoSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns UsersInfoSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func UsersInfoSecretsConfigAsSecretProcessesorInputConfigSecrets(v *UsersInfoSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		UsersInfoSecretsConfig: v,
	}
}

// UsersSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns UsersSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func UsersSecretsConfigAsSecretProcessesorInputConfigSecrets(v *UsersSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		UsersSecretsConfig: v,
	}
}

// VulnerabilitiesSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns VulnerabilitiesSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func VulnerabilitiesSecretsConfigAsSecretProcessesorInputConfigSecrets(v *VulnerabilitiesSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		VulnerabilitiesSecretsConfig: v,
	}
}

// VulnerabilityFindingsSecretsConfigAsSecretProcessesorInputConfigSecrets is a convenience function that returns VulnerabilityFindingsSecretsConfig wrapped in SecretProcessesorInputConfigSecrets
func VulnerabilityFindingsSecretsConfigAsSecretProcessesorInputConfigSecrets(v *VulnerabilityFindingsSecretsConfig) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		VulnerabilityFindingsSecretsConfig: v,
	}
}

// map[string]interface{}AsSecretProcessesorInputConfigSecrets is a convenience function that returns map[string]interface{} wrapped in SecretProcessesorInputConfigSecrets
func MapmapOfStringAnyAsSecretProcessesorInputConfigSecrets(v *map[string]interface{}) SecretProcessesorInputConfigSecrets {
	return SecretProcessesorInputConfigSecrets{
		MapmapOfStringAny: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecretProcessesorInputConfigSecrets) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into ActorsInfoSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.ActorsInfoSecretsConfig)
	if err == nil {
		jsonActorsInfoSecretsConfig, _ := json.Marshal(dst.ActorsInfoSecretsConfig)
		if string(jsonActorsInfoSecretsConfig) == "{}" { // empty struct
			dst.ActorsInfoSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.ActorsInfoSecretsConfig); err != nil {
				dst.ActorsInfoSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.ActorsInfoSecretsConfig = nil
	}

	// try to unmarshal data into AdminActivitySecretsConfig
	err = newStrictDecoder(data).Decode(&dst.AdminActivitySecretsConfig)
	if err == nil {
		jsonAdminActivitySecretsConfig, _ := json.Marshal(dst.AdminActivitySecretsConfig)
		if string(jsonAdminActivitySecretsConfig) == "{}" { // empty struct
			dst.AdminActivitySecretsConfig = nil
		} else {
			if err = validator.Validate(dst.AdminActivitySecretsConfig); err != nil {
				dst.AdminActivitySecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.AdminActivitySecretsConfig = nil
	}

	// try to unmarshal data into AdminLogsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.AdminLogsSecretsConfig)
	if err == nil {
		jsonAdminLogsSecretsConfig, _ := json.Marshal(dst.AdminLogsSecretsConfig)
		if string(jsonAdminLogsSecretsConfig) == "{}" { // empty struct
			dst.AdminLogsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.AdminLogsSecretsConfig); err != nil {
				dst.AdminLogsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.AdminLogsSecretsConfig = nil
	}

	// try to unmarshal data into AuditLogsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.AuditLogsSecretsConfig)
	if err == nil {
		jsonAuditLogsSecretsConfig, _ := json.Marshal(dst.AuditLogsSecretsConfig)
		if string(jsonAuditLogsSecretsConfig) == "{}" { // empty struct
			dst.AuditLogsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.AuditLogsSecretsConfig); err != nil {
				dst.AuditLogsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.AuditLogsSecretsConfig = nil
	}

	// try to unmarshal data into AuthLogsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.AuthLogsSecretsConfig)
	if err == nil {
		jsonAuthLogsSecretsConfig, _ := json.Marshal(dst.AuthLogsSecretsConfig)
		if string(jsonAuthLogsSecretsConfig) == "{}" { // empty struct
			dst.AuthLogsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.AuthLogsSecretsConfig); err != nil {
				dst.AuthLogsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.AuthLogsSecretsConfig = nil
	}

	// try to unmarshal data into AzureActivityLogsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.AzureActivityLogsSecretsConfig)
	if err == nil {
		jsonAzureActivityLogsSecretsConfig, _ := json.Marshal(dst.AzureActivityLogsSecretsConfig)
		if string(jsonAzureActivityLogsSecretsConfig) == "{}" { // empty struct
			dst.AzureActivityLogsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.AzureActivityLogsSecretsConfig); err != nil {
				dst.AzureActivityLogsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.AzureActivityLogsSecretsConfig = nil
	}

	// try to unmarshal data into BigqueryInputSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.BigqueryInputSecretsConfig)
	if err == nil {
		jsonBigqueryInputSecretsConfig, _ := json.Marshal(dst.BigqueryInputSecretsConfig)
		if string(jsonBigqueryInputSecretsConfig) == "{}" { // empty struct
			dst.BigqueryInputSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.BigqueryInputSecretsConfig); err != nil {
				dst.BigqueryInputSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.BigqueryInputSecretsConfig = nil
	}

	// try to unmarshal data into BoxEventsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.BoxEventsSecretsConfig)
	if err == nil {
		jsonBoxEventsSecretsConfig, _ := json.Marshal(dst.BoxEventsSecretsConfig)
		if string(jsonBoxEventsSecretsConfig) == "{}" { // empty struct
			dst.BoxEventsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.BoxEventsSecretsConfig); err != nil {
				dst.BoxEventsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.BoxEventsSecretsConfig = nil
	}

	// try to unmarshal data into BoxUsersSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.BoxUsersSecretsConfig)
	if err == nil {
		jsonBoxUsersSecretsConfig, _ := json.Marshal(dst.BoxUsersSecretsConfig)
		if string(jsonBoxUsersSecretsConfig) == "{}" { // empty struct
			dst.BoxUsersSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.BoxUsersSecretsConfig); err != nil {
				dst.BoxUsersSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.BoxUsersSecretsConfig = nil
	}

	// try to unmarshal data into CloudAssetInventorySecretsConfig
	err = newStrictDecoder(data).Decode(&dst.CloudAssetInventorySecretsConfig)
	if err == nil {
		jsonCloudAssetInventorySecretsConfig, _ := json.Marshal(dst.CloudAssetInventorySecretsConfig)
		if string(jsonCloudAssetInventorySecretsConfig) == "{}" { // empty struct
			dst.CloudAssetInventorySecretsConfig = nil
		} else {
			if err = validator.Validate(dst.CloudAssetInventorySecretsConfig); err != nil {
				dst.CloudAssetInventorySecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.CloudAssetInventorySecretsConfig = nil
	}

	// try to unmarshal data into CloudConfigurationFindingsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.CloudConfigurationFindingsSecretsConfig)
	if err == nil {
		jsonCloudConfigurationFindingsSecretsConfig, _ := json.Marshal(dst.CloudConfigurationFindingsSecretsConfig)
		if string(jsonCloudConfigurationFindingsSecretsConfig) == "{}" { // empty struct
			dst.CloudConfigurationFindingsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.CloudConfigurationFindingsSecretsConfig); err != nil {
				dst.CloudConfigurationFindingsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.CloudConfigurationFindingsSecretsConfig = nil
	}

	// try to unmarshal data into CloudLogsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.CloudLogsSecretsConfig)
	if err == nil {
		jsonCloudLogsSecretsConfig, _ := json.Marshal(dst.CloudLogsSecretsConfig)
		if string(jsonCloudLogsSecretsConfig) == "{}" { // empty struct
			dst.CloudLogsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.CloudLogsSecretsConfig); err != nil {
				dst.CloudLogsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.CloudLogsSecretsConfig = nil
	}

	// try to unmarshal data into CloudResourceInventorySecretsConfig
	err = newStrictDecoder(data).Decode(&dst.CloudResourceInventorySecretsConfig)
	if err == nil {
		jsonCloudResourceInventorySecretsConfig, _ := json.Marshal(dst.CloudResourceInventorySecretsConfig)
		if string(jsonCloudResourceInventorySecretsConfig) == "{}" { // empty struct
			dst.CloudResourceInventorySecretsConfig = nil
		} else {
			if err = validator.Validate(dst.CloudResourceInventorySecretsConfig); err != nil {
				dst.CloudResourceInventorySecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.CloudResourceInventorySecretsConfig = nil
	}

	// try to unmarshal data into CrowdstrikeFdrSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.CrowdstrikeFdrSecretsConfig)
	if err == nil {
		jsonCrowdstrikeFdrSecretsConfig, _ := json.Marshal(dst.CrowdstrikeFdrSecretsConfig)
		if string(jsonCrowdstrikeFdrSecretsConfig) == "{}" { // empty struct
			dst.CrowdstrikeFdrSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.CrowdstrikeFdrSecretsConfig); err != nil {
				dst.CrowdstrikeFdrSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.CrowdstrikeFdrSecretsConfig = nil
	}

	// try to unmarshal data into DefenderForEndpointAlertsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.DefenderForEndpointAlertsSecretsConfig)
	if err == nil {
		jsonDefenderForEndpointAlertsSecretsConfig, _ := json.Marshal(dst.DefenderForEndpointAlertsSecretsConfig)
		if string(jsonDefenderForEndpointAlertsSecretsConfig) == "{}" { // empty struct
			dst.DefenderForEndpointAlertsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.DefenderForEndpointAlertsSecretsConfig); err != nil {
				dst.DefenderForEndpointAlertsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.DefenderForEndpointAlertsSecretsConfig = nil
	}

	// try to unmarshal data into DetectSummariesSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.DetectSummariesSecretsConfig)
	if err == nil {
		jsonDetectSummariesSecretsConfig, _ := json.Marshal(dst.DetectSummariesSecretsConfig)
		if string(jsonDetectSummariesSecretsConfig) == "{}" { // empty struct
			dst.DetectSummariesSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.DetectSummariesSecretsConfig); err != nil {
				dst.DetectSummariesSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.DetectSummariesSecretsConfig = nil
	}

	// try to unmarshal data into DeviceActivitySecretsConfig
	err = newStrictDecoder(data).Decode(&dst.DeviceActivitySecretsConfig)
	if err == nil {
		jsonDeviceActivitySecretsConfig, _ := json.Marshal(dst.DeviceActivitySecretsConfig)
		if string(jsonDeviceActivitySecretsConfig) == "{}" { // empty struct
			dst.DeviceActivitySecretsConfig = nil
		} else {
			if err = validator.Validate(dst.DeviceActivitySecretsConfig); err != nil {
				dst.DeviceActivitySecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeviceActivitySecretsConfig = nil
	}

	// try to unmarshal data into DeviceDetailsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.DeviceDetailsSecretsConfig)
	if err == nil {
		jsonDeviceDetailsSecretsConfig, _ := json.Marshal(dst.DeviceDetailsSecretsConfig)
		if string(jsonDeviceDetailsSecretsConfig) == "{}" { // empty struct
			dst.DeviceDetailsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.DeviceDetailsSecretsConfig); err != nil {
				dst.DeviceDetailsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.DeviceDetailsSecretsConfig = nil
	}

	// try to unmarshal data into DevicesSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.DevicesSecretsConfig)
	if err == nil {
		jsonDevicesSecretsConfig, _ := json.Marshal(dst.DevicesSecretsConfig)
		if string(jsonDevicesSecretsConfig) == "{}" { // empty struct
			dst.DevicesSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.DevicesSecretsConfig); err != nil {
				dst.DevicesSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.DevicesSecretsConfig = nil
	}

	// try to unmarshal data into DriveActivitySecretsConfig
	err = newStrictDecoder(data).Decode(&dst.DriveActivitySecretsConfig)
	if err == nil {
		jsonDriveActivitySecretsConfig, _ := json.Marshal(dst.DriveActivitySecretsConfig)
		if string(jsonDriveActivitySecretsConfig) == "{}" { // empty struct
			dst.DriveActivitySecretsConfig = nil
		} else {
			if err = validator.Validate(dst.DriveActivitySecretsConfig); err != nil {
				dst.DriveActivitySecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.DriveActivitySecretsConfig = nil
	}

	// try to unmarshal data into EntraIdSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.EntraIdSecretsConfig)
	if err == nil {
		jsonEntraIdSecretsConfig, _ := json.Marshal(dst.EntraIdSecretsConfig)
		if string(jsonEntraIdSecretsConfig) == "{}" { // empty struct
			dst.EntraIdSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.EntraIdSecretsConfig); err != nil {
				dst.EntraIdSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.EntraIdSecretsConfig = nil
	}

	// try to unmarshal data into EventSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.EventSecretsConfig)
	if err == nil {
		jsonEventSecretsConfig, _ := json.Marshal(dst.EventSecretsConfig)
		if string(jsonEventSecretsConfig) == "{}" { // empty struct
			dst.EventSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.EventSecretsConfig); err != nil {
				dst.EventSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventSecretsConfig = nil
	}

	// try to unmarshal data into EventsLogsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.EventsLogsSecretsConfig)
	if err == nil {
		jsonEventsLogsSecretsConfig, _ := json.Marshal(dst.EventsLogsSecretsConfig)
		if string(jsonEventsLogsSecretsConfig) == "{}" { // empty struct
			dst.EventsLogsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.EventsLogsSecretsConfig); err != nil {
				dst.EventsLogsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.EventsLogsSecretsConfig = nil
	}

	// try to unmarshal data into FullScansSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.FullScansSecretsConfig)
	if err == nil {
		jsonFullScansSecretsConfig, _ := json.Marshal(dst.FullScansSecretsConfig)
		if string(jsonFullScansSecretsConfig) == "{}" { // empty struct
			dst.FullScansSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.FullScansSecretsConfig); err != nil {
				dst.FullScansSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.FullScansSecretsConfig = nil
	}

	// try to unmarshal data into IssuesSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.IssuesSecretsConfig)
	if err == nil {
		jsonIssuesSecretsConfig, _ := json.Marshal(dst.IssuesSecretsConfig)
		if string(jsonIssuesSecretsConfig) == "{}" { // empty struct
			dst.IssuesSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.IssuesSecretsConfig); err != nil {
				dst.IssuesSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.IssuesSecretsConfig = nil
	}

	// try to unmarshal data into LogAnalyticsQuerySecretsConfig
	err = newStrictDecoder(data).Decode(&dst.LogAnalyticsQuerySecretsConfig)
	if err == nil {
		jsonLogAnalyticsQuerySecretsConfig, _ := json.Marshal(dst.LogAnalyticsQuerySecretsConfig)
		if string(jsonLogAnalyticsQuerySecretsConfig) == "{}" { // empty struct
			dst.LogAnalyticsQuerySecretsConfig = nil
		} else {
			if err = validator.Validate(dst.LogAnalyticsQuerySecretsConfig); err != nil {
				dst.LogAnalyticsQuerySecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.LogAnalyticsQuerySecretsConfig = nil
	}

	// try to unmarshal data into LoginActivitySecretsConfig
	err = newStrictDecoder(data).Decode(&dst.LoginActivitySecretsConfig)
	if err == nil {
		jsonLoginActivitySecretsConfig, _ := json.Marshal(dst.LoginActivitySecretsConfig)
		if string(jsonLoginActivitySecretsConfig) == "{}" { // empty struct
			dst.LoginActivitySecretsConfig = nil
		} else {
			if err = validator.Validate(dst.LoginActivitySecretsConfig); err != nil {
				dst.LoginActivitySecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.LoginActivitySecretsConfig = nil
	}

	// try to unmarshal data into LoginSessionsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.LoginSessionsSecretsConfig)
	if err == nil {
		jsonLoginSessionsSecretsConfig, _ := json.Marshal(dst.LoginSessionsSecretsConfig)
		if string(jsonLoginSessionsSecretsConfig) == "{}" { // empty struct
			dst.LoginSessionsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.LoginSessionsSecretsConfig); err != nil {
				dst.LoginSessionsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.LoginSessionsSecretsConfig = nil
	}

	// try to unmarshal data into OauthActivitySecretsConfig
	err = newStrictDecoder(data).Decode(&dst.OauthActivitySecretsConfig)
	if err == nil {
		jsonOauthActivitySecretsConfig, _ := json.Marshal(dst.OauthActivitySecretsConfig)
		if string(jsonOauthActivitySecretsConfig) == "{}" { // empty struct
			dst.OauthActivitySecretsConfig = nil
		} else {
			if err = validator.Validate(dst.OauthActivitySecretsConfig); err != nil {
				dst.OauthActivitySecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.OauthActivitySecretsConfig = nil
	}

	// try to unmarshal data into RolesInfoSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.RolesInfoSecretsConfig)
	if err == nil {
		jsonRolesInfoSecretsConfig, _ := json.Marshal(dst.RolesInfoSecretsConfig)
		if string(jsonRolesInfoSecretsConfig) == "{}" { // empty struct
			dst.RolesInfoSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.RolesInfoSecretsConfig); err != nil {
				dst.RolesInfoSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.RolesInfoSecretsConfig = nil
	}

	// try to unmarshal data into SemgrepCodeFindingsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SemgrepCodeFindingsSecretsConfig)
	if err == nil {
		jsonSemgrepCodeFindingsSecretsConfig, _ := json.Marshal(dst.SemgrepCodeFindingsSecretsConfig)
		if string(jsonSemgrepCodeFindingsSecretsConfig) == "{}" { // empty struct
			dst.SemgrepCodeFindingsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SemgrepCodeFindingsSecretsConfig); err != nil {
				dst.SemgrepCodeFindingsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SemgrepCodeFindingsSecretsConfig = nil
	}

	// try to unmarshal data into SemgrepDeploymentsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SemgrepDeploymentsSecretsConfig)
	if err == nil {
		jsonSemgrepDeploymentsSecretsConfig, _ := json.Marshal(dst.SemgrepDeploymentsSecretsConfig)
		if string(jsonSemgrepDeploymentsSecretsConfig) == "{}" { // empty struct
			dst.SemgrepDeploymentsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SemgrepDeploymentsSecretsConfig); err != nil {
				dst.SemgrepDeploymentsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SemgrepDeploymentsSecretsConfig = nil
	}

	// try to unmarshal data into SemgrepProjectDetailsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SemgrepProjectDetailsSecretsConfig)
	if err == nil {
		jsonSemgrepProjectDetailsSecretsConfig, _ := json.Marshal(dst.SemgrepProjectDetailsSecretsConfig)
		if string(jsonSemgrepProjectDetailsSecretsConfig) == "{}" { // empty struct
			dst.SemgrepProjectDetailsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SemgrepProjectDetailsSecretsConfig); err != nil {
				dst.SemgrepProjectDetailsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SemgrepProjectDetailsSecretsConfig = nil
	}

	// try to unmarshal data into SemgrepProjectsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SemgrepProjectsSecretsConfig)
	if err == nil {
		jsonSemgrepProjectsSecretsConfig, _ := json.Marshal(dst.SemgrepProjectsSecretsConfig)
		if string(jsonSemgrepProjectsSecretsConfig) == "{}" { // empty struct
			dst.SemgrepProjectsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SemgrepProjectsSecretsConfig); err != nil {
				dst.SemgrepProjectsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SemgrepProjectsSecretsConfig = nil
	}

	// try to unmarshal data into SemgrepSupplyChainFindingsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SemgrepSupplyChainFindingsSecretsConfig)
	if err == nil {
		jsonSemgrepSupplyChainFindingsSecretsConfig, _ := json.Marshal(dst.SemgrepSupplyChainFindingsSecretsConfig)
		if string(jsonSemgrepSupplyChainFindingsSecretsConfig) == "{}" { // empty struct
			dst.SemgrepSupplyChainFindingsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SemgrepSupplyChainFindingsSecretsConfig); err != nil {
				dst.SemgrepSupplyChainFindingsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SemgrepSupplyChainFindingsSecretsConfig = nil
	}

	// try to unmarshal data into SlackUsersSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SlackUsersSecretsConfig)
	if err == nil {
		jsonSlackUsersSecretsConfig, _ := json.Marshal(dst.SlackUsersSecretsConfig)
		if string(jsonSlackUsersSecretsConfig) == "{}" { // empty struct
			dst.SlackUsersSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SlackUsersSecretsConfig); err != nil {
				dst.SlackUsersSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SlackUsersSecretsConfig = nil
	}

	// try to unmarshal data into SlackgroupsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SlackgroupsSecretsConfig)
	if err == nil {
		jsonSlackgroupsSecretsConfig, _ := json.Marshal(dst.SlackgroupsSecretsConfig)
		if string(jsonSlackgroupsSecretsConfig) == "{}" { // empty struct
			dst.SlackgroupsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SlackgroupsSecretsConfig); err != nil {
				dst.SlackgroupsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SlackgroupsSecretsConfig = nil
	}

	// try to unmarshal data into SnowflakeInputSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SnowflakeInputSecretsConfig)
	if err == nil {
		jsonSnowflakeInputSecretsConfig, _ := json.Marshal(dst.SnowflakeInputSecretsConfig)
		if string(jsonSnowflakeInputSecretsConfig) == "{}" { // empty struct
			dst.SnowflakeInputSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SnowflakeInputSecretsConfig); err != nil {
				dst.SnowflakeInputSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SnowflakeInputSecretsConfig = nil
	}

	// try to unmarshal data into SnykIssuesSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SnykIssuesSecretsConfig)
	if err == nil {
		jsonSnykIssuesSecretsConfig, _ := json.Marshal(dst.SnykIssuesSecretsConfig)
		if string(jsonSnykIssuesSecretsConfig) == "{}" { // empty struct
			dst.SnykIssuesSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SnykIssuesSecretsConfig); err != nil {
				dst.SnykIssuesSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SnykIssuesSecretsConfig = nil
	}

	// try to unmarshal data into SnykOrganizationsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SnykOrganizationsSecretsConfig)
	if err == nil {
		jsonSnykOrganizationsSecretsConfig, _ := json.Marshal(dst.SnykOrganizationsSecretsConfig)
		if string(jsonSnykOrganizationsSecretsConfig) == "{}" { // empty struct
			dst.SnykOrganizationsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SnykOrganizationsSecretsConfig); err != nil {
				dst.SnykOrganizationsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SnykOrganizationsSecretsConfig = nil
	}

	// try to unmarshal data into SnykProjectsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SnykProjectsSecretsConfig)
	if err == nil {
		jsonSnykProjectsSecretsConfig, _ := json.Marshal(dst.SnykProjectsSecretsConfig)
		if string(jsonSnykProjectsSecretsConfig) == "{}" { // empty struct
			dst.SnykProjectsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SnykProjectsSecretsConfig); err != nil {
				dst.SnykProjectsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SnykProjectsSecretsConfig = nil
	}

	// try to unmarshal data into SnykTargetsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.SnykTargetsSecretsConfig)
	if err == nil {
		jsonSnykTargetsSecretsConfig, _ := json.Marshal(dst.SnykTargetsSecretsConfig)
		if string(jsonSnykTargetsSecretsConfig) == "{}" { // empty struct
			dst.SnykTargetsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.SnykTargetsSecretsConfig); err != nil {
				dst.SnykTargetsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SnykTargetsSecretsConfig = nil
	}

	// try to unmarshal data into TailscaleUsersSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.TailscaleUsersSecretsConfig)
	if err == nil {
		jsonTailscaleUsersSecretsConfig, _ := json.Marshal(dst.TailscaleUsersSecretsConfig)
		if string(jsonTailscaleUsersSecretsConfig) == "{}" { // empty struct
			dst.TailscaleUsersSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.TailscaleUsersSecretsConfig); err != nil {
				dst.TailscaleUsersSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.TailscaleUsersSecretsConfig = nil
	}

	// try to unmarshal data into TenableAssetsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.TenableAssetsSecretsConfig)
	if err == nil {
		jsonTenableAssetsSecretsConfig, _ := json.Marshal(dst.TenableAssetsSecretsConfig)
		if string(jsonTenableAssetsSecretsConfig) == "{}" { // empty struct
			dst.TenableAssetsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.TenableAssetsSecretsConfig); err != nil {
				dst.TenableAssetsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.TenableAssetsSecretsConfig = nil
	}

	// try to unmarshal data into TenableVulnerabilitiesSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.TenableVulnerabilitiesSecretsConfig)
	if err == nil {
		jsonTenableVulnerabilitiesSecretsConfig, _ := json.Marshal(dst.TenableVulnerabilitiesSecretsConfig)
		if string(jsonTenableVulnerabilitiesSecretsConfig) == "{}" { // empty struct
			dst.TenableVulnerabilitiesSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.TenableVulnerabilitiesSecretsConfig); err != nil {
				dst.TenableVulnerabilitiesSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.TenableVulnerabilitiesSecretsConfig = nil
	}

	// try to unmarshal data into UsersInfoSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.UsersInfoSecretsConfig)
	if err == nil {
		jsonUsersInfoSecretsConfig, _ := json.Marshal(dst.UsersInfoSecretsConfig)
		if string(jsonUsersInfoSecretsConfig) == "{}" { // empty struct
			dst.UsersInfoSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.UsersInfoSecretsConfig); err != nil {
				dst.UsersInfoSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.UsersInfoSecretsConfig = nil
	}

	// try to unmarshal data into UsersSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.UsersSecretsConfig)
	if err == nil {
		jsonUsersSecretsConfig, _ := json.Marshal(dst.UsersSecretsConfig)
		if string(jsonUsersSecretsConfig) == "{}" { // empty struct
			dst.UsersSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.UsersSecretsConfig); err != nil {
				dst.UsersSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.UsersSecretsConfig = nil
	}

	// try to unmarshal data into VulnerabilitiesSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.VulnerabilitiesSecretsConfig)
	if err == nil {
		jsonVulnerabilitiesSecretsConfig, _ := json.Marshal(dst.VulnerabilitiesSecretsConfig)
		if string(jsonVulnerabilitiesSecretsConfig) == "{}" { // empty struct
			dst.VulnerabilitiesSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.VulnerabilitiesSecretsConfig); err != nil {
				dst.VulnerabilitiesSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.VulnerabilitiesSecretsConfig = nil
	}

	// try to unmarshal data into VulnerabilityFindingsSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.VulnerabilityFindingsSecretsConfig)
	if err == nil {
		jsonVulnerabilityFindingsSecretsConfig, _ := json.Marshal(dst.VulnerabilityFindingsSecretsConfig)
		if string(jsonVulnerabilityFindingsSecretsConfig) == "{}" { // empty struct
			dst.VulnerabilityFindingsSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.VulnerabilityFindingsSecretsConfig); err != nil {
				dst.VulnerabilityFindingsSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.VulnerabilityFindingsSecretsConfig = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringAny); err != nil {
				dst.MapmapOfStringAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.ActorsInfoSecretsConfig = nil
		dst.AdminActivitySecretsConfig = nil
		dst.AdminLogsSecretsConfig = nil
		dst.AuditLogsSecretsConfig = nil
		dst.AuthLogsSecretsConfig = nil
		dst.AzureActivityLogsSecretsConfig = nil
		dst.BigqueryInputSecretsConfig = nil
		dst.BoxEventsSecretsConfig = nil
		dst.BoxUsersSecretsConfig = nil
		dst.CloudAssetInventorySecretsConfig = nil
		dst.CloudConfigurationFindingsSecretsConfig = nil
		dst.CloudLogsSecretsConfig = nil
		dst.CloudResourceInventorySecretsConfig = nil
		dst.CrowdstrikeFdrSecretsConfig = nil
		dst.DefenderForEndpointAlertsSecretsConfig = nil
		dst.DetectSummariesSecretsConfig = nil
		dst.DeviceActivitySecretsConfig = nil
		dst.DeviceDetailsSecretsConfig = nil
		dst.DevicesSecretsConfig = nil
		dst.DriveActivitySecretsConfig = nil
		dst.EntraIdSecretsConfig = nil
		dst.EventSecretsConfig = nil
		dst.EventsLogsSecretsConfig = nil
		dst.FullScansSecretsConfig = nil
		dst.IssuesSecretsConfig = nil
		dst.LogAnalyticsQuerySecretsConfig = nil
		dst.LoginActivitySecretsConfig = nil
		dst.LoginSessionsSecretsConfig = nil
		dst.OauthActivitySecretsConfig = nil
		dst.RolesInfoSecretsConfig = nil
		dst.SemgrepCodeFindingsSecretsConfig = nil
		dst.SemgrepDeploymentsSecretsConfig = nil
		dst.SemgrepProjectDetailsSecretsConfig = nil
		dst.SemgrepProjectsSecretsConfig = nil
		dst.SemgrepSupplyChainFindingsSecretsConfig = nil
		dst.SlackUsersSecretsConfig = nil
		dst.SlackgroupsSecretsConfig = nil
		dst.SnowflakeInputSecretsConfig = nil
		dst.SnykIssuesSecretsConfig = nil
		dst.SnykOrganizationsSecretsConfig = nil
		dst.SnykProjectsSecretsConfig = nil
		dst.SnykTargetsSecretsConfig = nil
		dst.TailscaleUsersSecretsConfig = nil
		dst.TenableAssetsSecretsConfig = nil
		dst.TenableVulnerabilitiesSecretsConfig = nil
		dst.UsersInfoSecretsConfig = nil
		dst.UsersSecretsConfig = nil
		dst.VulnerabilitiesSecretsConfig = nil
		dst.VulnerabilityFindingsSecretsConfig = nil
		dst.MapmapOfStringAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SecretProcessesorInputConfigSecrets)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SecretProcessesorInputConfigSecrets)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecretProcessesorInputConfigSecrets) MarshalJSON() ([]byte, error) {
	if src.ActorsInfoSecretsConfig != nil {
		return json.Marshal(&src.ActorsInfoSecretsConfig)
	}

	if src.AdminActivitySecretsConfig != nil {
		return json.Marshal(&src.AdminActivitySecretsConfig)
	}

	if src.AdminLogsSecretsConfig != nil {
		return json.Marshal(&src.AdminLogsSecretsConfig)
	}

	if src.AuditLogsSecretsConfig != nil {
		return json.Marshal(&src.AuditLogsSecretsConfig)
	}

	if src.AuthLogsSecretsConfig != nil {
		return json.Marshal(&src.AuthLogsSecretsConfig)
	}

	if src.AzureActivityLogsSecretsConfig != nil {
		return json.Marshal(&src.AzureActivityLogsSecretsConfig)
	}

	if src.BigqueryInputSecretsConfig != nil {
		return json.Marshal(&src.BigqueryInputSecretsConfig)
	}

	if src.BoxEventsSecretsConfig != nil {
		return json.Marshal(&src.BoxEventsSecretsConfig)
	}

	if src.BoxUsersSecretsConfig != nil {
		return json.Marshal(&src.BoxUsersSecretsConfig)
	}

	if src.CloudAssetInventorySecretsConfig != nil {
		return json.Marshal(&src.CloudAssetInventorySecretsConfig)
	}

	if src.CloudConfigurationFindingsSecretsConfig != nil {
		return json.Marshal(&src.CloudConfigurationFindingsSecretsConfig)
	}

	if src.CloudLogsSecretsConfig != nil {
		return json.Marshal(&src.CloudLogsSecretsConfig)
	}

	if src.CloudResourceInventorySecretsConfig != nil {
		return json.Marshal(&src.CloudResourceInventorySecretsConfig)
	}

	if src.CrowdstrikeFdrSecretsConfig != nil {
		return json.Marshal(&src.CrowdstrikeFdrSecretsConfig)
	}

	if src.DefenderForEndpointAlertsSecretsConfig != nil {
		return json.Marshal(&src.DefenderForEndpointAlertsSecretsConfig)
	}

	if src.DetectSummariesSecretsConfig != nil {
		return json.Marshal(&src.DetectSummariesSecretsConfig)
	}

	if src.DeviceActivitySecretsConfig != nil {
		return json.Marshal(&src.DeviceActivitySecretsConfig)
	}

	if src.DeviceDetailsSecretsConfig != nil {
		return json.Marshal(&src.DeviceDetailsSecretsConfig)
	}

	if src.DevicesSecretsConfig != nil {
		return json.Marshal(&src.DevicesSecretsConfig)
	}

	if src.DriveActivitySecretsConfig != nil {
		return json.Marshal(&src.DriveActivitySecretsConfig)
	}

	if src.EntraIdSecretsConfig != nil {
		return json.Marshal(&src.EntraIdSecretsConfig)
	}

	if src.EventSecretsConfig != nil {
		return json.Marshal(&src.EventSecretsConfig)
	}

	if src.EventsLogsSecretsConfig != nil {
		return json.Marshal(&src.EventsLogsSecretsConfig)
	}

	if src.FullScansSecretsConfig != nil {
		return json.Marshal(&src.FullScansSecretsConfig)
	}

	if src.IssuesSecretsConfig != nil {
		return json.Marshal(&src.IssuesSecretsConfig)
	}

	if src.LogAnalyticsQuerySecretsConfig != nil {
		return json.Marshal(&src.LogAnalyticsQuerySecretsConfig)
	}

	if src.LoginActivitySecretsConfig != nil {
		return json.Marshal(&src.LoginActivitySecretsConfig)
	}

	if src.LoginSessionsSecretsConfig != nil {
		return json.Marshal(&src.LoginSessionsSecretsConfig)
	}

	if src.OauthActivitySecretsConfig != nil {
		return json.Marshal(&src.OauthActivitySecretsConfig)
	}

	if src.RolesInfoSecretsConfig != nil {
		return json.Marshal(&src.RolesInfoSecretsConfig)
	}

	if src.SemgrepCodeFindingsSecretsConfig != nil {
		return json.Marshal(&src.SemgrepCodeFindingsSecretsConfig)
	}

	if src.SemgrepDeploymentsSecretsConfig != nil {
		return json.Marshal(&src.SemgrepDeploymentsSecretsConfig)
	}

	if src.SemgrepProjectDetailsSecretsConfig != nil {
		return json.Marshal(&src.SemgrepProjectDetailsSecretsConfig)
	}

	if src.SemgrepProjectsSecretsConfig != nil {
		return json.Marshal(&src.SemgrepProjectsSecretsConfig)
	}

	if src.SemgrepSupplyChainFindingsSecretsConfig != nil {
		return json.Marshal(&src.SemgrepSupplyChainFindingsSecretsConfig)
	}

	if src.SlackUsersSecretsConfig != nil {
		return json.Marshal(&src.SlackUsersSecretsConfig)
	}

	if src.SlackgroupsSecretsConfig != nil {
		return json.Marshal(&src.SlackgroupsSecretsConfig)
	}

	if src.SnowflakeInputSecretsConfig != nil {
		return json.Marshal(&src.SnowflakeInputSecretsConfig)
	}

	if src.SnykIssuesSecretsConfig != nil {
		return json.Marshal(&src.SnykIssuesSecretsConfig)
	}

	if src.SnykOrganizationsSecretsConfig != nil {
		return json.Marshal(&src.SnykOrganizationsSecretsConfig)
	}

	if src.SnykProjectsSecretsConfig != nil {
		return json.Marshal(&src.SnykProjectsSecretsConfig)
	}

	if src.SnykTargetsSecretsConfig != nil {
		return json.Marshal(&src.SnykTargetsSecretsConfig)
	}

	if src.TailscaleUsersSecretsConfig != nil {
		return json.Marshal(&src.TailscaleUsersSecretsConfig)
	}

	if src.TenableAssetsSecretsConfig != nil {
		return json.Marshal(&src.TenableAssetsSecretsConfig)
	}

	if src.TenableVulnerabilitiesSecretsConfig != nil {
		return json.Marshal(&src.TenableVulnerabilitiesSecretsConfig)
	}

	if src.UsersInfoSecretsConfig != nil {
		return json.Marshal(&src.UsersInfoSecretsConfig)
	}

	if src.UsersSecretsConfig != nil {
		return json.Marshal(&src.UsersSecretsConfig)
	}

	if src.VulnerabilitiesSecretsConfig != nil {
		return json.Marshal(&src.VulnerabilitiesSecretsConfig)
	}

	if src.VulnerabilityFindingsSecretsConfig != nil {
		return json.Marshal(&src.VulnerabilityFindingsSecretsConfig)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecretProcessesorInputConfigSecrets) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.ActorsInfoSecretsConfig != nil {
		return obj.ActorsInfoSecretsConfig
	}

	if obj.AdminActivitySecretsConfig != nil {
		return obj.AdminActivitySecretsConfig
	}

	if obj.AdminLogsSecretsConfig != nil {
		return obj.AdminLogsSecretsConfig
	}

	if obj.AuditLogsSecretsConfig != nil {
		return obj.AuditLogsSecretsConfig
	}

	if obj.AuthLogsSecretsConfig != nil {
		return obj.AuthLogsSecretsConfig
	}

	if obj.AzureActivityLogsSecretsConfig != nil {
		return obj.AzureActivityLogsSecretsConfig
	}

	if obj.BigqueryInputSecretsConfig != nil {
		return obj.BigqueryInputSecretsConfig
	}

	if obj.BoxEventsSecretsConfig != nil {
		return obj.BoxEventsSecretsConfig
	}

	if obj.BoxUsersSecretsConfig != nil {
		return obj.BoxUsersSecretsConfig
	}

	if obj.CloudAssetInventorySecretsConfig != nil {
		return obj.CloudAssetInventorySecretsConfig
	}

	if obj.CloudConfigurationFindingsSecretsConfig != nil {
		return obj.CloudConfigurationFindingsSecretsConfig
	}

	if obj.CloudLogsSecretsConfig != nil {
		return obj.CloudLogsSecretsConfig
	}

	if obj.CloudResourceInventorySecretsConfig != nil {
		return obj.CloudResourceInventorySecretsConfig
	}

	if obj.CrowdstrikeFdrSecretsConfig != nil {
		return obj.CrowdstrikeFdrSecretsConfig
	}

	if obj.DefenderForEndpointAlertsSecretsConfig != nil {
		return obj.DefenderForEndpointAlertsSecretsConfig
	}

	if obj.DetectSummariesSecretsConfig != nil {
		return obj.DetectSummariesSecretsConfig
	}

	if obj.DeviceActivitySecretsConfig != nil {
		return obj.DeviceActivitySecretsConfig
	}

	if obj.DeviceDetailsSecretsConfig != nil {
		return obj.DeviceDetailsSecretsConfig
	}

	if obj.DevicesSecretsConfig != nil {
		return obj.DevicesSecretsConfig
	}

	if obj.DriveActivitySecretsConfig != nil {
		return obj.DriveActivitySecretsConfig
	}

	if obj.EntraIdSecretsConfig != nil {
		return obj.EntraIdSecretsConfig
	}

	if obj.EventSecretsConfig != nil {
		return obj.EventSecretsConfig
	}

	if obj.EventsLogsSecretsConfig != nil {
		return obj.EventsLogsSecretsConfig
	}

	if obj.FullScansSecretsConfig != nil {
		return obj.FullScansSecretsConfig
	}

	if obj.IssuesSecretsConfig != nil {
		return obj.IssuesSecretsConfig
	}

	if obj.LogAnalyticsQuerySecretsConfig != nil {
		return obj.LogAnalyticsQuerySecretsConfig
	}

	if obj.LoginActivitySecretsConfig != nil {
		return obj.LoginActivitySecretsConfig
	}

	if obj.LoginSessionsSecretsConfig != nil {
		return obj.LoginSessionsSecretsConfig
	}

	if obj.OauthActivitySecretsConfig != nil {
		return obj.OauthActivitySecretsConfig
	}

	if obj.RolesInfoSecretsConfig != nil {
		return obj.RolesInfoSecretsConfig
	}

	if obj.SemgrepCodeFindingsSecretsConfig != nil {
		return obj.SemgrepCodeFindingsSecretsConfig
	}

	if obj.SemgrepDeploymentsSecretsConfig != nil {
		return obj.SemgrepDeploymentsSecretsConfig
	}

	if obj.SemgrepProjectDetailsSecretsConfig != nil {
		return obj.SemgrepProjectDetailsSecretsConfig
	}

	if obj.SemgrepProjectsSecretsConfig != nil {
		return obj.SemgrepProjectsSecretsConfig
	}

	if obj.SemgrepSupplyChainFindingsSecretsConfig != nil {
		return obj.SemgrepSupplyChainFindingsSecretsConfig
	}

	if obj.SlackUsersSecretsConfig != nil {
		return obj.SlackUsersSecretsConfig
	}

	if obj.SlackgroupsSecretsConfig != nil {
		return obj.SlackgroupsSecretsConfig
	}

	if obj.SnowflakeInputSecretsConfig != nil {
		return obj.SnowflakeInputSecretsConfig
	}

	if obj.SnykIssuesSecretsConfig != nil {
		return obj.SnykIssuesSecretsConfig
	}

	if obj.SnykOrganizationsSecretsConfig != nil {
		return obj.SnykOrganizationsSecretsConfig
	}

	if obj.SnykProjectsSecretsConfig != nil {
		return obj.SnykProjectsSecretsConfig
	}

	if obj.SnykTargetsSecretsConfig != nil {
		return obj.SnykTargetsSecretsConfig
	}

	if obj.TailscaleUsersSecretsConfig != nil {
		return obj.TailscaleUsersSecretsConfig
	}

	if obj.TenableAssetsSecretsConfig != nil {
		return obj.TenableAssetsSecretsConfig
	}

	if obj.TenableVulnerabilitiesSecretsConfig != nil {
		return obj.TenableVulnerabilitiesSecretsConfig
	}

	if obj.UsersInfoSecretsConfig != nil {
		return obj.UsersInfoSecretsConfig
	}

	if obj.UsersSecretsConfig != nil {
		return obj.UsersSecretsConfig
	}

	if obj.VulnerabilitiesSecretsConfig != nil {
		return obj.VulnerabilitiesSecretsConfig
	}

	if obj.VulnerabilityFindingsSecretsConfig != nil {
		return obj.VulnerabilityFindingsSecretsConfig
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SecretProcessesorInputConfigSecrets) GetActualInstanceValue() (interface{}) {
	if obj.ActorsInfoSecretsConfig != nil {
		return *obj.ActorsInfoSecretsConfig
	}

	if obj.AdminActivitySecretsConfig != nil {
		return *obj.AdminActivitySecretsConfig
	}

	if obj.AdminLogsSecretsConfig != nil {
		return *obj.AdminLogsSecretsConfig
	}

	if obj.AuditLogsSecretsConfig != nil {
		return *obj.AuditLogsSecretsConfig
	}

	if obj.AuthLogsSecretsConfig != nil {
		return *obj.AuthLogsSecretsConfig
	}

	if obj.AzureActivityLogsSecretsConfig != nil {
		return *obj.AzureActivityLogsSecretsConfig
	}

	if obj.BigqueryInputSecretsConfig != nil {
		return *obj.BigqueryInputSecretsConfig
	}

	if obj.BoxEventsSecretsConfig != nil {
		return *obj.BoxEventsSecretsConfig
	}

	if obj.BoxUsersSecretsConfig != nil {
		return *obj.BoxUsersSecretsConfig
	}

	if obj.CloudAssetInventorySecretsConfig != nil {
		return *obj.CloudAssetInventorySecretsConfig
	}

	if obj.CloudConfigurationFindingsSecretsConfig != nil {
		return *obj.CloudConfigurationFindingsSecretsConfig
	}

	if obj.CloudLogsSecretsConfig != nil {
		return *obj.CloudLogsSecretsConfig
	}

	if obj.CloudResourceInventorySecretsConfig != nil {
		return *obj.CloudResourceInventorySecretsConfig
	}

	if obj.CrowdstrikeFdrSecretsConfig != nil {
		return *obj.CrowdstrikeFdrSecretsConfig
	}

	if obj.DefenderForEndpointAlertsSecretsConfig != nil {
		return *obj.DefenderForEndpointAlertsSecretsConfig
	}

	if obj.DetectSummariesSecretsConfig != nil {
		return *obj.DetectSummariesSecretsConfig
	}

	if obj.DeviceActivitySecretsConfig != nil {
		return *obj.DeviceActivitySecretsConfig
	}

	if obj.DeviceDetailsSecretsConfig != nil {
		return *obj.DeviceDetailsSecretsConfig
	}

	if obj.DevicesSecretsConfig != nil {
		return *obj.DevicesSecretsConfig
	}

	if obj.DriveActivitySecretsConfig != nil {
		return *obj.DriveActivitySecretsConfig
	}

	if obj.EntraIdSecretsConfig != nil {
		return *obj.EntraIdSecretsConfig
	}

	if obj.EventSecretsConfig != nil {
		return *obj.EventSecretsConfig
	}

	if obj.EventsLogsSecretsConfig != nil {
		return *obj.EventsLogsSecretsConfig
	}

	if obj.FullScansSecretsConfig != nil {
		return *obj.FullScansSecretsConfig
	}

	if obj.IssuesSecretsConfig != nil {
		return *obj.IssuesSecretsConfig
	}

	if obj.LogAnalyticsQuerySecretsConfig != nil {
		return *obj.LogAnalyticsQuerySecretsConfig
	}

	if obj.LoginActivitySecretsConfig != nil {
		return *obj.LoginActivitySecretsConfig
	}

	if obj.LoginSessionsSecretsConfig != nil {
		return *obj.LoginSessionsSecretsConfig
	}

	if obj.OauthActivitySecretsConfig != nil {
		return *obj.OauthActivitySecretsConfig
	}

	if obj.RolesInfoSecretsConfig != nil {
		return *obj.RolesInfoSecretsConfig
	}

	if obj.SemgrepCodeFindingsSecretsConfig != nil {
		return *obj.SemgrepCodeFindingsSecretsConfig
	}

	if obj.SemgrepDeploymentsSecretsConfig != nil {
		return *obj.SemgrepDeploymentsSecretsConfig
	}

	if obj.SemgrepProjectDetailsSecretsConfig != nil {
		return *obj.SemgrepProjectDetailsSecretsConfig
	}

	if obj.SemgrepProjectsSecretsConfig != nil {
		return *obj.SemgrepProjectsSecretsConfig
	}

	if obj.SemgrepSupplyChainFindingsSecretsConfig != nil {
		return *obj.SemgrepSupplyChainFindingsSecretsConfig
	}

	if obj.SlackUsersSecretsConfig != nil {
		return *obj.SlackUsersSecretsConfig
	}

	if obj.SlackgroupsSecretsConfig != nil {
		return *obj.SlackgroupsSecretsConfig
	}

	if obj.SnowflakeInputSecretsConfig != nil {
		return *obj.SnowflakeInputSecretsConfig
	}

	if obj.SnykIssuesSecretsConfig != nil {
		return *obj.SnykIssuesSecretsConfig
	}

	if obj.SnykOrganizationsSecretsConfig != nil {
		return *obj.SnykOrganizationsSecretsConfig
	}

	if obj.SnykProjectsSecretsConfig != nil {
		return *obj.SnykProjectsSecretsConfig
	}

	if obj.SnykTargetsSecretsConfig != nil {
		return *obj.SnykTargetsSecretsConfig
	}

	if obj.TailscaleUsersSecretsConfig != nil {
		return *obj.TailscaleUsersSecretsConfig
	}

	if obj.TenableAssetsSecretsConfig != nil {
		return *obj.TenableAssetsSecretsConfig
	}

	if obj.TenableVulnerabilitiesSecretsConfig != nil {
		return *obj.TenableVulnerabilitiesSecretsConfig
	}

	if obj.UsersInfoSecretsConfig != nil {
		return *obj.UsersInfoSecretsConfig
	}

	if obj.UsersSecretsConfig != nil {
		return *obj.UsersSecretsConfig
	}

	if obj.VulnerabilitiesSecretsConfig != nil {
		return *obj.VulnerabilitiesSecretsConfig
	}

	if obj.VulnerabilityFindingsSecretsConfig != nil {
		return *obj.VulnerabilityFindingsSecretsConfig
	}

	if obj.MapmapOfStringAny != nil {
		return *obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableSecretProcessesorInputConfigSecrets struct {
	value *SecretProcessesorInputConfigSecrets
	isSet bool
}

func (v NullableSecretProcessesorInputConfigSecrets) Get() *SecretProcessesorInputConfigSecrets {
	return v.value
}

func (v *NullableSecretProcessesorInputConfigSecrets) Set(val *SecretProcessesorInputConfigSecrets) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretProcessesorInputConfigSecrets) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretProcessesorInputConfigSecrets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretProcessesorInputConfigSecrets(val *SecretProcessesorInputConfigSecrets) *NullableSecretProcessesorInputConfigSecrets {
	return &NullableSecretProcessesorInputConfigSecrets{value: val, isSet: true}
}

func (v NullableSecretProcessesorInputConfigSecrets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretProcessesorInputConfigSecrets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


