/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the GoogleCloudStorageSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoogleCloudStorageSettingsConfig{}

// GoogleCloudStorageSettingsConfig Google Cloud Storage settings
type GoogleCloudStorageSettingsConfig struct {
	// The name of the Google Cloud Storage bucket to use
	BucketName *string `json:"bucket_name,omitempty"`
	// Compression format of the Google Cloud Storage objects.
	Compression *string `json:"compression,omitempty"`
	// The format of the files in the bucket, e.g., \"json\", \"csv\", etc.
	Format *string `json:"format,omitempty"`
	// Specifies the partition format of your bucket. Select the option that matches how your data is currently organized. This ensures that the system can correctly navigate your bucket structure. Options include Hive-compatible format ('year=2024/month=01/day=01') commonly used in data lake setups, and simple date format ('2024/01/01') for basic chronological organization.
	PartitionFormat *string `json:"partition_format,omitempty"`
	// The prefix to use when reading from the bucket. This is used to filter objects in the bucket.
	Prefix *string `json:"prefix,omitempty"`
	// The Google Cloud project ID to use
	ProjectId *string `json:"project_id,omitempty"`
	// Location of the record in the JSON object. Applies only if the format is JSON.
	RecordLocation *string `json:"record_location,omitempty"`
}

// NewGoogleCloudStorageSettingsConfig instantiates a new GoogleCloudStorageSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoogleCloudStorageSettingsConfig() *GoogleCloudStorageSettingsConfig {
	this := GoogleCloudStorageSettingsConfig{}
	return &this
}

// NewGoogleCloudStorageSettingsConfigWithDefaults instantiates a new GoogleCloudStorageSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoogleCloudStorageSettingsConfigWithDefaults() *GoogleCloudStorageSettingsConfig {
	this := GoogleCloudStorageSettingsConfig{}
	return &this
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *GoogleCloudStorageSettingsConfig) GetBucketName() string {
	if o == nil || IsNil(o.BucketName) {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageSettingsConfig) GetBucketNameOk() (*string, bool) {
	if o == nil || IsNil(o.BucketName) {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *GoogleCloudStorageSettingsConfig) HasBucketName() bool {
	if o != nil && !IsNil(o.BucketName) {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *GoogleCloudStorageSettingsConfig) SetBucketName(v string) {
	o.BucketName = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *GoogleCloudStorageSettingsConfig) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageSettingsConfig) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *GoogleCloudStorageSettingsConfig) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *GoogleCloudStorageSettingsConfig) SetCompression(v string) {
	o.Compression = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *GoogleCloudStorageSettingsConfig) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageSettingsConfig) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *GoogleCloudStorageSettingsConfig) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *GoogleCloudStorageSettingsConfig) SetFormat(v string) {
	o.Format = &v
}

// GetPartitionFormat returns the PartitionFormat field value if set, zero value otherwise.
func (o *GoogleCloudStorageSettingsConfig) GetPartitionFormat() string {
	if o == nil || IsNil(o.PartitionFormat) {
		var ret string
		return ret
	}
	return *o.PartitionFormat
}

// GetPartitionFormatOk returns a tuple with the PartitionFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageSettingsConfig) GetPartitionFormatOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionFormat) {
		return nil, false
	}
	return o.PartitionFormat, true
}

// HasPartitionFormat returns a boolean if a field has been set.
func (o *GoogleCloudStorageSettingsConfig) HasPartitionFormat() bool {
	if o != nil && !IsNil(o.PartitionFormat) {
		return true
	}

	return false
}

// SetPartitionFormat gets a reference to the given string and assigns it to the PartitionFormat field.
func (o *GoogleCloudStorageSettingsConfig) SetPartitionFormat(v string) {
	o.PartitionFormat = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *GoogleCloudStorageSettingsConfig) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageSettingsConfig) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *GoogleCloudStorageSettingsConfig) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *GoogleCloudStorageSettingsConfig) SetPrefix(v string) {
	o.Prefix = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *GoogleCloudStorageSettingsConfig) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageSettingsConfig) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *GoogleCloudStorageSettingsConfig) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *GoogleCloudStorageSettingsConfig) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetRecordLocation returns the RecordLocation field value if set, zero value otherwise.
func (o *GoogleCloudStorageSettingsConfig) GetRecordLocation() string {
	if o == nil || IsNil(o.RecordLocation) {
		var ret string
		return ret
	}
	return *o.RecordLocation
}

// GetRecordLocationOk returns a tuple with the RecordLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageSettingsConfig) GetRecordLocationOk() (*string, bool) {
	if o == nil || IsNil(o.RecordLocation) {
		return nil, false
	}
	return o.RecordLocation, true
}

// HasRecordLocation returns a boolean if a field has been set.
func (o *GoogleCloudStorageSettingsConfig) HasRecordLocation() bool {
	if o != nil && !IsNil(o.RecordLocation) {
		return true
	}

	return false
}

// SetRecordLocation gets a reference to the given string and assigns it to the RecordLocation field.
func (o *GoogleCloudStorageSettingsConfig) SetRecordLocation(v string) {
	o.RecordLocation = &v
}

func (o GoogleCloudStorageSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoogleCloudStorageSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BucketName) {
		toSerialize["bucket_name"] = o.BucketName
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.PartitionFormat) {
		toSerialize["partition_format"] = o.PartitionFormat
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.RecordLocation) {
		toSerialize["record_location"] = o.RecordLocation
	}
	return toSerialize, nil
}

type NullableGoogleCloudStorageSettingsConfig struct {
	value *GoogleCloudStorageSettingsConfig
	isSet bool
}

func (v NullableGoogleCloudStorageSettingsConfig) Get() *GoogleCloudStorageSettingsConfig {
	return v.value
}

func (v *NullableGoogleCloudStorageSettingsConfig) Set(val *GoogleCloudStorageSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGoogleCloudStorageSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGoogleCloudStorageSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoogleCloudStorageSettingsConfig(val *GoogleCloudStorageSettingsConfig) *NullableGoogleCloudStorageSettingsConfig {
	return &NullableGoogleCloudStorageSettingsConfig{value: val, isSet: true}
}

func (v NullableGoogleCloudStorageSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoogleCloudStorageSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


