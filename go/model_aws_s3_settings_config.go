/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the AwsS3SettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsS3SettingsConfig{}

// AwsS3SettingsConfig AWS S3 settings
type AwsS3SettingsConfig struct {
	// Name of the S3 bucket.
	Bucket *string `json:"bucket,omitempty"`
	// Compression format of the S3 objects.
	Compression *string `json:"compression,omitempty"`
	// File format of the S3 objects.
	Format *string `json:"format,omitempty"`
	// Role ARN to assume when reading from S3.
	PartitionFormat *string `json:"partition_format,omitempty"`
	// Prefix of the S3 object keys to read.
	Prefix *string `json:"prefix,omitempty"`
	// Specifies the partition format of your S3 bucket. Select the option that matches how your data is currently organized in S3. This ensures that the system can correctly navigate your bucket structure. Options include Hive-compatible format ('year=2024/month=01/day=01') commonly used in data lake setups, and simple date format ('2024/01/01') for basic chronological organization.
	RecordLocation *string `json:"record_location,omitempty"`
	// AWS Region of your bucket.
	Region *string `json:"region,omitempty"`
	// Location of the record in the JSON object. This can be ignored if the record is not in JSON format.
	RoleArn *string `json:"role_arn,omitempty"`
}

// NewAwsS3SettingsConfig instantiates a new AwsS3SettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsS3SettingsConfig() *AwsS3SettingsConfig {
	this := AwsS3SettingsConfig{}
	return &this
}

// NewAwsS3SettingsConfigWithDefaults instantiates a new AwsS3SettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsS3SettingsConfigWithDefaults() *AwsS3SettingsConfig {
	this := AwsS3SettingsConfig{}
	return &this
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *AwsS3SettingsConfig) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3SettingsConfig) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *AwsS3SettingsConfig) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *AwsS3SettingsConfig) SetBucket(v string) {
	o.Bucket = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *AwsS3SettingsConfig) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3SettingsConfig) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *AwsS3SettingsConfig) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *AwsS3SettingsConfig) SetCompression(v string) {
	o.Compression = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *AwsS3SettingsConfig) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3SettingsConfig) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *AwsS3SettingsConfig) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *AwsS3SettingsConfig) SetFormat(v string) {
	o.Format = &v
}

// GetPartitionFormat returns the PartitionFormat field value if set, zero value otherwise.
func (o *AwsS3SettingsConfig) GetPartitionFormat() string {
	if o == nil || IsNil(o.PartitionFormat) {
		var ret string
		return ret
	}
	return *o.PartitionFormat
}

// GetPartitionFormatOk returns a tuple with the PartitionFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3SettingsConfig) GetPartitionFormatOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionFormat) {
		return nil, false
	}
	return o.PartitionFormat, true
}

// HasPartitionFormat returns a boolean if a field has been set.
func (o *AwsS3SettingsConfig) HasPartitionFormat() bool {
	if o != nil && !IsNil(o.PartitionFormat) {
		return true
	}

	return false
}

// SetPartitionFormat gets a reference to the given string and assigns it to the PartitionFormat field.
func (o *AwsS3SettingsConfig) SetPartitionFormat(v string) {
	o.PartitionFormat = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *AwsS3SettingsConfig) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3SettingsConfig) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *AwsS3SettingsConfig) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *AwsS3SettingsConfig) SetPrefix(v string) {
	o.Prefix = &v
}

// GetRecordLocation returns the RecordLocation field value if set, zero value otherwise.
func (o *AwsS3SettingsConfig) GetRecordLocation() string {
	if o == nil || IsNil(o.RecordLocation) {
		var ret string
		return ret
	}
	return *o.RecordLocation
}

// GetRecordLocationOk returns a tuple with the RecordLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3SettingsConfig) GetRecordLocationOk() (*string, bool) {
	if o == nil || IsNil(o.RecordLocation) {
		return nil, false
	}
	return o.RecordLocation, true
}

// HasRecordLocation returns a boolean if a field has been set.
func (o *AwsS3SettingsConfig) HasRecordLocation() bool {
	if o != nil && !IsNil(o.RecordLocation) {
		return true
	}

	return false
}

// SetRecordLocation gets a reference to the given string and assigns it to the RecordLocation field.
func (o *AwsS3SettingsConfig) SetRecordLocation(v string) {
	o.RecordLocation = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *AwsS3SettingsConfig) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3SettingsConfig) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *AwsS3SettingsConfig) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *AwsS3SettingsConfig) SetRegion(v string) {
	o.Region = &v
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *AwsS3SettingsConfig) GetRoleArn() string {
	if o == nil || IsNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3SettingsConfig) GetRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *AwsS3SettingsConfig) HasRoleArn() bool {
	if o != nil && !IsNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *AwsS3SettingsConfig) SetRoleArn(v string) {
	o.RoleArn = &v
}

func (o AwsS3SettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsS3SettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.PartitionFormat) {
		toSerialize["partition_format"] = o.PartitionFormat
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.RecordLocation) {
		toSerialize["record_location"] = o.RecordLocation
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.RoleArn) {
		toSerialize["role_arn"] = o.RoleArn
	}
	return toSerialize, nil
}

type NullableAwsS3SettingsConfig struct {
	value *AwsS3SettingsConfig
	isSet bool
}

func (v NullableAwsS3SettingsConfig) Get() *AwsS3SettingsConfig {
	return v.value
}

func (v *NullableAwsS3SettingsConfig) Set(val *AwsS3SettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsS3SettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsS3SettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsS3SettingsConfig(val *AwsS3SettingsConfig) *NullableAwsS3SettingsConfig {
	return &NullableAwsS3SettingsConfig{value: val, isSet: true}
}

func (v NullableAwsS3SettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsS3SettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


