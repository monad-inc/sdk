/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq{}

// MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq struct for MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
type MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq struct {
	// The key to mutate
	Key *string `json:"key,omitempty"`
	Value interface{} `json:"value,omitempty"`
	ValueToSet interface{} `json:"value_to_set,omitempty"`
}

// NewMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq instantiates a new MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq() *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq {
	this := MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq{}
	return &this
}

// NewMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEqWithDefaults instantiates a new MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEqWithDefaults() *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq {
	this := MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) SetKey(v string) {
	o.Key = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) SetValue(v interface{}) {
	o.Value = v
}

// GetValueToSet returns the ValueToSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) GetValueToSet() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ValueToSet
}

// GetValueToSetOk returns a tuple with the ValueToSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) GetValueToSetOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ValueToSet) {
		return nil, false
	}
	return &o.ValueToSet, true
}

// HasValueToSet returns a boolean if a field has been set.
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) HasValueToSet() bool {
	if o != nil && !IsNil(o.ValueToSet) {
		return true
	}

	return false
}

// SetValueToSet gets a reference to the given interface{} and assigns it to the ValueToSet field.
func (o *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) SetValueToSet(v interface{}) {
	o.ValueToSet = v
}

func (o MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueToSet != nil {
		toSerialize["value_to_set"] = o.ValueToSet
	}
	return toSerialize, nil
}

type NullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq struct {
	value *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
	isSet bool
}

func (v NullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) Get() *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq {
	return v.value
}

func (v *NullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) Set(val *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) {
	v.value = val
	v.isSet = true
}

func (v NullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) IsSet() bool {
	return v.isSet
}

func (v *NullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq(val *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) *NullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq {
	return &NullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq{value: val, isSet: true}
}

func (v NullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


