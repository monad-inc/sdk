/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the PostgresqlSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PostgresqlSettingsConfig{}

// PostgresqlSettingsConfig struct for PostgresqlSettingsConfig
type PostgresqlSettingsConfig struct {
	// The column names to write data to, must match the root fields of the data If not provided all root fields will be used
	ColumnNames []string `json:"column_names,omitempty"`
	// The database name to connect to
	Database *string `json:"database,omitempty"`
	// The host of the PostgreSQL database
	Host *string `json:"host,omitempty"`
	// The port of the PostgreSQL database
	Port *int32 `json:"port,omitempty"`
	// The table name to write data to
	Table *string `json:"table,omitempty"`
	// The user to connect to the PostgreSQL database
	User *string `json:"user,omitempty"`
}

// NewPostgresqlSettingsConfig instantiates a new PostgresqlSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostgresqlSettingsConfig() *PostgresqlSettingsConfig {
	this := PostgresqlSettingsConfig{}
	return &this
}

// NewPostgresqlSettingsConfigWithDefaults instantiates a new PostgresqlSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostgresqlSettingsConfigWithDefaults() *PostgresqlSettingsConfig {
	this := PostgresqlSettingsConfig{}
	return &this
}

// GetColumnNames returns the ColumnNames field value if set, zero value otherwise.
func (o *PostgresqlSettingsConfig) GetColumnNames() []string {
	if o == nil || IsNil(o.ColumnNames) {
		var ret []string
		return ret
	}
	return o.ColumnNames
}

// GetColumnNamesOk returns a tuple with the ColumnNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlSettingsConfig) GetColumnNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ColumnNames) {
		return nil, false
	}
	return o.ColumnNames, true
}

// HasColumnNames returns a boolean if a field has been set.
func (o *PostgresqlSettingsConfig) HasColumnNames() bool {
	if o != nil && !IsNil(o.ColumnNames) {
		return true
	}

	return false
}

// SetColumnNames gets a reference to the given []string and assigns it to the ColumnNames field.
func (o *PostgresqlSettingsConfig) SetColumnNames(v []string) {
	o.ColumnNames = v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *PostgresqlSettingsConfig) GetDatabase() string {
	if o == nil || IsNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlSettingsConfig) GetDatabaseOk() (*string, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *PostgresqlSettingsConfig) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *PostgresqlSettingsConfig) SetDatabase(v string) {
	o.Database = &v
}

// GetHost returns the Host field value if set, zero value otherwise.
func (o *PostgresqlSettingsConfig) GetHost() string {
	if o == nil || IsNil(o.Host) {
		var ret string
		return ret
	}
	return *o.Host
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlSettingsConfig) GetHostOk() (*string, bool) {
	if o == nil || IsNil(o.Host) {
		return nil, false
	}
	return o.Host, true
}

// HasHost returns a boolean if a field has been set.
func (o *PostgresqlSettingsConfig) HasHost() bool {
	if o != nil && !IsNil(o.Host) {
		return true
	}

	return false
}

// SetHost gets a reference to the given string and assigns it to the Host field.
func (o *PostgresqlSettingsConfig) SetHost(v string) {
	o.Host = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *PostgresqlSettingsConfig) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlSettingsConfig) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *PostgresqlSettingsConfig) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *PostgresqlSettingsConfig) SetPort(v int32) {
	o.Port = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *PostgresqlSettingsConfig) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlSettingsConfig) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *PostgresqlSettingsConfig) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *PostgresqlSettingsConfig) SetTable(v string) {
	o.Table = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *PostgresqlSettingsConfig) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostgresqlSettingsConfig) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *PostgresqlSettingsConfig) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *PostgresqlSettingsConfig) SetUser(v string) {
	o.User = &v
}

func (o PostgresqlSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PostgresqlSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ColumnNames) {
		toSerialize["column_names"] = o.ColumnNames
	}
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.Host) {
		toSerialize["host"] = o.Host
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullablePostgresqlSettingsConfig struct {
	value *PostgresqlSettingsConfig
	isSet bool
}

func (v NullablePostgresqlSettingsConfig) Get() *PostgresqlSettingsConfig {
	return v.value
}

func (v *NullablePostgresqlSettingsConfig) Set(val *PostgresqlSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePostgresqlSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePostgresqlSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostgresqlSettingsConfig(val *PostgresqlSettingsConfig) *NullablePostgresqlSettingsConfig {
	return &NullablePostgresqlSettingsConfig{value: val, isSet: true}
}

func (v NullablePostgresqlSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostgresqlSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


