/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the SnowflakeInputSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeInputSettingsConfig{}

// SnowflakeInputSettingsConfig Snowflake Input Settings
type SnowflakeInputSettingsConfig struct {
	// The unique identifier for your Snowflake account, typically in the form of 'organization-account_name'.
	Account *string `json:"account,omitempty"`
	// Authentication type: \"password\" or \"private key\"
	AuthType *string `json:"auth_type,omitempty"`
	// Cron string for scheduling the ingest of your input
	Cron *string `json:"cron,omitempty"`
	// The name of the Snowflake database to connect to and perform operations on
	Database *string `json:"database,omitempty"`
	// Optional custom query to use instead of table (must include timestamp_column)
	Query *string `json:"query,omitempty"`
	// The name of the Role your service account was granted which can access your resources.
	Role *string `json:"role,omitempty"`
	// The schema within the Snowflake database where the target table resides.
	Schema *string `json:"schema,omitempty"`
	// The name of the table in Snowflake to query data from.
	Table *string `json:"table,omitempty"`
	// The column containing timestamp values used for incremental loading
	TimestampColumn *string `json:"timestamp_column,omitempty"`
	// The username of the Snowflake account used to establish the connection.
	User *string `json:"user,omitempty"`
	// The Snowflake virtual warehouse to use for executing queries and processing data.
	Warehouse *string `json:"warehouse,omitempty"`
}

// NewSnowflakeInputSettingsConfig instantiates a new SnowflakeInputSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeInputSettingsConfig() *SnowflakeInputSettingsConfig {
	this := SnowflakeInputSettingsConfig{}
	return &this
}

// NewSnowflakeInputSettingsConfigWithDefaults instantiates a new SnowflakeInputSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeInputSettingsConfigWithDefaults() *SnowflakeInputSettingsConfig {
	this := SnowflakeInputSettingsConfig{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *SnowflakeInputSettingsConfig) SetAccount(v string) {
	o.Account = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *SnowflakeInputSettingsConfig) SetAuthType(v string) {
	o.AuthType = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *SnowflakeInputSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetDatabase() string {
	if o == nil || IsNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetDatabaseOk() (*string, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *SnowflakeInputSettingsConfig) SetDatabase(v string) {
	o.Database = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *SnowflakeInputSettingsConfig) SetQuery(v string) {
	o.Query = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *SnowflakeInputSettingsConfig) SetRole(v string) {
	o.Role = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *SnowflakeInputSettingsConfig) SetSchema(v string) {
	o.Schema = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *SnowflakeInputSettingsConfig) SetTable(v string) {
	o.Table = &v
}

// GetTimestampColumn returns the TimestampColumn field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetTimestampColumn() string {
	if o == nil || IsNil(o.TimestampColumn) {
		var ret string
		return ret
	}
	return *o.TimestampColumn
}

// GetTimestampColumnOk returns a tuple with the TimestampColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetTimestampColumnOk() (*string, bool) {
	if o == nil || IsNil(o.TimestampColumn) {
		return nil, false
	}
	return o.TimestampColumn, true
}

// HasTimestampColumn returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasTimestampColumn() bool {
	if o != nil && !IsNil(o.TimestampColumn) {
		return true
	}

	return false
}

// SetTimestampColumn gets a reference to the given string and assigns it to the TimestampColumn field.
func (o *SnowflakeInputSettingsConfig) SetTimestampColumn(v string) {
	o.TimestampColumn = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *SnowflakeInputSettingsConfig) SetUser(v string) {
	o.User = &v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *SnowflakeInputSettingsConfig) GetWarehouse() string {
	if o == nil || IsNil(o.Warehouse) {
		var ret string
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSettingsConfig) GetWarehouseOk() (*string, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *SnowflakeInputSettingsConfig) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given string and assigns it to the Warehouse field.
func (o *SnowflakeInputSettingsConfig) SetWarehouse(v string) {
	o.Warehouse = &v
}

func (o SnowflakeInputSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeInputSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	if !IsNil(o.TimestampColumn) {
		toSerialize["timestamp_column"] = o.TimestampColumn
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	return toSerialize, nil
}

type NullableSnowflakeInputSettingsConfig struct {
	value *SnowflakeInputSettingsConfig
	isSet bool
}

func (v NullableSnowflakeInputSettingsConfig) Get() *SnowflakeInputSettingsConfig {
	return v.value
}

func (v *NullableSnowflakeInputSettingsConfig) Set(val *SnowflakeInputSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeInputSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeInputSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeInputSettingsConfig(val *SnowflakeInputSettingsConfig) *NullableSnowflakeInputSettingsConfig {
	return &NullableSnowflakeInputSettingsConfig{value: val, isSet: true}
}

func (v NullableSnowflakeInputSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeInputSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


