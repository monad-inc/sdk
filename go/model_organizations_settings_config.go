/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the OrganizationsSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationsSettingsConfig{}

// OrganizationsSettingsConfig struct for OrganizationsSettingsConfig
type OrganizationsSettingsConfig struct {
	// Specifies whether to list AWS accounts or organizational units (OUs) as children of the parent entity.
	ChildType *string `json:"child_type,omitempty"`
	// Cron expression for scheduling the input
	Cron *string `json:"cron,omitempty"`
	// Parent ID to list children for
	ParentId *string `json:"parent_id,omitempty"`
	// AWS region to use
	Region *string `json:"region,omitempty"`
	// Role ARN to assume
	RoleArn *string `json:"role_arn,omitempty"`
	// Generate synthetic demo data instead of connecting to the real data source.
	UseSyntheticData *bool `json:"use_synthetic_data,omitempty"`
}

// NewOrganizationsSettingsConfig instantiates a new OrganizationsSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationsSettingsConfig() *OrganizationsSettingsConfig {
	this := OrganizationsSettingsConfig{}
	return &this
}

// NewOrganizationsSettingsConfigWithDefaults instantiates a new OrganizationsSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationsSettingsConfigWithDefaults() *OrganizationsSettingsConfig {
	this := OrganizationsSettingsConfig{}
	return &this
}

// GetChildType returns the ChildType field value if set, zero value otherwise.
func (o *OrganizationsSettingsConfig) GetChildType() string {
	if o == nil || IsNil(o.ChildType) {
		var ret string
		return ret
	}
	return *o.ChildType
}

// GetChildTypeOk returns a tuple with the ChildType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsSettingsConfig) GetChildTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ChildType) {
		return nil, false
	}
	return o.ChildType, true
}

// HasChildType returns a boolean if a field has been set.
func (o *OrganizationsSettingsConfig) HasChildType() bool {
	if o != nil && !IsNil(o.ChildType) {
		return true
	}

	return false
}

// SetChildType gets a reference to the given string and assigns it to the ChildType field.
func (o *OrganizationsSettingsConfig) SetChildType(v string) {
	o.ChildType = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *OrganizationsSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *OrganizationsSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *OrganizationsSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetParentId returns the ParentId field value if set, zero value otherwise.
func (o *OrganizationsSettingsConfig) GetParentId() string {
	if o == nil || IsNil(o.ParentId) {
		var ret string
		return ret
	}
	return *o.ParentId
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsSettingsConfig) GetParentIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentId) {
		return nil, false
	}
	return o.ParentId, true
}

// HasParentId returns a boolean if a field has been set.
func (o *OrganizationsSettingsConfig) HasParentId() bool {
	if o != nil && !IsNil(o.ParentId) {
		return true
	}

	return false
}

// SetParentId gets a reference to the given string and assigns it to the ParentId field.
func (o *OrganizationsSettingsConfig) SetParentId(v string) {
	o.ParentId = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *OrganizationsSettingsConfig) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsSettingsConfig) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *OrganizationsSettingsConfig) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *OrganizationsSettingsConfig) SetRegion(v string) {
	o.Region = &v
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *OrganizationsSettingsConfig) GetRoleArn() string {
	if o == nil || IsNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsSettingsConfig) GetRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *OrganizationsSettingsConfig) HasRoleArn() bool {
	if o != nil && !IsNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *OrganizationsSettingsConfig) SetRoleArn(v string) {
	o.RoleArn = &v
}

// GetUseSyntheticData returns the UseSyntheticData field value if set, zero value otherwise.
func (o *OrganizationsSettingsConfig) GetUseSyntheticData() bool {
	if o == nil || IsNil(o.UseSyntheticData) {
		var ret bool
		return ret
	}
	return *o.UseSyntheticData
}

// GetUseSyntheticDataOk returns a tuple with the UseSyntheticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationsSettingsConfig) GetUseSyntheticDataOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyntheticData) {
		return nil, false
	}
	return o.UseSyntheticData, true
}

// HasUseSyntheticData returns a boolean if a field has been set.
func (o *OrganizationsSettingsConfig) HasUseSyntheticData() bool {
	if o != nil && !IsNil(o.UseSyntheticData) {
		return true
	}

	return false
}

// SetUseSyntheticData gets a reference to the given bool and assigns it to the UseSyntheticData field.
func (o *OrganizationsSettingsConfig) SetUseSyntheticData(v bool) {
	o.UseSyntheticData = &v
}

func (o OrganizationsSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationsSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChildType) {
		toSerialize["child_type"] = o.ChildType
	}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.ParentId) {
		toSerialize["parent_id"] = o.ParentId
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.RoleArn) {
		toSerialize["role_arn"] = o.RoleArn
	}
	if !IsNil(o.UseSyntheticData) {
		toSerialize["use_synthetic_data"] = o.UseSyntheticData
	}
	return toSerialize, nil
}

type NullableOrganizationsSettingsConfig struct {
	value *OrganizationsSettingsConfig
	isSet bool
}

func (v NullableOrganizationsSettingsConfig) Get() *OrganizationsSettingsConfig {
	return v.value
}

func (v *NullableOrganizationsSettingsConfig) Set(val *OrganizationsSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationsSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationsSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationsSettingsConfig(val *OrganizationsSettingsConfig) *NullableOrganizationsSettingsConfig {
	return &NullableOrganizationsSettingsConfig{value: val, isSet: true}
}

func (v NullableOrganizationsSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationsSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


