/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the JqJQ type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &JqJQ{}

// JqJQ struct for JqJQ
type JqJQ struct {
	// The key to store the JQ query result under. If this is not provided the output will be the result of the JQ query.
	Key *string `json:"key,omitempty"`
	// The JQ query to apply to the record
	Query *string `json:"query,omitempty"`
}

// NewJqJQ instantiates a new JqJQ object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJqJQ() *JqJQ {
	this := JqJQ{}
	return &this
}

// NewJqJQWithDefaults instantiates a new JqJQ object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJqJQWithDefaults() *JqJQ {
	this := JqJQ{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *JqJQ) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JqJQ) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *JqJQ) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *JqJQ) SetKey(v string) {
	o.Key = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *JqJQ) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JqJQ) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *JqJQ) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *JqJQ) SetQuery(v string) {
	o.Query = &v
}

func (o JqJQ) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o JqJQ) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	return toSerialize, nil
}

type NullableJqJQ struct {
	value *JqJQ
	isSet bool
}

func (v NullableJqJQ) Get() *JqJQ {
	return v.value
}

func (v *NullableJqJQ) Set(val *JqJQ) {
	v.value = val
	v.isSet = true
}

func (v NullableJqJQ) IsSet() bool {
	return v.isSet
}

func (v *NullableJqJQ) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJqJQ(val *JqJQ) *NullableJqJQ {
	return &NullableJqJQ{value: val, isSet: true}
}

func (v NullableJqJQ) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJqJQ) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


