/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the CertificateManagerSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateManagerSettingsConfig{}

// CertificateManagerSettingsConfig Aws Certificate Manager settings
type CertificateManagerSettingsConfig struct {
	CertificateStatuses []string `json:"certificate_statuses,omitempty"`
	// Cron expression for scheduling the input
	Cron *string `json:"cron,omitempty"`
	// includes struct
	ExtendedKeyUsage []string `json:"extended_key_usage,omitempty"`
	KeyTypes []string `json:"key_types,omitempty"`
	KeyUsage []string `json:"key_usage,omitempty"`
	ManagedBy *string `json:"managed_by,omitempty"`
	Regions []string `json:"regions,omitempty"`
	// The ARN of the role to assume to access the bucket
	RoleArn *string `json:"role_arn,omitempty"`
}

// NewCertificateManagerSettingsConfig instantiates a new CertificateManagerSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateManagerSettingsConfig() *CertificateManagerSettingsConfig {
	this := CertificateManagerSettingsConfig{}
	return &this
}

// NewCertificateManagerSettingsConfigWithDefaults instantiates a new CertificateManagerSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateManagerSettingsConfigWithDefaults() *CertificateManagerSettingsConfig {
	this := CertificateManagerSettingsConfig{}
	return &this
}

// GetCertificateStatuses returns the CertificateStatuses field value if set, zero value otherwise.
func (o *CertificateManagerSettingsConfig) GetCertificateStatuses() []string {
	if o == nil || IsNil(o.CertificateStatuses) {
		var ret []string
		return ret
	}
	return o.CertificateStatuses
}

// GetCertificateStatusesOk returns a tuple with the CertificateStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateManagerSettingsConfig) GetCertificateStatusesOk() ([]string, bool) {
	if o == nil || IsNil(o.CertificateStatuses) {
		return nil, false
	}
	return o.CertificateStatuses, true
}

// HasCertificateStatuses returns a boolean if a field has been set.
func (o *CertificateManagerSettingsConfig) HasCertificateStatuses() bool {
	if o != nil && !IsNil(o.CertificateStatuses) {
		return true
	}

	return false
}

// SetCertificateStatuses gets a reference to the given []string and assigns it to the CertificateStatuses field.
func (o *CertificateManagerSettingsConfig) SetCertificateStatuses(v []string) {
	o.CertificateStatuses = v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *CertificateManagerSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateManagerSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *CertificateManagerSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *CertificateManagerSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetExtendedKeyUsage returns the ExtendedKeyUsage field value if set, zero value otherwise.
func (o *CertificateManagerSettingsConfig) GetExtendedKeyUsage() []string {
	if o == nil || IsNil(o.ExtendedKeyUsage) {
		var ret []string
		return ret
	}
	return o.ExtendedKeyUsage
}

// GetExtendedKeyUsageOk returns a tuple with the ExtendedKeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateManagerSettingsConfig) GetExtendedKeyUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.ExtendedKeyUsage) {
		return nil, false
	}
	return o.ExtendedKeyUsage, true
}

// HasExtendedKeyUsage returns a boolean if a field has been set.
func (o *CertificateManagerSettingsConfig) HasExtendedKeyUsage() bool {
	if o != nil && !IsNil(o.ExtendedKeyUsage) {
		return true
	}

	return false
}

// SetExtendedKeyUsage gets a reference to the given []string and assigns it to the ExtendedKeyUsage field.
func (o *CertificateManagerSettingsConfig) SetExtendedKeyUsage(v []string) {
	o.ExtendedKeyUsage = v
}

// GetKeyTypes returns the KeyTypes field value if set, zero value otherwise.
func (o *CertificateManagerSettingsConfig) GetKeyTypes() []string {
	if o == nil || IsNil(o.KeyTypes) {
		var ret []string
		return ret
	}
	return o.KeyTypes
}

// GetKeyTypesOk returns a tuple with the KeyTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateManagerSettingsConfig) GetKeyTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyTypes) {
		return nil, false
	}
	return o.KeyTypes, true
}

// HasKeyTypes returns a boolean if a field has been set.
func (o *CertificateManagerSettingsConfig) HasKeyTypes() bool {
	if o != nil && !IsNil(o.KeyTypes) {
		return true
	}

	return false
}

// SetKeyTypes gets a reference to the given []string and assigns it to the KeyTypes field.
func (o *CertificateManagerSettingsConfig) SetKeyTypes(v []string) {
	o.KeyTypes = v
}

// GetKeyUsage returns the KeyUsage field value if set, zero value otherwise.
func (o *CertificateManagerSettingsConfig) GetKeyUsage() []string {
	if o == nil || IsNil(o.KeyUsage) {
		var ret []string
		return ret
	}
	return o.KeyUsage
}

// GetKeyUsageOk returns a tuple with the KeyUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateManagerSettingsConfig) GetKeyUsageOk() ([]string, bool) {
	if o == nil || IsNil(o.KeyUsage) {
		return nil, false
	}
	return o.KeyUsage, true
}

// HasKeyUsage returns a boolean if a field has been set.
func (o *CertificateManagerSettingsConfig) HasKeyUsage() bool {
	if o != nil && !IsNil(o.KeyUsage) {
		return true
	}

	return false
}

// SetKeyUsage gets a reference to the given []string and assigns it to the KeyUsage field.
func (o *CertificateManagerSettingsConfig) SetKeyUsage(v []string) {
	o.KeyUsage = v
}

// GetManagedBy returns the ManagedBy field value if set, zero value otherwise.
func (o *CertificateManagerSettingsConfig) GetManagedBy() string {
	if o == nil || IsNil(o.ManagedBy) {
		var ret string
		return ret
	}
	return *o.ManagedBy
}

// GetManagedByOk returns a tuple with the ManagedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateManagerSettingsConfig) GetManagedByOk() (*string, bool) {
	if o == nil || IsNil(o.ManagedBy) {
		return nil, false
	}
	return o.ManagedBy, true
}

// HasManagedBy returns a boolean if a field has been set.
func (o *CertificateManagerSettingsConfig) HasManagedBy() bool {
	if o != nil && !IsNil(o.ManagedBy) {
		return true
	}

	return false
}

// SetManagedBy gets a reference to the given string and assigns it to the ManagedBy field.
func (o *CertificateManagerSettingsConfig) SetManagedBy(v string) {
	o.ManagedBy = &v
}

// GetRegions returns the Regions field value if set, zero value otherwise.
func (o *CertificateManagerSettingsConfig) GetRegions() []string {
	if o == nil || IsNil(o.Regions) {
		var ret []string
		return ret
	}
	return o.Regions
}

// GetRegionsOk returns a tuple with the Regions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateManagerSettingsConfig) GetRegionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Regions) {
		return nil, false
	}
	return o.Regions, true
}

// HasRegions returns a boolean if a field has been set.
func (o *CertificateManagerSettingsConfig) HasRegions() bool {
	if o != nil && !IsNil(o.Regions) {
		return true
	}

	return false
}

// SetRegions gets a reference to the given []string and assigns it to the Regions field.
func (o *CertificateManagerSettingsConfig) SetRegions(v []string) {
	o.Regions = v
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *CertificateManagerSettingsConfig) GetRoleArn() string {
	if o == nil || IsNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateManagerSettingsConfig) GetRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *CertificateManagerSettingsConfig) HasRoleArn() bool {
	if o != nil && !IsNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *CertificateManagerSettingsConfig) SetRoleArn(v string) {
	o.RoleArn = &v
}

func (o CertificateManagerSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateManagerSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertificateStatuses) {
		toSerialize["certificate_statuses"] = o.CertificateStatuses
	}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.ExtendedKeyUsage) {
		toSerialize["extended_key_usage"] = o.ExtendedKeyUsage
	}
	if !IsNil(o.KeyTypes) {
		toSerialize["key_types"] = o.KeyTypes
	}
	if !IsNil(o.KeyUsage) {
		toSerialize["key_usage"] = o.KeyUsage
	}
	if !IsNil(o.ManagedBy) {
		toSerialize["managed_by"] = o.ManagedBy
	}
	if !IsNil(o.Regions) {
		toSerialize["regions"] = o.Regions
	}
	if !IsNil(o.RoleArn) {
		toSerialize["role_arn"] = o.RoleArn
	}
	return toSerialize, nil
}

type NullableCertificateManagerSettingsConfig struct {
	value *CertificateManagerSettingsConfig
	isSet bool
}

func (v NullableCertificateManagerSettingsConfig) Get() *CertificateManagerSettingsConfig {
	return v.value
}

func (v *NullableCertificateManagerSettingsConfig) Set(val *CertificateManagerSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateManagerSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateManagerSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateManagerSettingsConfig(val *CertificateManagerSettingsConfig) *NullableCertificateManagerSettingsConfig {
	return &NullableCertificateManagerSettingsConfig{value: val, isSet: true}
}

func (v NullableCertificateManagerSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateManagerSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


