/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the PantherSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PantherSettingsConfig{}

// PantherSettingsConfig struct for PantherSettingsConfig
type PantherSettingsConfig struct {
	HttpIngestUrl *string `json:"http_ingest_url,omitempty"`
}

// NewPantherSettingsConfig instantiates a new PantherSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPantherSettingsConfig() *PantherSettingsConfig {
	this := PantherSettingsConfig{}
	return &this
}

// NewPantherSettingsConfigWithDefaults instantiates a new PantherSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPantherSettingsConfigWithDefaults() *PantherSettingsConfig {
	this := PantherSettingsConfig{}
	return &this
}

// GetHttpIngestUrl returns the HttpIngestUrl field value if set, zero value otherwise.
func (o *PantherSettingsConfig) GetHttpIngestUrl() string {
	if o == nil || IsNil(o.HttpIngestUrl) {
		var ret string
		return ret
	}
	return *o.HttpIngestUrl
}

// GetHttpIngestUrlOk returns a tuple with the HttpIngestUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PantherSettingsConfig) GetHttpIngestUrlOk() (*string, bool) {
	if o == nil || IsNil(o.HttpIngestUrl) {
		return nil, false
	}
	return o.HttpIngestUrl, true
}

// HasHttpIngestUrl returns a boolean if a field has been set.
func (o *PantherSettingsConfig) HasHttpIngestUrl() bool {
	if o != nil && !IsNil(o.HttpIngestUrl) {
		return true
	}

	return false
}

// SetHttpIngestUrl gets a reference to the given string and assigns it to the HttpIngestUrl field.
func (o *PantherSettingsConfig) SetHttpIngestUrl(v string) {
	o.HttpIngestUrl = &v
}

func (o PantherSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PantherSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HttpIngestUrl) {
		toSerialize["http_ingest_url"] = o.HttpIngestUrl
	}
	return toSerialize, nil
}

type NullablePantherSettingsConfig struct {
	value *PantherSettingsConfig
	isSet bool
}

func (v NullablePantherSettingsConfig) Get() *PantherSettingsConfig {
	return v.value
}

func (v *NullablePantherSettingsConfig) Set(val *PantherSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullablePantherSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullablePantherSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePantherSettingsConfig(val *PantherSettingsConfig) *NullablePantherSettingsConfig {
	return &NullablePantherSettingsConfig{value: val, isSet: true}
}

func (v NullablePantherSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePantherSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


