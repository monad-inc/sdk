/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the SnowflakeSecretsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeSecretsConfig{}

// SnowflakeSecretsConfig Snowflake Output Secrets
type SnowflakeSecretsConfig struct {
	// The Users password if using password authentication. It is reccomended that you use service account authentication with a private key.
	Password *string `json:"password,omitempty"`
	// Your private KEY
	PrivateKey *string `json:"private_key,omitempty"`
}

// NewSnowflakeSecretsConfig instantiates a new SnowflakeSecretsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeSecretsConfig() *SnowflakeSecretsConfig {
	this := SnowflakeSecretsConfig{}
	return &this
}

// NewSnowflakeSecretsConfigWithDefaults instantiates a new SnowflakeSecretsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeSecretsConfigWithDefaults() *SnowflakeSecretsConfig {
	this := SnowflakeSecretsConfig{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SnowflakeSecretsConfig) GetPassword() string {
	if o == nil || IsNil(o.Password) {
		var ret string
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeSecretsConfig) GetPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SnowflakeSecretsConfig) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given string and assigns it to the Password field.
func (o *SnowflakeSecretsConfig) SetPassword(v string) {
	o.Password = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *SnowflakeSecretsConfig) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey) {
		var ret string
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeSecretsConfig) GetPrivateKeyOk() (*string, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *SnowflakeSecretsConfig) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given string and assigns it to the PrivateKey field.
func (o *SnowflakeSecretsConfig) SetPrivateKey(v string) {
	o.PrivateKey = &v
}

func (o SnowflakeSecretsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeSecretsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["private_key"] = o.PrivateKey
	}
	return toSerialize, nil
}

type NullableSnowflakeSecretsConfig struct {
	value *SnowflakeSecretsConfig
	isSet bool
}

func (v NullableSnowflakeSecretsConfig) Get() *SnowflakeSecretsConfig {
	return v.value
}

func (v *NullableSnowflakeSecretsConfig) Set(val *SnowflakeSecretsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeSecretsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeSecretsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeSecretsConfig(val *SnowflakeSecretsConfig) *NullableSnowflakeSecretsConfig {
	return &NullableSnowflakeSecretsConfig{value: val, isSet: true}
}

func (v NullableSnowflakeSecretsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeSecretsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


