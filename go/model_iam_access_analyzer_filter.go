/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the IamAccessAnalyzerFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamAccessAnalyzerFilter{}

// IamAccessAnalyzerFilter struct for IamAccessAnalyzerFilter
type IamAccessAnalyzerFilter struct {
	Criterion *IamAccessAnalyzerCriterion `json:"criterion,omitempty"`
	FilterKey *string `json:"filter_key,omitempty"`
}

// NewIamAccessAnalyzerFilter instantiates a new IamAccessAnalyzerFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamAccessAnalyzerFilter() *IamAccessAnalyzerFilter {
	this := IamAccessAnalyzerFilter{}
	return &this
}

// NewIamAccessAnalyzerFilterWithDefaults instantiates a new IamAccessAnalyzerFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamAccessAnalyzerFilterWithDefaults() *IamAccessAnalyzerFilter {
	this := IamAccessAnalyzerFilter{}
	return &this
}

// GetCriterion returns the Criterion field value if set, zero value otherwise.
func (o *IamAccessAnalyzerFilter) GetCriterion() IamAccessAnalyzerCriterion {
	if o == nil || IsNil(o.Criterion) {
		var ret IamAccessAnalyzerCriterion
		return ret
	}
	return *o.Criterion
}

// GetCriterionOk returns a tuple with the Criterion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerFilter) GetCriterionOk() (*IamAccessAnalyzerCriterion, bool) {
	if o == nil || IsNil(o.Criterion) {
		return nil, false
	}
	return o.Criterion, true
}

// HasCriterion returns a boolean if a field has been set.
func (o *IamAccessAnalyzerFilter) HasCriterion() bool {
	if o != nil && !IsNil(o.Criterion) {
		return true
	}

	return false
}

// SetCriterion gets a reference to the given IamAccessAnalyzerCriterion and assigns it to the Criterion field.
func (o *IamAccessAnalyzerFilter) SetCriterion(v IamAccessAnalyzerCriterion) {
	o.Criterion = &v
}

// GetFilterKey returns the FilterKey field value if set, zero value otherwise.
func (o *IamAccessAnalyzerFilter) GetFilterKey() string {
	if o == nil || IsNil(o.FilterKey) {
		var ret string
		return ret
	}
	return *o.FilterKey
}

// GetFilterKeyOk returns a tuple with the FilterKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerFilter) GetFilterKeyOk() (*string, bool) {
	if o == nil || IsNil(o.FilterKey) {
		return nil, false
	}
	return o.FilterKey, true
}

// HasFilterKey returns a boolean if a field has been set.
func (o *IamAccessAnalyzerFilter) HasFilterKey() bool {
	if o != nil && !IsNil(o.FilterKey) {
		return true
	}

	return false
}

// SetFilterKey gets a reference to the given string and assigns it to the FilterKey field.
func (o *IamAccessAnalyzerFilter) SetFilterKey(v string) {
	o.FilterKey = &v
}

func (o IamAccessAnalyzerFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamAccessAnalyzerFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Criterion) {
		toSerialize["criterion"] = o.Criterion
	}
	if !IsNil(o.FilterKey) {
		toSerialize["filter_key"] = o.FilterKey
	}
	return toSerialize, nil
}

type NullableIamAccessAnalyzerFilter struct {
	value *IamAccessAnalyzerFilter
	isSet bool
}

func (v NullableIamAccessAnalyzerFilter) Get() *IamAccessAnalyzerFilter {
	return v.value
}

func (v *NullableIamAccessAnalyzerFilter) Set(val *IamAccessAnalyzerFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableIamAccessAnalyzerFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableIamAccessAnalyzerFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamAccessAnalyzerFilter(val *IamAccessAnalyzerFilter) *NullableIamAccessAnalyzerFilter {
	return &NullableIamAccessAnalyzerFilter{value: val, isSet: true}
}

func (v NullableIamAccessAnalyzerFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamAccessAnalyzerFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


