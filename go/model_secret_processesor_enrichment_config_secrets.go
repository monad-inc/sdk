/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// SecretProcessesorEnrichmentConfigSecrets - struct for SecretProcessesorEnrichmentConfigSecrets
type SecretProcessesorEnrichmentConfigSecrets struct {
	CommunityEditionSecretsConfig *CommunityEditionSecretsConfig
	MapmapOfStringAny *map[string]interface{}
}

// CommunityEditionSecretsConfigAsSecretProcessesorEnrichmentConfigSecrets is a convenience function that returns CommunityEditionSecretsConfig wrapped in SecretProcessesorEnrichmentConfigSecrets
func CommunityEditionSecretsConfigAsSecretProcessesorEnrichmentConfigSecrets(v *CommunityEditionSecretsConfig) SecretProcessesorEnrichmentConfigSecrets {
	return SecretProcessesorEnrichmentConfigSecrets{
		CommunityEditionSecretsConfig: v,
	}
}

// map[string]interface{}AsSecretProcessesorEnrichmentConfigSecrets is a convenience function that returns map[string]interface{} wrapped in SecretProcessesorEnrichmentConfigSecrets
func MapmapOfStringAnyAsSecretProcessesorEnrichmentConfigSecrets(v *map[string]interface{}) SecretProcessesorEnrichmentConfigSecrets {
	return SecretProcessesorEnrichmentConfigSecrets{
		MapmapOfStringAny: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SecretProcessesorEnrichmentConfigSecrets) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CommunityEditionSecretsConfig
	err = newStrictDecoder(data).Decode(&dst.CommunityEditionSecretsConfig)
	if err == nil {
		jsonCommunityEditionSecretsConfig, _ := json.Marshal(dst.CommunityEditionSecretsConfig)
		if string(jsonCommunityEditionSecretsConfig) == "{}" { // empty struct
			dst.CommunityEditionSecretsConfig = nil
		} else {
			if err = validator.Validate(dst.CommunityEditionSecretsConfig); err != nil {
				dst.CommunityEditionSecretsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.CommunityEditionSecretsConfig = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringAny); err != nil {
				dst.MapmapOfStringAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CommunityEditionSecretsConfig = nil
		dst.MapmapOfStringAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(SecretProcessesorEnrichmentConfigSecrets)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(SecretProcessesorEnrichmentConfigSecrets)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SecretProcessesorEnrichmentConfigSecrets) MarshalJSON() ([]byte, error) {
	if src.CommunityEditionSecretsConfig != nil {
		return json.Marshal(&src.CommunityEditionSecretsConfig)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SecretProcessesorEnrichmentConfigSecrets) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CommunityEditionSecretsConfig != nil {
		return obj.CommunityEditionSecretsConfig
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj SecretProcessesorEnrichmentConfigSecrets) GetActualInstanceValue() (interface{}) {
	if obj.CommunityEditionSecretsConfig != nil {
		return *obj.CommunityEditionSecretsConfig
	}

	if obj.MapmapOfStringAny != nil {
		return *obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableSecretProcessesorEnrichmentConfigSecrets struct {
	value *SecretProcessesorEnrichmentConfigSecrets
	isSet bool
}

func (v NullableSecretProcessesorEnrichmentConfigSecrets) Get() *SecretProcessesorEnrichmentConfigSecrets {
	return v.value
}

func (v *NullableSecretProcessesorEnrichmentConfigSecrets) Set(val *SecretProcessesorEnrichmentConfigSecrets) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretProcessesorEnrichmentConfigSecrets) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretProcessesorEnrichmentConfigSecrets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretProcessesorEnrichmentConfigSecrets(val *SecretProcessesorEnrichmentConfigSecrets) *NullableSecretProcessesorEnrichmentConfigSecrets {
	return &NullableSecretProcessesorEnrichmentConfigSecrets{value: val, isSet: true}
}

func (v NullableSecretProcessesorEnrichmentConfigSecrets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretProcessesorEnrichmentConfigSecrets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


