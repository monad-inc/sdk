/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the CriblHttpSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CriblHttpSettingsConfig{}

// CriblHttpSettingsConfig Cribl HTTP Output Settings
type CriblHttpSettingsConfig struct {
	// Your group's ingress address found in your group information panel. This is the hostname where your Cribl instance is accessible.
	IngressAddress *string `json:"ingress_address,omitempty"`
	// The path you've set for your HTTP Source's HTTP Event API. This is the endpoint path where data will be sent. Note: You do not need to append `_bulk` to this path as monad already does this for you.
	Path *string `json:"path,omitempty"`
	// The port you've set your HTTP Source to listen on. This should be the port number where your Cribl HTTP Source is configured to receive data.
	Port *int32 `json:"port,omitempty"`
}

// NewCriblHttpSettingsConfig instantiates a new CriblHttpSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCriblHttpSettingsConfig() *CriblHttpSettingsConfig {
	this := CriblHttpSettingsConfig{}
	return &this
}

// NewCriblHttpSettingsConfigWithDefaults instantiates a new CriblHttpSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCriblHttpSettingsConfigWithDefaults() *CriblHttpSettingsConfig {
	this := CriblHttpSettingsConfig{}
	return &this
}

// GetIngressAddress returns the IngressAddress field value if set, zero value otherwise.
func (o *CriblHttpSettingsConfig) GetIngressAddress() string {
	if o == nil || IsNil(o.IngressAddress) {
		var ret string
		return ret
	}
	return *o.IngressAddress
}

// GetIngressAddressOk returns a tuple with the IngressAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CriblHttpSettingsConfig) GetIngressAddressOk() (*string, bool) {
	if o == nil || IsNil(o.IngressAddress) {
		return nil, false
	}
	return o.IngressAddress, true
}

// HasIngressAddress returns a boolean if a field has been set.
func (o *CriblHttpSettingsConfig) HasIngressAddress() bool {
	if o != nil && !IsNil(o.IngressAddress) {
		return true
	}

	return false
}

// SetIngressAddress gets a reference to the given string and assigns it to the IngressAddress field.
func (o *CriblHttpSettingsConfig) SetIngressAddress(v string) {
	o.IngressAddress = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *CriblHttpSettingsConfig) GetPath() string {
	if o == nil || IsNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CriblHttpSettingsConfig) GetPathOk() (*string, bool) {
	if o == nil || IsNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *CriblHttpSettingsConfig) HasPath() bool {
	if o != nil && !IsNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *CriblHttpSettingsConfig) SetPath(v string) {
	o.Path = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *CriblHttpSettingsConfig) GetPort() int32 {
	if o == nil || IsNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CriblHttpSettingsConfig) GetPortOk() (*int32, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *CriblHttpSettingsConfig) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *CriblHttpSettingsConfig) SetPort(v int32) {
	o.Port = &v
}

func (o CriblHttpSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CriblHttpSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IngressAddress) {
		toSerialize["ingress_address"] = o.IngressAddress
	}
	if !IsNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	return toSerialize, nil
}

type NullableCriblHttpSettingsConfig struct {
	value *CriblHttpSettingsConfig
	isSet bool
}

func (v NullableCriblHttpSettingsConfig) Get() *CriblHttpSettingsConfig {
	return v.value
}

func (v *NullableCriblHttpSettingsConfig) Set(val *CriblHttpSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCriblHttpSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCriblHttpSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCriblHttpSettingsConfig(val *CriblHttpSettingsConfig) *NullableCriblHttpSettingsConfig {
	return &NullableCriblHttpSettingsConfig{value: val, isSet: true}
}

func (v NullableCriblHttpSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCriblHttpSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


