/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the IamAccessAnalyzerSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamAccessAnalyzerSettingsConfig{}

// IamAccessAnalyzerSettingsConfig AWS IAM Access Analyzer settings
type IamAccessAnalyzerSettingsConfig struct {
	// The [ARN of the analyzer] to retrieve findings from.
	AnalyzerArn *string `json:"analyzer_arn,omitempty"`
	// Cron string for scheduling the ingest of your input. eg: `0 0 * * *` - Daily at midnight, or `*_/15 * * * *` - Every 15 minutes
	Cron *string `json:"cron,omitempty"`
	// A filter to match for the findings to return.
	Filters []IamAccessAnalyzerFilter `json:"filters,omitempty"`
	// The Region that you would receieve findings for
	Region *string `json:"region,omitempty"`
	// The ARN of the role to assume to access the bucket
	RoleArn *string `json:"role_arn,omitempty"`
	// Generate synthetic demo data instead of connecting to the real data source.
	UseSyntheticData *bool `json:"use_synthetic_data,omitempty"`
}

// NewIamAccessAnalyzerSettingsConfig instantiates a new IamAccessAnalyzerSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamAccessAnalyzerSettingsConfig() *IamAccessAnalyzerSettingsConfig {
	this := IamAccessAnalyzerSettingsConfig{}
	return &this
}

// NewIamAccessAnalyzerSettingsConfigWithDefaults instantiates a new IamAccessAnalyzerSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamAccessAnalyzerSettingsConfigWithDefaults() *IamAccessAnalyzerSettingsConfig {
	this := IamAccessAnalyzerSettingsConfig{}
	return &this
}

// GetAnalyzerArn returns the AnalyzerArn field value if set, zero value otherwise.
func (o *IamAccessAnalyzerSettingsConfig) GetAnalyzerArn() string {
	if o == nil || IsNil(o.AnalyzerArn) {
		var ret string
		return ret
	}
	return *o.AnalyzerArn
}

// GetAnalyzerArnOk returns a tuple with the AnalyzerArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerSettingsConfig) GetAnalyzerArnOk() (*string, bool) {
	if o == nil || IsNil(o.AnalyzerArn) {
		return nil, false
	}
	return o.AnalyzerArn, true
}

// HasAnalyzerArn returns a boolean if a field has been set.
func (o *IamAccessAnalyzerSettingsConfig) HasAnalyzerArn() bool {
	if o != nil && !IsNil(o.AnalyzerArn) {
		return true
	}

	return false
}

// SetAnalyzerArn gets a reference to the given string and assigns it to the AnalyzerArn field.
func (o *IamAccessAnalyzerSettingsConfig) SetAnalyzerArn(v string) {
	o.AnalyzerArn = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *IamAccessAnalyzerSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *IamAccessAnalyzerSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *IamAccessAnalyzerSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetFilters returns the Filters field value if set, zero value otherwise.
func (o *IamAccessAnalyzerSettingsConfig) GetFilters() []IamAccessAnalyzerFilter {
	if o == nil || IsNil(o.Filters) {
		var ret []IamAccessAnalyzerFilter
		return ret
	}
	return o.Filters
}

// GetFiltersOk returns a tuple with the Filters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerSettingsConfig) GetFiltersOk() ([]IamAccessAnalyzerFilter, bool) {
	if o == nil || IsNil(o.Filters) {
		return nil, false
	}
	return o.Filters, true
}

// HasFilters returns a boolean if a field has been set.
func (o *IamAccessAnalyzerSettingsConfig) HasFilters() bool {
	if o != nil && !IsNil(o.Filters) {
		return true
	}

	return false
}

// SetFilters gets a reference to the given []IamAccessAnalyzerFilter and assigns it to the Filters field.
func (o *IamAccessAnalyzerSettingsConfig) SetFilters(v []IamAccessAnalyzerFilter) {
	o.Filters = v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *IamAccessAnalyzerSettingsConfig) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerSettingsConfig) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *IamAccessAnalyzerSettingsConfig) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *IamAccessAnalyzerSettingsConfig) SetRegion(v string) {
	o.Region = &v
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *IamAccessAnalyzerSettingsConfig) GetRoleArn() string {
	if o == nil || IsNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerSettingsConfig) GetRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *IamAccessAnalyzerSettingsConfig) HasRoleArn() bool {
	if o != nil && !IsNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *IamAccessAnalyzerSettingsConfig) SetRoleArn(v string) {
	o.RoleArn = &v
}

// GetUseSyntheticData returns the UseSyntheticData field value if set, zero value otherwise.
func (o *IamAccessAnalyzerSettingsConfig) GetUseSyntheticData() bool {
	if o == nil || IsNil(o.UseSyntheticData) {
		var ret bool
		return ret
	}
	return *o.UseSyntheticData
}

// GetUseSyntheticDataOk returns a tuple with the UseSyntheticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerSettingsConfig) GetUseSyntheticDataOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyntheticData) {
		return nil, false
	}
	return o.UseSyntheticData, true
}

// HasUseSyntheticData returns a boolean if a field has been set.
func (o *IamAccessAnalyzerSettingsConfig) HasUseSyntheticData() bool {
	if o != nil && !IsNil(o.UseSyntheticData) {
		return true
	}

	return false
}

// SetUseSyntheticData gets a reference to the given bool and assigns it to the UseSyntheticData field.
func (o *IamAccessAnalyzerSettingsConfig) SetUseSyntheticData(v bool) {
	o.UseSyntheticData = &v
}

func (o IamAccessAnalyzerSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamAccessAnalyzerSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AnalyzerArn) {
		toSerialize["analyzer_arn"] = o.AnalyzerArn
	}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.Filters) {
		toSerialize["filters"] = o.Filters
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.RoleArn) {
		toSerialize["role_arn"] = o.RoleArn
	}
	if !IsNil(o.UseSyntheticData) {
		toSerialize["use_synthetic_data"] = o.UseSyntheticData
	}
	return toSerialize, nil
}

type NullableIamAccessAnalyzerSettingsConfig struct {
	value *IamAccessAnalyzerSettingsConfig
	isSet bool
}

func (v NullableIamAccessAnalyzerSettingsConfig) Get() *IamAccessAnalyzerSettingsConfig {
	return v.value
}

func (v *NullableIamAccessAnalyzerSettingsConfig) Set(val *IamAccessAnalyzerSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIamAccessAnalyzerSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIamAccessAnalyzerSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamAccessAnalyzerSettingsConfig(val *IamAccessAnalyzerSettingsConfig) *NullableIamAccessAnalyzerSettingsConfig {
	return &NullableIamAccessAnalyzerSettingsConfig{value: val, isSet: true}
}

func (v NullableIamAccessAnalyzerSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamAccessAnalyzerSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


