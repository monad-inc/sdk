/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the AuthenticationtypesAuth0 type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuthenticationtypesAuth0{}

// AuthenticationtypesAuth0 struct for AuthenticationtypesAuth0
type AuthenticationtypesAuth0 struct {
	Okta *AuthenticationtypesOkta `json:"okta,omitempty"`
}

// NewAuthenticationtypesAuth0 instantiates a new AuthenticationtypesAuth0 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthenticationtypesAuth0() *AuthenticationtypesAuth0 {
	this := AuthenticationtypesAuth0{}
	return &this
}

// NewAuthenticationtypesAuth0WithDefaults instantiates a new AuthenticationtypesAuth0 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthenticationtypesAuth0WithDefaults() *AuthenticationtypesAuth0 {
	this := AuthenticationtypesAuth0{}
	return &this
}

// GetOkta returns the Okta field value if set, zero value otherwise.
func (o *AuthenticationtypesAuth0) GetOkta() AuthenticationtypesOkta {
	if o == nil || IsNil(o.Okta) {
		var ret AuthenticationtypesOkta
		return ret
	}
	return *o.Okta
}

// GetOktaOk returns a tuple with the Okta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthenticationtypesAuth0) GetOktaOk() (*AuthenticationtypesOkta, bool) {
	if o == nil || IsNil(o.Okta) {
		return nil, false
	}
	return o.Okta, true
}

// HasOkta returns a boolean if a field has been set.
func (o *AuthenticationtypesAuth0) HasOkta() bool {
	if o != nil && !IsNil(o.Okta) {
		return true
	}

	return false
}

// SetOkta gets a reference to the given AuthenticationtypesOkta and assigns it to the Okta field.
func (o *AuthenticationtypesAuth0) SetOkta(v AuthenticationtypesOkta) {
	o.Okta = &v
}

func (o AuthenticationtypesAuth0) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuthenticationtypesAuth0) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Okta) {
		toSerialize["okta"] = o.Okta
	}
	return toSerialize, nil
}

type NullableAuthenticationtypesAuth0 struct {
	value *AuthenticationtypesAuth0
	isSet bool
}

func (v NullableAuthenticationtypesAuth0) Get() *AuthenticationtypesAuth0 {
	return v.value
}

func (v *NullableAuthenticationtypesAuth0) Set(val *AuthenticationtypesAuth0) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthenticationtypesAuth0) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthenticationtypesAuth0) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthenticationtypesAuth0(val *AuthenticationtypesAuth0) *NullableAuthenticationtypesAuth0 {
	return &NullableAuthenticationtypesAuth0{value: val, isSet: true}
}

func (v NullableAuthenticationtypesAuth0) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthenticationtypesAuth0) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


