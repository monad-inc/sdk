/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsSecretList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsSecretList{}

// ModelsSecretList struct for ModelsSecretList
type ModelsSecretList struct {
	Pagination *ModelsPagination `json:"pagination,omitempty"`
	Secrets []ModelsSecret `json:"secrets,omitempty"`
}

// NewModelsSecretList instantiates a new ModelsSecretList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsSecretList() *ModelsSecretList {
	this := ModelsSecretList{}
	return &this
}

// NewModelsSecretListWithDefaults instantiates a new ModelsSecretList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsSecretListWithDefaults() *ModelsSecretList {
	this := ModelsSecretList{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ModelsSecretList) GetPagination() ModelsPagination {
	if o == nil || IsNil(o.Pagination) {
		var ret ModelsPagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecretList) GetPaginationOk() (*ModelsPagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ModelsSecretList) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given ModelsPagination and assigns it to the Pagination field.
func (o *ModelsSecretList) SetPagination(v ModelsPagination) {
	o.Pagination = &v
}

// GetSecrets returns the Secrets field value if set, zero value otherwise.
func (o *ModelsSecretList) GetSecrets() []ModelsSecret {
	if o == nil || IsNil(o.Secrets) {
		var ret []ModelsSecret
		return ret
	}
	return o.Secrets
}

// GetSecretsOk returns a tuple with the Secrets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsSecretList) GetSecretsOk() ([]ModelsSecret, bool) {
	if o == nil || IsNil(o.Secrets) {
		return nil, false
	}
	return o.Secrets, true
}

// HasSecrets returns a boolean if a field has been set.
func (o *ModelsSecretList) HasSecrets() bool {
	if o != nil && !IsNil(o.Secrets) {
		return true
	}

	return false
}

// SetSecrets gets a reference to the given []ModelsSecret and assigns it to the Secrets field.
func (o *ModelsSecretList) SetSecrets(v []ModelsSecret) {
	o.Secrets = v
}

func (o ModelsSecretList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsSecretList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Secrets) {
		toSerialize["secrets"] = o.Secrets
	}
	return toSerialize, nil
}

type NullableModelsSecretList struct {
	value *ModelsSecretList
	isSet bool
}

func (v NullableModelsSecretList) Get() *ModelsSecretList {
	return v.value
}

func (v *NullableModelsSecretList) Set(val *ModelsSecretList) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsSecretList) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsSecretList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsSecretList(val *ModelsSecretList) *NullableModelsSecretList {
	return &NullableModelsSecretList{value: val, isSet: true}
}

func (v NullableModelsSecretList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsSecretList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


