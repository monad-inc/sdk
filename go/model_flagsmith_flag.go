/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the FlagsmithFlag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlagsmithFlag{}

// FlagsmithFlag struct for FlagsmithFlag
type FlagsmithFlag struct {
	Enabled *bool `json:"enabled,omitempty"`
	FeatureID *int32 `json:"featureID,omitempty"`
	FeatureName *string `json:"featureName,omitempty"`
	IsDefault *bool `json:"isDefault,omitempty"`
	Value interface{} `json:"value,omitempty"`
}

// NewFlagsmithFlag instantiates a new FlagsmithFlag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlagsmithFlag() *FlagsmithFlag {
	this := FlagsmithFlag{}
	return &this
}

// NewFlagsmithFlagWithDefaults instantiates a new FlagsmithFlag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlagsmithFlagWithDefaults() *FlagsmithFlag {
	this := FlagsmithFlag{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *FlagsmithFlag) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlagsmithFlag) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *FlagsmithFlag) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *FlagsmithFlag) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetFeatureID returns the FeatureID field value if set, zero value otherwise.
func (o *FlagsmithFlag) GetFeatureID() int32 {
	if o == nil || IsNil(o.FeatureID) {
		var ret int32
		return ret
	}
	return *o.FeatureID
}

// GetFeatureIDOk returns a tuple with the FeatureID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlagsmithFlag) GetFeatureIDOk() (*int32, bool) {
	if o == nil || IsNil(o.FeatureID) {
		return nil, false
	}
	return o.FeatureID, true
}

// HasFeatureID returns a boolean if a field has been set.
func (o *FlagsmithFlag) HasFeatureID() bool {
	if o != nil && !IsNil(o.FeatureID) {
		return true
	}

	return false
}

// SetFeatureID gets a reference to the given int32 and assigns it to the FeatureID field.
func (o *FlagsmithFlag) SetFeatureID(v int32) {
	o.FeatureID = &v
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise.
func (o *FlagsmithFlag) GetFeatureName() string {
	if o == nil || IsNil(o.FeatureName) {
		var ret string
		return ret
	}
	return *o.FeatureName
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlagsmithFlag) GetFeatureNameOk() (*string, bool) {
	if o == nil || IsNil(o.FeatureName) {
		return nil, false
	}
	return o.FeatureName, true
}

// HasFeatureName returns a boolean if a field has been set.
func (o *FlagsmithFlag) HasFeatureName() bool {
	if o != nil && !IsNil(o.FeatureName) {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given string and assigns it to the FeatureName field.
func (o *FlagsmithFlag) SetFeatureName(v string) {
	o.FeatureName = &v
}

// GetIsDefault returns the IsDefault field value if set, zero value otherwise.
func (o *FlagsmithFlag) GetIsDefault() bool {
	if o == nil || IsNil(o.IsDefault) {
		var ret bool
		return ret
	}
	return *o.IsDefault
}

// GetIsDefaultOk returns a tuple with the IsDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlagsmithFlag) GetIsDefaultOk() (*bool, bool) {
	if o == nil || IsNil(o.IsDefault) {
		return nil, false
	}
	return o.IsDefault, true
}

// HasIsDefault returns a boolean if a field has been set.
func (o *FlagsmithFlag) HasIsDefault() bool {
	if o != nil && !IsNil(o.IsDefault) {
		return true
	}

	return false
}

// SetIsDefault gets a reference to the given bool and assigns it to the IsDefault field.
func (o *FlagsmithFlag) SetIsDefault(v bool) {
	o.IsDefault = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlagsmithFlag) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlagsmithFlag) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *FlagsmithFlag) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *FlagsmithFlag) SetValue(v interface{}) {
	o.Value = v
}

func (o FlagsmithFlag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlagsmithFlag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if !IsNil(o.FeatureID) {
		toSerialize["featureID"] = o.FeatureID
	}
	if !IsNil(o.FeatureName) {
		toSerialize["featureName"] = o.FeatureName
	}
	if !IsNil(o.IsDefault) {
		toSerialize["isDefault"] = o.IsDefault
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableFlagsmithFlag struct {
	value *FlagsmithFlag
	isSet bool
}

func (v NullableFlagsmithFlag) Get() *FlagsmithFlag {
	return v.value
}

func (v *NullableFlagsmithFlag) Set(val *FlagsmithFlag) {
	v.value = val
	v.isSet = true
}

func (v NullableFlagsmithFlag) IsSet() bool {
	return v.isSet
}

func (v *NullableFlagsmithFlag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlagsmithFlag(val *FlagsmithFlag) *NullableFlagsmithFlag {
	return &NullableFlagsmithFlag{value: val, isSet: true}
}

func (v NullableFlagsmithFlag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlagsmithFlag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


