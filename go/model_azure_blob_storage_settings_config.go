/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the AzureBlobStorageSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureBlobStorageSettingsConfig{}

// AzureBlobStorageSettingsConfig struct for AzureBlobStorageSettingsConfig
type AzureBlobStorageSettingsConfig struct {
	// Represents your storage account in Azure. Typically of the format https://{account}.blob.core.windows.net.
	AccountUrl *string `json:"account_url,omitempty"`
	// The compression format of objects in the Azure container
	Compression *string `json:"compression,omitempty"`
	// A container organizes a set of blobs, similar to a directory in a file system.
	Container *string `json:"container,omitempty"`
	// File format of the Blob storage objects in Azure.
	Format *string `json:"format,omitempty"`
	// Specifies the format for organizing data into partitions within your Azure container. This determines the directory structure and naming convention for stored objects, affecting data organization and query efficiency. Examples include Hive-style partitioning (e.g., 'year=2024/month=01/day=01') and simple date-based formats (e.g., '2024/01/01').
	PartitionFormat *string `json:"partition_format,omitempty"`
	// An optional prefix for Azure object keys to organize data within the container
	Prefix *string `json:"prefix,omitempty"`
	// Location of the record in the JSON object. Applies only if the format is JSON.
	RecordLocation *string `json:"record_location,omitempty"`
}

// NewAzureBlobStorageSettingsConfig instantiates a new AzureBlobStorageSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureBlobStorageSettingsConfig() *AzureBlobStorageSettingsConfig {
	this := AzureBlobStorageSettingsConfig{}
	return &this
}

// NewAzureBlobStorageSettingsConfigWithDefaults instantiates a new AzureBlobStorageSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureBlobStorageSettingsConfigWithDefaults() *AzureBlobStorageSettingsConfig {
	this := AzureBlobStorageSettingsConfig{}
	return &this
}

// GetAccountUrl returns the AccountUrl field value if set, zero value otherwise.
func (o *AzureBlobStorageSettingsConfig) GetAccountUrl() string {
	if o == nil || IsNil(o.AccountUrl) {
		var ret string
		return ret
	}
	return *o.AccountUrl
}

// GetAccountUrlOk returns a tuple with the AccountUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageSettingsConfig) GetAccountUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AccountUrl) {
		return nil, false
	}
	return o.AccountUrl, true
}

// HasAccountUrl returns a boolean if a field has been set.
func (o *AzureBlobStorageSettingsConfig) HasAccountUrl() bool {
	if o != nil && !IsNil(o.AccountUrl) {
		return true
	}

	return false
}

// SetAccountUrl gets a reference to the given string and assigns it to the AccountUrl field.
func (o *AzureBlobStorageSettingsConfig) SetAccountUrl(v string) {
	o.AccountUrl = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *AzureBlobStorageSettingsConfig) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageSettingsConfig) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *AzureBlobStorageSettingsConfig) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *AzureBlobStorageSettingsConfig) SetCompression(v string) {
	o.Compression = &v
}

// GetContainer returns the Container field value if set, zero value otherwise.
func (o *AzureBlobStorageSettingsConfig) GetContainer() string {
	if o == nil || IsNil(o.Container) {
		var ret string
		return ret
	}
	return *o.Container
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageSettingsConfig) GetContainerOk() (*string, bool) {
	if o == nil || IsNil(o.Container) {
		return nil, false
	}
	return o.Container, true
}

// HasContainer returns a boolean if a field has been set.
func (o *AzureBlobStorageSettingsConfig) HasContainer() bool {
	if o != nil && !IsNil(o.Container) {
		return true
	}

	return false
}

// SetContainer gets a reference to the given string and assigns it to the Container field.
func (o *AzureBlobStorageSettingsConfig) SetContainer(v string) {
	o.Container = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *AzureBlobStorageSettingsConfig) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageSettingsConfig) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *AzureBlobStorageSettingsConfig) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *AzureBlobStorageSettingsConfig) SetFormat(v string) {
	o.Format = &v
}

// GetPartitionFormat returns the PartitionFormat field value if set, zero value otherwise.
func (o *AzureBlobStorageSettingsConfig) GetPartitionFormat() string {
	if o == nil || IsNil(o.PartitionFormat) {
		var ret string
		return ret
	}
	return *o.PartitionFormat
}

// GetPartitionFormatOk returns a tuple with the PartitionFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageSettingsConfig) GetPartitionFormatOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionFormat) {
		return nil, false
	}
	return o.PartitionFormat, true
}

// HasPartitionFormat returns a boolean if a field has been set.
func (o *AzureBlobStorageSettingsConfig) HasPartitionFormat() bool {
	if o != nil && !IsNil(o.PartitionFormat) {
		return true
	}

	return false
}

// SetPartitionFormat gets a reference to the given string and assigns it to the PartitionFormat field.
func (o *AzureBlobStorageSettingsConfig) SetPartitionFormat(v string) {
	o.PartitionFormat = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *AzureBlobStorageSettingsConfig) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageSettingsConfig) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *AzureBlobStorageSettingsConfig) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *AzureBlobStorageSettingsConfig) SetPrefix(v string) {
	o.Prefix = &v
}

// GetRecordLocation returns the RecordLocation field value if set, zero value otherwise.
func (o *AzureBlobStorageSettingsConfig) GetRecordLocation() string {
	if o == nil || IsNil(o.RecordLocation) {
		var ret string
		return ret
	}
	return *o.RecordLocation
}

// GetRecordLocationOk returns a tuple with the RecordLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureBlobStorageSettingsConfig) GetRecordLocationOk() (*string, bool) {
	if o == nil || IsNil(o.RecordLocation) {
		return nil, false
	}
	return o.RecordLocation, true
}

// HasRecordLocation returns a boolean if a field has been set.
func (o *AzureBlobStorageSettingsConfig) HasRecordLocation() bool {
	if o != nil && !IsNil(o.RecordLocation) {
		return true
	}

	return false
}

// SetRecordLocation gets a reference to the given string and assigns it to the RecordLocation field.
func (o *AzureBlobStorageSettingsConfig) SetRecordLocation(v string) {
	o.RecordLocation = &v
}

func (o AzureBlobStorageSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureBlobStorageSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountUrl) {
		toSerialize["account_url"] = o.AccountUrl
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Container) {
		toSerialize["container"] = o.Container
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.PartitionFormat) {
		toSerialize["partition_format"] = o.PartitionFormat
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.RecordLocation) {
		toSerialize["record_location"] = o.RecordLocation
	}
	return toSerialize, nil
}

type NullableAzureBlobStorageSettingsConfig struct {
	value *AzureBlobStorageSettingsConfig
	isSet bool
}

func (v NullableAzureBlobStorageSettingsConfig) Get() *AzureBlobStorageSettingsConfig {
	return v.value
}

func (v *NullableAzureBlobStorageSettingsConfig) Set(val *AzureBlobStorageSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureBlobStorageSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureBlobStorageSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureBlobStorageSettingsConfig(val *AzureBlobStorageSettingsConfig) *NullableAzureBlobStorageSettingsConfig {
	return &NullableAzureBlobStorageSettingsConfig{value: val, isSet: true}
}

func (v NullableAzureBlobStorageSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureBlobStorageSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


