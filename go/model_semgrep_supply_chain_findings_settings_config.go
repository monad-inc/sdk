/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the SemgrepSupplyChainFindingsSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SemgrepSupplyChainFindingsSettingsConfig{}

// SemgrepSupplyChainFindingsSettingsConfig Semgrep supply chain findings settings
type SemgrepSupplyChainFindingsSettingsConfig struct {
	// Generate synthetic demo data instead of connecting to the real data source.
	UseSyntheticData *bool `json:"use_synthetic_data,omitempty"`
}

// NewSemgrepSupplyChainFindingsSettingsConfig instantiates a new SemgrepSupplyChainFindingsSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSemgrepSupplyChainFindingsSettingsConfig() *SemgrepSupplyChainFindingsSettingsConfig {
	this := SemgrepSupplyChainFindingsSettingsConfig{}
	return &this
}

// NewSemgrepSupplyChainFindingsSettingsConfigWithDefaults instantiates a new SemgrepSupplyChainFindingsSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSemgrepSupplyChainFindingsSettingsConfigWithDefaults() *SemgrepSupplyChainFindingsSettingsConfig {
	this := SemgrepSupplyChainFindingsSettingsConfig{}
	return &this
}

// GetUseSyntheticData returns the UseSyntheticData field value if set, zero value otherwise.
func (o *SemgrepSupplyChainFindingsSettingsConfig) GetUseSyntheticData() bool {
	if o == nil || IsNil(o.UseSyntheticData) {
		var ret bool
		return ret
	}
	return *o.UseSyntheticData
}

// GetUseSyntheticDataOk returns a tuple with the UseSyntheticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SemgrepSupplyChainFindingsSettingsConfig) GetUseSyntheticDataOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyntheticData) {
		return nil, false
	}
	return o.UseSyntheticData, true
}

// HasUseSyntheticData returns a boolean if a field has been set.
func (o *SemgrepSupplyChainFindingsSettingsConfig) HasUseSyntheticData() bool {
	if o != nil && !IsNil(o.UseSyntheticData) {
		return true
	}

	return false
}

// SetUseSyntheticData gets a reference to the given bool and assigns it to the UseSyntheticData field.
func (o *SemgrepSupplyChainFindingsSettingsConfig) SetUseSyntheticData(v bool) {
	o.UseSyntheticData = &v
}

func (o SemgrepSupplyChainFindingsSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SemgrepSupplyChainFindingsSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UseSyntheticData) {
		toSerialize["use_synthetic_data"] = o.UseSyntheticData
	}
	return toSerialize, nil
}

type NullableSemgrepSupplyChainFindingsSettingsConfig struct {
	value *SemgrepSupplyChainFindingsSettingsConfig
	isSet bool
}

func (v NullableSemgrepSupplyChainFindingsSettingsConfig) Get() *SemgrepSupplyChainFindingsSettingsConfig {
	return v.value
}

func (v *NullableSemgrepSupplyChainFindingsSettingsConfig) Set(val *SemgrepSupplyChainFindingsSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSemgrepSupplyChainFindingsSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSemgrepSupplyChainFindingsSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSemgrepSupplyChainFindingsSettingsConfig(val *SemgrepSupplyChainFindingsSettingsConfig) *NullableSemgrepSupplyChainFindingsSettingsConfig {
	return &NullableSemgrepSupplyChainFindingsSettingsConfig{value: val, isSet: true}
}

func (v NullableSemgrepSupplyChainFindingsSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSemgrepSupplyChainFindingsSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


