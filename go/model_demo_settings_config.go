/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the DemoSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DemoSettingsConfig{}

// DemoSettingsConfig Demo settings
type DemoSettingsConfig struct {
	// The rate at which to generate records (between 1 and 1000) per second
	Rate *int32 `json:"rate,omitempty"`
	// The type of record to generate
	RecordType *string `json:"record_type,omitempty"`
}

// NewDemoSettingsConfig instantiates a new DemoSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDemoSettingsConfig() *DemoSettingsConfig {
	this := DemoSettingsConfig{}
	return &this
}

// NewDemoSettingsConfigWithDefaults instantiates a new DemoSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDemoSettingsConfigWithDefaults() *DemoSettingsConfig {
	this := DemoSettingsConfig{}
	return &this
}

// GetRate returns the Rate field value if set, zero value otherwise.
func (o *DemoSettingsConfig) GetRate() int32 {
	if o == nil || IsNil(o.Rate) {
		var ret int32
		return ret
	}
	return *o.Rate
}

// GetRateOk returns a tuple with the Rate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemoSettingsConfig) GetRateOk() (*int32, bool) {
	if o == nil || IsNil(o.Rate) {
		return nil, false
	}
	return o.Rate, true
}

// HasRate returns a boolean if a field has been set.
func (o *DemoSettingsConfig) HasRate() bool {
	if o != nil && !IsNil(o.Rate) {
		return true
	}

	return false
}

// SetRate gets a reference to the given int32 and assigns it to the Rate field.
func (o *DemoSettingsConfig) SetRate(v int32) {
	o.Rate = &v
}

// GetRecordType returns the RecordType field value if set, zero value otherwise.
func (o *DemoSettingsConfig) GetRecordType() string {
	if o == nil || IsNil(o.RecordType) {
		var ret string
		return ret
	}
	return *o.RecordType
}

// GetRecordTypeOk returns a tuple with the RecordType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DemoSettingsConfig) GetRecordTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecordType) {
		return nil, false
	}
	return o.RecordType, true
}

// HasRecordType returns a boolean if a field has been set.
func (o *DemoSettingsConfig) HasRecordType() bool {
	if o != nil && !IsNil(o.RecordType) {
		return true
	}

	return false
}

// SetRecordType gets a reference to the given string and assigns it to the RecordType field.
func (o *DemoSettingsConfig) SetRecordType(v string) {
	o.RecordType = &v
}

func (o DemoSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DemoSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Rate) {
		toSerialize["rate"] = o.Rate
	}
	if !IsNil(o.RecordType) {
		toSerialize["record_type"] = o.RecordType
	}
	return toSerialize, nil
}

type NullableDemoSettingsConfig struct {
	value *DemoSettingsConfig
	isSet bool
}

func (v NullableDemoSettingsConfig) Get() *DemoSettingsConfig {
	return v.value
}

func (v *NullableDemoSettingsConfig) Set(val *DemoSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableDemoSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableDemoSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDemoSettingsConfig(val *DemoSettingsConfig) *NullableDemoSettingsConfig {
	return &NullableDemoSettingsConfig{value: val, isSet: true}
}

func (v NullableDemoSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDemoSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


