/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoutesV2PipelineStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutesV2PipelineStatus{}

// RoutesV2PipelineStatus struct for RoutesV2PipelineStatus
type RoutesV2PipelineStatus struct {
	Egress *ModelsDataUsage `json:"egress,omitempty"`
	Errors *int32 `json:"errors,omitempty"`
	Ingress *ModelsDataUsage `json:"ingress,omitempty"`
	PipelineId string `json:"pipeline_id"`
	PipelineName string `json:"pipeline_name"`
	Status string `json:"status"`
}

type _RoutesV2PipelineStatus RoutesV2PipelineStatus

// NewRoutesV2PipelineStatus instantiates a new RoutesV2PipelineStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutesV2PipelineStatus(pipelineId string, pipelineName string, status string) *RoutesV2PipelineStatus {
	this := RoutesV2PipelineStatus{}
	this.PipelineId = pipelineId
	this.PipelineName = pipelineName
	this.Status = status
	return &this
}

// NewRoutesV2PipelineStatusWithDefaults instantiates a new RoutesV2PipelineStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutesV2PipelineStatusWithDefaults() *RoutesV2PipelineStatus {
	this := RoutesV2PipelineStatus{}
	return &this
}

// GetEgress returns the Egress field value if set, zero value otherwise.
func (o *RoutesV2PipelineStatus) GetEgress() ModelsDataUsage {
	if o == nil || IsNil(o.Egress) {
		var ret ModelsDataUsage
		return ret
	}
	return *o.Egress
}

// GetEgressOk returns a tuple with the Egress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesV2PipelineStatus) GetEgressOk() (*ModelsDataUsage, bool) {
	if o == nil || IsNil(o.Egress) {
		return nil, false
	}
	return o.Egress, true
}

// HasEgress returns a boolean if a field has been set.
func (o *RoutesV2PipelineStatus) HasEgress() bool {
	if o != nil && !IsNil(o.Egress) {
		return true
	}

	return false
}

// SetEgress gets a reference to the given ModelsDataUsage and assigns it to the Egress field.
func (o *RoutesV2PipelineStatus) SetEgress(v ModelsDataUsage) {
	o.Egress = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *RoutesV2PipelineStatus) GetErrors() int32 {
	if o == nil || IsNil(o.Errors) {
		var ret int32
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesV2PipelineStatus) GetErrorsOk() (*int32, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *RoutesV2PipelineStatus) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given int32 and assigns it to the Errors field.
func (o *RoutesV2PipelineStatus) SetErrors(v int32) {
	o.Errors = &v
}

// GetIngress returns the Ingress field value if set, zero value otherwise.
func (o *RoutesV2PipelineStatus) GetIngress() ModelsDataUsage {
	if o == nil || IsNil(o.Ingress) {
		var ret ModelsDataUsage
		return ret
	}
	return *o.Ingress
}

// GetIngressOk returns a tuple with the Ingress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesV2PipelineStatus) GetIngressOk() (*ModelsDataUsage, bool) {
	if o == nil || IsNil(o.Ingress) {
		return nil, false
	}
	return o.Ingress, true
}

// HasIngress returns a boolean if a field has been set.
func (o *RoutesV2PipelineStatus) HasIngress() bool {
	if o != nil && !IsNil(o.Ingress) {
		return true
	}

	return false
}

// SetIngress gets a reference to the given ModelsDataUsage and assigns it to the Ingress field.
func (o *RoutesV2PipelineStatus) SetIngress(v ModelsDataUsage) {
	o.Ingress = &v
}

// GetPipelineId returns the PipelineId field value
func (o *RoutesV2PipelineStatus) GetPipelineId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineId
}

// GetPipelineIdOk returns a tuple with the PipelineId field value
// and a boolean to check if the value has been set.
func (o *RoutesV2PipelineStatus) GetPipelineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineId, true
}

// SetPipelineId sets field value
func (o *RoutesV2PipelineStatus) SetPipelineId(v string) {
	o.PipelineId = v
}

// GetPipelineName returns the PipelineName field value
func (o *RoutesV2PipelineStatus) GetPipelineName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PipelineName
}

// GetPipelineNameOk returns a tuple with the PipelineName field value
// and a boolean to check if the value has been set.
func (o *RoutesV2PipelineStatus) GetPipelineNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PipelineName, true
}

// SetPipelineName sets field value
func (o *RoutesV2PipelineStatus) SetPipelineName(v string) {
	o.PipelineName = v
}

// GetStatus returns the Status field value
func (o *RoutesV2PipelineStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *RoutesV2PipelineStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *RoutesV2PipelineStatus) SetStatus(v string) {
	o.Status = v
}

func (o RoutesV2PipelineStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutesV2PipelineStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Egress) {
		toSerialize["egress"] = o.Egress
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Ingress) {
		toSerialize["ingress"] = o.Ingress
	}
	toSerialize["pipeline_id"] = o.PipelineId
	toSerialize["pipeline_name"] = o.PipelineName
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *RoutesV2PipelineStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"pipeline_id",
		"pipeline_name",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutesV2PipelineStatus := _RoutesV2PipelineStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoutesV2PipelineStatus)

	if err != nil {
		return err
	}

	*o = RoutesV2PipelineStatus(varRoutesV2PipelineStatus)

	return err
}

type NullableRoutesV2PipelineStatus struct {
	value *RoutesV2PipelineStatus
	isSet bool
}

func (v NullableRoutesV2PipelineStatus) Get() *RoutesV2PipelineStatus {
	return v.value
}

func (v *NullableRoutesV2PipelineStatus) Set(val *RoutesV2PipelineStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesV2PipelineStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesV2PipelineStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesV2PipelineStatus(val *RoutesV2PipelineStatus) *NullableRoutesV2PipelineStatus {
	return &NullableRoutesV2PipelineStatus{value: val, isSet: true}
}

func (v NullableRoutesV2PipelineStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesV2PipelineStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


