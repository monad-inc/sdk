/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the SplunkSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplunkSettingsConfig{}

// SplunkSettingsConfig Splunk Output Settings
type SplunkSettingsConfig struct {
	// Whether to allow insecure connections (not recommended for production).
	AllowInsecure *bool `json:"allow_insecure,omitempty"`
	// The port of the Splunk instance.
	Port *string `json:"port,omitempty"`
	// The URL of the Splunk instance (must start with http or https).
	Url *string `json:"url,omitempty"`
}

// NewSplunkSettingsConfig instantiates a new SplunkSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplunkSettingsConfig() *SplunkSettingsConfig {
	this := SplunkSettingsConfig{}
	return &this
}

// NewSplunkSettingsConfigWithDefaults instantiates a new SplunkSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplunkSettingsConfigWithDefaults() *SplunkSettingsConfig {
	this := SplunkSettingsConfig{}
	return &this
}

// GetAllowInsecure returns the AllowInsecure field value if set, zero value otherwise.
func (o *SplunkSettingsConfig) GetAllowInsecure() bool {
	if o == nil || IsNil(o.AllowInsecure) {
		var ret bool
		return ret
	}
	return *o.AllowInsecure
}

// GetAllowInsecureOk returns a tuple with the AllowInsecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplunkSettingsConfig) GetAllowInsecureOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowInsecure) {
		return nil, false
	}
	return o.AllowInsecure, true
}

// HasAllowInsecure returns a boolean if a field has been set.
func (o *SplunkSettingsConfig) HasAllowInsecure() bool {
	if o != nil && !IsNil(o.AllowInsecure) {
		return true
	}

	return false
}

// SetAllowInsecure gets a reference to the given bool and assigns it to the AllowInsecure field.
func (o *SplunkSettingsConfig) SetAllowInsecure(v bool) {
	o.AllowInsecure = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SplunkSettingsConfig) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplunkSettingsConfig) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SplunkSettingsConfig) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *SplunkSettingsConfig) SetPort(v string) {
	o.Port = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SplunkSettingsConfig) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplunkSettingsConfig) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SplunkSettingsConfig) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SplunkSettingsConfig) SetUrl(v string) {
	o.Url = &v
}

func (o SplunkSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplunkSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowInsecure) {
		toSerialize["allow_insecure"] = o.AllowInsecure
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableSplunkSettingsConfig struct {
	value *SplunkSettingsConfig
	isSet bool
}

func (v NullableSplunkSettingsConfig) Get() *SplunkSettingsConfig {
	return v.value
}

func (v *NullableSplunkSettingsConfig) Set(val *SplunkSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSplunkSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSplunkSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplunkSettingsConfig(val *SplunkSettingsConfig) *NullableSplunkSettingsConfig {
	return &NullableSplunkSettingsConfig{value: val, isSet: true}
}

func (v NullableSplunkSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplunkSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


