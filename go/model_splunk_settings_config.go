/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the SplunkSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SplunkSettingsConfig{}

// SplunkSettingsConfig Splunk Output Settings
type SplunkSettingsConfig struct {
	// Whether to allow insecure connections (not recommended for production).
	AllowInsecure *bool `json:"allow_insecure,omitempty"`
	// The index you want to send data to. If left empty, data is sent to the default index associated with the token. If specified, please read our docs for more context on Splunk token & Index scoping.
	Index *string `json:"index,omitempty"`
	// The port of the Splunk instance.
	Port *string `json:"port,omitempty"`
	// Ensure this is selected if you want Monad to create the index for you. If you are using a pre-existing index, please leave this deselected. Read our docs for more context on Splunk token & Index scoping.
	ToCreate *bool `json:"to_create,omitempty"`
	// The URL of the Splunk instance (must start with http or https).
	Url *string `json:"url,omitempty"`
	// Represents an administrative account to manage indices. Used to create an index, hence can be left empty if default index is to be used.
	Username *string `json:"username,omitempty"`
}

// NewSplunkSettingsConfig instantiates a new SplunkSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSplunkSettingsConfig() *SplunkSettingsConfig {
	this := SplunkSettingsConfig{}
	return &this
}

// NewSplunkSettingsConfigWithDefaults instantiates a new SplunkSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSplunkSettingsConfigWithDefaults() *SplunkSettingsConfig {
	this := SplunkSettingsConfig{}
	return &this
}

// GetAllowInsecure returns the AllowInsecure field value if set, zero value otherwise.
func (o *SplunkSettingsConfig) GetAllowInsecure() bool {
	if o == nil || IsNil(o.AllowInsecure) {
		var ret bool
		return ret
	}
	return *o.AllowInsecure
}

// GetAllowInsecureOk returns a tuple with the AllowInsecure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplunkSettingsConfig) GetAllowInsecureOk() (*bool, bool) {
	if o == nil || IsNil(o.AllowInsecure) {
		return nil, false
	}
	return o.AllowInsecure, true
}

// HasAllowInsecure returns a boolean if a field has been set.
func (o *SplunkSettingsConfig) HasAllowInsecure() bool {
	if o != nil && !IsNil(o.AllowInsecure) {
		return true
	}

	return false
}

// SetAllowInsecure gets a reference to the given bool and assigns it to the AllowInsecure field.
func (o *SplunkSettingsConfig) SetAllowInsecure(v bool) {
	o.AllowInsecure = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *SplunkSettingsConfig) GetIndex() string {
	if o == nil || IsNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplunkSettingsConfig) GetIndexOk() (*string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *SplunkSettingsConfig) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *SplunkSettingsConfig) SetIndex(v string) {
	o.Index = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *SplunkSettingsConfig) GetPort() string {
	if o == nil || IsNil(o.Port) {
		var ret string
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplunkSettingsConfig) GetPortOk() (*string, bool) {
	if o == nil || IsNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *SplunkSettingsConfig) HasPort() bool {
	if o != nil && !IsNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given string and assigns it to the Port field.
func (o *SplunkSettingsConfig) SetPort(v string) {
	o.Port = &v
}

// GetToCreate returns the ToCreate field value if set, zero value otherwise.
func (o *SplunkSettingsConfig) GetToCreate() bool {
	if o == nil || IsNil(o.ToCreate) {
		var ret bool
		return ret
	}
	return *o.ToCreate
}

// GetToCreateOk returns a tuple with the ToCreate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplunkSettingsConfig) GetToCreateOk() (*bool, bool) {
	if o == nil || IsNil(o.ToCreate) {
		return nil, false
	}
	return o.ToCreate, true
}

// HasToCreate returns a boolean if a field has been set.
func (o *SplunkSettingsConfig) HasToCreate() bool {
	if o != nil && !IsNil(o.ToCreate) {
		return true
	}

	return false
}

// SetToCreate gets a reference to the given bool and assigns it to the ToCreate field.
func (o *SplunkSettingsConfig) SetToCreate(v bool) {
	o.ToCreate = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *SplunkSettingsConfig) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplunkSettingsConfig) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *SplunkSettingsConfig) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *SplunkSettingsConfig) SetUrl(v string) {
	o.Url = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *SplunkSettingsConfig) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SplunkSettingsConfig) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *SplunkSettingsConfig) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *SplunkSettingsConfig) SetUsername(v string) {
	o.Username = &v
}

func (o SplunkSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SplunkSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AllowInsecure) {
		toSerialize["allow_insecure"] = o.AllowInsecure
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !IsNil(o.ToCreate) {
		toSerialize["to_create"] = o.ToCreate
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableSplunkSettingsConfig struct {
	value *SplunkSettingsConfig
	isSet bool
}

func (v NullableSplunkSettingsConfig) Get() *SplunkSettingsConfig {
	return v.value
}

func (v *NullableSplunkSettingsConfig) Set(val *SplunkSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSplunkSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSplunkSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSplunkSettingsConfig(val *SplunkSettingsConfig) *NullableSplunkSettingsConfig {
	return &NullableSplunkSettingsConfig{value: val, isSet: true}
}

func (v NullableSplunkSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSplunkSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


