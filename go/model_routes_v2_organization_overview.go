/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RoutesV2OrganizationOverview type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RoutesV2OrganizationOverview{}

// RoutesV2OrganizationOverview struct for RoutesV2OrganizationOverview
type RoutesV2OrganizationOverview struct {
	Disabled int32 `json:"disabled"`
	Egress *ModelsDataUsage `json:"egress,omitempty"`
	Healthy int32 `json:"healthy"`
	Ingress *ModelsDataUsage `json:"ingress,omitempty"`
	Unhealthy int32 `json:"unhealthy"`
}

type _RoutesV2OrganizationOverview RoutesV2OrganizationOverview

// NewRoutesV2OrganizationOverview instantiates a new RoutesV2OrganizationOverview object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoutesV2OrganizationOverview(disabled int32, healthy int32, unhealthy int32) *RoutesV2OrganizationOverview {
	this := RoutesV2OrganizationOverview{}
	this.Disabled = disabled
	this.Healthy = healthy
	this.Unhealthy = unhealthy
	return &this
}

// NewRoutesV2OrganizationOverviewWithDefaults instantiates a new RoutesV2OrganizationOverview object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRoutesV2OrganizationOverviewWithDefaults() *RoutesV2OrganizationOverview {
	this := RoutesV2OrganizationOverview{}
	return &this
}

// GetDisabled returns the Disabled field value
func (o *RoutesV2OrganizationOverview) GetDisabled() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *RoutesV2OrganizationOverview) GetDisabledOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *RoutesV2OrganizationOverview) SetDisabled(v int32) {
	o.Disabled = v
}

// GetEgress returns the Egress field value if set, zero value otherwise.
func (o *RoutesV2OrganizationOverview) GetEgress() ModelsDataUsage {
	if o == nil || IsNil(o.Egress) {
		var ret ModelsDataUsage
		return ret
	}
	return *o.Egress
}

// GetEgressOk returns a tuple with the Egress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesV2OrganizationOverview) GetEgressOk() (*ModelsDataUsage, bool) {
	if o == nil || IsNil(o.Egress) {
		return nil, false
	}
	return o.Egress, true
}

// HasEgress returns a boolean if a field has been set.
func (o *RoutesV2OrganizationOverview) HasEgress() bool {
	if o != nil && !IsNil(o.Egress) {
		return true
	}

	return false
}

// SetEgress gets a reference to the given ModelsDataUsage and assigns it to the Egress field.
func (o *RoutesV2OrganizationOverview) SetEgress(v ModelsDataUsage) {
	o.Egress = &v
}

// GetHealthy returns the Healthy field value
func (o *RoutesV2OrganizationOverview) GetHealthy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Healthy
}

// GetHealthyOk returns a tuple with the Healthy field value
// and a boolean to check if the value has been set.
func (o *RoutesV2OrganizationOverview) GetHealthyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Healthy, true
}

// SetHealthy sets field value
func (o *RoutesV2OrganizationOverview) SetHealthy(v int32) {
	o.Healthy = v
}

// GetIngress returns the Ingress field value if set, zero value otherwise.
func (o *RoutesV2OrganizationOverview) GetIngress() ModelsDataUsage {
	if o == nil || IsNil(o.Ingress) {
		var ret ModelsDataUsage
		return ret
	}
	return *o.Ingress
}

// GetIngressOk returns a tuple with the Ingress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RoutesV2OrganizationOverview) GetIngressOk() (*ModelsDataUsage, bool) {
	if o == nil || IsNil(o.Ingress) {
		return nil, false
	}
	return o.Ingress, true
}

// HasIngress returns a boolean if a field has been set.
func (o *RoutesV2OrganizationOverview) HasIngress() bool {
	if o != nil && !IsNil(o.Ingress) {
		return true
	}

	return false
}

// SetIngress gets a reference to the given ModelsDataUsage and assigns it to the Ingress field.
func (o *RoutesV2OrganizationOverview) SetIngress(v ModelsDataUsage) {
	o.Ingress = &v
}

// GetUnhealthy returns the Unhealthy field value
func (o *RoutesV2OrganizationOverview) GetUnhealthy() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Unhealthy
}

// GetUnhealthyOk returns a tuple with the Unhealthy field value
// and a boolean to check if the value has been set.
func (o *RoutesV2OrganizationOverview) GetUnhealthyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unhealthy, true
}

// SetUnhealthy sets field value
func (o *RoutesV2OrganizationOverview) SetUnhealthy(v int32) {
	o.Unhealthy = v
}

func (o RoutesV2OrganizationOverview) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RoutesV2OrganizationOverview) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disabled"] = o.Disabled
	if !IsNil(o.Egress) {
		toSerialize["egress"] = o.Egress
	}
	toSerialize["healthy"] = o.Healthy
	if !IsNil(o.Ingress) {
		toSerialize["ingress"] = o.Ingress
	}
	toSerialize["unhealthy"] = o.Unhealthy
	return toSerialize, nil
}

func (o *RoutesV2OrganizationOverview) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disabled",
		"healthy",
		"unhealthy",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRoutesV2OrganizationOverview := _RoutesV2OrganizationOverview{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRoutesV2OrganizationOverview)

	if err != nil {
		return err
	}

	*o = RoutesV2OrganizationOverview(varRoutesV2OrganizationOverview)

	return err
}

type NullableRoutesV2OrganizationOverview struct {
	value *RoutesV2OrganizationOverview
	isSet bool
}

func (v NullableRoutesV2OrganizationOverview) Get() *RoutesV2OrganizationOverview {
	return v.value
}

func (v *NullableRoutesV2OrganizationOverview) Set(val *RoutesV2OrganizationOverview) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesV2OrganizationOverview) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesV2OrganizationOverview) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesV2OrganizationOverview(val *RoutesV2OrganizationOverview) *NullableRoutesV2OrganizationOverview {
	return &NullableRoutesV2OrganizationOverview{value: val, isSet: true}
}

func (v NullableRoutesV2OrganizationOverview) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesV2OrganizationOverview) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


