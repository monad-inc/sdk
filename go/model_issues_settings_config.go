/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the IssuesSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuesSettingsConfig{}

// IssuesSettingsConfig Wiz Issues settings
type IssuesSettingsConfig struct {
	// @Description Filter Issues created by specific control IDs
	ControlIds []string `json:"control_ids,omitempty"`
	// @Description Filter Issues with or without a note
	HasNote *string `json:"has_note,omitempty"`
	// @Description Filter Issues with or without remediation
	HasRemediation *string `json:"has_remediation,omitempty"`
	// @Description Filter Issues with or without related service ticket
	HasServiceTicket *string `json:"has_service_ticket,omitempty"`
	// @Description Filter only Issues that match these specific IDs
	IssueIds []string `json:"issue_ids,omitempty"`
	// @Description Filter by Issue type
	IssueTypes []string `json:"issue_types,omitempty"`
	// @Description Filter Issues associated with specific project IDs
	ProjectIds []string `json:"project_ids,omitempty"`
	// @Description Filter by related entity ids
	RelatedEntityId *string `json:"related_entity_id,omitempty"`
	// @Description Filter Issues by resolution reason
	ResolutionReasons []string `json:"resolution_reasons,omitempty"`
	// @Description Filters Issues by risk type according to Wiz-defined types of risk @Description Use the risk ID and not the risk name @Description All specified risks must be present
	RiskEqualsAll []string `json:"risk_equals_all,omitempty"`
	// @Description Filters Issues by risk type according to Wiz-defined types of risk @Description Use the risk ID and not the risk name
	RiskEqualsAny []string `json:"risk_equals_any,omitempty"`
	// @Description Free text search on Issue title or object name @Description Returns NULL if no match is found
	SearchQuery *string `json:"search_query,omitempty"`
	// @Description Filter by security scan source
	SecurityScan *string `json:"security_scan,omitempty"`
	// @Description Filter Issues according to Control severity
	Severities []string `json:"severities,omitempty"`
	// @Description Filter Issues from specific stack layers
	StackLayers []string `json:"stack_layers,omitempty"`
	// @Description Filter by Issue handling status @Description Default: OPEN
	Status []string `json:"status,omitempty"`
	// DataCenter represents the tenant's data center location @Description Enter a tenant data center, e.g., \"us1\", \"us2\", \"us3\" @Description Find your tenant data center on the Tenant Info page in Wiz, or request it from your Wiz customer contact
	TenantDataCenter *string `json:"tenant_data_center,omitempty"`
	// Generate synthetic demo data instead of connecting to the real data source.
	UseSyntheticData *bool `json:"use_synthetic_data,omitempty"`
}

// NewIssuesSettingsConfig instantiates a new IssuesSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesSettingsConfig() *IssuesSettingsConfig {
	this := IssuesSettingsConfig{}
	return &this
}

// NewIssuesSettingsConfigWithDefaults instantiates a new IssuesSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesSettingsConfigWithDefaults() *IssuesSettingsConfig {
	this := IssuesSettingsConfig{}
	return &this
}

// GetControlIds returns the ControlIds field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetControlIds() []string {
	if o == nil || IsNil(o.ControlIds) {
		var ret []string
		return ret
	}
	return o.ControlIds
}

// GetControlIdsOk returns a tuple with the ControlIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetControlIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ControlIds) {
		return nil, false
	}
	return o.ControlIds, true
}

// HasControlIds returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasControlIds() bool {
	if o != nil && !IsNil(o.ControlIds) {
		return true
	}

	return false
}

// SetControlIds gets a reference to the given []string and assigns it to the ControlIds field.
func (o *IssuesSettingsConfig) SetControlIds(v []string) {
	o.ControlIds = v
}

// GetHasNote returns the HasNote field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetHasNote() string {
	if o == nil || IsNil(o.HasNote) {
		var ret string
		return ret
	}
	return *o.HasNote
}

// GetHasNoteOk returns a tuple with the HasNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetHasNoteOk() (*string, bool) {
	if o == nil || IsNil(o.HasNote) {
		return nil, false
	}
	return o.HasNote, true
}

// HasHasNote returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasHasNote() bool {
	if o != nil && !IsNil(o.HasNote) {
		return true
	}

	return false
}

// SetHasNote gets a reference to the given string and assigns it to the HasNote field.
func (o *IssuesSettingsConfig) SetHasNote(v string) {
	o.HasNote = &v
}

// GetHasRemediation returns the HasRemediation field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetHasRemediation() string {
	if o == nil || IsNil(o.HasRemediation) {
		var ret string
		return ret
	}
	return *o.HasRemediation
}

// GetHasRemediationOk returns a tuple with the HasRemediation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetHasRemediationOk() (*string, bool) {
	if o == nil || IsNil(o.HasRemediation) {
		return nil, false
	}
	return o.HasRemediation, true
}

// HasHasRemediation returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasHasRemediation() bool {
	if o != nil && !IsNil(o.HasRemediation) {
		return true
	}

	return false
}

// SetHasRemediation gets a reference to the given string and assigns it to the HasRemediation field.
func (o *IssuesSettingsConfig) SetHasRemediation(v string) {
	o.HasRemediation = &v
}

// GetHasServiceTicket returns the HasServiceTicket field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetHasServiceTicket() string {
	if o == nil || IsNil(o.HasServiceTicket) {
		var ret string
		return ret
	}
	return *o.HasServiceTicket
}

// GetHasServiceTicketOk returns a tuple with the HasServiceTicket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetHasServiceTicketOk() (*string, bool) {
	if o == nil || IsNil(o.HasServiceTicket) {
		return nil, false
	}
	return o.HasServiceTicket, true
}

// HasHasServiceTicket returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasHasServiceTicket() bool {
	if o != nil && !IsNil(o.HasServiceTicket) {
		return true
	}

	return false
}

// SetHasServiceTicket gets a reference to the given string and assigns it to the HasServiceTicket field.
func (o *IssuesSettingsConfig) SetHasServiceTicket(v string) {
	o.HasServiceTicket = &v
}

// GetIssueIds returns the IssueIds field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetIssueIds() []string {
	if o == nil || IsNil(o.IssueIds) {
		var ret []string
		return ret
	}
	return o.IssueIds
}

// GetIssueIdsOk returns a tuple with the IssueIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetIssueIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.IssueIds) {
		return nil, false
	}
	return o.IssueIds, true
}

// HasIssueIds returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasIssueIds() bool {
	if o != nil && !IsNil(o.IssueIds) {
		return true
	}

	return false
}

// SetIssueIds gets a reference to the given []string and assigns it to the IssueIds field.
func (o *IssuesSettingsConfig) SetIssueIds(v []string) {
	o.IssueIds = v
}

// GetIssueTypes returns the IssueTypes field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetIssueTypes() []string {
	if o == nil || IsNil(o.IssueTypes) {
		var ret []string
		return ret
	}
	return o.IssueTypes
}

// GetIssueTypesOk returns a tuple with the IssueTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetIssueTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.IssueTypes) {
		return nil, false
	}
	return o.IssueTypes, true
}

// HasIssueTypes returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasIssueTypes() bool {
	if o != nil && !IsNil(o.IssueTypes) {
		return true
	}

	return false
}

// SetIssueTypes gets a reference to the given []string and assigns it to the IssueTypes field.
func (o *IssuesSettingsConfig) SetIssueTypes(v []string) {
	o.IssueTypes = v
}

// GetProjectIds returns the ProjectIds field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetProjectIds() []string {
	if o == nil || IsNil(o.ProjectIds) {
		var ret []string
		return ret
	}
	return o.ProjectIds
}

// GetProjectIdsOk returns a tuple with the ProjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetProjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ProjectIds) {
		return nil, false
	}
	return o.ProjectIds, true
}

// HasProjectIds returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasProjectIds() bool {
	if o != nil && !IsNil(o.ProjectIds) {
		return true
	}

	return false
}

// SetProjectIds gets a reference to the given []string and assigns it to the ProjectIds field.
func (o *IssuesSettingsConfig) SetProjectIds(v []string) {
	o.ProjectIds = v
}

// GetRelatedEntityId returns the RelatedEntityId field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetRelatedEntityId() string {
	if o == nil || IsNil(o.RelatedEntityId) {
		var ret string
		return ret
	}
	return *o.RelatedEntityId
}

// GetRelatedEntityIdOk returns a tuple with the RelatedEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetRelatedEntityIdOk() (*string, bool) {
	if o == nil || IsNil(o.RelatedEntityId) {
		return nil, false
	}
	return o.RelatedEntityId, true
}

// HasRelatedEntityId returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasRelatedEntityId() bool {
	if o != nil && !IsNil(o.RelatedEntityId) {
		return true
	}

	return false
}

// SetRelatedEntityId gets a reference to the given string and assigns it to the RelatedEntityId field.
func (o *IssuesSettingsConfig) SetRelatedEntityId(v string) {
	o.RelatedEntityId = &v
}

// GetResolutionReasons returns the ResolutionReasons field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetResolutionReasons() []string {
	if o == nil || IsNil(o.ResolutionReasons) {
		var ret []string
		return ret
	}
	return o.ResolutionReasons
}

// GetResolutionReasonsOk returns a tuple with the ResolutionReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetResolutionReasonsOk() ([]string, bool) {
	if o == nil || IsNil(o.ResolutionReasons) {
		return nil, false
	}
	return o.ResolutionReasons, true
}

// HasResolutionReasons returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasResolutionReasons() bool {
	if o != nil && !IsNil(o.ResolutionReasons) {
		return true
	}

	return false
}

// SetResolutionReasons gets a reference to the given []string and assigns it to the ResolutionReasons field.
func (o *IssuesSettingsConfig) SetResolutionReasons(v []string) {
	o.ResolutionReasons = v
}

// GetRiskEqualsAll returns the RiskEqualsAll field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetRiskEqualsAll() []string {
	if o == nil || IsNil(o.RiskEqualsAll) {
		var ret []string
		return ret
	}
	return o.RiskEqualsAll
}

// GetRiskEqualsAllOk returns a tuple with the RiskEqualsAll field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetRiskEqualsAllOk() ([]string, bool) {
	if o == nil || IsNil(o.RiskEqualsAll) {
		return nil, false
	}
	return o.RiskEqualsAll, true
}

// HasRiskEqualsAll returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasRiskEqualsAll() bool {
	if o != nil && !IsNil(o.RiskEqualsAll) {
		return true
	}

	return false
}

// SetRiskEqualsAll gets a reference to the given []string and assigns it to the RiskEqualsAll field.
func (o *IssuesSettingsConfig) SetRiskEqualsAll(v []string) {
	o.RiskEqualsAll = v
}

// GetRiskEqualsAny returns the RiskEqualsAny field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetRiskEqualsAny() []string {
	if o == nil || IsNil(o.RiskEqualsAny) {
		var ret []string
		return ret
	}
	return o.RiskEqualsAny
}

// GetRiskEqualsAnyOk returns a tuple with the RiskEqualsAny field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetRiskEqualsAnyOk() ([]string, bool) {
	if o == nil || IsNil(o.RiskEqualsAny) {
		return nil, false
	}
	return o.RiskEqualsAny, true
}

// HasRiskEqualsAny returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasRiskEqualsAny() bool {
	if o != nil && !IsNil(o.RiskEqualsAny) {
		return true
	}

	return false
}

// SetRiskEqualsAny gets a reference to the given []string and assigns it to the RiskEqualsAny field.
func (o *IssuesSettingsConfig) SetRiskEqualsAny(v []string) {
	o.RiskEqualsAny = v
}

// GetSearchQuery returns the SearchQuery field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetSearchQuery() string {
	if o == nil || IsNil(o.SearchQuery) {
		var ret string
		return ret
	}
	return *o.SearchQuery
}

// GetSearchQueryOk returns a tuple with the SearchQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetSearchQueryOk() (*string, bool) {
	if o == nil || IsNil(o.SearchQuery) {
		return nil, false
	}
	return o.SearchQuery, true
}

// HasSearchQuery returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasSearchQuery() bool {
	if o != nil && !IsNil(o.SearchQuery) {
		return true
	}

	return false
}

// SetSearchQuery gets a reference to the given string and assigns it to the SearchQuery field.
func (o *IssuesSettingsConfig) SetSearchQuery(v string) {
	o.SearchQuery = &v
}

// GetSecurityScan returns the SecurityScan field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetSecurityScan() string {
	if o == nil || IsNil(o.SecurityScan) {
		var ret string
		return ret
	}
	return *o.SecurityScan
}

// GetSecurityScanOk returns a tuple with the SecurityScan field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetSecurityScanOk() (*string, bool) {
	if o == nil || IsNil(o.SecurityScan) {
		return nil, false
	}
	return o.SecurityScan, true
}

// HasSecurityScan returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasSecurityScan() bool {
	if o != nil && !IsNil(o.SecurityScan) {
		return true
	}

	return false
}

// SetSecurityScan gets a reference to the given string and assigns it to the SecurityScan field.
func (o *IssuesSettingsConfig) SetSecurityScan(v string) {
	o.SecurityScan = &v
}

// GetSeverities returns the Severities field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetSeverities() []string {
	if o == nil || IsNil(o.Severities) {
		var ret []string
		return ret
	}
	return o.Severities
}

// GetSeveritiesOk returns a tuple with the Severities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetSeveritiesOk() ([]string, bool) {
	if o == nil || IsNil(o.Severities) {
		return nil, false
	}
	return o.Severities, true
}

// HasSeverities returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasSeverities() bool {
	if o != nil && !IsNil(o.Severities) {
		return true
	}

	return false
}

// SetSeverities gets a reference to the given []string and assigns it to the Severities field.
func (o *IssuesSettingsConfig) SetSeverities(v []string) {
	o.Severities = v
}

// GetStackLayers returns the StackLayers field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetStackLayers() []string {
	if o == nil || IsNil(o.StackLayers) {
		var ret []string
		return ret
	}
	return o.StackLayers
}

// GetStackLayersOk returns a tuple with the StackLayers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetStackLayersOk() ([]string, bool) {
	if o == nil || IsNil(o.StackLayers) {
		return nil, false
	}
	return o.StackLayers, true
}

// HasStackLayers returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasStackLayers() bool {
	if o != nil && !IsNil(o.StackLayers) {
		return true
	}

	return false
}

// SetStackLayers gets a reference to the given []string and assigns it to the StackLayers field.
func (o *IssuesSettingsConfig) SetStackLayers(v []string) {
	o.StackLayers = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetStatus() []string {
	if o == nil || IsNil(o.Status) {
		var ret []string
		return ret
	}
	return o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetStatusOk() ([]string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given []string and assigns it to the Status field.
func (o *IssuesSettingsConfig) SetStatus(v []string) {
	o.Status = v
}

// GetTenantDataCenter returns the TenantDataCenter field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetTenantDataCenter() string {
	if o == nil || IsNil(o.TenantDataCenter) {
		var ret string
		return ret
	}
	return *o.TenantDataCenter
}

// GetTenantDataCenterOk returns a tuple with the TenantDataCenter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetTenantDataCenterOk() (*string, bool) {
	if o == nil || IsNil(o.TenantDataCenter) {
		return nil, false
	}
	return o.TenantDataCenter, true
}

// HasTenantDataCenter returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasTenantDataCenter() bool {
	if o != nil && !IsNil(o.TenantDataCenter) {
		return true
	}

	return false
}

// SetTenantDataCenter gets a reference to the given string and assigns it to the TenantDataCenter field.
func (o *IssuesSettingsConfig) SetTenantDataCenter(v string) {
	o.TenantDataCenter = &v
}

// GetUseSyntheticData returns the UseSyntheticData field value if set, zero value otherwise.
func (o *IssuesSettingsConfig) GetUseSyntheticData() bool {
	if o == nil || IsNil(o.UseSyntheticData) {
		var ret bool
		return ret
	}
	return *o.UseSyntheticData
}

// GetUseSyntheticDataOk returns a tuple with the UseSyntheticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IssuesSettingsConfig) GetUseSyntheticDataOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyntheticData) {
		return nil, false
	}
	return o.UseSyntheticData, true
}

// HasUseSyntheticData returns a boolean if a field has been set.
func (o *IssuesSettingsConfig) HasUseSyntheticData() bool {
	if o != nil && !IsNil(o.UseSyntheticData) {
		return true
	}

	return false
}

// SetUseSyntheticData gets a reference to the given bool and assigns it to the UseSyntheticData field.
func (o *IssuesSettingsConfig) SetUseSyntheticData(v bool) {
	o.UseSyntheticData = &v
}

func (o IssuesSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuesSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ControlIds) {
		toSerialize["control_ids"] = o.ControlIds
	}
	if !IsNil(o.HasNote) {
		toSerialize["has_note"] = o.HasNote
	}
	if !IsNil(o.HasRemediation) {
		toSerialize["has_remediation"] = o.HasRemediation
	}
	if !IsNil(o.HasServiceTicket) {
		toSerialize["has_service_ticket"] = o.HasServiceTicket
	}
	if !IsNil(o.IssueIds) {
		toSerialize["issue_ids"] = o.IssueIds
	}
	if !IsNil(o.IssueTypes) {
		toSerialize["issue_types"] = o.IssueTypes
	}
	if !IsNil(o.ProjectIds) {
		toSerialize["project_ids"] = o.ProjectIds
	}
	if !IsNil(o.RelatedEntityId) {
		toSerialize["related_entity_id"] = o.RelatedEntityId
	}
	if !IsNil(o.ResolutionReasons) {
		toSerialize["resolution_reasons"] = o.ResolutionReasons
	}
	if !IsNil(o.RiskEqualsAll) {
		toSerialize["risk_equals_all"] = o.RiskEqualsAll
	}
	if !IsNil(o.RiskEqualsAny) {
		toSerialize["risk_equals_any"] = o.RiskEqualsAny
	}
	if !IsNil(o.SearchQuery) {
		toSerialize["search_query"] = o.SearchQuery
	}
	if !IsNil(o.SecurityScan) {
		toSerialize["security_scan"] = o.SecurityScan
	}
	if !IsNil(o.Severities) {
		toSerialize["severities"] = o.Severities
	}
	if !IsNil(o.StackLayers) {
		toSerialize["stack_layers"] = o.StackLayers
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.TenantDataCenter) {
		toSerialize["tenant_data_center"] = o.TenantDataCenter
	}
	if !IsNil(o.UseSyntheticData) {
		toSerialize["use_synthetic_data"] = o.UseSyntheticData
	}
	return toSerialize, nil
}

type NullableIssuesSettingsConfig struct {
	value *IssuesSettingsConfig
	isSet bool
}

func (v NullableIssuesSettingsConfig) Get() *IssuesSettingsConfig {
	return v.value
}

func (v *NullableIssuesSettingsConfig) Set(val *IssuesSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesSettingsConfig(val *IssuesSettingsConfig) *NullableIssuesSettingsConfig {
	return &NullableIssuesSettingsConfig{value: val, isSet: true}
}

func (v NullableIssuesSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


