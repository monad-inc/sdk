/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the KvLookupSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KvLookupSettingsConfig{}

// KvLookupSettingsConfig KVLookup enrichment settings
type KvLookupSettingsConfig struct {
	// DestinationKey the path where the result will be stored in the record. Use '.' for the root object, 'field.subfield' for nested properties, 'array[0]' for array elements, or combined paths like 'users[0].name'.
	DestinationKey *string `json:"destination_key,omitempty"`
	// ErrorOnMissingKey if true, will throw an error if the key is not found in the KV lookup output
	ErrorOnMissingKey *bool `json:"error_on_missing_key,omitempty"`
	// JoinKey is the key in the record whose value will be used to join with the KV lookup output
	JoinKey *string `json:"join_key,omitempty"`
	// KVLookupOutputID is the ID of the KV lookup output to join with
	KvLookupOutputId *string `json:"kv_lookup_output_id,omitempty"`
}

// NewKvLookupSettingsConfig instantiates a new KvLookupSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKvLookupSettingsConfig() *KvLookupSettingsConfig {
	this := KvLookupSettingsConfig{}
	return &this
}

// NewKvLookupSettingsConfigWithDefaults instantiates a new KvLookupSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKvLookupSettingsConfigWithDefaults() *KvLookupSettingsConfig {
	this := KvLookupSettingsConfig{}
	return &this
}

// GetDestinationKey returns the DestinationKey field value if set, zero value otherwise.
func (o *KvLookupSettingsConfig) GetDestinationKey() string {
	if o == nil || IsNil(o.DestinationKey) {
		var ret string
		return ret
	}
	return *o.DestinationKey
}

// GetDestinationKeyOk returns a tuple with the DestinationKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KvLookupSettingsConfig) GetDestinationKeyOk() (*string, bool) {
	if o == nil || IsNil(o.DestinationKey) {
		return nil, false
	}
	return o.DestinationKey, true
}

// HasDestinationKey returns a boolean if a field has been set.
func (o *KvLookupSettingsConfig) HasDestinationKey() bool {
	if o != nil && !IsNil(o.DestinationKey) {
		return true
	}

	return false
}

// SetDestinationKey gets a reference to the given string and assigns it to the DestinationKey field.
func (o *KvLookupSettingsConfig) SetDestinationKey(v string) {
	o.DestinationKey = &v
}

// GetErrorOnMissingKey returns the ErrorOnMissingKey field value if set, zero value otherwise.
func (o *KvLookupSettingsConfig) GetErrorOnMissingKey() bool {
	if o == nil || IsNil(o.ErrorOnMissingKey) {
		var ret bool
		return ret
	}
	return *o.ErrorOnMissingKey
}

// GetErrorOnMissingKeyOk returns a tuple with the ErrorOnMissingKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KvLookupSettingsConfig) GetErrorOnMissingKeyOk() (*bool, bool) {
	if o == nil || IsNil(o.ErrorOnMissingKey) {
		return nil, false
	}
	return o.ErrorOnMissingKey, true
}

// HasErrorOnMissingKey returns a boolean if a field has been set.
func (o *KvLookupSettingsConfig) HasErrorOnMissingKey() bool {
	if o != nil && !IsNil(o.ErrorOnMissingKey) {
		return true
	}

	return false
}

// SetErrorOnMissingKey gets a reference to the given bool and assigns it to the ErrorOnMissingKey field.
func (o *KvLookupSettingsConfig) SetErrorOnMissingKey(v bool) {
	o.ErrorOnMissingKey = &v
}

// GetJoinKey returns the JoinKey field value if set, zero value otherwise.
func (o *KvLookupSettingsConfig) GetJoinKey() string {
	if o == nil || IsNil(o.JoinKey) {
		var ret string
		return ret
	}
	return *o.JoinKey
}

// GetJoinKeyOk returns a tuple with the JoinKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KvLookupSettingsConfig) GetJoinKeyOk() (*string, bool) {
	if o == nil || IsNil(o.JoinKey) {
		return nil, false
	}
	return o.JoinKey, true
}

// HasJoinKey returns a boolean if a field has been set.
func (o *KvLookupSettingsConfig) HasJoinKey() bool {
	if o != nil && !IsNil(o.JoinKey) {
		return true
	}

	return false
}

// SetJoinKey gets a reference to the given string and assigns it to the JoinKey field.
func (o *KvLookupSettingsConfig) SetJoinKey(v string) {
	o.JoinKey = &v
}

// GetKvLookupOutputId returns the KvLookupOutputId field value if set, zero value otherwise.
func (o *KvLookupSettingsConfig) GetKvLookupOutputId() string {
	if o == nil || IsNil(o.KvLookupOutputId) {
		var ret string
		return ret
	}
	return *o.KvLookupOutputId
}

// GetKvLookupOutputIdOk returns a tuple with the KvLookupOutputId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KvLookupSettingsConfig) GetKvLookupOutputIdOk() (*string, bool) {
	if o == nil || IsNil(o.KvLookupOutputId) {
		return nil, false
	}
	return o.KvLookupOutputId, true
}

// HasKvLookupOutputId returns a boolean if a field has been set.
func (o *KvLookupSettingsConfig) HasKvLookupOutputId() bool {
	if o != nil && !IsNil(o.KvLookupOutputId) {
		return true
	}

	return false
}

// SetKvLookupOutputId gets a reference to the given string and assigns it to the KvLookupOutputId field.
func (o *KvLookupSettingsConfig) SetKvLookupOutputId(v string) {
	o.KvLookupOutputId = &v
}

func (o KvLookupSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KvLookupSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DestinationKey) {
		toSerialize["destination_key"] = o.DestinationKey
	}
	if !IsNil(o.ErrorOnMissingKey) {
		toSerialize["error_on_missing_key"] = o.ErrorOnMissingKey
	}
	if !IsNil(o.JoinKey) {
		toSerialize["join_key"] = o.JoinKey
	}
	if !IsNil(o.KvLookupOutputId) {
		toSerialize["kv_lookup_output_id"] = o.KvLookupOutputId
	}
	return toSerialize, nil
}

type NullableKvLookupSettingsConfig struct {
	value *KvLookupSettingsConfig
	isSet bool
}

func (v NullableKvLookupSettingsConfig) Get() *KvLookupSettingsConfig {
	return v.value
}

func (v *NullableKvLookupSettingsConfig) Set(val *KvLookupSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableKvLookupSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableKvLookupSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKvLookupSettingsConfig(val *KvLookupSettingsConfig) *NullableKvLookupSettingsConfig {
	return &NullableKvLookupSettingsConfig{value: val, isSet: true}
}

func (v NullableKvLookupSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKvLookupSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


