/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelsPipelineNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsPipelineNode{}

// ModelsPipelineNode struct for ModelsPipelineNode
type ModelsPipelineNode struct {
	Component *ModelsNodeComponent `json:"component,omitempty"`
	ComponentId string `json:"component_id"`
	ComponentSubType *string `json:"component_sub_type,omitempty"`
	ComponentType string `json:"component_type"`
	CreatedAt *string `json:"created_at,omitempty"`
	Enabled bool `json:"enabled"`
	Id *string `json:"id,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty"`
	PipelineId *string `json:"pipeline_id,omitempty"`
	Slug *string `json:"slug,omitempty"`
}

type _ModelsPipelineNode ModelsPipelineNode

// NewModelsPipelineNode instantiates a new ModelsPipelineNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsPipelineNode(componentId string, componentType string, enabled bool) *ModelsPipelineNode {
	this := ModelsPipelineNode{}
	this.ComponentId = componentId
	this.ComponentType = componentType
	this.Enabled = enabled
	return &this
}

// NewModelsPipelineNodeWithDefaults instantiates a new ModelsPipelineNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsPipelineNodeWithDefaults() *ModelsPipelineNode {
	this := ModelsPipelineNode{}
	return &this
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *ModelsPipelineNode) GetComponent() ModelsNodeComponent {
	if o == nil || IsNil(o.Component) {
		var ret ModelsNodeComponent
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetComponentOk() (*ModelsNodeComponent, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *ModelsPipelineNode) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given ModelsNodeComponent and assigns it to the Component field.
func (o *ModelsPipelineNode) SetComponent(v ModelsNodeComponent) {
	o.Component = &v
}

// GetComponentId returns the ComponentId field value
func (o *ModelsPipelineNode) GetComponentId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentId
}

// GetComponentIdOk returns a tuple with the ComponentId field value
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetComponentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentId, true
}

// SetComponentId sets field value
func (o *ModelsPipelineNode) SetComponentId(v string) {
	o.ComponentId = v
}

// GetComponentSubType returns the ComponentSubType field value if set, zero value otherwise.
func (o *ModelsPipelineNode) GetComponentSubType() string {
	if o == nil || IsNil(o.ComponentSubType) {
		var ret string
		return ret
	}
	return *o.ComponentSubType
}

// GetComponentSubTypeOk returns a tuple with the ComponentSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetComponentSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ComponentSubType) {
		return nil, false
	}
	return o.ComponentSubType, true
}

// HasComponentSubType returns a boolean if a field has been set.
func (o *ModelsPipelineNode) HasComponentSubType() bool {
	if o != nil && !IsNil(o.ComponentSubType) {
		return true
	}

	return false
}

// SetComponentSubType gets a reference to the given string and assigns it to the ComponentSubType field.
func (o *ModelsPipelineNode) SetComponentSubType(v string) {
	o.ComponentSubType = &v
}

// GetComponentType returns the ComponentType field value
func (o *ModelsPipelineNode) GetComponentType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ComponentType
}

// GetComponentTypeOk returns a tuple with the ComponentType field value
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetComponentTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ComponentType, true
}

// SetComponentType sets field value
func (o *ModelsPipelineNode) SetComponentType(v string) {
	o.ComponentType = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *ModelsPipelineNode) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *ModelsPipelineNode) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *ModelsPipelineNode) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetEnabled returns the Enabled field value
func (o *ModelsPipelineNode) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ModelsPipelineNode) SetEnabled(v bool) {
	o.Enabled = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ModelsPipelineNode) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ModelsPipelineNode) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ModelsPipelineNode) SetId(v string) {
	o.Id = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ModelsPipelineNode) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ModelsPipelineNode) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *ModelsPipelineNode) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetPipelineId returns the PipelineId field value if set, zero value otherwise.
func (o *ModelsPipelineNode) GetPipelineId() string {
	if o == nil || IsNil(o.PipelineId) {
		var ret string
		return ret
	}
	return *o.PipelineId
}

// GetPipelineIdOk returns a tuple with the PipelineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetPipelineIdOk() (*string, bool) {
	if o == nil || IsNil(o.PipelineId) {
		return nil, false
	}
	return o.PipelineId, true
}

// HasPipelineId returns a boolean if a field has been set.
func (o *ModelsPipelineNode) HasPipelineId() bool {
	if o != nil && !IsNil(o.PipelineId) {
		return true
	}

	return false
}

// SetPipelineId gets a reference to the given string and assigns it to the PipelineId field.
func (o *ModelsPipelineNode) SetPipelineId(v string) {
	o.PipelineId = &v
}

// GetSlug returns the Slug field value if set, zero value otherwise.
func (o *ModelsPipelineNode) GetSlug() string {
	if o == nil || IsNil(o.Slug) {
		var ret string
		return ret
	}
	return *o.Slug
}

// GetSlugOk returns a tuple with the Slug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNode) GetSlugOk() (*string, bool) {
	if o == nil || IsNil(o.Slug) {
		return nil, false
	}
	return o.Slug, true
}

// HasSlug returns a boolean if a field has been set.
func (o *ModelsPipelineNode) HasSlug() bool {
	if o != nil && !IsNil(o.Slug) {
		return true
	}

	return false
}

// SetSlug gets a reference to the given string and assigns it to the Slug field.
func (o *ModelsPipelineNode) SetSlug(v string) {
	o.Slug = &v
}

func (o ModelsPipelineNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsPipelineNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	toSerialize["component_id"] = o.ComponentId
	if !IsNil(o.ComponentSubType) {
		toSerialize["component_sub_type"] = o.ComponentSubType
	}
	toSerialize["component_type"] = o.ComponentType
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	toSerialize["enabled"] = o.Enabled
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.PipelineId) {
		toSerialize["pipeline_id"] = o.PipelineId
	}
	if !IsNil(o.Slug) {
		toSerialize["slug"] = o.Slug
	}
	return toSerialize, nil
}

func (o *ModelsPipelineNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"component_id",
		"component_type",
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelsPipelineNode := _ModelsPipelineNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelsPipelineNode)

	if err != nil {
		return err
	}

	*o = ModelsPipelineNode(varModelsPipelineNode)

	return err
}

type NullableModelsPipelineNode struct {
	value *ModelsPipelineNode
	isSet bool
}

func (v NullableModelsPipelineNode) Get() *ModelsPipelineNode {
	return v.value
}

func (v *NullableModelsPipelineNode) Set(val *ModelsPipelineNode) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsPipelineNode) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsPipelineNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsPipelineNode(val *ModelsPipelineNode) *NullableModelsPipelineNode {
	return &NullableModelsPipelineNode{value: val, isSet: true}
}

func (v NullableModelsPipelineNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsPipelineNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


