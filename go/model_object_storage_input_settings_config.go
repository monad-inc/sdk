/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ObjectStorageInputSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStorageInputSettingsConfig{}

// ObjectStorageInputSettingsConfig Object storage settings
type ObjectStorageInputSettingsConfig struct {
	// Name of the storage bucket
	Bucket *string `json:"bucket,omitempty"`
	// Compression format of the objects
	Compression *string `json:"compression,omitempty"`
	// Endpoint URL for the object storage service (e.g., https://minio.example.com, https://s3.amazonaws.com)
	Endpoint *string `json:"endpoint,omitempty"`
	// File format of the objects
	Format *string `json:"format,omitempty"`
	// Specifies the partition format of your bucket. Select the option that matches how your data is currently organized. This ensures that the system can correctly navigate your bucket structure. Options include Hive-compatible format ('year=2024/month=01/day=01') commonly used in data lake setups, and simple date format ('2024/01/01') for basic chronological organization.
	PartitionFormat *string `json:"partition_format,omitempty"`
	// Prefix that leads to the start of the expected partition. For example: \"/foobar/year=2024/month=01/day=01/\". The prefix is `foobar`.
	Prefix *string `json:"prefix,omitempty"`
	// Location of the record in the JSON object. This can be ignored if the record is not in JSON format. If the records are not nested in the JSON, you can use '@this' to indicate that the file contains the record at the root or an array of records.
	RecordLocation *string `json:"record_location,omitempty"`
	// Optional region for the object storage service. This is often required for services like AWS S3.
	Region *string `json:"region,omitempty"`
	// Skip SSL verification for self-signed certificates
	SkipSslVerification *bool `json:"skip_ssl_verification,omitempty"`
	// Whether to use path-style URLs (bucket.endpoint.com/object vs endpoint.com/bucket/object). Most S3-compatible services require this to be true.
	UsePathStyle *bool `json:"use_path_style,omitempty"`
}

// NewObjectStorageInputSettingsConfig instantiates a new ObjectStorageInputSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageInputSettingsConfig() *ObjectStorageInputSettingsConfig {
	this := ObjectStorageInputSettingsConfig{}
	return &this
}

// NewObjectStorageInputSettingsConfigWithDefaults instantiates a new ObjectStorageInputSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageInputSettingsConfigWithDefaults() *ObjectStorageInputSettingsConfig {
	this := ObjectStorageInputSettingsConfig{}
	return &this
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *ObjectStorageInputSettingsConfig) SetBucket(v string) {
	o.Bucket = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *ObjectStorageInputSettingsConfig) SetCompression(v string) {
	o.Compression = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *ObjectStorageInputSettingsConfig) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *ObjectStorageInputSettingsConfig) SetFormat(v string) {
	o.Format = &v
}

// GetPartitionFormat returns the PartitionFormat field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetPartitionFormat() string {
	if o == nil || IsNil(o.PartitionFormat) {
		var ret string
		return ret
	}
	return *o.PartitionFormat
}

// GetPartitionFormatOk returns a tuple with the PartitionFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetPartitionFormatOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionFormat) {
		return nil, false
	}
	return o.PartitionFormat, true
}

// HasPartitionFormat returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasPartitionFormat() bool {
	if o != nil && !IsNil(o.PartitionFormat) {
		return true
	}

	return false
}

// SetPartitionFormat gets a reference to the given string and assigns it to the PartitionFormat field.
func (o *ObjectStorageInputSettingsConfig) SetPartitionFormat(v string) {
	o.PartitionFormat = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ObjectStorageInputSettingsConfig) SetPrefix(v string) {
	o.Prefix = &v
}

// GetRecordLocation returns the RecordLocation field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetRecordLocation() string {
	if o == nil || IsNil(o.RecordLocation) {
		var ret string
		return ret
	}
	return *o.RecordLocation
}

// GetRecordLocationOk returns a tuple with the RecordLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetRecordLocationOk() (*string, bool) {
	if o == nil || IsNil(o.RecordLocation) {
		return nil, false
	}
	return o.RecordLocation, true
}

// HasRecordLocation returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasRecordLocation() bool {
	if o != nil && !IsNil(o.RecordLocation) {
		return true
	}

	return false
}

// SetRecordLocation gets a reference to the given string and assigns it to the RecordLocation field.
func (o *ObjectStorageInputSettingsConfig) SetRecordLocation(v string) {
	o.RecordLocation = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ObjectStorageInputSettingsConfig) SetRegion(v string) {
	o.Region = &v
}

// GetSkipSslVerification returns the SkipSslVerification field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetSkipSslVerification() bool {
	if o == nil || IsNil(o.SkipSslVerification) {
		var ret bool
		return ret
	}
	return *o.SkipSslVerification
}

// GetSkipSslVerificationOk returns a tuple with the SkipSslVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetSkipSslVerificationOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSslVerification) {
		return nil, false
	}
	return o.SkipSslVerification, true
}

// HasSkipSslVerification returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasSkipSslVerification() bool {
	if o != nil && !IsNil(o.SkipSslVerification) {
		return true
	}

	return false
}

// SetSkipSslVerification gets a reference to the given bool and assigns it to the SkipSslVerification field.
func (o *ObjectStorageInputSettingsConfig) SetSkipSslVerification(v bool) {
	o.SkipSslVerification = &v
}

// GetUsePathStyle returns the UsePathStyle field value if set, zero value otherwise.
func (o *ObjectStorageInputSettingsConfig) GetUsePathStyle() bool {
	if o == nil || IsNil(o.UsePathStyle) {
		var ret bool
		return ret
	}
	return *o.UsePathStyle
}

// GetUsePathStyleOk returns a tuple with the UsePathStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageInputSettingsConfig) GetUsePathStyleOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePathStyle) {
		return nil, false
	}
	return o.UsePathStyle, true
}

// HasUsePathStyle returns a boolean if a field has been set.
func (o *ObjectStorageInputSettingsConfig) HasUsePathStyle() bool {
	if o != nil && !IsNil(o.UsePathStyle) {
		return true
	}

	return false
}

// SetUsePathStyle gets a reference to the given bool and assigns it to the UsePathStyle field.
func (o *ObjectStorageInputSettingsConfig) SetUsePathStyle(v bool) {
	o.UsePathStyle = &v
}

func (o ObjectStorageInputSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStorageInputSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.PartitionFormat) {
		toSerialize["partition_format"] = o.PartitionFormat
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.RecordLocation) {
		toSerialize["record_location"] = o.RecordLocation
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.SkipSslVerification) {
		toSerialize["skip_ssl_verification"] = o.SkipSslVerification
	}
	if !IsNil(o.UsePathStyle) {
		toSerialize["use_path_style"] = o.UsePathStyle
	}
	return toSerialize, nil
}

type NullableObjectStorageInputSettingsConfig struct {
	value *ObjectStorageInputSettingsConfig
	isSet bool
}

func (v NullableObjectStorageInputSettingsConfig) Get() *ObjectStorageInputSettingsConfig {
	return v.value
}

func (v *NullableObjectStorageInputSettingsConfig) Set(val *ObjectStorageInputSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageInputSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageInputSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageInputSettingsConfig(val *ObjectStorageInputSettingsConfig) *NullableObjectStorageInputSettingsConfig {
	return &NullableObjectStorageInputSettingsConfig{value: val, isSet: true}
}

func (v NullableObjectStorageInputSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageInputSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


