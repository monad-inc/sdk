/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the EventsLogsSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsLogsSettingsConfig{}

// EventsLogsSettingsConfig Tines Events Logs settings
type EventsLogsSettingsConfig struct {
	// Filter by the given story.
	StoryId *string `json:"story_id,omitempty"`
	// Filter by the given team.
	TeamId *string `json:"team_id,omitempty"`
	// Unique URL for your Tines instance
	TenantUrl *string `json:"tenant_url,omitempty"`
	// Generate synthetic demo data instead of connecting to the real data source.
	UseSyntheticData *bool `json:"use_synthetic_data,omitempty"`
}

// NewEventsLogsSettingsConfig instantiates a new EventsLogsSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsLogsSettingsConfig() *EventsLogsSettingsConfig {
	this := EventsLogsSettingsConfig{}
	return &this
}

// NewEventsLogsSettingsConfigWithDefaults instantiates a new EventsLogsSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsLogsSettingsConfigWithDefaults() *EventsLogsSettingsConfig {
	this := EventsLogsSettingsConfig{}
	return &this
}

// GetStoryId returns the StoryId field value if set, zero value otherwise.
func (o *EventsLogsSettingsConfig) GetStoryId() string {
	if o == nil || IsNil(o.StoryId) {
		var ret string
		return ret
	}
	return *o.StoryId
}

// GetStoryIdOk returns a tuple with the StoryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsLogsSettingsConfig) GetStoryIdOk() (*string, bool) {
	if o == nil || IsNil(o.StoryId) {
		return nil, false
	}
	return o.StoryId, true
}

// HasStoryId returns a boolean if a field has been set.
func (o *EventsLogsSettingsConfig) HasStoryId() bool {
	if o != nil && !IsNil(o.StoryId) {
		return true
	}

	return false
}

// SetStoryId gets a reference to the given string and assigns it to the StoryId field.
func (o *EventsLogsSettingsConfig) SetStoryId(v string) {
	o.StoryId = &v
}

// GetTeamId returns the TeamId field value if set, zero value otherwise.
func (o *EventsLogsSettingsConfig) GetTeamId() string {
	if o == nil || IsNil(o.TeamId) {
		var ret string
		return ret
	}
	return *o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsLogsSettingsConfig) GetTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.TeamId) {
		return nil, false
	}
	return o.TeamId, true
}

// HasTeamId returns a boolean if a field has been set.
func (o *EventsLogsSettingsConfig) HasTeamId() bool {
	if o != nil && !IsNil(o.TeamId) {
		return true
	}

	return false
}

// SetTeamId gets a reference to the given string and assigns it to the TeamId field.
func (o *EventsLogsSettingsConfig) SetTeamId(v string) {
	o.TeamId = &v
}

// GetTenantUrl returns the TenantUrl field value if set, zero value otherwise.
func (o *EventsLogsSettingsConfig) GetTenantUrl() string {
	if o == nil || IsNil(o.TenantUrl) {
		var ret string
		return ret
	}
	return *o.TenantUrl
}

// GetTenantUrlOk returns a tuple with the TenantUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsLogsSettingsConfig) GetTenantUrlOk() (*string, bool) {
	if o == nil || IsNil(o.TenantUrl) {
		return nil, false
	}
	return o.TenantUrl, true
}

// HasTenantUrl returns a boolean if a field has been set.
func (o *EventsLogsSettingsConfig) HasTenantUrl() bool {
	if o != nil && !IsNil(o.TenantUrl) {
		return true
	}

	return false
}

// SetTenantUrl gets a reference to the given string and assigns it to the TenantUrl field.
func (o *EventsLogsSettingsConfig) SetTenantUrl(v string) {
	o.TenantUrl = &v
}

// GetUseSyntheticData returns the UseSyntheticData field value if set, zero value otherwise.
func (o *EventsLogsSettingsConfig) GetUseSyntheticData() bool {
	if o == nil || IsNil(o.UseSyntheticData) {
		var ret bool
		return ret
	}
	return *o.UseSyntheticData
}

// GetUseSyntheticDataOk returns a tuple with the UseSyntheticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsLogsSettingsConfig) GetUseSyntheticDataOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyntheticData) {
		return nil, false
	}
	return o.UseSyntheticData, true
}

// HasUseSyntheticData returns a boolean if a field has been set.
func (o *EventsLogsSettingsConfig) HasUseSyntheticData() bool {
	if o != nil && !IsNil(o.UseSyntheticData) {
		return true
	}

	return false
}

// SetUseSyntheticData gets a reference to the given bool and assigns it to the UseSyntheticData field.
func (o *EventsLogsSettingsConfig) SetUseSyntheticData(v bool) {
	o.UseSyntheticData = &v
}

func (o EventsLogsSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsLogsSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StoryId) {
		toSerialize["story_id"] = o.StoryId
	}
	if !IsNil(o.TeamId) {
		toSerialize["team_id"] = o.TeamId
	}
	if !IsNil(o.TenantUrl) {
		toSerialize["tenant_url"] = o.TenantUrl
	}
	if !IsNil(o.UseSyntheticData) {
		toSerialize["use_synthetic_data"] = o.UseSyntheticData
	}
	return toSerialize, nil
}

type NullableEventsLogsSettingsConfig struct {
	value *EventsLogsSettingsConfig
	isSet bool
}

func (v NullableEventsLogsSettingsConfig) Get() *EventsLogsSettingsConfig {
	return v.value
}

func (v *NullableEventsLogsSettingsConfig) Set(val *EventsLogsSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsLogsSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsLogsSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsLogsSettingsConfig(val *EventsLogsSettingsConfig) *NullableEventsLogsSettingsConfig {
	return &NullableEventsLogsSettingsConfig{value: val, isSet: true}
}

func (v NullableEventsLogsSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsLogsSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


