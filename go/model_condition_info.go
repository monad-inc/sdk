/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ConditionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConditionInfo{}

// ConditionInfo struct for ConditionInfo
type ConditionInfo struct {
	ConfigMeta interface{} `json:"configMeta,omitempty"`
	Description *string `json:"description,omitempty"`
	Name *string `json:"name,omitempty"`
	TypeID *string `json:"typeID,omitempty"`
}

// NewConditionInfo instantiates a new ConditionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConditionInfo() *ConditionInfo {
	this := ConditionInfo{}
	return &this
}

// NewConditionInfoWithDefaults instantiates a new ConditionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConditionInfoWithDefaults() *ConditionInfo {
	this := ConditionInfo{}
	return &this
}

// GetConfigMeta returns the ConfigMeta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConditionInfo) GetConfigMeta() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ConfigMeta
}

// GetConfigMetaOk returns a tuple with the ConfigMeta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConditionInfo) GetConfigMetaOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ConfigMeta) {
		return nil, false
	}
	return &o.ConfigMeta, true
}

// HasConfigMeta returns a boolean if a field has been set.
func (o *ConditionInfo) HasConfigMeta() bool {
	if o != nil && !IsNil(o.ConfigMeta) {
		return true
	}

	return false
}

// SetConfigMeta gets a reference to the given interface{} and assigns it to the ConfigMeta field.
func (o *ConditionInfo) SetConfigMeta(v interface{}) {
	o.ConfigMeta = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConditionInfo) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConditionInfo) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConditionInfo) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConditionInfo) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionInfo) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConditionInfo) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConditionInfo) SetName(v string) {
	o.Name = &v
}

// GetTypeID returns the TypeID field value if set, zero value otherwise.
func (o *ConditionInfo) GetTypeID() string {
	if o == nil || IsNil(o.TypeID) {
		var ret string
		return ret
	}
	return *o.TypeID
}

// GetTypeIDOk returns a tuple with the TypeID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConditionInfo) GetTypeIDOk() (*string, bool) {
	if o == nil || IsNil(o.TypeID) {
		return nil, false
	}
	return o.TypeID, true
}

// HasTypeID returns a boolean if a field has been set.
func (o *ConditionInfo) HasTypeID() bool {
	if o != nil && !IsNil(o.TypeID) {
		return true
	}

	return false
}

// SetTypeID gets a reference to the given string and assigns it to the TypeID field.
func (o *ConditionInfo) SetTypeID(v string) {
	o.TypeID = &v
}

func (o ConditionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConditionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigMeta != nil {
		toSerialize["configMeta"] = o.ConfigMeta
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TypeID) {
		toSerialize["typeID"] = o.TypeID
	}
	return toSerialize, nil
}

type NullableConditionInfo struct {
	value *ConditionInfo
	isSet bool
}

func (v NullableConditionInfo) Get() *ConditionInfo {
	return v.value
}

func (v *NullableConditionInfo) Set(val *ConditionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConditionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConditionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConditionInfo(val *ConditionInfo) *NullableConditionInfo {
	return &NullableConditionInfo{value: val, isSet: true}
}

func (v NullableConditionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConditionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


