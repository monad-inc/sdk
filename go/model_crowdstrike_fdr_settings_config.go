/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the CrowdstrikeFdrSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CrowdstrikeFdrSettingsConfig{}

// CrowdstrikeFdrSettingsConfig Crowdstrike Falcon Data Replicator settings
type CrowdstrikeFdrSettingsConfig struct {
	// AWS SQS queue URL provided to you by the CrowdStrike Falcon console
	AwsQueueUrl *string `json:"aws_queue_url,omitempty"`
	// Name of the region where the queue resides
	AwsRegionName *string `json:"aws_region_name,omitempty"`
	// The URL of the S3 bucket
	AwsS3Url *string `json:"aws_s3_url,omitempty"`
	// The time in seconds to wait before each check of the queue for more messages
	Cron *string `json:"cron,omitempty"`
	// Time in seconds before a message is returned back to the SQS queue
	VisibilityTimeout *int32 `json:"visibility_timeout,omitempty"`
}

// NewCrowdstrikeFdrSettingsConfig instantiates a new CrowdstrikeFdrSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCrowdstrikeFdrSettingsConfig() *CrowdstrikeFdrSettingsConfig {
	this := CrowdstrikeFdrSettingsConfig{}
	return &this
}

// NewCrowdstrikeFdrSettingsConfigWithDefaults instantiates a new CrowdstrikeFdrSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCrowdstrikeFdrSettingsConfigWithDefaults() *CrowdstrikeFdrSettingsConfig {
	this := CrowdstrikeFdrSettingsConfig{}
	return &this
}

// GetAwsQueueUrl returns the AwsQueueUrl field value if set, zero value otherwise.
func (o *CrowdstrikeFdrSettingsConfig) GetAwsQueueUrl() string {
	if o == nil || IsNil(o.AwsQueueUrl) {
		var ret string
		return ret
	}
	return *o.AwsQueueUrl
}

// GetAwsQueueUrlOk returns a tuple with the AwsQueueUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdstrikeFdrSettingsConfig) GetAwsQueueUrlOk() (*string, bool) {
	if o == nil || IsNil(o.AwsQueueUrl) {
		return nil, false
	}
	return o.AwsQueueUrl, true
}

// HasAwsQueueUrl returns a boolean if a field has been set.
func (o *CrowdstrikeFdrSettingsConfig) HasAwsQueueUrl() bool {
	if o != nil && !IsNil(o.AwsQueueUrl) {
		return true
	}

	return false
}

// SetAwsQueueUrl gets a reference to the given string and assigns it to the AwsQueueUrl field.
func (o *CrowdstrikeFdrSettingsConfig) SetAwsQueueUrl(v string) {
	o.AwsQueueUrl = &v
}

// GetAwsRegionName returns the AwsRegionName field value if set, zero value otherwise.
func (o *CrowdstrikeFdrSettingsConfig) GetAwsRegionName() string {
	if o == nil || IsNil(o.AwsRegionName) {
		var ret string
		return ret
	}
	return *o.AwsRegionName
}

// GetAwsRegionNameOk returns a tuple with the AwsRegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdstrikeFdrSettingsConfig) GetAwsRegionNameOk() (*string, bool) {
	if o == nil || IsNil(o.AwsRegionName) {
		return nil, false
	}
	return o.AwsRegionName, true
}

// HasAwsRegionName returns a boolean if a field has been set.
func (o *CrowdstrikeFdrSettingsConfig) HasAwsRegionName() bool {
	if o != nil && !IsNil(o.AwsRegionName) {
		return true
	}

	return false
}

// SetAwsRegionName gets a reference to the given string and assigns it to the AwsRegionName field.
func (o *CrowdstrikeFdrSettingsConfig) SetAwsRegionName(v string) {
	o.AwsRegionName = &v
}

// GetAwsS3Url returns the AwsS3Url field value if set, zero value otherwise.
func (o *CrowdstrikeFdrSettingsConfig) GetAwsS3Url() string {
	if o == nil || IsNil(o.AwsS3Url) {
		var ret string
		return ret
	}
	return *o.AwsS3Url
}

// GetAwsS3UrlOk returns a tuple with the AwsS3Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdstrikeFdrSettingsConfig) GetAwsS3UrlOk() (*string, bool) {
	if o == nil || IsNil(o.AwsS3Url) {
		return nil, false
	}
	return o.AwsS3Url, true
}

// HasAwsS3Url returns a boolean if a field has been set.
func (o *CrowdstrikeFdrSettingsConfig) HasAwsS3Url() bool {
	if o != nil && !IsNil(o.AwsS3Url) {
		return true
	}

	return false
}

// SetAwsS3Url gets a reference to the given string and assigns it to the AwsS3Url field.
func (o *CrowdstrikeFdrSettingsConfig) SetAwsS3Url(v string) {
	o.AwsS3Url = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *CrowdstrikeFdrSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdstrikeFdrSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *CrowdstrikeFdrSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *CrowdstrikeFdrSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetVisibilityTimeout returns the VisibilityTimeout field value if set, zero value otherwise.
func (o *CrowdstrikeFdrSettingsConfig) GetVisibilityTimeout() int32 {
	if o == nil || IsNil(o.VisibilityTimeout) {
		var ret int32
		return ret
	}
	return *o.VisibilityTimeout
}

// GetVisibilityTimeoutOk returns a tuple with the VisibilityTimeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CrowdstrikeFdrSettingsConfig) GetVisibilityTimeoutOk() (*int32, bool) {
	if o == nil || IsNil(o.VisibilityTimeout) {
		return nil, false
	}
	return o.VisibilityTimeout, true
}

// HasVisibilityTimeout returns a boolean if a field has been set.
func (o *CrowdstrikeFdrSettingsConfig) HasVisibilityTimeout() bool {
	if o != nil && !IsNil(o.VisibilityTimeout) {
		return true
	}

	return false
}

// SetVisibilityTimeout gets a reference to the given int32 and assigns it to the VisibilityTimeout field.
func (o *CrowdstrikeFdrSettingsConfig) SetVisibilityTimeout(v int32) {
	o.VisibilityTimeout = &v
}

func (o CrowdstrikeFdrSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CrowdstrikeFdrSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsQueueUrl) {
		toSerialize["aws_queue_url"] = o.AwsQueueUrl
	}
	if !IsNil(o.AwsRegionName) {
		toSerialize["aws_region_name"] = o.AwsRegionName
	}
	if !IsNil(o.AwsS3Url) {
		toSerialize["aws_s3_url"] = o.AwsS3Url
	}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.VisibilityTimeout) {
		toSerialize["visibility_timeout"] = o.VisibilityTimeout
	}
	return toSerialize, nil
}

type NullableCrowdstrikeFdrSettingsConfig struct {
	value *CrowdstrikeFdrSettingsConfig
	isSet bool
}

func (v NullableCrowdstrikeFdrSettingsConfig) Get() *CrowdstrikeFdrSettingsConfig {
	return v.value
}

func (v *NullableCrowdstrikeFdrSettingsConfig) Set(val *CrowdstrikeFdrSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCrowdstrikeFdrSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCrowdstrikeFdrSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCrowdstrikeFdrSettingsConfig(val *CrowdstrikeFdrSettingsConfig) *NullableCrowdstrikeFdrSettingsConfig {
	return &NullableCrowdstrikeFdrSettingsConfig{value: val, isSet: true}
}

func (v NullableCrowdstrikeFdrSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCrowdstrikeFdrSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


