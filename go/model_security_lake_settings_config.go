/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the SecurityLakeSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityLakeSettingsConfig{}

// SecurityLakeSettingsConfig Security Lake Output Settings
type SecurityLakeSettingsConfig struct {
	BatchConfig *BatchConfigBatchConfig `json:"batch_config,omitempty"`
	// Bucket Name
	BucketName *string `json:"bucketName,omitempty"`
	// The name of the S3 bucket where data will be stored
	BucketUrl *string `json:"bucket_url,omitempty"`
	// S3 Key
	Key *string `json:"key,omitempty"`
	ParquetFormat *ParquetParquetFormatter `json:"parquet_format,omitempty"`
	// The Amazon Resource Name (ARN) of the IAM role to assume which grants access to the S3 bucket
	RoleArn *string `json:"role_arn,omitempty"`
	SourceAccountDetails *SecurityLakeSourceAccountDetails `json:"source_account_details,omitempty"`
}

// NewSecurityLakeSettingsConfig instantiates a new SecurityLakeSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityLakeSettingsConfig() *SecurityLakeSettingsConfig {
	this := SecurityLakeSettingsConfig{}
	return &this
}

// NewSecurityLakeSettingsConfigWithDefaults instantiates a new SecurityLakeSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityLakeSettingsConfigWithDefaults() *SecurityLakeSettingsConfig {
	this := SecurityLakeSettingsConfig{}
	return &this
}

// GetBatchConfig returns the BatchConfig field value if set, zero value otherwise.
func (o *SecurityLakeSettingsConfig) GetBatchConfig() BatchConfigBatchConfig {
	if o == nil || IsNil(o.BatchConfig) {
		var ret BatchConfigBatchConfig
		return ret
	}
	return *o.BatchConfig
}

// GetBatchConfigOk returns a tuple with the BatchConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityLakeSettingsConfig) GetBatchConfigOk() (*BatchConfigBatchConfig, bool) {
	if o == nil || IsNil(o.BatchConfig) {
		return nil, false
	}
	return o.BatchConfig, true
}

// HasBatchConfig returns a boolean if a field has been set.
func (o *SecurityLakeSettingsConfig) HasBatchConfig() bool {
	if o != nil && !IsNil(o.BatchConfig) {
		return true
	}

	return false
}

// SetBatchConfig gets a reference to the given BatchConfigBatchConfig and assigns it to the BatchConfig field.
func (o *SecurityLakeSettingsConfig) SetBatchConfig(v BatchConfigBatchConfig) {
	o.BatchConfig = &v
}

// GetBucketName returns the BucketName field value if set, zero value otherwise.
func (o *SecurityLakeSettingsConfig) GetBucketName() string {
	if o == nil || IsNil(o.BucketName) {
		var ret string
		return ret
	}
	return *o.BucketName
}

// GetBucketNameOk returns a tuple with the BucketName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityLakeSettingsConfig) GetBucketNameOk() (*string, bool) {
	if o == nil || IsNil(o.BucketName) {
		return nil, false
	}
	return o.BucketName, true
}

// HasBucketName returns a boolean if a field has been set.
func (o *SecurityLakeSettingsConfig) HasBucketName() bool {
	if o != nil && !IsNil(o.BucketName) {
		return true
	}

	return false
}

// SetBucketName gets a reference to the given string and assigns it to the BucketName field.
func (o *SecurityLakeSettingsConfig) SetBucketName(v string) {
	o.BucketName = &v
}

// GetBucketUrl returns the BucketUrl field value if set, zero value otherwise.
func (o *SecurityLakeSettingsConfig) GetBucketUrl() string {
	if o == nil || IsNil(o.BucketUrl) {
		var ret string
		return ret
	}
	return *o.BucketUrl
}

// GetBucketUrlOk returns a tuple with the BucketUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityLakeSettingsConfig) GetBucketUrlOk() (*string, bool) {
	if o == nil || IsNil(o.BucketUrl) {
		return nil, false
	}
	return o.BucketUrl, true
}

// HasBucketUrl returns a boolean if a field has been set.
func (o *SecurityLakeSettingsConfig) HasBucketUrl() bool {
	if o != nil && !IsNil(o.BucketUrl) {
		return true
	}

	return false
}

// SetBucketUrl gets a reference to the given string and assigns it to the BucketUrl field.
func (o *SecurityLakeSettingsConfig) SetBucketUrl(v string) {
	o.BucketUrl = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *SecurityLakeSettingsConfig) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityLakeSettingsConfig) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *SecurityLakeSettingsConfig) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *SecurityLakeSettingsConfig) SetKey(v string) {
	o.Key = &v
}

// GetParquetFormat returns the ParquetFormat field value if set, zero value otherwise.
func (o *SecurityLakeSettingsConfig) GetParquetFormat() ParquetParquetFormatter {
	if o == nil || IsNil(o.ParquetFormat) {
		var ret ParquetParquetFormatter
		return ret
	}
	return *o.ParquetFormat
}

// GetParquetFormatOk returns a tuple with the ParquetFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityLakeSettingsConfig) GetParquetFormatOk() (*ParquetParquetFormatter, bool) {
	if o == nil || IsNil(o.ParquetFormat) {
		return nil, false
	}
	return o.ParquetFormat, true
}

// HasParquetFormat returns a boolean if a field has been set.
func (o *SecurityLakeSettingsConfig) HasParquetFormat() bool {
	if o != nil && !IsNil(o.ParquetFormat) {
		return true
	}

	return false
}

// SetParquetFormat gets a reference to the given ParquetParquetFormatter and assigns it to the ParquetFormat field.
func (o *SecurityLakeSettingsConfig) SetParquetFormat(v ParquetParquetFormatter) {
	o.ParquetFormat = &v
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *SecurityLakeSettingsConfig) GetRoleArn() string {
	if o == nil || IsNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityLakeSettingsConfig) GetRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *SecurityLakeSettingsConfig) HasRoleArn() bool {
	if o != nil && !IsNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *SecurityLakeSettingsConfig) SetRoleArn(v string) {
	o.RoleArn = &v
}

// GetSourceAccountDetails returns the SourceAccountDetails field value if set, zero value otherwise.
func (o *SecurityLakeSettingsConfig) GetSourceAccountDetails() SecurityLakeSourceAccountDetails {
	if o == nil || IsNil(o.SourceAccountDetails) {
		var ret SecurityLakeSourceAccountDetails
		return ret
	}
	return *o.SourceAccountDetails
}

// GetSourceAccountDetailsOk returns a tuple with the SourceAccountDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityLakeSettingsConfig) GetSourceAccountDetailsOk() (*SecurityLakeSourceAccountDetails, bool) {
	if o == nil || IsNil(o.SourceAccountDetails) {
		return nil, false
	}
	return o.SourceAccountDetails, true
}

// HasSourceAccountDetails returns a boolean if a field has been set.
func (o *SecurityLakeSettingsConfig) HasSourceAccountDetails() bool {
	if o != nil && !IsNil(o.SourceAccountDetails) {
		return true
	}

	return false
}

// SetSourceAccountDetails gets a reference to the given SecurityLakeSourceAccountDetails and assigns it to the SourceAccountDetails field.
func (o *SecurityLakeSettingsConfig) SetSourceAccountDetails(v SecurityLakeSourceAccountDetails) {
	o.SourceAccountDetails = &v
}

func (o SecurityLakeSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityLakeSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchConfig) {
		toSerialize["batch_config"] = o.BatchConfig
	}
	if !IsNil(o.BucketName) {
		toSerialize["bucketName"] = o.BucketName
	}
	if !IsNil(o.BucketUrl) {
		toSerialize["bucket_url"] = o.BucketUrl
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.ParquetFormat) {
		toSerialize["parquet_format"] = o.ParquetFormat
	}
	if !IsNil(o.RoleArn) {
		toSerialize["role_arn"] = o.RoleArn
	}
	if !IsNil(o.SourceAccountDetails) {
		toSerialize["source_account_details"] = o.SourceAccountDetails
	}
	return toSerialize, nil
}

type NullableSecurityLakeSettingsConfig struct {
	value *SecurityLakeSettingsConfig
	isSet bool
}

func (v NullableSecurityLakeSettingsConfig) Get() *SecurityLakeSettingsConfig {
	return v.value
}

func (v *NullableSecurityLakeSettingsConfig) Set(val *SecurityLakeSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityLakeSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityLakeSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityLakeSettingsConfig(val *SecurityLakeSettingsConfig) *NullableSecurityLakeSettingsConfig {
	return &NullableSecurityLakeSettingsConfig{value: val, isSet: true}
}

func (v NullableSecurityLakeSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityLakeSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


