/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the IamAccessAnalyzerCriterion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamAccessAnalyzerCriterion{}

// IamAccessAnalyzerCriterion struct for IamAccessAnalyzerCriterion
type IamAccessAnalyzerCriterion struct {
	Contains []string `json:"contains,omitempty"`
	Eq []string `json:"eq,omitempty"`
	Exists *bool `json:"exists,omitempty"`
	Neq []string `json:"neq,omitempty"`
}

// NewIamAccessAnalyzerCriterion instantiates a new IamAccessAnalyzerCriterion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamAccessAnalyzerCriterion() *IamAccessAnalyzerCriterion {
	this := IamAccessAnalyzerCriterion{}
	return &this
}

// NewIamAccessAnalyzerCriterionWithDefaults instantiates a new IamAccessAnalyzerCriterion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamAccessAnalyzerCriterionWithDefaults() *IamAccessAnalyzerCriterion {
	this := IamAccessAnalyzerCriterion{}
	return &this
}

// GetContains returns the Contains field value if set, zero value otherwise.
func (o *IamAccessAnalyzerCriterion) GetContains() []string {
	if o == nil || IsNil(o.Contains) {
		var ret []string
		return ret
	}
	return o.Contains
}

// GetContainsOk returns a tuple with the Contains field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerCriterion) GetContainsOk() ([]string, bool) {
	if o == nil || IsNil(o.Contains) {
		return nil, false
	}
	return o.Contains, true
}

// HasContains returns a boolean if a field has been set.
func (o *IamAccessAnalyzerCriterion) HasContains() bool {
	if o != nil && !IsNil(o.Contains) {
		return true
	}

	return false
}

// SetContains gets a reference to the given []string and assigns it to the Contains field.
func (o *IamAccessAnalyzerCriterion) SetContains(v []string) {
	o.Contains = v
}

// GetEq returns the Eq field value if set, zero value otherwise.
func (o *IamAccessAnalyzerCriterion) GetEq() []string {
	if o == nil || IsNil(o.Eq) {
		var ret []string
		return ret
	}
	return o.Eq
}

// GetEqOk returns a tuple with the Eq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerCriterion) GetEqOk() ([]string, bool) {
	if o == nil || IsNil(o.Eq) {
		return nil, false
	}
	return o.Eq, true
}

// HasEq returns a boolean if a field has been set.
func (o *IamAccessAnalyzerCriterion) HasEq() bool {
	if o != nil && !IsNil(o.Eq) {
		return true
	}

	return false
}

// SetEq gets a reference to the given []string and assigns it to the Eq field.
func (o *IamAccessAnalyzerCriterion) SetEq(v []string) {
	o.Eq = v
}

// GetExists returns the Exists field value if set, zero value otherwise.
func (o *IamAccessAnalyzerCriterion) GetExists() bool {
	if o == nil || IsNil(o.Exists) {
		var ret bool
		return ret
	}
	return *o.Exists
}

// GetExistsOk returns a tuple with the Exists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerCriterion) GetExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.Exists) {
		return nil, false
	}
	return o.Exists, true
}

// HasExists returns a boolean if a field has been set.
func (o *IamAccessAnalyzerCriterion) HasExists() bool {
	if o != nil && !IsNil(o.Exists) {
		return true
	}

	return false
}

// SetExists gets a reference to the given bool and assigns it to the Exists field.
func (o *IamAccessAnalyzerCriterion) SetExists(v bool) {
	o.Exists = &v
}

// GetNeq returns the Neq field value if set, zero value otherwise.
func (o *IamAccessAnalyzerCriterion) GetNeq() []string {
	if o == nil || IsNil(o.Neq) {
		var ret []string
		return ret
	}
	return o.Neq
}

// GetNeqOk returns a tuple with the Neq field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IamAccessAnalyzerCriterion) GetNeqOk() ([]string, bool) {
	if o == nil || IsNil(o.Neq) {
		return nil, false
	}
	return o.Neq, true
}

// HasNeq returns a boolean if a field has been set.
func (o *IamAccessAnalyzerCriterion) HasNeq() bool {
	if o != nil && !IsNil(o.Neq) {
		return true
	}

	return false
}

// SetNeq gets a reference to the given []string and assigns it to the Neq field.
func (o *IamAccessAnalyzerCriterion) SetNeq(v []string) {
	o.Neq = v
}

func (o IamAccessAnalyzerCriterion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamAccessAnalyzerCriterion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Contains) {
		toSerialize["contains"] = o.Contains
	}
	if !IsNil(o.Eq) {
		toSerialize["eq"] = o.Eq
	}
	if !IsNil(o.Exists) {
		toSerialize["exists"] = o.Exists
	}
	if !IsNil(o.Neq) {
		toSerialize["neq"] = o.Neq
	}
	return toSerialize, nil
}

type NullableIamAccessAnalyzerCriterion struct {
	value *IamAccessAnalyzerCriterion
	isSet bool
}

func (v NullableIamAccessAnalyzerCriterion) Get() *IamAccessAnalyzerCriterion {
	return v.value
}

func (v *NullableIamAccessAnalyzerCriterion) Set(val *IamAccessAnalyzerCriterion) {
	v.value = val
	v.isSet = true
}

func (v NullableIamAccessAnalyzerCriterion) IsSet() bool {
	return v.isSet
}

func (v *NullableIamAccessAnalyzerCriterion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamAccessAnalyzerCriterion(val *IamAccessAnalyzerCriterion) *NullableIamAccessAnalyzerCriterion {
	return &NullableIamAccessAnalyzerCriterion{value: val, isSet: true}
}

func (v NullableIamAccessAnalyzerCriterion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamAccessAnalyzerCriterion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


