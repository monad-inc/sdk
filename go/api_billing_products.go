/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BillingProductsAPIService BillingProductsAPI service
type BillingProductsAPIService service

type ApiV2BillingAccountsBillingAccountIdSubscriptionDeleteRequest struct {
	ctx context.Context
	ApiService *BillingProductsAPIService
	billingAccountId string
}

func (r ApiV2BillingAccountsBillingAccountIdSubscriptionDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdSubscriptionDeleteExecute(r)
}

/*
V2BillingAccountsBillingAccountIdSubscriptionDelete Cancel Billing Account Subscription

Cancel Billing Account Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @return ApiV2BillingAccountsBillingAccountIdSubscriptionDeleteRequest
*/
func (a *BillingProductsAPIService) V2BillingAccountsBillingAccountIdSubscriptionDelete(ctx context.Context, billingAccountId string) ApiV2BillingAccountsBillingAccountIdSubscriptionDeleteRequest {
	return ApiV2BillingAccountsBillingAccountIdSubscriptionDeleteRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
	}
}

// Execute executes the request
func (a *BillingProductsAPIService) V2BillingAccountsBillingAccountIdSubscriptionDeleteExecute(r ApiV2BillingAccountsBillingAccountIdSubscriptionDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingProductsAPIService.V2BillingAccountsBillingAccountIdSubscriptionDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/subscription"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdSubscriptionGetRequest struct {
	ctx context.Context
	ApiService *BillingProductsAPIService
	billingAccountId string
}

func (r ApiV2BillingAccountsBillingAccountIdSubscriptionGetRequest) Execute() (*ModelsBillingProduct, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdSubscriptionGetExecute(r)
}

/*
V2BillingAccountsBillingAccountIdSubscriptionGet Get Billing Account Subscription

Get Billing Account Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @return ApiV2BillingAccountsBillingAccountIdSubscriptionGetRequest
*/
func (a *BillingProductsAPIService) V2BillingAccountsBillingAccountIdSubscriptionGet(ctx context.Context, billingAccountId string) ApiV2BillingAccountsBillingAccountIdSubscriptionGetRequest {
	return ApiV2BillingAccountsBillingAccountIdSubscriptionGetRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
	}
}

// Execute executes the request
//  @return ModelsBillingProduct
func (a *BillingProductsAPIService) V2BillingAccountsBillingAccountIdSubscriptionGetExecute(r ApiV2BillingAccountsBillingAccountIdSubscriptionGetRequest) (*ModelsBillingProduct, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsBillingProduct
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingProductsAPIService.V2BillingAccountsBillingAccountIdSubscriptionGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/subscription"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdSubscriptionPostRequest struct {
	ctx context.Context
	ApiService *BillingProductsAPIService
	billingAccountId string
	routesV2CreateBillingAccountSubscriptionRequest *RoutesV2CreateBillingAccountSubscriptionRequest
}

// Request body for creating a billing subscription
func (r ApiV2BillingAccountsBillingAccountIdSubscriptionPostRequest) RoutesV2CreateBillingAccountSubscriptionRequest(routesV2CreateBillingAccountSubscriptionRequest RoutesV2CreateBillingAccountSubscriptionRequest) ApiV2BillingAccountsBillingAccountIdSubscriptionPostRequest {
	r.routesV2CreateBillingAccountSubscriptionRequest = &routesV2CreateBillingAccountSubscriptionRequest
	return r
}

func (r ApiV2BillingAccountsBillingAccountIdSubscriptionPostRequest) Execute() (*RoutesV2CreateBillingAccountSubscriptionResponse, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdSubscriptionPostExecute(r)
}

/*
V2BillingAccountsBillingAccountIdSubscriptionPost Create Billing Account Subscription

Create Billing Account Subscription

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @return ApiV2BillingAccountsBillingAccountIdSubscriptionPostRequest
*/
func (a *BillingProductsAPIService) V2BillingAccountsBillingAccountIdSubscriptionPost(ctx context.Context, billingAccountId string) ApiV2BillingAccountsBillingAccountIdSubscriptionPostRequest {
	return ApiV2BillingAccountsBillingAccountIdSubscriptionPostRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
	}
}

// Execute executes the request
//  @return RoutesV2CreateBillingAccountSubscriptionResponse
func (a *BillingProductsAPIService) V2BillingAccountsBillingAccountIdSubscriptionPostExecute(r ApiV2BillingAccountsBillingAccountIdSubscriptionPostRequest) (*RoutesV2CreateBillingAccountSubscriptionResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *RoutesV2CreateBillingAccountSubscriptionResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingProductsAPIService.V2BillingAccountsBillingAccountIdSubscriptionPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/subscription"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routesV2CreateBillingAccountSubscriptionRequest == nil {
		return localVarReturnValue, nil, reportError("routesV2CreateBillingAccountSubscriptionRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routesV2CreateBillingAccountSubscriptionRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingProductsGetRequest struct {
	ctx context.Context
	ApiService *BillingProductsAPIService
	showInactive *bool
	limit *int32
	offset *int32
}

// Show inactive products
func (r ApiV2BillingProductsGetRequest) ShowInactive(showInactive bool) ApiV2BillingProductsGetRequest {
	r.showInactive = &showInactive
	return r
}

// Limit
func (r ApiV2BillingProductsGetRequest) Limit(limit int32) ApiV2BillingProductsGetRequest {
	r.limit = &limit
	return r
}

// Offset
func (r ApiV2BillingProductsGetRequest) Offset(offset int32) ApiV2BillingProductsGetRequest {
	r.offset = &offset
	return r
}

func (r ApiV2BillingProductsGetRequest) Execute() (*ModelsBillingProductList, *http.Response, error) {
	return r.ApiService.V2BillingProductsGetExecute(r)
}

/*
V2BillingProductsGet List Billing Products

List Billing Products

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2BillingProductsGetRequest
*/
func (a *BillingProductsAPIService) V2BillingProductsGet(ctx context.Context) ApiV2BillingProductsGetRequest {
	return ApiV2BillingProductsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsBillingProductList
func (a *BillingProductsAPIService) V2BillingProductsGetExecute(r ApiV2BillingProductsGetRequest) (*ModelsBillingProductList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsBillingProductList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingProductsAPIService.V2BillingProductsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/products"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.showInactive != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "show_inactive", r.showInactive, "form", "")
	}
	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
