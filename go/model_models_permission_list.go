/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsPermissionList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsPermissionList{}

// ModelsPermissionList struct for ModelsPermissionList
type ModelsPermissionList struct {
	Pagination *ModelsPagination `json:"pagination,omitempty"`
	Permissions []ModelsPermission `json:"permissions,omitempty"`
}

// NewModelsPermissionList instantiates a new ModelsPermissionList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsPermissionList() *ModelsPermissionList {
	this := ModelsPermissionList{}
	return &this
}

// NewModelsPermissionListWithDefaults instantiates a new ModelsPermissionList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsPermissionListWithDefaults() *ModelsPermissionList {
	this := ModelsPermissionList{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ModelsPermissionList) GetPagination() ModelsPagination {
	if o == nil || IsNil(o.Pagination) {
		var ret ModelsPagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPermissionList) GetPaginationOk() (*ModelsPagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ModelsPermissionList) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given ModelsPagination and assigns it to the Pagination field.
func (o *ModelsPermissionList) SetPagination(v ModelsPagination) {
	o.Pagination = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ModelsPermissionList) GetPermissions() []ModelsPermission {
	if o == nil || IsNil(o.Permissions) {
		var ret []ModelsPermission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPermissionList) GetPermissionsOk() ([]ModelsPermission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ModelsPermissionList) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []ModelsPermission and assigns it to the Permissions field.
func (o *ModelsPermissionList) SetPermissions(v []ModelsPermission) {
	o.Permissions = v
}

func (o ModelsPermissionList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsPermissionList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

type NullableModelsPermissionList struct {
	value *ModelsPermissionList
	isSet bool
}

func (v NullableModelsPermissionList) Get() *ModelsPermissionList {
	return v.value
}

func (v *NullableModelsPermissionList) Set(val *ModelsPermissionList) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsPermissionList) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsPermissionList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsPermissionList(val *ModelsPermissionList) *NullableModelsPermissionList {
	return &NullableModelsPermissionList{value: val, isSet: true}
}

func (v NullableModelsPermissionList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsPermissionList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


