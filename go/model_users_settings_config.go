/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the UsersSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersSettingsConfig{}

// UsersSettingsConfig Google Workspace Users settings
type UsersSettingsConfig struct {
	// Authentication type (service_account or oauth)
	AuthType *string `json:"auth_type,omitempty"`
	// Cron expression to schedule the data collection.
	Cron *string `json:"cron,omitempty"`
	// Email address to use to authenticate with Google Cloud (required for service_account auth).
	Email *string `json:"email,omitempty"`
}

// NewUsersSettingsConfig instantiates a new UsersSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersSettingsConfig() *UsersSettingsConfig {
	this := UsersSettingsConfig{}
	return &this
}

// NewUsersSettingsConfigWithDefaults instantiates a new UsersSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersSettingsConfigWithDefaults() *UsersSettingsConfig {
	this := UsersSettingsConfig{}
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *UsersSettingsConfig) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersSettingsConfig) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *UsersSettingsConfig) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *UsersSettingsConfig) SetAuthType(v string) {
	o.AuthType = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *UsersSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *UsersSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *UsersSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *UsersSettingsConfig) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsersSettingsConfig) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *UsersSettingsConfig) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *UsersSettingsConfig) SetEmail(v string) {
	o.Email = &v
}

func (o UsersSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableUsersSettingsConfig struct {
	value *UsersSettingsConfig
	isSet bool
}

func (v NullableUsersSettingsConfig) Get() *UsersSettingsConfig {
	return v.value
}

func (v *NullableUsersSettingsConfig) Set(val *UsersSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersSettingsConfig(val *UsersSettingsConfig) *NullableUsersSettingsConfig {
	return &NullableUsersSettingsConfig{value: val, isSet: true}
}

func (v NullableUsersSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


