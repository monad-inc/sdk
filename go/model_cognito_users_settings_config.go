/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the CognitoUsersSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CognitoUsersSettingsConfig{}

// CognitoUsersSettingsConfig AWS Cognito Users settings
type CognitoUsersSettingsConfig struct {
	// Cron string for scheduling the ingest of your input. eg: `0 0 * * *` - Daily at midnight, or `*_/15 * * * *` - Every 15 minutes
	Cron *string `json:"cron,omitempty"`
	Filter *CognitoUsersFilter `json:"filter,omitempty"`
	// The Region that you would receieve findings for
	Region *string `json:"region,omitempty"`
	// The ARN of the role to assume to access the bucket
	RoleArn *string `json:"role_arn,omitempty"`
	// User Pool ID to extract users from
	UserPoolId *string `json:"user_pool_id,omitempty"`
}

// NewCognitoUsersSettingsConfig instantiates a new CognitoUsersSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCognitoUsersSettingsConfig() *CognitoUsersSettingsConfig {
	this := CognitoUsersSettingsConfig{}
	return &this
}

// NewCognitoUsersSettingsConfigWithDefaults instantiates a new CognitoUsersSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCognitoUsersSettingsConfigWithDefaults() *CognitoUsersSettingsConfig {
	this := CognitoUsersSettingsConfig{}
	return &this
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *CognitoUsersSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CognitoUsersSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *CognitoUsersSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *CognitoUsersSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *CognitoUsersSettingsConfig) GetFilter() CognitoUsersFilter {
	if o == nil || IsNil(o.Filter) {
		var ret CognitoUsersFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CognitoUsersSettingsConfig) GetFilterOk() (*CognitoUsersFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *CognitoUsersSettingsConfig) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given CognitoUsersFilter and assigns it to the Filter field.
func (o *CognitoUsersSettingsConfig) SetFilter(v CognitoUsersFilter) {
	o.Filter = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *CognitoUsersSettingsConfig) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CognitoUsersSettingsConfig) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *CognitoUsersSettingsConfig) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *CognitoUsersSettingsConfig) SetRegion(v string) {
	o.Region = &v
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *CognitoUsersSettingsConfig) GetRoleArn() string {
	if o == nil || IsNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CognitoUsersSettingsConfig) GetRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *CognitoUsersSettingsConfig) HasRoleArn() bool {
	if o != nil && !IsNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *CognitoUsersSettingsConfig) SetRoleArn(v string) {
	o.RoleArn = &v
}

// GetUserPoolId returns the UserPoolId field value if set, zero value otherwise.
func (o *CognitoUsersSettingsConfig) GetUserPoolId() string {
	if o == nil || IsNil(o.UserPoolId) {
		var ret string
		return ret
	}
	return *o.UserPoolId
}

// GetUserPoolIdOk returns a tuple with the UserPoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CognitoUsersSettingsConfig) GetUserPoolIdOk() (*string, bool) {
	if o == nil || IsNil(o.UserPoolId) {
		return nil, false
	}
	return o.UserPoolId, true
}

// HasUserPoolId returns a boolean if a field has been set.
func (o *CognitoUsersSettingsConfig) HasUserPoolId() bool {
	if o != nil && !IsNil(o.UserPoolId) {
		return true
	}

	return false
}

// SetUserPoolId gets a reference to the given string and assigns it to the UserPoolId field.
func (o *CognitoUsersSettingsConfig) SetUserPoolId(v string) {
	o.UserPoolId = &v
}

func (o CognitoUsersSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CognitoUsersSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.RoleArn) {
		toSerialize["role_arn"] = o.RoleArn
	}
	if !IsNil(o.UserPoolId) {
		toSerialize["user_pool_id"] = o.UserPoolId
	}
	return toSerialize, nil
}

type NullableCognitoUsersSettingsConfig struct {
	value *CognitoUsersSettingsConfig
	isSet bool
}

func (v NullableCognitoUsersSettingsConfig) Get() *CognitoUsersSettingsConfig {
	return v.value
}

func (v *NullableCognitoUsersSettingsConfig) Set(val *CognitoUsersSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableCognitoUsersSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableCognitoUsersSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCognitoUsersSettingsConfig(val *CognitoUsersSettingsConfig) *NullableCognitoUsersSettingsConfig {
	return &NullableCognitoUsersSettingsConfig{value: val, isSet: true}
}

func (v NullableCognitoUsersSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCognitoUsersSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


