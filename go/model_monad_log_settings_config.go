/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the MonadLogSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonadLogSettingsConfig{}

// MonadLogSettingsConfig Monad Log settings
type MonadLogSettingsConfig struct {
	LogType *string `json:"log_type,omitempty"`
}

// NewMonadLogSettingsConfig instantiates a new MonadLogSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonadLogSettingsConfig() *MonadLogSettingsConfig {
	this := MonadLogSettingsConfig{}
	return &this
}

// NewMonadLogSettingsConfigWithDefaults instantiates a new MonadLogSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonadLogSettingsConfigWithDefaults() *MonadLogSettingsConfig {
	this := MonadLogSettingsConfig{}
	return &this
}

// GetLogType returns the LogType field value if set, zero value otherwise.
func (o *MonadLogSettingsConfig) GetLogType() string {
	if o == nil || IsNil(o.LogType) {
		var ret string
		return ret
	}
	return *o.LogType
}

// GetLogTypeOk returns a tuple with the LogType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MonadLogSettingsConfig) GetLogTypeOk() (*string, bool) {
	if o == nil || IsNil(o.LogType) {
		return nil, false
	}
	return o.LogType, true
}

// HasLogType returns a boolean if a field has been set.
func (o *MonadLogSettingsConfig) HasLogType() bool {
	if o != nil && !IsNil(o.LogType) {
		return true
	}

	return false
}

// SetLogType gets a reference to the given string and assigns it to the LogType field.
func (o *MonadLogSettingsConfig) SetLogType(v string) {
	o.LogType = &v
}

func (o MonadLogSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonadLogSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LogType) {
		toSerialize["log_type"] = o.LogType
	}
	return toSerialize, nil
}

type NullableMonadLogSettingsConfig struct {
	value *MonadLogSettingsConfig
	isSet bool
}

func (v NullableMonadLogSettingsConfig) Get() *MonadLogSettingsConfig {
	return v.value
}

func (v *NullableMonadLogSettingsConfig) Set(val *MonadLogSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableMonadLogSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableMonadLogSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonadLogSettingsConfig(val *MonadLogSettingsConfig) *NullableMonadLogSettingsConfig {
	return &NullableMonadLogSettingsConfig{value: val, isSet: true}
}

func (v NullableMonadLogSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonadLogSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


