/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the SnowflakeOutputSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeOutputSettingsConfig{}

// SnowflakeOutputSettingsConfig Snowflake Output Settings
type SnowflakeOutputSettingsConfig struct {
	// The unique identifier for your Snowflake account, typically in the form of 'organization-account_name'.
	Account *string `json:"account,omitempty"`
	AuthType *string `json:"auth_type,omitempty"`
	BatchConfig *BatchConfigBatchConfig `json:"batch_config,omitempty"`
	// The name of the Snowflake database to connect to and perform operations on
	Database *string `json:"database,omitempty"`
	// The name of the Role your service account was granted which can access your resources.
	Role *string `json:"role,omitempty"`
	// The schema within the Snowflake database where the target table resides.
	Schema *string `json:"schema,omitempty"`
	// The name of the Snowflake stage where the data will be copied to. Monad create or replace the stage.
	Stage *string `json:"stage,omitempty"`
	// The name of the table in Snowflake where the data will be written. If the table doesn't exist Monad will create the table.
	Table *string `json:"table,omitempty"`
	// The username of the Snowflake account used to establish the connection.
	User *string `json:"user,omitempty"`
	// The Snowflake virtual warehouse to use for executing queries and processing data.
	Warehouse *string `json:"warehouse,omitempty"`
}

// NewSnowflakeOutputSettingsConfig instantiates a new SnowflakeOutputSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeOutputSettingsConfig() *SnowflakeOutputSettingsConfig {
	this := SnowflakeOutputSettingsConfig{}
	return &this
}

// NewSnowflakeOutputSettingsConfigWithDefaults instantiates a new SnowflakeOutputSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeOutputSettingsConfigWithDefaults() *SnowflakeOutputSettingsConfig {
	this := SnowflakeOutputSettingsConfig{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *SnowflakeOutputSettingsConfig) SetAccount(v string) {
	o.Account = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *SnowflakeOutputSettingsConfig) SetAuthType(v string) {
	o.AuthType = &v
}

// GetBatchConfig returns the BatchConfig field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetBatchConfig() BatchConfigBatchConfig {
	if o == nil || IsNil(o.BatchConfig) {
		var ret BatchConfigBatchConfig
		return ret
	}
	return *o.BatchConfig
}

// GetBatchConfigOk returns a tuple with the BatchConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetBatchConfigOk() (*BatchConfigBatchConfig, bool) {
	if o == nil || IsNil(o.BatchConfig) {
		return nil, false
	}
	return o.BatchConfig, true
}

// HasBatchConfig returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasBatchConfig() bool {
	if o != nil && !IsNil(o.BatchConfig) {
		return true
	}

	return false
}

// SetBatchConfig gets a reference to the given BatchConfigBatchConfig and assigns it to the BatchConfig field.
func (o *SnowflakeOutputSettingsConfig) SetBatchConfig(v BatchConfigBatchConfig) {
	o.BatchConfig = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetDatabase() string {
	if o == nil || IsNil(o.Database) {
		var ret string
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetDatabaseOk() (*string, bool) {
	if o == nil || IsNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasDatabase() bool {
	if o != nil && !IsNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given string and assigns it to the Database field.
func (o *SnowflakeOutputSettingsConfig) SetDatabase(v string) {
	o.Database = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *SnowflakeOutputSettingsConfig) SetRole(v string) {
	o.Role = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetSchema() string {
	if o == nil || IsNil(o.Schema) {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetSchemaOk() (*string, bool) {
	if o == nil || IsNil(o.Schema) {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasSchema() bool {
	if o != nil && !IsNil(o.Schema) {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *SnowflakeOutputSettingsConfig) SetSchema(v string) {
	o.Schema = &v
}

// GetStage returns the Stage field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetStage() string {
	if o == nil || IsNil(o.Stage) {
		var ret string
		return ret
	}
	return *o.Stage
}

// GetStageOk returns a tuple with the Stage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetStageOk() (*string, bool) {
	if o == nil || IsNil(o.Stage) {
		return nil, false
	}
	return o.Stage, true
}

// HasStage returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasStage() bool {
	if o != nil && !IsNil(o.Stage) {
		return true
	}

	return false
}

// SetStage gets a reference to the given string and assigns it to the Stage field.
func (o *SnowflakeOutputSettingsConfig) SetStage(v string) {
	o.Stage = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *SnowflakeOutputSettingsConfig) SetTable(v string) {
	o.Table = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *SnowflakeOutputSettingsConfig) SetUser(v string) {
	o.User = &v
}

// GetWarehouse returns the Warehouse field value if set, zero value otherwise.
func (o *SnowflakeOutputSettingsConfig) GetWarehouse() string {
	if o == nil || IsNil(o.Warehouse) {
		var ret string
		return ret
	}
	return *o.Warehouse
}

// GetWarehouseOk returns a tuple with the Warehouse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeOutputSettingsConfig) GetWarehouseOk() (*string, bool) {
	if o == nil || IsNil(o.Warehouse) {
		return nil, false
	}
	return o.Warehouse, true
}

// HasWarehouse returns a boolean if a field has been set.
func (o *SnowflakeOutputSettingsConfig) HasWarehouse() bool {
	if o != nil && !IsNil(o.Warehouse) {
		return true
	}

	return false
}

// SetWarehouse gets a reference to the given string and assigns it to the Warehouse field.
func (o *SnowflakeOutputSettingsConfig) SetWarehouse(v string) {
	o.Warehouse = &v
}

func (o SnowflakeOutputSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeOutputSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.BatchConfig) {
		toSerialize["batch_config"] = o.BatchConfig
	}
	if !IsNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.Schema) {
		toSerialize["schema"] = o.Schema
	}
	if !IsNil(o.Stage) {
		toSerialize["stage"] = o.Stage
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.Warehouse) {
		toSerialize["warehouse"] = o.Warehouse
	}
	return toSerialize, nil
}

type NullableSnowflakeOutputSettingsConfig struct {
	value *SnowflakeOutputSettingsConfig
	isSet bool
}

func (v NullableSnowflakeOutputSettingsConfig) Get() *SnowflakeOutputSettingsConfig {
	return v.value
}

func (v *NullableSnowflakeOutputSettingsConfig) Set(val *SnowflakeOutputSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeOutputSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeOutputSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeOutputSettingsConfig(val *SnowflakeOutputSettingsConfig) *NullableSnowflakeOutputSettingsConfig {
	return &NullableSnowflakeOutputSettingsConfig{value: val, isSet: true}
}

func (v NullableSnowflakeOutputSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeOutputSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


