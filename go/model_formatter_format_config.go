/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the FormatterFormatConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormatterFormatConfig{}

// FormatterFormatConfig The format config to use
type FormatterFormatConfig struct {
	Format *string `json:"Format,omitempty"`
	DelimitedFormat *DelimitedDelimiterFormatter `json:"delimited_format,omitempty"`
	JsonFormat *JsonJsonFormatter `json:"json_format,omitempty"`
	ParquetFormat *ParquetParquetFormatter `json:"parquet_format,omitempty"`
}

// NewFormatterFormatConfig instantiates a new FormatterFormatConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormatterFormatConfig() *FormatterFormatConfig {
	this := FormatterFormatConfig{}
	return &this
}

// NewFormatterFormatConfigWithDefaults instantiates a new FormatterFormatConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormatterFormatConfigWithDefaults() *FormatterFormatConfig {
	this := FormatterFormatConfig{}
	return &this
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *FormatterFormatConfig) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormatterFormatConfig) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *FormatterFormatConfig) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *FormatterFormatConfig) SetFormat(v string) {
	o.Format = &v
}

// GetDelimitedFormat returns the DelimitedFormat field value if set, zero value otherwise.
func (o *FormatterFormatConfig) GetDelimitedFormat() DelimitedDelimiterFormatter {
	if o == nil || IsNil(o.DelimitedFormat) {
		var ret DelimitedDelimiterFormatter
		return ret
	}
	return *o.DelimitedFormat
}

// GetDelimitedFormatOk returns a tuple with the DelimitedFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormatterFormatConfig) GetDelimitedFormatOk() (*DelimitedDelimiterFormatter, bool) {
	if o == nil || IsNil(o.DelimitedFormat) {
		return nil, false
	}
	return o.DelimitedFormat, true
}

// HasDelimitedFormat returns a boolean if a field has been set.
func (o *FormatterFormatConfig) HasDelimitedFormat() bool {
	if o != nil && !IsNil(o.DelimitedFormat) {
		return true
	}

	return false
}

// SetDelimitedFormat gets a reference to the given DelimitedDelimiterFormatter and assigns it to the DelimitedFormat field.
func (o *FormatterFormatConfig) SetDelimitedFormat(v DelimitedDelimiterFormatter) {
	o.DelimitedFormat = &v
}

// GetJsonFormat returns the JsonFormat field value if set, zero value otherwise.
func (o *FormatterFormatConfig) GetJsonFormat() JsonJsonFormatter {
	if o == nil || IsNil(o.JsonFormat) {
		var ret JsonJsonFormatter
		return ret
	}
	return *o.JsonFormat
}

// GetJsonFormatOk returns a tuple with the JsonFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormatterFormatConfig) GetJsonFormatOk() (*JsonJsonFormatter, bool) {
	if o == nil || IsNil(o.JsonFormat) {
		return nil, false
	}
	return o.JsonFormat, true
}

// HasJsonFormat returns a boolean if a field has been set.
func (o *FormatterFormatConfig) HasJsonFormat() bool {
	if o != nil && !IsNil(o.JsonFormat) {
		return true
	}

	return false
}

// SetJsonFormat gets a reference to the given JsonJsonFormatter and assigns it to the JsonFormat field.
func (o *FormatterFormatConfig) SetJsonFormat(v JsonJsonFormatter) {
	o.JsonFormat = &v
}

// GetParquetFormat returns the ParquetFormat field value if set, zero value otherwise.
func (o *FormatterFormatConfig) GetParquetFormat() ParquetParquetFormatter {
	if o == nil || IsNil(o.ParquetFormat) {
		var ret ParquetParquetFormatter
		return ret
	}
	return *o.ParquetFormat
}

// GetParquetFormatOk returns a tuple with the ParquetFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormatterFormatConfig) GetParquetFormatOk() (*ParquetParquetFormatter, bool) {
	if o == nil || IsNil(o.ParquetFormat) {
		return nil, false
	}
	return o.ParquetFormat, true
}

// HasParquetFormat returns a boolean if a field has been set.
func (o *FormatterFormatConfig) HasParquetFormat() bool {
	if o != nil && !IsNil(o.ParquetFormat) {
		return true
	}

	return false
}

// SetParquetFormat gets a reference to the given ParquetParquetFormatter and assigns it to the ParquetFormat field.
func (o *FormatterFormatConfig) SetParquetFormat(v ParquetParquetFormatter) {
	o.ParquetFormat = &v
}

func (o FormatterFormatConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormatterFormatConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Format) {
		toSerialize["Format"] = o.Format
	}
	if !IsNil(o.DelimitedFormat) {
		toSerialize["delimited_format"] = o.DelimitedFormat
	}
	if !IsNil(o.JsonFormat) {
		toSerialize["json_format"] = o.JsonFormat
	}
	if !IsNil(o.ParquetFormat) {
		toSerialize["parquet_format"] = o.ParquetFormat
	}
	return toSerialize, nil
}

type NullableFormatterFormatConfig struct {
	value *FormatterFormatConfig
	isSet bool
}

func (v NullableFormatterFormatConfig) Get() *FormatterFormatConfig {
	return v.value
}

func (v *NullableFormatterFormatConfig) Set(val *FormatterFormatConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFormatterFormatConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFormatterFormatConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormatterFormatConfig(val *FormatterFormatConfig) *NullableFormatterFormatConfig {
	return &NullableFormatterFormatConfig{value: val, isSet: true}
}

func (v NullableFormatterFormatConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormatterFormatConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


