/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the BigqueryInputSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BigqueryInputSettingsConfig{}

// BigqueryInputSettingsConfig BigQuery Input Settings
type BigqueryInputSettingsConfig struct {
	// Cron string for scheduling the ingest of your input
	Cron *string `json:"cron,omitempty"`
	// The BigQuery dataset ID containing the table
	Dataset *string `json:"dataset,omitempty"`
	// The GCP project ID containing the BigQuery dataset
	Project *string `json:"project,omitempty"`
	// Optional custom query to use instead of table (must include timestamp_column)
	Query *string `json:"query,omitempty"`
	// The BigQuery table ID to query data from
	Table *string `json:"table,omitempty"`
	// The column containing timestamp values used for incremental loading
	TimestampColumn *string `json:"timestamp_column,omitempty"`
}

// NewBigqueryInputSettingsConfig instantiates a new BigqueryInputSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBigqueryInputSettingsConfig() *BigqueryInputSettingsConfig {
	this := BigqueryInputSettingsConfig{}
	return &this
}

// NewBigqueryInputSettingsConfigWithDefaults instantiates a new BigqueryInputSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBigqueryInputSettingsConfigWithDefaults() *BigqueryInputSettingsConfig {
	this := BigqueryInputSettingsConfig{}
	return &this
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *BigqueryInputSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigqueryInputSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *BigqueryInputSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *BigqueryInputSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetDataset returns the Dataset field value if set, zero value otherwise.
func (o *BigqueryInputSettingsConfig) GetDataset() string {
	if o == nil || IsNil(o.Dataset) {
		var ret string
		return ret
	}
	return *o.Dataset
}

// GetDatasetOk returns a tuple with the Dataset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigqueryInputSettingsConfig) GetDatasetOk() (*string, bool) {
	if o == nil || IsNil(o.Dataset) {
		return nil, false
	}
	return o.Dataset, true
}

// HasDataset returns a boolean if a field has been set.
func (o *BigqueryInputSettingsConfig) HasDataset() bool {
	if o != nil && !IsNil(o.Dataset) {
		return true
	}

	return false
}

// SetDataset gets a reference to the given string and assigns it to the Dataset field.
func (o *BigqueryInputSettingsConfig) SetDataset(v string) {
	o.Dataset = &v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *BigqueryInputSettingsConfig) GetProject() string {
	if o == nil || IsNil(o.Project) {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigqueryInputSettingsConfig) GetProjectOk() (*string, bool) {
	if o == nil || IsNil(o.Project) {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *BigqueryInputSettingsConfig) HasProject() bool {
	if o != nil && !IsNil(o.Project) {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *BigqueryInputSettingsConfig) SetProject(v string) {
	o.Project = &v
}

// GetQuery returns the Query field value if set, zero value otherwise.
func (o *BigqueryInputSettingsConfig) GetQuery() string {
	if o == nil || IsNil(o.Query) {
		var ret string
		return ret
	}
	return *o.Query
}

// GetQueryOk returns a tuple with the Query field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigqueryInputSettingsConfig) GetQueryOk() (*string, bool) {
	if o == nil || IsNil(o.Query) {
		return nil, false
	}
	return o.Query, true
}

// HasQuery returns a boolean if a field has been set.
func (o *BigqueryInputSettingsConfig) HasQuery() bool {
	if o != nil && !IsNil(o.Query) {
		return true
	}

	return false
}

// SetQuery gets a reference to the given string and assigns it to the Query field.
func (o *BigqueryInputSettingsConfig) SetQuery(v string) {
	o.Query = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *BigqueryInputSettingsConfig) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigqueryInputSettingsConfig) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *BigqueryInputSettingsConfig) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *BigqueryInputSettingsConfig) SetTable(v string) {
	o.Table = &v
}

// GetTimestampColumn returns the TimestampColumn field value if set, zero value otherwise.
func (o *BigqueryInputSettingsConfig) GetTimestampColumn() string {
	if o == nil || IsNil(o.TimestampColumn) {
		var ret string
		return ret
	}
	return *o.TimestampColumn
}

// GetTimestampColumnOk returns a tuple with the TimestampColumn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigqueryInputSettingsConfig) GetTimestampColumnOk() (*string, bool) {
	if o == nil || IsNil(o.TimestampColumn) {
		return nil, false
	}
	return o.TimestampColumn, true
}

// HasTimestampColumn returns a boolean if a field has been set.
func (o *BigqueryInputSettingsConfig) HasTimestampColumn() bool {
	if o != nil && !IsNil(o.TimestampColumn) {
		return true
	}

	return false
}

// SetTimestampColumn gets a reference to the given string and assigns it to the TimestampColumn field.
func (o *BigqueryInputSettingsConfig) SetTimestampColumn(v string) {
	o.TimestampColumn = &v
}

func (o BigqueryInputSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BigqueryInputSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.Dataset) {
		toSerialize["dataset"] = o.Dataset
	}
	if !IsNil(o.Project) {
		toSerialize["project"] = o.Project
	}
	if !IsNil(o.Query) {
		toSerialize["query"] = o.Query
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	if !IsNil(o.TimestampColumn) {
		toSerialize["timestamp_column"] = o.TimestampColumn
	}
	return toSerialize, nil
}

type NullableBigqueryInputSettingsConfig struct {
	value *BigqueryInputSettingsConfig
	isSet bool
}

func (v NullableBigqueryInputSettingsConfig) Get() *BigqueryInputSettingsConfig {
	return v.value
}

func (v *NullableBigqueryInputSettingsConfig) Set(val *BigqueryInputSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBigqueryInputSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBigqueryInputSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigqueryInputSettingsConfig(val *BigqueryInputSettingsConfig) *NullableBigqueryInputSettingsConfig {
	return &NullableBigqueryInputSettingsConfig{value: val, isSet: true}
}

func (v NullableBigqueryInputSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigqueryInputSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


