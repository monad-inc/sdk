/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsPipelineNodeStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsPipelineNodeStatus{}

// ModelsPipelineNodeStatus struct for ModelsPipelineNodeStatus
type ModelsPipelineNodeStatus struct {
	Egress *ModelsDataUsage `json:"egress,omitempty"`
	Errors *int32 `json:"errors,omitempty"`
	ExpiredMessages *int32 `json:"expired_messages,omitempty"`
	Ingress *ModelsDataUsage `json:"ingress,omitempty"`
	NodeId *string `json:"node_id,omitempty"`
	NodeSlug *string `json:"node_slug,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewModelsPipelineNodeStatus instantiates a new ModelsPipelineNodeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsPipelineNodeStatus() *ModelsPipelineNodeStatus {
	this := ModelsPipelineNodeStatus{}
	return &this
}

// NewModelsPipelineNodeStatusWithDefaults instantiates a new ModelsPipelineNodeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsPipelineNodeStatusWithDefaults() *ModelsPipelineNodeStatus {
	this := ModelsPipelineNodeStatus{}
	return &this
}

// GetEgress returns the Egress field value if set, zero value otherwise.
func (o *ModelsPipelineNodeStatus) GetEgress() ModelsDataUsage {
	if o == nil || IsNil(o.Egress) {
		var ret ModelsDataUsage
		return ret
	}
	return *o.Egress
}

// GetEgressOk returns a tuple with the Egress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNodeStatus) GetEgressOk() (*ModelsDataUsage, bool) {
	if o == nil || IsNil(o.Egress) {
		return nil, false
	}
	return o.Egress, true
}

// HasEgress returns a boolean if a field has been set.
func (o *ModelsPipelineNodeStatus) HasEgress() bool {
	if o != nil && !IsNil(o.Egress) {
		return true
	}

	return false
}

// SetEgress gets a reference to the given ModelsDataUsage and assigns it to the Egress field.
func (o *ModelsPipelineNodeStatus) SetEgress(v ModelsDataUsage) {
	o.Egress = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ModelsPipelineNodeStatus) GetErrors() int32 {
	if o == nil || IsNil(o.Errors) {
		var ret int32
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNodeStatus) GetErrorsOk() (*int32, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ModelsPipelineNodeStatus) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given int32 and assigns it to the Errors field.
func (o *ModelsPipelineNodeStatus) SetErrors(v int32) {
	o.Errors = &v
}

// GetExpiredMessages returns the ExpiredMessages field value if set, zero value otherwise.
func (o *ModelsPipelineNodeStatus) GetExpiredMessages() int32 {
	if o == nil || IsNil(o.ExpiredMessages) {
		var ret int32
		return ret
	}
	return *o.ExpiredMessages
}

// GetExpiredMessagesOk returns a tuple with the ExpiredMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNodeStatus) GetExpiredMessagesOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiredMessages) {
		return nil, false
	}
	return o.ExpiredMessages, true
}

// HasExpiredMessages returns a boolean if a field has been set.
func (o *ModelsPipelineNodeStatus) HasExpiredMessages() bool {
	if o != nil && !IsNil(o.ExpiredMessages) {
		return true
	}

	return false
}

// SetExpiredMessages gets a reference to the given int32 and assigns it to the ExpiredMessages field.
func (o *ModelsPipelineNodeStatus) SetExpiredMessages(v int32) {
	o.ExpiredMessages = &v
}

// GetIngress returns the Ingress field value if set, zero value otherwise.
func (o *ModelsPipelineNodeStatus) GetIngress() ModelsDataUsage {
	if o == nil || IsNil(o.Ingress) {
		var ret ModelsDataUsage
		return ret
	}
	return *o.Ingress
}

// GetIngressOk returns a tuple with the Ingress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNodeStatus) GetIngressOk() (*ModelsDataUsage, bool) {
	if o == nil || IsNil(o.Ingress) {
		return nil, false
	}
	return o.Ingress, true
}

// HasIngress returns a boolean if a field has been set.
func (o *ModelsPipelineNodeStatus) HasIngress() bool {
	if o != nil && !IsNil(o.Ingress) {
		return true
	}

	return false
}

// SetIngress gets a reference to the given ModelsDataUsage and assigns it to the Ingress field.
func (o *ModelsPipelineNodeStatus) SetIngress(v ModelsDataUsage) {
	o.Ingress = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *ModelsPipelineNodeStatus) GetNodeId() string {
	if o == nil || IsNil(o.NodeId) {
		var ret string
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNodeStatus) GetNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *ModelsPipelineNodeStatus) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given string and assigns it to the NodeId field.
func (o *ModelsPipelineNodeStatus) SetNodeId(v string) {
	o.NodeId = &v
}

// GetNodeSlug returns the NodeSlug field value if set, zero value otherwise.
func (o *ModelsPipelineNodeStatus) GetNodeSlug() string {
	if o == nil || IsNil(o.NodeSlug) {
		var ret string
		return ret
	}
	return *o.NodeSlug
}

// GetNodeSlugOk returns a tuple with the NodeSlug field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNodeStatus) GetNodeSlugOk() (*string, bool) {
	if o == nil || IsNil(o.NodeSlug) {
		return nil, false
	}
	return o.NodeSlug, true
}

// HasNodeSlug returns a boolean if a field has been set.
func (o *ModelsPipelineNodeStatus) HasNodeSlug() bool {
	if o != nil && !IsNil(o.NodeSlug) {
		return true
	}

	return false
}

// SetNodeSlug gets a reference to the given string and assigns it to the NodeSlug field.
func (o *ModelsPipelineNodeStatus) SetNodeSlug(v string) {
	o.NodeSlug = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ModelsPipelineNodeStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineNodeStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ModelsPipelineNodeStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ModelsPipelineNodeStatus) SetStatus(v string) {
	o.Status = &v
}

func (o ModelsPipelineNodeStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsPipelineNodeStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Egress) {
		toSerialize["egress"] = o.Egress
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.ExpiredMessages) {
		toSerialize["expired_messages"] = o.ExpiredMessages
	}
	if !IsNil(o.Ingress) {
		toSerialize["ingress"] = o.Ingress
	}
	if !IsNil(o.NodeId) {
		toSerialize["node_id"] = o.NodeId
	}
	if !IsNil(o.NodeSlug) {
		toSerialize["node_slug"] = o.NodeSlug
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableModelsPipelineNodeStatus struct {
	value *ModelsPipelineNodeStatus
	isSet bool
}

func (v NullableModelsPipelineNodeStatus) Get() *ModelsPipelineNodeStatus {
	return v.value
}

func (v *NullableModelsPipelineNodeStatus) Set(val *ModelsPipelineNodeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsPipelineNodeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsPipelineNodeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsPipelineNodeStatus(val *ModelsPipelineNodeStatus) *NullableModelsPipelineNodeStatus {
	return &NullableModelsPipelineNodeStatus{value: val, isSet: true}
}

func (v NullableModelsPipelineNodeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsPipelineNodeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


