/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the FlattenFlatten type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlattenFlatten{}

// FlattenFlatten struct for FlattenFlatten
type FlattenFlatten struct {
	// The delimiter to use when flattening for example flattening an array of assets: _ would result in assets_0, assets_1
	Delimiter *string `json:"delimiter,omitempty"`
	// The key to flatten
	Key *string `json:"key,omitempty"`
}

// NewFlattenFlatten instantiates a new FlattenFlatten object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlattenFlatten() *FlattenFlatten {
	this := FlattenFlatten{}
	return &this
}

// NewFlattenFlattenWithDefaults instantiates a new FlattenFlatten object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlattenFlattenWithDefaults() *FlattenFlatten {
	this := FlattenFlatten{}
	return &this
}

// GetDelimiter returns the Delimiter field value if set, zero value otherwise.
func (o *FlattenFlatten) GetDelimiter() string {
	if o == nil || IsNil(o.Delimiter) {
		var ret string
		return ret
	}
	return *o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlattenFlatten) GetDelimiterOk() (*string, bool) {
	if o == nil || IsNil(o.Delimiter) {
		return nil, false
	}
	return o.Delimiter, true
}

// HasDelimiter returns a boolean if a field has been set.
func (o *FlattenFlatten) HasDelimiter() bool {
	if o != nil && !IsNil(o.Delimiter) {
		return true
	}

	return false
}

// SetDelimiter gets a reference to the given string and assigns it to the Delimiter field.
func (o *FlattenFlatten) SetDelimiter(v string) {
	o.Delimiter = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *FlattenFlatten) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlattenFlatten) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *FlattenFlatten) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *FlattenFlatten) SetKey(v string) {
	o.Key = &v
}

func (o FlattenFlatten) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlattenFlatten) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Delimiter) {
		toSerialize["delimiter"] = o.Delimiter
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	return toSerialize, nil
}

type NullableFlattenFlatten struct {
	value *FlattenFlatten
	isSet bool
}

func (v NullableFlattenFlatten) Get() *FlattenFlatten {
	return v.value
}

func (v *NullableFlattenFlatten) Set(val *FlattenFlatten) {
	v.value = val
	v.isSet = true
}

func (v NullableFlattenFlatten) IsSet() bool {
	return v.isSet
}

func (v *NullableFlattenFlatten) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlattenFlatten(val *FlattenFlatten) *NullableFlattenFlatten {
	return &NullableFlattenFlatten{value: val, isSet: true}
}

func (v NullableFlattenFlatten) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlattenFlatten) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


