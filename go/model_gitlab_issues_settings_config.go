/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the GitlabIssuesSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GitlabIssuesSettingsConfig{}

// GitlabIssuesSettingsConfig Gitlab Issues settings
type GitlabIssuesSettingsConfig struct {
	// Confidential to filter issues by confidentiality status. Confidential = true means only show confidential issues.
	Confidential *bool `json:"confidential,omitempty"`
	// GitLab URL (for Custom-Urls when self hosting. Defaults to https://gitlab.com.)
	GitlabUrl *string `json:"gitlab_url,omitempty"`
	// IssueType to filter issues by type e.g. issue, incident, etc.
	IssueType *string `json:"issue_type,omitempty"`
	// Project ID to get issues for
	ProjectId *string `json:"project_id,omitempty"`
	// State to filter issues by e.g. opened, closed
	State *string `json:"state,omitempty"`
	// Include label details in the response
	WithLabelDetails *bool `json:"with_label_details,omitempty"`
}

// NewGitlabIssuesSettingsConfig instantiates a new GitlabIssuesSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGitlabIssuesSettingsConfig() *GitlabIssuesSettingsConfig {
	this := GitlabIssuesSettingsConfig{}
	return &this
}

// NewGitlabIssuesSettingsConfigWithDefaults instantiates a new GitlabIssuesSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGitlabIssuesSettingsConfigWithDefaults() *GitlabIssuesSettingsConfig {
	this := GitlabIssuesSettingsConfig{}
	return &this
}

// GetConfidential returns the Confidential field value if set, zero value otherwise.
func (o *GitlabIssuesSettingsConfig) GetConfidential() bool {
	if o == nil || IsNil(o.Confidential) {
		var ret bool
		return ret
	}
	return *o.Confidential
}

// GetConfidentialOk returns a tuple with the Confidential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabIssuesSettingsConfig) GetConfidentialOk() (*bool, bool) {
	if o == nil || IsNil(o.Confidential) {
		return nil, false
	}
	return o.Confidential, true
}

// HasConfidential returns a boolean if a field has been set.
func (o *GitlabIssuesSettingsConfig) HasConfidential() bool {
	if o != nil && !IsNil(o.Confidential) {
		return true
	}

	return false
}

// SetConfidential gets a reference to the given bool and assigns it to the Confidential field.
func (o *GitlabIssuesSettingsConfig) SetConfidential(v bool) {
	o.Confidential = &v
}

// GetGitlabUrl returns the GitlabUrl field value if set, zero value otherwise.
func (o *GitlabIssuesSettingsConfig) GetGitlabUrl() string {
	if o == nil || IsNil(o.GitlabUrl) {
		var ret string
		return ret
	}
	return *o.GitlabUrl
}

// GetGitlabUrlOk returns a tuple with the GitlabUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabIssuesSettingsConfig) GetGitlabUrlOk() (*string, bool) {
	if o == nil || IsNil(o.GitlabUrl) {
		return nil, false
	}
	return o.GitlabUrl, true
}

// HasGitlabUrl returns a boolean if a field has been set.
func (o *GitlabIssuesSettingsConfig) HasGitlabUrl() bool {
	if o != nil && !IsNil(o.GitlabUrl) {
		return true
	}

	return false
}

// SetGitlabUrl gets a reference to the given string and assigns it to the GitlabUrl field.
func (o *GitlabIssuesSettingsConfig) SetGitlabUrl(v string) {
	o.GitlabUrl = &v
}

// GetIssueType returns the IssueType field value if set, zero value otherwise.
func (o *GitlabIssuesSettingsConfig) GetIssueType() string {
	if o == nil || IsNil(o.IssueType) {
		var ret string
		return ret
	}
	return *o.IssueType
}

// GetIssueTypeOk returns a tuple with the IssueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabIssuesSettingsConfig) GetIssueTypeOk() (*string, bool) {
	if o == nil || IsNil(o.IssueType) {
		return nil, false
	}
	return o.IssueType, true
}

// HasIssueType returns a boolean if a field has been set.
func (o *GitlabIssuesSettingsConfig) HasIssueType() bool {
	if o != nil && !IsNil(o.IssueType) {
		return true
	}

	return false
}

// SetIssueType gets a reference to the given string and assigns it to the IssueType field.
func (o *GitlabIssuesSettingsConfig) SetIssueType(v string) {
	o.IssueType = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *GitlabIssuesSettingsConfig) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabIssuesSettingsConfig) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *GitlabIssuesSettingsConfig) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *GitlabIssuesSettingsConfig) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *GitlabIssuesSettingsConfig) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabIssuesSettingsConfig) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *GitlabIssuesSettingsConfig) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *GitlabIssuesSettingsConfig) SetState(v string) {
	o.State = &v
}

// GetWithLabelDetails returns the WithLabelDetails field value if set, zero value otherwise.
func (o *GitlabIssuesSettingsConfig) GetWithLabelDetails() bool {
	if o == nil || IsNil(o.WithLabelDetails) {
		var ret bool
		return ret
	}
	return *o.WithLabelDetails
}

// GetWithLabelDetailsOk returns a tuple with the WithLabelDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GitlabIssuesSettingsConfig) GetWithLabelDetailsOk() (*bool, bool) {
	if o == nil || IsNil(o.WithLabelDetails) {
		return nil, false
	}
	return o.WithLabelDetails, true
}

// HasWithLabelDetails returns a boolean if a field has been set.
func (o *GitlabIssuesSettingsConfig) HasWithLabelDetails() bool {
	if o != nil && !IsNil(o.WithLabelDetails) {
		return true
	}

	return false
}

// SetWithLabelDetails gets a reference to the given bool and assigns it to the WithLabelDetails field.
func (o *GitlabIssuesSettingsConfig) SetWithLabelDetails(v bool) {
	o.WithLabelDetails = &v
}

func (o GitlabIssuesSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GitlabIssuesSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Confidential) {
		toSerialize["confidential"] = o.Confidential
	}
	if !IsNil(o.GitlabUrl) {
		toSerialize["gitlab_url"] = o.GitlabUrl
	}
	if !IsNil(o.IssueType) {
		toSerialize["issue_type"] = o.IssueType
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.WithLabelDetails) {
		toSerialize["with_label_details"] = o.WithLabelDetails
	}
	return toSerialize, nil
}

type NullableGitlabIssuesSettingsConfig struct {
	value *GitlabIssuesSettingsConfig
	isSet bool
}

func (v NullableGitlabIssuesSettingsConfig) Get() *GitlabIssuesSettingsConfig {
	return v.value
}

func (v *NullableGitlabIssuesSettingsConfig) Set(val *GitlabIssuesSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGitlabIssuesSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGitlabIssuesSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGitlabIssuesSettingsConfig(val *GitlabIssuesSettingsConfig) *NullableGitlabIssuesSettingsConfig {
	return &NullableGitlabIssuesSettingsConfig{value: val, isSet: true}
}

func (v NullableGitlabIssuesSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGitlabIssuesSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


