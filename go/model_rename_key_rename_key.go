/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the RenameKeyRenameKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RenameKeyRenameKey{}

// RenameKeyRenameKey struct for RenameKeyRenameKey
type RenameKeyRenameKey struct {
	// The key to rename
	Key *string `json:"key,omitempty"`
	// The new key to rename to
	NewKey *string `json:"new_key,omitempty"`
}

// NewRenameKeyRenameKey instantiates a new RenameKeyRenameKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameKeyRenameKey() *RenameKeyRenameKey {
	this := RenameKeyRenameKey{}
	return &this
}

// NewRenameKeyRenameKeyWithDefaults instantiates a new RenameKeyRenameKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameKeyRenameKeyWithDefaults() *RenameKeyRenameKey {
	this := RenameKeyRenameKey{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *RenameKeyRenameKey) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenameKeyRenameKey) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *RenameKeyRenameKey) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *RenameKeyRenameKey) SetKey(v string) {
	o.Key = &v
}

// GetNewKey returns the NewKey field value if set, zero value otherwise.
func (o *RenameKeyRenameKey) GetNewKey() string {
	if o == nil || IsNil(o.NewKey) {
		var ret string
		return ret
	}
	return *o.NewKey
}

// GetNewKeyOk returns a tuple with the NewKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RenameKeyRenameKey) GetNewKeyOk() (*string, bool) {
	if o == nil || IsNil(o.NewKey) {
		return nil, false
	}
	return o.NewKey, true
}

// HasNewKey returns a boolean if a field has been set.
func (o *RenameKeyRenameKey) HasNewKey() bool {
	if o != nil && !IsNil(o.NewKey) {
		return true
	}

	return false
}

// SetNewKey gets a reference to the given string and assigns it to the NewKey field.
func (o *RenameKeyRenameKey) SetNewKey(v string) {
	o.NewKey = &v
}

func (o RenameKeyRenameKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RenameKeyRenameKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.NewKey) {
		toSerialize["new_key"] = o.NewKey
	}
	return toSerialize, nil
}

type NullableRenameKeyRenameKey struct {
	value *RenameKeyRenameKey
	isSet bool
}

func (v NullableRenameKeyRenameKey) Get() *RenameKeyRenameKey {
	return v.value
}

func (v *NullableRenameKeyRenameKey) Set(val *RenameKeyRenameKey) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameKeyRenameKey) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameKeyRenameKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameKeyRenameKey(val *RenameKeyRenameKey) *NullableRenameKeyRenameKey {
	return &NullableRenameKeyRenameKey{value: val, isSet: true}
}

func (v NullableRenameKeyRenameKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameKeyRenameKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


