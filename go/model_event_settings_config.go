/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the EventSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventSettingsConfig{}

// EventSettingsConfig CrowdStrike EDR event stream settings
type EventSettingsConfig struct {
	// The application name monad uses to connect to the CrowdStrike data stream. It's important that this name is unique to avoid conflicts with other applications connecting to the same stream. You're advised to use a unique identifier for this application. For example, if you have 2 stream input connections they should not both be named 'monad'.
	AppName *string `json:"app_name,omitempty"`
	// Your cloud type for CrowdStrike. Ex: 'autodiscover', 'us-1', 'us-2', 'eu-1', 'us-gov-1'.
	Cloud *string `json:"cloud,omitempty"`
	// In environments where an entity (like an MSSP) manages security for multiple clients, each client is typically assigned a unique CID. This identifier allows the managing entity to access and operate within the specific customer's environment. This is crucial for scenarios where operational isolation between different clients' data and configurations is necessary.
	MemberCid *string `json:"member_cid,omitempty"`
}

// NewEventSettingsConfig instantiates a new EventSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventSettingsConfig() *EventSettingsConfig {
	this := EventSettingsConfig{}
	return &this
}

// NewEventSettingsConfigWithDefaults instantiates a new EventSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventSettingsConfigWithDefaults() *EventSettingsConfig {
	this := EventSettingsConfig{}
	return &this
}

// GetAppName returns the AppName field value if set, zero value otherwise.
func (o *EventSettingsConfig) GetAppName() string {
	if o == nil || IsNil(o.AppName) {
		var ret string
		return ret
	}
	return *o.AppName
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSettingsConfig) GetAppNameOk() (*string, bool) {
	if o == nil || IsNil(o.AppName) {
		return nil, false
	}
	return o.AppName, true
}

// HasAppName returns a boolean if a field has been set.
func (o *EventSettingsConfig) HasAppName() bool {
	if o != nil && !IsNil(o.AppName) {
		return true
	}

	return false
}

// SetAppName gets a reference to the given string and assigns it to the AppName field.
func (o *EventSettingsConfig) SetAppName(v string) {
	o.AppName = &v
}

// GetCloud returns the Cloud field value if set, zero value otherwise.
func (o *EventSettingsConfig) GetCloud() string {
	if o == nil || IsNil(o.Cloud) {
		var ret string
		return ret
	}
	return *o.Cloud
}

// GetCloudOk returns a tuple with the Cloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSettingsConfig) GetCloudOk() (*string, bool) {
	if o == nil || IsNil(o.Cloud) {
		return nil, false
	}
	return o.Cloud, true
}

// HasCloud returns a boolean if a field has been set.
func (o *EventSettingsConfig) HasCloud() bool {
	if o != nil && !IsNil(o.Cloud) {
		return true
	}

	return false
}

// SetCloud gets a reference to the given string and assigns it to the Cloud field.
func (o *EventSettingsConfig) SetCloud(v string) {
	o.Cloud = &v
}

// GetMemberCid returns the MemberCid field value if set, zero value otherwise.
func (o *EventSettingsConfig) GetMemberCid() string {
	if o == nil || IsNil(o.MemberCid) {
		var ret string
		return ret
	}
	return *o.MemberCid
}

// GetMemberCidOk returns a tuple with the MemberCid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventSettingsConfig) GetMemberCidOk() (*string, bool) {
	if o == nil || IsNil(o.MemberCid) {
		return nil, false
	}
	return o.MemberCid, true
}

// HasMemberCid returns a boolean if a field has been set.
func (o *EventSettingsConfig) HasMemberCid() bool {
	if o != nil && !IsNil(o.MemberCid) {
		return true
	}

	return false
}

// SetMemberCid gets a reference to the given string and assigns it to the MemberCid field.
func (o *EventSettingsConfig) SetMemberCid(v string) {
	o.MemberCid = &v
}

func (o EventSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppName) {
		toSerialize["app_name"] = o.AppName
	}
	if !IsNil(o.Cloud) {
		toSerialize["cloud"] = o.Cloud
	}
	if !IsNil(o.MemberCid) {
		toSerialize["member_cid"] = o.MemberCid
	}
	return toSerialize, nil
}

type NullableEventSettingsConfig struct {
	value *EventSettingsConfig
	isSet bool
}

func (v NullableEventSettingsConfig) Get() *EventSettingsConfig {
	return v.value
}

func (v *NullableEventSettingsConfig) Set(val *EventSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEventSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEventSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventSettingsConfig(val *EventSettingsConfig) *NullableEventSettingsConfig {
	return &NullableEventSettingsConfig{value: val, isSet: true}
}

func (v NullableEventSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


