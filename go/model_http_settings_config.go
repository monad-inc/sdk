/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the HttpSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HttpSettingsConfig{}

// HttpSettingsConfig HTTP Output Settings
type HttpSettingsConfig struct {
	// The full URL of the HTTP endpoint to send data to. Must include the scheme (http or https).
	Endpoint *string `json:"endpoint,omitempty"`
	// Non secret headers
	Headers map[string]string `json:"headers,omitempty"`
	// The maximum size in KB for a single batch of data to be sent in one request. This does not effect the single payload structure.
	MaxBatchDataSize *int32 `json:"max_batch_data_size,omitempty"`
	// The maximum number of records to include in a single batch. For single payload structure, this is automatically set to 1. For other payload structures, this determines the maximum number of records sent in a single request.
	MaxBatchRecordCount *int32 `json:"max_batch_record_count,omitempty"`
	// The HTTP method to use for requests (GET, POST, PUT, PATCH, or DELETE).
	Method *string `json:"method,omitempty"`
	// Determines how the payload is structured. 'single' sends each record as a separate request, 'array' sends multiple records as an array, 'wrapped' sends multiple records within a wrapper object.
	PayloadStructure *string `json:"payload_structure,omitempty"`
	// Maximum number of requests per second to send to the endpoint.
	RateLimit *int32 `json:"rate_limit,omitempty"`
	// Skip TLS verification.
	TlsSkipVerify *bool `json:"tls_skip_verify,omitempty"`
	// The key to use for wrapping the payload when PayloadStructure is set to 'wrapped'.
	WrapperKey *string `json:"wrapper_key,omitempty"`
}

// NewHttpSettingsConfig instantiates a new HttpSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHttpSettingsConfig() *HttpSettingsConfig {
	this := HttpSettingsConfig{}
	return &this
}

// NewHttpSettingsConfigWithDefaults instantiates a new HttpSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHttpSettingsConfigWithDefaults() *HttpSettingsConfig {
	this := HttpSettingsConfig{}
	return &this
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *HttpSettingsConfig) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpSettingsConfig) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *HttpSettingsConfig) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *HttpSettingsConfig) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetHeaders returns the Headers field value if set, zero value otherwise.
func (o *HttpSettingsConfig) GetHeaders() map[string]string {
	if o == nil || IsNil(o.Headers) {
		var ret map[string]string
		return ret
	}
	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpSettingsConfig) GetHeadersOk() (map[string]string, bool) {
	if o == nil || IsNil(o.Headers) {
		return map[string]string{}, false
	}
	return o.Headers, true
}

// HasHeaders returns a boolean if a field has been set.
func (o *HttpSettingsConfig) HasHeaders() bool {
	if o != nil && !IsNil(o.Headers) {
		return true
	}

	return false
}

// SetHeaders gets a reference to the given map[string]string and assigns it to the Headers field.
func (o *HttpSettingsConfig) SetHeaders(v map[string]string) {
	o.Headers = v
}

// GetMaxBatchDataSize returns the MaxBatchDataSize field value if set, zero value otherwise.
func (o *HttpSettingsConfig) GetMaxBatchDataSize() int32 {
	if o == nil || IsNil(o.MaxBatchDataSize) {
		var ret int32
		return ret
	}
	return *o.MaxBatchDataSize
}

// GetMaxBatchDataSizeOk returns a tuple with the MaxBatchDataSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpSettingsConfig) GetMaxBatchDataSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxBatchDataSize) {
		return nil, false
	}
	return o.MaxBatchDataSize, true
}

// HasMaxBatchDataSize returns a boolean if a field has been set.
func (o *HttpSettingsConfig) HasMaxBatchDataSize() bool {
	if o != nil && !IsNil(o.MaxBatchDataSize) {
		return true
	}

	return false
}

// SetMaxBatchDataSize gets a reference to the given int32 and assigns it to the MaxBatchDataSize field.
func (o *HttpSettingsConfig) SetMaxBatchDataSize(v int32) {
	o.MaxBatchDataSize = &v
}

// GetMaxBatchRecordCount returns the MaxBatchRecordCount field value if set, zero value otherwise.
func (o *HttpSettingsConfig) GetMaxBatchRecordCount() int32 {
	if o == nil || IsNil(o.MaxBatchRecordCount) {
		var ret int32
		return ret
	}
	return *o.MaxBatchRecordCount
}

// GetMaxBatchRecordCountOk returns a tuple with the MaxBatchRecordCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpSettingsConfig) GetMaxBatchRecordCountOk() (*int32, bool) {
	if o == nil || IsNil(o.MaxBatchRecordCount) {
		return nil, false
	}
	return o.MaxBatchRecordCount, true
}

// HasMaxBatchRecordCount returns a boolean if a field has been set.
func (o *HttpSettingsConfig) HasMaxBatchRecordCount() bool {
	if o != nil && !IsNil(o.MaxBatchRecordCount) {
		return true
	}

	return false
}

// SetMaxBatchRecordCount gets a reference to the given int32 and assigns it to the MaxBatchRecordCount field.
func (o *HttpSettingsConfig) SetMaxBatchRecordCount(v int32) {
	o.MaxBatchRecordCount = &v
}

// GetMethod returns the Method field value if set, zero value otherwise.
func (o *HttpSettingsConfig) GetMethod() string {
	if o == nil || IsNil(o.Method) {
		var ret string
		return ret
	}
	return *o.Method
}

// GetMethodOk returns a tuple with the Method field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpSettingsConfig) GetMethodOk() (*string, bool) {
	if o == nil || IsNil(o.Method) {
		return nil, false
	}
	return o.Method, true
}

// HasMethod returns a boolean if a field has been set.
func (o *HttpSettingsConfig) HasMethod() bool {
	if o != nil && !IsNil(o.Method) {
		return true
	}

	return false
}

// SetMethod gets a reference to the given string and assigns it to the Method field.
func (o *HttpSettingsConfig) SetMethod(v string) {
	o.Method = &v
}

// GetPayloadStructure returns the PayloadStructure field value if set, zero value otherwise.
func (o *HttpSettingsConfig) GetPayloadStructure() string {
	if o == nil || IsNil(o.PayloadStructure) {
		var ret string
		return ret
	}
	return *o.PayloadStructure
}

// GetPayloadStructureOk returns a tuple with the PayloadStructure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpSettingsConfig) GetPayloadStructureOk() (*string, bool) {
	if o == nil || IsNil(o.PayloadStructure) {
		return nil, false
	}
	return o.PayloadStructure, true
}

// HasPayloadStructure returns a boolean if a field has been set.
func (o *HttpSettingsConfig) HasPayloadStructure() bool {
	if o != nil && !IsNil(o.PayloadStructure) {
		return true
	}

	return false
}

// SetPayloadStructure gets a reference to the given string and assigns it to the PayloadStructure field.
func (o *HttpSettingsConfig) SetPayloadStructure(v string) {
	o.PayloadStructure = &v
}

// GetRateLimit returns the RateLimit field value if set, zero value otherwise.
func (o *HttpSettingsConfig) GetRateLimit() int32 {
	if o == nil || IsNil(o.RateLimit) {
		var ret int32
		return ret
	}
	return *o.RateLimit
}

// GetRateLimitOk returns a tuple with the RateLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpSettingsConfig) GetRateLimitOk() (*int32, bool) {
	if o == nil || IsNil(o.RateLimit) {
		return nil, false
	}
	return o.RateLimit, true
}

// HasRateLimit returns a boolean if a field has been set.
func (o *HttpSettingsConfig) HasRateLimit() bool {
	if o != nil && !IsNil(o.RateLimit) {
		return true
	}

	return false
}

// SetRateLimit gets a reference to the given int32 and assigns it to the RateLimit field.
func (o *HttpSettingsConfig) SetRateLimit(v int32) {
	o.RateLimit = &v
}

// GetTlsSkipVerify returns the TlsSkipVerify field value if set, zero value otherwise.
func (o *HttpSettingsConfig) GetTlsSkipVerify() bool {
	if o == nil || IsNil(o.TlsSkipVerify) {
		var ret bool
		return ret
	}
	return *o.TlsSkipVerify
}

// GetTlsSkipVerifyOk returns a tuple with the TlsSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpSettingsConfig) GetTlsSkipVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.TlsSkipVerify) {
		return nil, false
	}
	return o.TlsSkipVerify, true
}

// HasTlsSkipVerify returns a boolean if a field has been set.
func (o *HttpSettingsConfig) HasTlsSkipVerify() bool {
	if o != nil && !IsNil(o.TlsSkipVerify) {
		return true
	}

	return false
}

// SetTlsSkipVerify gets a reference to the given bool and assigns it to the TlsSkipVerify field.
func (o *HttpSettingsConfig) SetTlsSkipVerify(v bool) {
	o.TlsSkipVerify = &v
}

// GetWrapperKey returns the WrapperKey field value if set, zero value otherwise.
func (o *HttpSettingsConfig) GetWrapperKey() string {
	if o == nil || IsNil(o.WrapperKey) {
		var ret string
		return ret
	}
	return *o.WrapperKey
}

// GetWrapperKeyOk returns a tuple with the WrapperKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HttpSettingsConfig) GetWrapperKeyOk() (*string, bool) {
	if o == nil || IsNil(o.WrapperKey) {
		return nil, false
	}
	return o.WrapperKey, true
}

// HasWrapperKey returns a boolean if a field has been set.
func (o *HttpSettingsConfig) HasWrapperKey() bool {
	if o != nil && !IsNil(o.WrapperKey) {
		return true
	}

	return false
}

// SetWrapperKey gets a reference to the given string and assigns it to the WrapperKey field.
func (o *HttpSettingsConfig) SetWrapperKey(v string) {
	o.WrapperKey = &v
}

func (o HttpSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HttpSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.Headers) {
		toSerialize["headers"] = o.Headers
	}
	if !IsNil(o.MaxBatchDataSize) {
		toSerialize["max_batch_data_size"] = o.MaxBatchDataSize
	}
	if !IsNil(o.MaxBatchRecordCount) {
		toSerialize["max_batch_record_count"] = o.MaxBatchRecordCount
	}
	if !IsNil(o.Method) {
		toSerialize["method"] = o.Method
	}
	if !IsNil(o.PayloadStructure) {
		toSerialize["payload_structure"] = o.PayloadStructure
	}
	if !IsNil(o.RateLimit) {
		toSerialize["rate_limit"] = o.RateLimit
	}
	if !IsNil(o.TlsSkipVerify) {
		toSerialize["tls_skip_verify"] = o.TlsSkipVerify
	}
	if !IsNil(o.WrapperKey) {
		toSerialize["wrapper_key"] = o.WrapperKey
	}
	return toSerialize, nil
}

type NullableHttpSettingsConfig struct {
	value *HttpSettingsConfig
	isSet bool
}

func (v NullableHttpSettingsConfig) Get() *HttpSettingsConfig {
	return v.value
}

func (v *NullableHttpSettingsConfig) Set(val *HttpSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHttpSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHttpSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHttpSettingsConfig(val *HttpSettingsConfig) *NullableHttpSettingsConfig {
	return &NullableHttpSettingsConfig{value: val, isSet: true}
}

func (v NullableHttpSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHttpSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


