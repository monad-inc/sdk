/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the VercelUserEventsSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VercelUserEventsSettingsConfig{}

// VercelUserEventsSettingsConfig Vercel User Events settings
type VercelUserEventsSettingsConfig struct {
	LookbackHours *int32 `json:"lookback_hours,omitempty"`
	UseSyntheticData *bool `json:"use_synthetic_data,omitempty"`
	WithPayload *bool `json:"with_payload,omitempty"`
}

// NewVercelUserEventsSettingsConfig instantiates a new VercelUserEventsSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVercelUserEventsSettingsConfig() *VercelUserEventsSettingsConfig {
	this := VercelUserEventsSettingsConfig{}
	return &this
}

// NewVercelUserEventsSettingsConfigWithDefaults instantiates a new VercelUserEventsSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVercelUserEventsSettingsConfigWithDefaults() *VercelUserEventsSettingsConfig {
	this := VercelUserEventsSettingsConfig{}
	return &this
}

// GetLookbackHours returns the LookbackHours field value if set, zero value otherwise.
func (o *VercelUserEventsSettingsConfig) GetLookbackHours() int32 {
	if o == nil || IsNil(o.LookbackHours) {
		var ret int32
		return ret
	}
	return *o.LookbackHours
}

// GetLookbackHoursOk returns a tuple with the LookbackHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VercelUserEventsSettingsConfig) GetLookbackHoursOk() (*int32, bool) {
	if o == nil || IsNil(o.LookbackHours) {
		return nil, false
	}
	return o.LookbackHours, true
}

// HasLookbackHours returns a boolean if a field has been set.
func (o *VercelUserEventsSettingsConfig) HasLookbackHours() bool {
	if o != nil && !IsNil(o.LookbackHours) {
		return true
	}

	return false
}

// SetLookbackHours gets a reference to the given int32 and assigns it to the LookbackHours field.
func (o *VercelUserEventsSettingsConfig) SetLookbackHours(v int32) {
	o.LookbackHours = &v
}

// GetUseSyntheticData returns the UseSyntheticData field value if set, zero value otherwise.
func (o *VercelUserEventsSettingsConfig) GetUseSyntheticData() bool {
	if o == nil || IsNil(o.UseSyntheticData) {
		var ret bool
		return ret
	}
	return *o.UseSyntheticData
}

// GetUseSyntheticDataOk returns a tuple with the UseSyntheticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VercelUserEventsSettingsConfig) GetUseSyntheticDataOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyntheticData) {
		return nil, false
	}
	return o.UseSyntheticData, true
}

// HasUseSyntheticData returns a boolean if a field has been set.
func (o *VercelUserEventsSettingsConfig) HasUseSyntheticData() bool {
	if o != nil && !IsNil(o.UseSyntheticData) {
		return true
	}

	return false
}

// SetUseSyntheticData gets a reference to the given bool and assigns it to the UseSyntheticData field.
func (o *VercelUserEventsSettingsConfig) SetUseSyntheticData(v bool) {
	o.UseSyntheticData = &v
}

// GetWithPayload returns the WithPayload field value if set, zero value otherwise.
func (o *VercelUserEventsSettingsConfig) GetWithPayload() bool {
	if o == nil || IsNil(o.WithPayload) {
		var ret bool
		return ret
	}
	return *o.WithPayload
}

// GetWithPayloadOk returns a tuple with the WithPayload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VercelUserEventsSettingsConfig) GetWithPayloadOk() (*bool, bool) {
	if o == nil || IsNil(o.WithPayload) {
		return nil, false
	}
	return o.WithPayload, true
}

// HasWithPayload returns a boolean if a field has been set.
func (o *VercelUserEventsSettingsConfig) HasWithPayload() bool {
	if o != nil && !IsNil(o.WithPayload) {
		return true
	}

	return false
}

// SetWithPayload gets a reference to the given bool and assigns it to the WithPayload field.
func (o *VercelUserEventsSettingsConfig) SetWithPayload(v bool) {
	o.WithPayload = &v
}

func (o VercelUserEventsSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VercelUserEventsSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LookbackHours) {
		toSerialize["lookback_hours"] = o.LookbackHours
	}
	if !IsNil(o.UseSyntheticData) {
		toSerialize["use_synthetic_data"] = o.UseSyntheticData
	}
	if !IsNil(o.WithPayload) {
		toSerialize["with_payload"] = o.WithPayload
	}
	return toSerialize, nil
}

type NullableVercelUserEventsSettingsConfig struct {
	value *VercelUserEventsSettingsConfig
	isSet bool
}

func (v NullableVercelUserEventsSettingsConfig) Get() *VercelUserEventsSettingsConfig {
	return v.value
}

func (v *NullableVercelUserEventsSettingsConfig) Set(val *VercelUserEventsSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVercelUserEventsSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVercelUserEventsSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVercelUserEventsSettingsConfig(val *VercelUserEventsSettingsConfig) *NullableVercelUserEventsSettingsConfig {
	return &NullableVercelUserEventsSettingsConfig{value: val, isSet: true}
}

func (v NullableVercelUserEventsSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVercelUserEventsSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


