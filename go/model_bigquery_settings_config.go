/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the BigquerySettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BigquerySettingsConfig{}

// BigquerySettingsConfig BigQuery Output Settings
type BigquerySettingsConfig struct {
	// The name of the BigQuery dataset where the table resides
	Dataset *string `json:"dataset,omitempty"`
	// The Google Cloud Project ID where the BigQuery instance is located
	ProjectId *string `json:"project_id,omitempty"`
	// The name of the table where the data will be written
	Table *string `json:"table,omitempty"`
}

// NewBigquerySettingsConfig instantiates a new BigquerySettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBigquerySettingsConfig() *BigquerySettingsConfig {
	this := BigquerySettingsConfig{}
	return &this
}

// NewBigquerySettingsConfigWithDefaults instantiates a new BigquerySettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBigquerySettingsConfigWithDefaults() *BigquerySettingsConfig {
	this := BigquerySettingsConfig{}
	return &this
}

// GetDataset returns the Dataset field value if set, zero value otherwise.
func (o *BigquerySettingsConfig) GetDataset() string {
	if o == nil || IsNil(o.Dataset) {
		var ret string
		return ret
	}
	return *o.Dataset
}

// GetDatasetOk returns a tuple with the Dataset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigquerySettingsConfig) GetDatasetOk() (*string, bool) {
	if o == nil || IsNil(o.Dataset) {
		return nil, false
	}
	return o.Dataset, true
}

// HasDataset returns a boolean if a field has been set.
func (o *BigquerySettingsConfig) HasDataset() bool {
	if o != nil && !IsNil(o.Dataset) {
		return true
	}

	return false
}

// SetDataset gets a reference to the given string and assigns it to the Dataset field.
func (o *BigquerySettingsConfig) SetDataset(v string) {
	o.Dataset = &v
}

// GetProjectId returns the ProjectId field value if set, zero value otherwise.
func (o *BigquerySettingsConfig) GetProjectId() string {
	if o == nil || IsNil(o.ProjectId) {
		var ret string
		return ret
	}
	return *o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigquerySettingsConfig) GetProjectIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProjectId) {
		return nil, false
	}
	return o.ProjectId, true
}

// HasProjectId returns a boolean if a field has been set.
func (o *BigquerySettingsConfig) HasProjectId() bool {
	if o != nil && !IsNil(o.ProjectId) {
		return true
	}

	return false
}

// SetProjectId gets a reference to the given string and assigns it to the ProjectId field.
func (o *BigquerySettingsConfig) SetProjectId(v string) {
	o.ProjectId = &v
}

// GetTable returns the Table field value if set, zero value otherwise.
func (o *BigquerySettingsConfig) GetTable() string {
	if o == nil || IsNil(o.Table) {
		var ret string
		return ret
	}
	return *o.Table
}

// GetTableOk returns a tuple with the Table field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BigquerySettingsConfig) GetTableOk() (*string, bool) {
	if o == nil || IsNil(o.Table) {
		return nil, false
	}
	return o.Table, true
}

// HasTable returns a boolean if a field has been set.
func (o *BigquerySettingsConfig) HasTable() bool {
	if o != nil && !IsNil(o.Table) {
		return true
	}

	return false
}

// SetTable gets a reference to the given string and assigns it to the Table field.
func (o *BigquerySettingsConfig) SetTable(v string) {
	o.Table = &v
}

func (o BigquerySettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BigquerySettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Dataset) {
		toSerialize["dataset"] = o.Dataset
	}
	if !IsNil(o.ProjectId) {
		toSerialize["project_id"] = o.ProjectId
	}
	if !IsNil(o.Table) {
		toSerialize["table"] = o.Table
	}
	return toSerialize, nil
}

type NullableBigquerySettingsConfig struct {
	value *BigquerySettingsConfig
	isSet bool
}

func (v NullableBigquerySettingsConfig) Get() *BigquerySettingsConfig {
	return v.value
}

func (v *NullableBigquerySettingsConfig) Set(val *BigquerySettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBigquerySettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBigquerySettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBigquerySettingsConfig(val *BigquerySettingsConfig) *NullableBigquerySettingsConfig {
	return &NullableBigquerySettingsConfig{value: val, isSet: true}
}

func (v NullableBigquerySettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBigquerySettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


