/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue{}

// CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue struct for CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
type CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue struct {
	// The key to add to the record
	Key *string `json:"key,omitempty"`
	// The key to watch for
	KeyToWatch *string `json:"key_to_watch,omitempty"`
	Value interface{} `json:"value,omitempty"`
	ValueToWatch interface{} `json:"value_to_watch,omitempty"`
}

// NewCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue instantiates a new CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue() *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue {
	this := CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue{}
	return &this
}

// NewCreateKeyValueIfKeyValueCreateKeyValueIfKeyValueWithDefaults instantiates a new CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateKeyValueIfKeyValueCreateKeyValueIfKeyValueWithDefaults() *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue {
	this := CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) SetKey(v string) {
	o.Key = &v
}

// GetKeyToWatch returns the KeyToWatch field value if set, zero value otherwise.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) GetKeyToWatch() string {
	if o == nil || IsNil(o.KeyToWatch) {
		var ret string
		return ret
	}
	return *o.KeyToWatch
}

// GetKeyToWatchOk returns a tuple with the KeyToWatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) GetKeyToWatchOk() (*string, bool) {
	if o == nil || IsNil(o.KeyToWatch) {
		return nil, false
	}
	return o.KeyToWatch, true
}

// HasKeyToWatch returns a boolean if a field has been set.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) HasKeyToWatch() bool {
	if o != nil && !IsNil(o.KeyToWatch) {
		return true
	}

	return false
}

// SetKeyToWatch gets a reference to the given string and assigns it to the KeyToWatch field.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) SetKeyToWatch(v string) {
	o.KeyToWatch = &v
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) GetValue() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) GetValueOk() (*interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return &o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given interface{} and assigns it to the Value field.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) SetValue(v interface{}) {
	o.Value = v
}

// GetValueToWatch returns the ValueToWatch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) GetValueToWatch() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.ValueToWatch
}

// GetValueToWatchOk returns a tuple with the ValueToWatch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) GetValueToWatchOk() (*interface{}, bool) {
	if o == nil || IsNil(o.ValueToWatch) {
		return nil, false
	}
	return &o.ValueToWatch, true
}

// HasValueToWatch returns a boolean if a field has been set.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) HasValueToWatch() bool {
	if o != nil && !IsNil(o.ValueToWatch) {
		return true
	}

	return false
}

// SetValueToWatch gets a reference to the given interface{} and assigns it to the ValueToWatch field.
func (o *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) SetValueToWatch(v interface{}) {
	o.ValueToWatch = v
}

func (o CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.KeyToWatch) {
		toSerialize["key_to_watch"] = o.KeyToWatch
	}
	if o.Value != nil {
		toSerialize["value"] = o.Value
	}
	if o.ValueToWatch != nil {
		toSerialize["value_to_watch"] = o.ValueToWatch
	}
	return toSerialize, nil
}

type NullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue struct {
	value *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
	isSet bool
}

func (v NullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) Get() *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue {
	return v.value
}

func (v *NullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) Set(val *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue(val *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) *NullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue {
	return &NullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue{value: val, isSet: true}
}

func (v NullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


