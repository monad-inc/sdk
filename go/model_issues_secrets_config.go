/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IssuesSecretsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IssuesSecretsConfig{}

// IssuesSecretsConfig Wiz Issues secrets configuration
type IssuesSecretsConfig struct {
	ClientId ModelsSecret `json:"client_id"`
	ClientSecret ModelsSecret `json:"client_secret"`
}

type _IssuesSecretsConfig IssuesSecretsConfig

// NewIssuesSecretsConfig instantiates a new IssuesSecretsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIssuesSecretsConfig(clientId ModelsSecret, clientSecret ModelsSecret) *IssuesSecretsConfig {
	this := IssuesSecretsConfig{}
	this.ClientId = clientId
	this.ClientSecret = clientSecret
	return &this
}

// NewIssuesSecretsConfigWithDefaults instantiates a new IssuesSecretsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIssuesSecretsConfigWithDefaults() *IssuesSecretsConfig {
	this := IssuesSecretsConfig{}
	return &this
}

// GetClientId returns the ClientId field value
func (o *IssuesSecretsConfig) GetClientId() ModelsSecret {
	if o == nil {
		var ret ModelsSecret
		return ret
	}

	return o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value
// and a boolean to check if the value has been set.
func (o *IssuesSecretsConfig) GetClientIdOk() (*ModelsSecret, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientId, true
}

// SetClientId sets field value
func (o *IssuesSecretsConfig) SetClientId(v ModelsSecret) {
	o.ClientId = v
}

// GetClientSecret returns the ClientSecret field value
func (o *IssuesSecretsConfig) GetClientSecret() ModelsSecret {
	if o == nil {
		var ret ModelsSecret
		return ret
	}

	return o.ClientSecret
}

// GetClientSecretOk returns a tuple with the ClientSecret field value
// and a boolean to check if the value has been set.
func (o *IssuesSecretsConfig) GetClientSecretOk() (*ModelsSecret, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientSecret, true
}

// SetClientSecret sets field value
func (o *IssuesSecretsConfig) SetClientSecret(v ModelsSecret) {
	o.ClientSecret = v
}

func (o IssuesSecretsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IssuesSecretsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["client_id"] = o.ClientId
	toSerialize["client_secret"] = o.ClientSecret
	return toSerialize, nil
}

func (o *IssuesSecretsConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"client_id",
		"client_secret",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIssuesSecretsConfig := _IssuesSecretsConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIssuesSecretsConfig)

	if err != nil {
		return err
	}

	*o = IssuesSecretsConfig(varIssuesSecretsConfig)

	return err
}

type NullableIssuesSecretsConfig struct {
	value *IssuesSecretsConfig
	isSet bool
}

func (v NullableIssuesSecretsConfig) Get() *IssuesSecretsConfig {
	return v.value
}

func (v *NullableIssuesSecretsConfig) Set(val *IssuesSecretsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIssuesSecretsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIssuesSecretsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIssuesSecretsConfig(val *IssuesSecretsConfig) *NullableIssuesSecretsConfig {
	return &NullableIssuesSecretsConfig{value: val, isSet: true}
}

func (v NullableIssuesSecretsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIssuesSecretsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


