/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsTransformConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTransformConfig{}

// ModelsTransformConfig struct for ModelsTransformConfig
type ModelsTransformConfig struct {
	Operations []ModelsTransformOperation `json:"operations,omitempty"`
}

// NewModelsTransformConfig instantiates a new ModelsTransformConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTransformConfig() *ModelsTransformConfig {
	this := ModelsTransformConfig{}
	return &this
}

// NewModelsTransformConfigWithDefaults instantiates a new ModelsTransformConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTransformConfigWithDefaults() *ModelsTransformConfig {
	this := ModelsTransformConfig{}
	return &this
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *ModelsTransformConfig) GetOperations() []ModelsTransformOperation {
	if o == nil || IsNil(o.Operations) {
		var ret []ModelsTransformOperation
		return ret
	}
	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransformConfig) GetOperationsOk() ([]ModelsTransformOperation, bool) {
	if o == nil || IsNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *ModelsTransformConfig) HasOperations() bool {
	if o != nil && !IsNil(o.Operations) {
		return true
	}

	return false
}

// SetOperations gets a reference to the given []ModelsTransformOperation and assigns it to the Operations field.
func (o *ModelsTransformConfig) SetOperations(v []ModelsTransformOperation) {
	o.Operations = v
}

func (o ModelsTransformConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTransformConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Operations) {
		toSerialize["operations"] = o.Operations
	}
	return toSerialize, nil
}

type NullableModelsTransformConfig struct {
	value *ModelsTransformConfig
	isSet bool
}

func (v NullableModelsTransformConfig) Get() *ModelsTransformConfig {
	return v.value
}

func (v *NullableModelsTransformConfig) Set(val *ModelsTransformConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTransformConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTransformConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTransformConfig(val *ModelsTransformConfig) *NullableModelsTransformConfig {
	return &NullableModelsTransformConfig{value: val, isSet: true}
}

func (v NullableModelsTransformConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTransformConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


