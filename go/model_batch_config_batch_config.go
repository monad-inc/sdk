/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the BatchConfigBatchConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatchConfigBatchConfig{}

// BatchConfigBatchConfig controls when a batch of records is sent by limiting the number of records, total size, and maximum time elapsed
type BatchConfigBatchConfig struct {
	BatchDataSize *int32 `json:"batch_data_size,omitempty"`
	BatchRecordCount *int32 `json:"batch_record_count,omitempty"`
	PublishRate *int32 `json:"publish_rate,omitempty"`
}

// NewBatchConfigBatchConfig instantiates a new BatchConfigBatchConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatchConfigBatchConfig() *BatchConfigBatchConfig {
	this := BatchConfigBatchConfig{}
	return &this
}

// NewBatchConfigBatchConfigWithDefaults instantiates a new BatchConfigBatchConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatchConfigBatchConfigWithDefaults() *BatchConfigBatchConfig {
	this := BatchConfigBatchConfig{}
	return &this
}

// GetBatchDataSize returns the BatchDataSize field value if set, zero value otherwise.
func (o *BatchConfigBatchConfig) GetBatchDataSize() int32 {
	if o == nil || IsNil(o.BatchDataSize) {
		var ret int32
		return ret
	}
	return *o.BatchDataSize
}

// GetBatchDataSizeOk returns a tuple with the BatchDataSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchConfigBatchConfig) GetBatchDataSizeOk() (*int32, bool) {
	if o == nil || IsNil(o.BatchDataSize) {
		return nil, false
	}
	return o.BatchDataSize, true
}

// HasBatchDataSize returns a boolean if a field has been set.
func (o *BatchConfigBatchConfig) HasBatchDataSize() bool {
	if o != nil && !IsNil(o.BatchDataSize) {
		return true
	}

	return false
}

// SetBatchDataSize gets a reference to the given int32 and assigns it to the BatchDataSize field.
func (o *BatchConfigBatchConfig) SetBatchDataSize(v int32) {
	o.BatchDataSize = &v
}

// GetBatchRecordCount returns the BatchRecordCount field value if set, zero value otherwise.
func (o *BatchConfigBatchConfig) GetBatchRecordCount() int32 {
	if o == nil || IsNil(o.BatchRecordCount) {
		var ret int32
		return ret
	}
	return *o.BatchRecordCount
}

// GetBatchRecordCountOk returns a tuple with the BatchRecordCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchConfigBatchConfig) GetBatchRecordCountOk() (*int32, bool) {
	if o == nil || IsNil(o.BatchRecordCount) {
		return nil, false
	}
	return o.BatchRecordCount, true
}

// HasBatchRecordCount returns a boolean if a field has been set.
func (o *BatchConfigBatchConfig) HasBatchRecordCount() bool {
	if o != nil && !IsNil(o.BatchRecordCount) {
		return true
	}

	return false
}

// SetBatchRecordCount gets a reference to the given int32 and assigns it to the BatchRecordCount field.
func (o *BatchConfigBatchConfig) SetBatchRecordCount(v int32) {
	o.BatchRecordCount = &v
}

// GetPublishRate returns the PublishRate field value if set, zero value otherwise.
func (o *BatchConfigBatchConfig) GetPublishRate() int32 {
	if o == nil || IsNil(o.PublishRate) {
		var ret int32
		return ret
	}
	return *o.PublishRate
}

// GetPublishRateOk returns a tuple with the PublishRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatchConfigBatchConfig) GetPublishRateOk() (*int32, bool) {
	if o == nil || IsNil(o.PublishRate) {
		return nil, false
	}
	return o.PublishRate, true
}

// HasPublishRate returns a boolean if a field has been set.
func (o *BatchConfigBatchConfig) HasPublishRate() bool {
	if o != nil && !IsNil(o.PublishRate) {
		return true
	}

	return false
}

// SetPublishRate gets a reference to the given int32 and assigns it to the PublishRate field.
func (o *BatchConfigBatchConfig) SetPublishRate(v int32) {
	o.PublishRate = &v
}

func (o BatchConfigBatchConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatchConfigBatchConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchDataSize) {
		toSerialize["batch_data_size"] = o.BatchDataSize
	}
	if !IsNil(o.BatchRecordCount) {
		toSerialize["batch_record_count"] = o.BatchRecordCount
	}
	if !IsNil(o.PublishRate) {
		toSerialize["publish_rate"] = o.PublishRate
	}
	return toSerialize, nil
}

type NullableBatchConfigBatchConfig struct {
	value *BatchConfigBatchConfig
	isSet bool
}

func (v NullableBatchConfigBatchConfig) Get() *BatchConfigBatchConfig {
	return v.value
}

func (v *NullableBatchConfigBatchConfig) Set(val *BatchConfigBatchConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableBatchConfigBatchConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableBatchConfigBatchConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatchConfigBatchConfig(val *BatchConfigBatchConfig) *NullableBatchConfigBatchConfig {
	return &NullableBatchConfigBatchConfig{value: val, isSet: true}
}

func (v NullableBatchConfigBatchConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatchConfigBatchConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


