/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DelimitedDelimiterFormatter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DelimitedDelimiterFormatter{}

// DelimitedDelimiterFormatter struct for DelimitedDelimiterFormatter
type DelimitedDelimiterFormatter struct {
	Delimiter string `json:"delimiter"`
	Headers []string `json:"headers"`
}

type _DelimitedDelimiterFormatter DelimitedDelimiterFormatter

// NewDelimitedDelimiterFormatter instantiates a new DelimitedDelimiterFormatter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDelimitedDelimiterFormatter(delimiter string, headers []string) *DelimitedDelimiterFormatter {
	this := DelimitedDelimiterFormatter{}
	this.Delimiter = delimiter
	this.Headers = headers
	return &this
}

// NewDelimitedDelimiterFormatterWithDefaults instantiates a new DelimitedDelimiterFormatter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDelimitedDelimiterFormatterWithDefaults() *DelimitedDelimiterFormatter {
	this := DelimitedDelimiterFormatter{}
	return &this
}

// GetDelimiter returns the Delimiter field value
func (o *DelimitedDelimiterFormatter) GetDelimiter() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Delimiter
}

// GetDelimiterOk returns a tuple with the Delimiter field value
// and a boolean to check if the value has been set.
func (o *DelimitedDelimiterFormatter) GetDelimiterOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delimiter, true
}

// SetDelimiter sets field value
func (o *DelimitedDelimiterFormatter) SetDelimiter(v string) {
	o.Delimiter = v
}

// GetHeaders returns the Headers field value
func (o *DelimitedDelimiterFormatter) GetHeaders() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Headers
}

// GetHeadersOk returns a tuple with the Headers field value
// and a boolean to check if the value has been set.
func (o *DelimitedDelimiterFormatter) GetHeadersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headers, true
}

// SetHeaders sets field value
func (o *DelimitedDelimiterFormatter) SetHeaders(v []string) {
	o.Headers = v
}

func (o DelimitedDelimiterFormatter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DelimitedDelimiterFormatter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["delimiter"] = o.Delimiter
	toSerialize["headers"] = o.Headers
	return toSerialize, nil
}

func (o *DelimitedDelimiterFormatter) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"delimiter",
		"headers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDelimitedDelimiterFormatter := _DelimitedDelimiterFormatter{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDelimitedDelimiterFormatter)

	if err != nil {
		return err
	}

	*o = DelimitedDelimiterFormatter(varDelimitedDelimiterFormatter)

	return err
}

type NullableDelimitedDelimiterFormatter struct {
	value *DelimitedDelimiterFormatter
	isSet bool
}

func (v NullableDelimitedDelimiterFormatter) Get() *DelimitedDelimiterFormatter {
	return v.value
}

func (v *NullableDelimitedDelimiterFormatter) Set(val *DelimitedDelimiterFormatter) {
	v.value = val
	v.isSet = true
}

func (v NullableDelimitedDelimiterFormatter) IsSet() bool {
	return v.isSet
}

func (v *NullableDelimitedDelimiterFormatter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDelimitedDelimiterFormatter(val *DelimitedDelimiterFormatter) *NullableDelimitedDelimiterFormatter {
	return &NullableDelimitedDelimiterFormatter{value: val, isSet: true}
}

func (v NullableDelimitedDelimiterFormatter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDelimitedDelimiterFormatter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


