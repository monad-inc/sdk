/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the S3SettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3SettingsConfig{}

// S3SettingsConfig S3 Output Settings
type S3SettingsConfig struct {
	BatchConfig *BatchConfigBatchConfig `json:"batch_config,omitempty"`
	// The name of the S3 bucket where data will be stored
	Bucket *string `json:"bucket,omitempty"`
	// The compression method to be applied to the data before storing in S3
	Compression *string `json:"compression,omitempty"`
	FormatConfig *FormatterFormatConfig `json:"format_config,omitempty"`
	// Specifies the format for organizing data into partitions within your S3 bucket. This determines the directory structure and naming convention for stored objects, affecting data organization and query efficiency. Examples include Hive-style partitioning (e.g., 'year=2024/month=01/day=01') and simple date-based formats (e.g., '2024/01/01').
	PartitionFormat *string `json:"partition_format,omitempty"`
	// An optional prefix for S3 object keys to organize data within the bucket
	Prefix *string `json:"prefix,omitempty"`
	// The AWS region where the S3 bucket is located
	Region *string `json:"region,omitempty"`
	// The Amazon Resource Name (ARN) of the IAM role to assume which grants access to the S3 bucket
	RoleArn *string `json:"role_arn,omitempty"`
}

// NewS3SettingsConfig instantiates a new S3SettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3SettingsConfig() *S3SettingsConfig {
	this := S3SettingsConfig{}
	return &this
}

// NewS3SettingsConfigWithDefaults instantiates a new S3SettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3SettingsConfigWithDefaults() *S3SettingsConfig {
	this := S3SettingsConfig{}
	return &this
}

// GetBatchConfig returns the BatchConfig field value if set, zero value otherwise.
func (o *S3SettingsConfig) GetBatchConfig() BatchConfigBatchConfig {
	if o == nil || IsNil(o.BatchConfig) {
		var ret BatchConfigBatchConfig
		return ret
	}
	return *o.BatchConfig
}

// GetBatchConfigOk returns a tuple with the BatchConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SettingsConfig) GetBatchConfigOk() (*BatchConfigBatchConfig, bool) {
	if o == nil || IsNil(o.BatchConfig) {
		return nil, false
	}
	return o.BatchConfig, true
}

// HasBatchConfig returns a boolean if a field has been set.
func (o *S3SettingsConfig) HasBatchConfig() bool {
	if o != nil && !IsNil(o.BatchConfig) {
		return true
	}

	return false
}

// SetBatchConfig gets a reference to the given BatchConfigBatchConfig and assigns it to the BatchConfig field.
func (o *S3SettingsConfig) SetBatchConfig(v BatchConfigBatchConfig) {
	o.BatchConfig = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *S3SettingsConfig) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SettingsConfig) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *S3SettingsConfig) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *S3SettingsConfig) SetBucket(v string) {
	o.Bucket = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *S3SettingsConfig) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SettingsConfig) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *S3SettingsConfig) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *S3SettingsConfig) SetCompression(v string) {
	o.Compression = &v
}

// GetFormatConfig returns the FormatConfig field value if set, zero value otherwise.
func (o *S3SettingsConfig) GetFormatConfig() FormatterFormatConfig {
	if o == nil || IsNil(o.FormatConfig) {
		var ret FormatterFormatConfig
		return ret
	}
	return *o.FormatConfig
}

// GetFormatConfigOk returns a tuple with the FormatConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SettingsConfig) GetFormatConfigOk() (*FormatterFormatConfig, bool) {
	if o == nil || IsNil(o.FormatConfig) {
		return nil, false
	}
	return o.FormatConfig, true
}

// HasFormatConfig returns a boolean if a field has been set.
func (o *S3SettingsConfig) HasFormatConfig() bool {
	if o != nil && !IsNil(o.FormatConfig) {
		return true
	}

	return false
}

// SetFormatConfig gets a reference to the given FormatterFormatConfig and assigns it to the FormatConfig field.
func (o *S3SettingsConfig) SetFormatConfig(v FormatterFormatConfig) {
	o.FormatConfig = &v
}

// GetPartitionFormat returns the PartitionFormat field value if set, zero value otherwise.
func (o *S3SettingsConfig) GetPartitionFormat() string {
	if o == nil || IsNil(o.PartitionFormat) {
		var ret string
		return ret
	}
	return *o.PartitionFormat
}

// GetPartitionFormatOk returns a tuple with the PartitionFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SettingsConfig) GetPartitionFormatOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionFormat) {
		return nil, false
	}
	return o.PartitionFormat, true
}

// HasPartitionFormat returns a boolean if a field has been set.
func (o *S3SettingsConfig) HasPartitionFormat() bool {
	if o != nil && !IsNil(o.PartitionFormat) {
		return true
	}

	return false
}

// SetPartitionFormat gets a reference to the given string and assigns it to the PartitionFormat field.
func (o *S3SettingsConfig) SetPartitionFormat(v string) {
	o.PartitionFormat = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *S3SettingsConfig) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SettingsConfig) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *S3SettingsConfig) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *S3SettingsConfig) SetPrefix(v string) {
	o.Prefix = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *S3SettingsConfig) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SettingsConfig) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *S3SettingsConfig) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *S3SettingsConfig) SetRegion(v string) {
	o.Region = &v
}

// GetRoleArn returns the RoleArn field value if set, zero value otherwise.
func (o *S3SettingsConfig) GetRoleArn() string {
	if o == nil || IsNil(o.RoleArn) {
		var ret string
		return ret
	}
	return *o.RoleArn
}

// GetRoleArnOk returns a tuple with the RoleArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3SettingsConfig) GetRoleArnOk() (*string, bool) {
	if o == nil || IsNil(o.RoleArn) {
		return nil, false
	}
	return o.RoleArn, true
}

// HasRoleArn returns a boolean if a field has been set.
func (o *S3SettingsConfig) HasRoleArn() bool {
	if o != nil && !IsNil(o.RoleArn) {
		return true
	}

	return false
}

// SetRoleArn gets a reference to the given string and assigns it to the RoleArn field.
func (o *S3SettingsConfig) SetRoleArn(v string) {
	o.RoleArn = &v
}

func (o S3SettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3SettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchConfig) {
		toSerialize["batch_config"] = o.BatchConfig
	}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.FormatConfig) {
		toSerialize["format_config"] = o.FormatConfig
	}
	if !IsNil(o.PartitionFormat) {
		toSerialize["partition_format"] = o.PartitionFormat
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.RoleArn) {
		toSerialize["role_arn"] = o.RoleArn
	}
	return toSerialize, nil
}

type NullableS3SettingsConfig struct {
	value *S3SettingsConfig
	isSet bool
}

func (v NullableS3SettingsConfig) Get() *S3SettingsConfig {
	return v.value
}

func (v *NullableS3SettingsConfig) Set(val *S3SettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableS3SettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableS3SettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3SettingsConfig(val *S3SettingsConfig) *NullableS3SettingsConfig {
	return &NullableS3SettingsConfig{value: val, isSet: true}
}

func (v NullableS3SettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3SettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


