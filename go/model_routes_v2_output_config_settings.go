/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// RoutesV2OutputConfigSettings - struct for RoutesV2OutputConfigSettings
type RoutesV2OutputConfigSettings struct {
	CriblHttpSettingsConfig *CriblHttpSettingsConfig
	ElasticsearchSettingsConfig *ElasticsearchSettingsConfig
	HttpSettingsConfig *HttpSettingsConfig
	OpensearchSettingsConfig *OpensearchSettingsConfig
	S3SettingsConfig *S3SettingsConfig
	SentinelSettingsConfig *SentinelSettingsConfig
	SnowflakeSettingsConfig *SnowflakeSettingsConfig
	SplunkSettingsConfig *SplunkSettingsConfig
	SumologicSettingsConfig *SumologicSettingsConfig
}

// CriblHttpSettingsConfigAsRoutesV2OutputConfigSettings is a convenience function that returns CriblHttpSettingsConfig wrapped in RoutesV2OutputConfigSettings
func CriblHttpSettingsConfigAsRoutesV2OutputConfigSettings(v *CriblHttpSettingsConfig) RoutesV2OutputConfigSettings {
	return RoutesV2OutputConfigSettings{
		CriblHttpSettingsConfig: v,
	}
}

// ElasticsearchSettingsConfigAsRoutesV2OutputConfigSettings is a convenience function that returns ElasticsearchSettingsConfig wrapped in RoutesV2OutputConfigSettings
func ElasticsearchSettingsConfigAsRoutesV2OutputConfigSettings(v *ElasticsearchSettingsConfig) RoutesV2OutputConfigSettings {
	return RoutesV2OutputConfigSettings{
		ElasticsearchSettingsConfig: v,
	}
}

// HttpSettingsConfigAsRoutesV2OutputConfigSettings is a convenience function that returns HttpSettingsConfig wrapped in RoutesV2OutputConfigSettings
func HttpSettingsConfigAsRoutesV2OutputConfigSettings(v *HttpSettingsConfig) RoutesV2OutputConfigSettings {
	return RoutesV2OutputConfigSettings{
		HttpSettingsConfig: v,
	}
}

// OpensearchSettingsConfigAsRoutesV2OutputConfigSettings is a convenience function that returns OpensearchSettingsConfig wrapped in RoutesV2OutputConfigSettings
func OpensearchSettingsConfigAsRoutesV2OutputConfigSettings(v *OpensearchSettingsConfig) RoutesV2OutputConfigSettings {
	return RoutesV2OutputConfigSettings{
		OpensearchSettingsConfig: v,
	}
}

// S3SettingsConfigAsRoutesV2OutputConfigSettings is a convenience function that returns S3SettingsConfig wrapped in RoutesV2OutputConfigSettings
func S3SettingsConfigAsRoutesV2OutputConfigSettings(v *S3SettingsConfig) RoutesV2OutputConfigSettings {
	return RoutesV2OutputConfigSettings{
		S3SettingsConfig: v,
	}
}

// SentinelSettingsConfigAsRoutesV2OutputConfigSettings is a convenience function that returns SentinelSettingsConfig wrapped in RoutesV2OutputConfigSettings
func SentinelSettingsConfigAsRoutesV2OutputConfigSettings(v *SentinelSettingsConfig) RoutesV2OutputConfigSettings {
	return RoutesV2OutputConfigSettings{
		SentinelSettingsConfig: v,
	}
}

// SnowflakeSettingsConfigAsRoutesV2OutputConfigSettings is a convenience function that returns SnowflakeSettingsConfig wrapped in RoutesV2OutputConfigSettings
func SnowflakeSettingsConfigAsRoutesV2OutputConfigSettings(v *SnowflakeSettingsConfig) RoutesV2OutputConfigSettings {
	return RoutesV2OutputConfigSettings{
		SnowflakeSettingsConfig: v,
	}
}

// SplunkSettingsConfigAsRoutesV2OutputConfigSettings is a convenience function that returns SplunkSettingsConfig wrapped in RoutesV2OutputConfigSettings
func SplunkSettingsConfigAsRoutesV2OutputConfigSettings(v *SplunkSettingsConfig) RoutesV2OutputConfigSettings {
	return RoutesV2OutputConfigSettings{
		SplunkSettingsConfig: v,
	}
}

// SumologicSettingsConfigAsRoutesV2OutputConfigSettings is a convenience function that returns SumologicSettingsConfig wrapped in RoutesV2OutputConfigSettings
func SumologicSettingsConfigAsRoutesV2OutputConfigSettings(v *SumologicSettingsConfig) RoutesV2OutputConfigSettings {
	return RoutesV2OutputConfigSettings{
		SumologicSettingsConfig: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RoutesV2OutputConfigSettings) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CriblHttpSettingsConfig
	err = newStrictDecoder(data).Decode(&dst.CriblHttpSettingsConfig)
	if err == nil {
		jsonCriblHttpSettingsConfig, _ := json.Marshal(dst.CriblHttpSettingsConfig)
		if string(jsonCriblHttpSettingsConfig) == "{}" { // empty struct
			dst.CriblHttpSettingsConfig = nil
		} else {
			if err = validator.Validate(dst.CriblHttpSettingsConfig); err != nil {
				dst.CriblHttpSettingsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.CriblHttpSettingsConfig = nil
	}

	// try to unmarshal data into ElasticsearchSettingsConfig
	err = newStrictDecoder(data).Decode(&dst.ElasticsearchSettingsConfig)
	if err == nil {
		jsonElasticsearchSettingsConfig, _ := json.Marshal(dst.ElasticsearchSettingsConfig)
		if string(jsonElasticsearchSettingsConfig) == "{}" { // empty struct
			dst.ElasticsearchSettingsConfig = nil
		} else {
			if err = validator.Validate(dst.ElasticsearchSettingsConfig); err != nil {
				dst.ElasticsearchSettingsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.ElasticsearchSettingsConfig = nil
	}

	// try to unmarshal data into HttpSettingsConfig
	err = newStrictDecoder(data).Decode(&dst.HttpSettingsConfig)
	if err == nil {
		jsonHttpSettingsConfig, _ := json.Marshal(dst.HttpSettingsConfig)
		if string(jsonHttpSettingsConfig) == "{}" { // empty struct
			dst.HttpSettingsConfig = nil
		} else {
			if err = validator.Validate(dst.HttpSettingsConfig); err != nil {
				dst.HttpSettingsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.HttpSettingsConfig = nil
	}

	// try to unmarshal data into OpensearchSettingsConfig
	err = newStrictDecoder(data).Decode(&dst.OpensearchSettingsConfig)
	if err == nil {
		jsonOpensearchSettingsConfig, _ := json.Marshal(dst.OpensearchSettingsConfig)
		if string(jsonOpensearchSettingsConfig) == "{}" { // empty struct
			dst.OpensearchSettingsConfig = nil
		} else {
			if err = validator.Validate(dst.OpensearchSettingsConfig); err != nil {
				dst.OpensearchSettingsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.OpensearchSettingsConfig = nil
	}

	// try to unmarshal data into S3SettingsConfig
	err = newStrictDecoder(data).Decode(&dst.S3SettingsConfig)
	if err == nil {
		jsonS3SettingsConfig, _ := json.Marshal(dst.S3SettingsConfig)
		if string(jsonS3SettingsConfig) == "{}" { // empty struct
			dst.S3SettingsConfig = nil
		} else {
			if err = validator.Validate(dst.S3SettingsConfig); err != nil {
				dst.S3SettingsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.S3SettingsConfig = nil
	}

	// try to unmarshal data into SentinelSettingsConfig
	err = newStrictDecoder(data).Decode(&dst.SentinelSettingsConfig)
	if err == nil {
		jsonSentinelSettingsConfig, _ := json.Marshal(dst.SentinelSettingsConfig)
		if string(jsonSentinelSettingsConfig) == "{}" { // empty struct
			dst.SentinelSettingsConfig = nil
		} else {
			if err = validator.Validate(dst.SentinelSettingsConfig); err != nil {
				dst.SentinelSettingsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SentinelSettingsConfig = nil
	}

	// try to unmarshal data into SnowflakeSettingsConfig
	err = newStrictDecoder(data).Decode(&dst.SnowflakeSettingsConfig)
	if err == nil {
		jsonSnowflakeSettingsConfig, _ := json.Marshal(dst.SnowflakeSettingsConfig)
		if string(jsonSnowflakeSettingsConfig) == "{}" { // empty struct
			dst.SnowflakeSettingsConfig = nil
		} else {
			if err = validator.Validate(dst.SnowflakeSettingsConfig); err != nil {
				dst.SnowflakeSettingsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SnowflakeSettingsConfig = nil
	}

	// try to unmarshal data into SplunkSettingsConfig
	err = newStrictDecoder(data).Decode(&dst.SplunkSettingsConfig)
	if err == nil {
		jsonSplunkSettingsConfig, _ := json.Marshal(dst.SplunkSettingsConfig)
		if string(jsonSplunkSettingsConfig) == "{}" { // empty struct
			dst.SplunkSettingsConfig = nil
		} else {
			if err = validator.Validate(dst.SplunkSettingsConfig); err != nil {
				dst.SplunkSettingsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SplunkSettingsConfig = nil
	}

	// try to unmarshal data into SumologicSettingsConfig
	err = newStrictDecoder(data).Decode(&dst.SumologicSettingsConfig)
	if err == nil {
		jsonSumologicSettingsConfig, _ := json.Marshal(dst.SumologicSettingsConfig)
		if string(jsonSumologicSettingsConfig) == "{}" { // empty struct
			dst.SumologicSettingsConfig = nil
		} else {
			if err = validator.Validate(dst.SumologicSettingsConfig); err != nil {
				dst.SumologicSettingsConfig = nil
			} else {
				match++
			}
		}
	} else {
		dst.SumologicSettingsConfig = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CriblHttpSettingsConfig = nil
		dst.ElasticsearchSettingsConfig = nil
		dst.HttpSettingsConfig = nil
		dst.OpensearchSettingsConfig = nil
		dst.S3SettingsConfig = nil
		dst.SentinelSettingsConfig = nil
		dst.SnowflakeSettingsConfig = nil
		dst.SplunkSettingsConfig = nil
		dst.SumologicSettingsConfig = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RoutesV2OutputConfigSettings)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RoutesV2OutputConfigSettings)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RoutesV2OutputConfigSettings) MarshalJSON() ([]byte, error) {
	if src.CriblHttpSettingsConfig != nil {
		return json.Marshal(&src.CriblHttpSettingsConfig)
	}

	if src.ElasticsearchSettingsConfig != nil {
		return json.Marshal(&src.ElasticsearchSettingsConfig)
	}

	if src.HttpSettingsConfig != nil {
		return json.Marshal(&src.HttpSettingsConfig)
	}

	if src.OpensearchSettingsConfig != nil {
		return json.Marshal(&src.OpensearchSettingsConfig)
	}

	if src.S3SettingsConfig != nil {
		return json.Marshal(&src.S3SettingsConfig)
	}

	if src.SentinelSettingsConfig != nil {
		return json.Marshal(&src.SentinelSettingsConfig)
	}

	if src.SnowflakeSettingsConfig != nil {
		return json.Marshal(&src.SnowflakeSettingsConfig)
	}

	if src.SplunkSettingsConfig != nil {
		return json.Marshal(&src.SplunkSettingsConfig)
	}

	if src.SumologicSettingsConfig != nil {
		return json.Marshal(&src.SumologicSettingsConfig)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RoutesV2OutputConfigSettings) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.CriblHttpSettingsConfig != nil {
		return obj.CriblHttpSettingsConfig
	}

	if obj.ElasticsearchSettingsConfig != nil {
		return obj.ElasticsearchSettingsConfig
	}

	if obj.HttpSettingsConfig != nil {
		return obj.HttpSettingsConfig
	}

	if obj.OpensearchSettingsConfig != nil {
		return obj.OpensearchSettingsConfig
	}

	if obj.S3SettingsConfig != nil {
		return obj.S3SettingsConfig
	}

	if obj.SentinelSettingsConfig != nil {
		return obj.SentinelSettingsConfig
	}

	if obj.SnowflakeSettingsConfig != nil {
		return obj.SnowflakeSettingsConfig
	}

	if obj.SplunkSettingsConfig != nil {
		return obj.SplunkSettingsConfig
	}

	if obj.SumologicSettingsConfig != nil {
		return obj.SumologicSettingsConfig
	}

	// all schemas are nil
	return nil
}

type NullableRoutesV2OutputConfigSettings struct {
	value *RoutesV2OutputConfigSettings
	isSet bool
}

func (v NullableRoutesV2OutputConfigSettings) Get() *RoutesV2OutputConfigSettings {
	return v.value
}

func (v *NullableRoutesV2OutputConfigSettings) Set(val *RoutesV2OutputConfigSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesV2OutputConfigSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesV2OutputConfigSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesV2OutputConfigSettings(val *RoutesV2OutputConfigSettings) *NullableRoutesV2OutputConfigSettings {
	return &NullableRoutesV2OutputConfigSettings{value: val, isSet: true}
}

func (v NullableRoutesV2OutputConfigSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesV2OutputConfigSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


