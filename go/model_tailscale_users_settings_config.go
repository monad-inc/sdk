/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the TailscaleUsersSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TailscaleUsersSettingsConfig{}

// TailscaleUsersSettingsConfig Tailscale Users settings
type TailscaleUsersSettingsConfig struct {
	// Cron expression for scheduling the input
	Cron *string `json:"cron,omitempty"`
	// The tailnet organization name. Defaults to \"-\" to reference the default organization.
	OrganizationId *string `json:"organization_id,omitempty"`
	// Allows for filtering the output by user role.
	UserRoleOption *string `json:"user_role_option,omitempty"`
	// Allows for filtering the output by user type.
	UserTypeOption *string `json:"user_type_option,omitempty"`
}

// NewTailscaleUsersSettingsConfig instantiates a new TailscaleUsersSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTailscaleUsersSettingsConfig() *TailscaleUsersSettingsConfig {
	this := TailscaleUsersSettingsConfig{}
	return &this
}

// NewTailscaleUsersSettingsConfigWithDefaults instantiates a new TailscaleUsersSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTailscaleUsersSettingsConfigWithDefaults() *TailscaleUsersSettingsConfig {
	this := TailscaleUsersSettingsConfig{}
	return &this
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *TailscaleUsersSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TailscaleUsersSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *TailscaleUsersSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *TailscaleUsersSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *TailscaleUsersSettingsConfig) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TailscaleUsersSettingsConfig) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *TailscaleUsersSettingsConfig) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *TailscaleUsersSettingsConfig) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetUserRoleOption returns the UserRoleOption field value if set, zero value otherwise.
func (o *TailscaleUsersSettingsConfig) GetUserRoleOption() string {
	if o == nil || IsNil(o.UserRoleOption) {
		var ret string
		return ret
	}
	return *o.UserRoleOption
}

// GetUserRoleOptionOk returns a tuple with the UserRoleOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TailscaleUsersSettingsConfig) GetUserRoleOptionOk() (*string, bool) {
	if o == nil || IsNil(o.UserRoleOption) {
		return nil, false
	}
	return o.UserRoleOption, true
}

// HasUserRoleOption returns a boolean if a field has been set.
func (o *TailscaleUsersSettingsConfig) HasUserRoleOption() bool {
	if o != nil && !IsNil(o.UserRoleOption) {
		return true
	}

	return false
}

// SetUserRoleOption gets a reference to the given string and assigns it to the UserRoleOption field.
func (o *TailscaleUsersSettingsConfig) SetUserRoleOption(v string) {
	o.UserRoleOption = &v
}

// GetUserTypeOption returns the UserTypeOption field value if set, zero value otherwise.
func (o *TailscaleUsersSettingsConfig) GetUserTypeOption() string {
	if o == nil || IsNil(o.UserTypeOption) {
		var ret string
		return ret
	}
	return *o.UserTypeOption
}

// GetUserTypeOptionOk returns a tuple with the UserTypeOption field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TailscaleUsersSettingsConfig) GetUserTypeOptionOk() (*string, bool) {
	if o == nil || IsNil(o.UserTypeOption) {
		return nil, false
	}
	return o.UserTypeOption, true
}

// HasUserTypeOption returns a boolean if a field has been set.
func (o *TailscaleUsersSettingsConfig) HasUserTypeOption() bool {
	if o != nil && !IsNil(o.UserTypeOption) {
		return true
	}

	return false
}

// SetUserTypeOption gets a reference to the given string and assigns it to the UserTypeOption field.
func (o *TailscaleUsersSettingsConfig) SetUserTypeOption(v string) {
	o.UserTypeOption = &v
}

func (o TailscaleUsersSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TailscaleUsersSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.UserRoleOption) {
		toSerialize["user_role_option"] = o.UserRoleOption
	}
	if !IsNil(o.UserTypeOption) {
		toSerialize["user_type_option"] = o.UserTypeOption
	}
	return toSerialize, nil
}

type NullableTailscaleUsersSettingsConfig struct {
	value *TailscaleUsersSettingsConfig
	isSet bool
}

func (v NullableTailscaleUsersSettingsConfig) Get() *TailscaleUsersSettingsConfig {
	return v.value
}

func (v *NullableTailscaleUsersSettingsConfig) Set(val *TailscaleUsersSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTailscaleUsersSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTailscaleUsersSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTailscaleUsersSettingsConfig(val *TailscaleUsersSettingsConfig) *NullableTailscaleUsersSettingsConfig {
	return &NullableTailscaleUsersSettingsConfig{value: val, isSet: true}
}

func (v NullableTailscaleUsersSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTailscaleUsersSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


