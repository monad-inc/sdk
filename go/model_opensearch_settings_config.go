/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the OpensearchSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpensearchSettingsConfig{}

// OpensearchSettingsConfig OpenSearch Output Settings
type OpensearchSettingsConfig struct {
	// The name of the OpenSearch index to use.
	Index *string `json:"index,omitempty"`
	// Whether to skip TLS certificate verification (not recommended for production).
	InsecureSkipVerify *bool `json:"insecure_skip_verify,omitempty"`
	// The URL of the OpenSearch instance (must start with https).
	Url *string `json:"url,omitempty"`
	// The username for authenticating with OpenSearch.
	Username *string `json:"username,omitempty"`
}

// NewOpensearchSettingsConfig instantiates a new OpensearchSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpensearchSettingsConfig() *OpensearchSettingsConfig {
	this := OpensearchSettingsConfig{}
	return &this
}

// NewOpensearchSettingsConfigWithDefaults instantiates a new OpensearchSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpensearchSettingsConfigWithDefaults() *OpensearchSettingsConfig {
	this := OpensearchSettingsConfig{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *OpensearchSettingsConfig) GetIndex() string {
	if o == nil || IsNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpensearchSettingsConfig) GetIndexOk() (*string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *OpensearchSettingsConfig) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *OpensearchSettingsConfig) SetIndex(v string) {
	o.Index = &v
}

// GetInsecureSkipVerify returns the InsecureSkipVerify field value if set, zero value otherwise.
func (o *OpensearchSettingsConfig) GetInsecureSkipVerify() bool {
	if o == nil || IsNil(o.InsecureSkipVerify) {
		var ret bool
		return ret
	}
	return *o.InsecureSkipVerify
}

// GetInsecureSkipVerifyOk returns a tuple with the InsecureSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpensearchSettingsConfig) GetInsecureSkipVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.InsecureSkipVerify) {
		return nil, false
	}
	return o.InsecureSkipVerify, true
}

// HasInsecureSkipVerify returns a boolean if a field has been set.
func (o *OpensearchSettingsConfig) HasInsecureSkipVerify() bool {
	if o != nil && !IsNil(o.InsecureSkipVerify) {
		return true
	}

	return false
}

// SetInsecureSkipVerify gets a reference to the given bool and assigns it to the InsecureSkipVerify field.
func (o *OpensearchSettingsConfig) SetInsecureSkipVerify(v bool) {
	o.InsecureSkipVerify = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *OpensearchSettingsConfig) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpensearchSettingsConfig) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *OpensearchSettingsConfig) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *OpensearchSettingsConfig) SetUrl(v string) {
	o.Url = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *OpensearchSettingsConfig) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OpensearchSettingsConfig) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *OpensearchSettingsConfig) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *OpensearchSettingsConfig) SetUsername(v string) {
	o.Username = &v
}

func (o OpensearchSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpensearchSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.InsecureSkipVerify) {
		toSerialize["insecure_skip_verify"] = o.InsecureSkipVerify
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableOpensearchSettingsConfig struct {
	value *OpensearchSettingsConfig
	isSet bool
}

func (v NullableOpensearchSettingsConfig) Get() *OpensearchSettingsConfig {
	return v.value
}

func (v *NullableOpensearchSettingsConfig) Set(val *OpensearchSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOpensearchSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOpensearchSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpensearchSettingsConfig(val *OpensearchSettingsConfig) *NullableOpensearchSettingsConfig {
	return &NullableOpensearchSettingsConfig{value: val, isSet: true}
}

func (v NullableOpensearchSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpensearchSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


