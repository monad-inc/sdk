/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"fmt"
	"gopkg.in/validator.v2"
)

// RoutesTransformOperationArguments - struct for RoutesTransformOperationArguments
type RoutesTransformOperationArguments struct {
	AddAdd *AddAdd
	CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
	DropKeyDropKey *DropKeyDropKey
	DropKeyWhereValueEqDropKeyWhereValueEq *DropKeyWhereValueEqDropKeyWhereValueEq
	DropRecordWhereValueEqDropRecordWhereValueEq *DropRecordWhereValueEqDropRecordWhereValueEq
	DuplicateKeyValueToKeyDuplicateKeyValueToKey *DuplicateKeyValueToKeyDuplicateKeyValueToKey
	FlattenFlatten *FlattenFlatten
	FlattenallFlattenAll *FlattenallFlattenAll
	JqJQ *JqJQ
	MathMultiplyWithValueMathMultiplyWithValue *MathMultiplyWithValueMathMultiplyWithValue
	MutateTypeMutateType *MutateTypeMutateType
	MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
	MutateValueWhereKeyEqMutateValueWhereKeyEq *MutateValueWhereKeyEqMutateValueWhereKeyEq
	RenameKeyRenameKey *RenameKeyRenameKey
	RenameKeyWhereValueEqRenameKeyWhereValueEq *RenameKeyWhereValueEqRenameKeyWhereValueEq
	UtcTimestampTimestamp *UtcTimestampTimestamp
	MapmapOfStringAny *map[string]interface{}
}

// AddAddAsRoutesTransformOperationArguments is a convenience function that returns AddAdd wrapped in RoutesTransformOperationArguments
func AddAddAsRoutesTransformOperationArguments(v *AddAdd) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		AddAdd: v,
	}
}

// CreateKeyValueIfKeyValueCreateKeyValueIfKeyValueAsRoutesTransformOperationArguments is a convenience function that returns CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue wrapped in RoutesTransformOperationArguments
func CreateKeyValueIfKeyValueCreateKeyValueIfKeyValueAsRoutesTransformOperationArguments(v *CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue: v,
	}
}

// DropKeyDropKeyAsRoutesTransformOperationArguments is a convenience function that returns DropKeyDropKey wrapped in RoutesTransformOperationArguments
func DropKeyDropKeyAsRoutesTransformOperationArguments(v *DropKeyDropKey) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		DropKeyDropKey: v,
	}
}

// DropKeyWhereValueEqDropKeyWhereValueEqAsRoutesTransformOperationArguments is a convenience function that returns DropKeyWhereValueEqDropKeyWhereValueEq wrapped in RoutesTransformOperationArguments
func DropKeyWhereValueEqDropKeyWhereValueEqAsRoutesTransformOperationArguments(v *DropKeyWhereValueEqDropKeyWhereValueEq) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		DropKeyWhereValueEqDropKeyWhereValueEq: v,
	}
}

// DropRecordWhereValueEqDropRecordWhereValueEqAsRoutesTransformOperationArguments is a convenience function that returns DropRecordWhereValueEqDropRecordWhereValueEq wrapped in RoutesTransformOperationArguments
func DropRecordWhereValueEqDropRecordWhereValueEqAsRoutesTransformOperationArguments(v *DropRecordWhereValueEqDropRecordWhereValueEq) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		DropRecordWhereValueEqDropRecordWhereValueEq: v,
	}
}

// DuplicateKeyValueToKeyDuplicateKeyValueToKeyAsRoutesTransformOperationArguments is a convenience function that returns DuplicateKeyValueToKeyDuplicateKeyValueToKey wrapped in RoutesTransformOperationArguments
func DuplicateKeyValueToKeyDuplicateKeyValueToKeyAsRoutesTransformOperationArguments(v *DuplicateKeyValueToKeyDuplicateKeyValueToKey) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		DuplicateKeyValueToKeyDuplicateKeyValueToKey: v,
	}
}

// FlattenFlattenAsRoutesTransformOperationArguments is a convenience function that returns FlattenFlatten wrapped in RoutesTransformOperationArguments
func FlattenFlattenAsRoutesTransformOperationArguments(v *FlattenFlatten) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		FlattenFlatten: v,
	}
}

// FlattenallFlattenAllAsRoutesTransformOperationArguments is a convenience function that returns FlattenallFlattenAll wrapped in RoutesTransformOperationArguments
func FlattenallFlattenAllAsRoutesTransformOperationArguments(v *FlattenallFlattenAll) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		FlattenallFlattenAll: v,
	}
}

// JqJQAsRoutesTransformOperationArguments is a convenience function that returns JqJQ wrapped in RoutesTransformOperationArguments
func JqJQAsRoutesTransformOperationArguments(v *JqJQ) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		JqJQ: v,
	}
}

// MathMultiplyWithValueMathMultiplyWithValueAsRoutesTransformOperationArguments is a convenience function that returns MathMultiplyWithValueMathMultiplyWithValue wrapped in RoutesTransformOperationArguments
func MathMultiplyWithValueMathMultiplyWithValueAsRoutesTransformOperationArguments(v *MathMultiplyWithValueMathMultiplyWithValue) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		MathMultiplyWithValueMathMultiplyWithValue: v,
	}
}

// MutateTypeMutateTypeAsRoutesTransformOperationArguments is a convenience function that returns MutateTypeMutateType wrapped in RoutesTransformOperationArguments
func MutateTypeMutateTypeAsRoutesTransformOperationArguments(v *MutateTypeMutateType) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		MutateTypeMutateType: v,
	}
}

// MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEqAsRoutesTransformOperationArguments is a convenience function that returns MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq wrapped in RoutesTransformOperationArguments
func MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEqAsRoutesTransformOperationArguments(v *MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq: v,
	}
}

// MutateValueWhereKeyEqMutateValueWhereKeyEqAsRoutesTransformOperationArguments is a convenience function that returns MutateValueWhereKeyEqMutateValueWhereKeyEq wrapped in RoutesTransformOperationArguments
func MutateValueWhereKeyEqMutateValueWhereKeyEqAsRoutesTransformOperationArguments(v *MutateValueWhereKeyEqMutateValueWhereKeyEq) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		MutateValueWhereKeyEqMutateValueWhereKeyEq: v,
	}
}

// RenameKeyRenameKeyAsRoutesTransformOperationArguments is a convenience function that returns RenameKeyRenameKey wrapped in RoutesTransformOperationArguments
func RenameKeyRenameKeyAsRoutesTransformOperationArguments(v *RenameKeyRenameKey) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		RenameKeyRenameKey: v,
	}
}

// RenameKeyWhereValueEqRenameKeyWhereValueEqAsRoutesTransformOperationArguments is a convenience function that returns RenameKeyWhereValueEqRenameKeyWhereValueEq wrapped in RoutesTransformOperationArguments
func RenameKeyWhereValueEqRenameKeyWhereValueEqAsRoutesTransformOperationArguments(v *RenameKeyWhereValueEqRenameKeyWhereValueEq) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		RenameKeyWhereValueEqRenameKeyWhereValueEq: v,
	}
}

// UtcTimestampTimestampAsRoutesTransformOperationArguments is a convenience function that returns UtcTimestampTimestamp wrapped in RoutesTransformOperationArguments
func UtcTimestampTimestampAsRoutesTransformOperationArguments(v *UtcTimestampTimestamp) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		UtcTimestampTimestamp: v,
	}
}

// map[string]interface{}AsRoutesTransformOperationArguments is a convenience function that returns map[string]interface{} wrapped in RoutesTransformOperationArguments
func MapmapOfStringAnyAsRoutesTransformOperationArguments(v *map[string]interface{}) RoutesTransformOperationArguments {
	return RoutesTransformOperationArguments{
		MapmapOfStringAny: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RoutesTransformOperationArguments) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into AddAdd
	err = newStrictDecoder(data).Decode(&dst.AddAdd)
	if err == nil {
		jsonAddAdd, _ := json.Marshal(dst.AddAdd)
		if string(jsonAddAdd) == "{}" { // empty struct
			dst.AddAdd = nil
		} else {
			if err = validator.Validate(dst.AddAdd); err != nil {
				dst.AddAdd = nil
			} else {
				match++
			}
		}
	} else {
		dst.AddAdd = nil
	}

	// try to unmarshal data into CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
	err = newStrictDecoder(data).Decode(&dst.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue)
	if err == nil {
		jsonCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue, _ := json.Marshal(dst.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue)
		if string(jsonCreateKeyValueIfKeyValueCreateKeyValueIfKeyValue) == "{}" { // empty struct
			dst.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue = nil
		} else {
			if err = validator.Validate(dst.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue); err != nil {
				dst.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue = nil
	}

	// try to unmarshal data into DropKeyDropKey
	err = newStrictDecoder(data).Decode(&dst.DropKeyDropKey)
	if err == nil {
		jsonDropKeyDropKey, _ := json.Marshal(dst.DropKeyDropKey)
		if string(jsonDropKeyDropKey) == "{}" { // empty struct
			dst.DropKeyDropKey = nil
		} else {
			if err = validator.Validate(dst.DropKeyDropKey); err != nil {
				dst.DropKeyDropKey = nil
			} else {
				match++
			}
		}
	} else {
		dst.DropKeyDropKey = nil
	}

	// try to unmarshal data into DropKeyWhereValueEqDropKeyWhereValueEq
	err = newStrictDecoder(data).Decode(&dst.DropKeyWhereValueEqDropKeyWhereValueEq)
	if err == nil {
		jsonDropKeyWhereValueEqDropKeyWhereValueEq, _ := json.Marshal(dst.DropKeyWhereValueEqDropKeyWhereValueEq)
		if string(jsonDropKeyWhereValueEqDropKeyWhereValueEq) == "{}" { // empty struct
			dst.DropKeyWhereValueEqDropKeyWhereValueEq = nil
		} else {
			if err = validator.Validate(dst.DropKeyWhereValueEqDropKeyWhereValueEq); err != nil {
				dst.DropKeyWhereValueEqDropKeyWhereValueEq = nil
			} else {
				match++
			}
		}
	} else {
		dst.DropKeyWhereValueEqDropKeyWhereValueEq = nil
	}

	// try to unmarshal data into DropRecordWhereValueEqDropRecordWhereValueEq
	err = newStrictDecoder(data).Decode(&dst.DropRecordWhereValueEqDropRecordWhereValueEq)
	if err == nil {
		jsonDropRecordWhereValueEqDropRecordWhereValueEq, _ := json.Marshal(dst.DropRecordWhereValueEqDropRecordWhereValueEq)
		if string(jsonDropRecordWhereValueEqDropRecordWhereValueEq) == "{}" { // empty struct
			dst.DropRecordWhereValueEqDropRecordWhereValueEq = nil
		} else {
			if err = validator.Validate(dst.DropRecordWhereValueEqDropRecordWhereValueEq); err != nil {
				dst.DropRecordWhereValueEqDropRecordWhereValueEq = nil
			} else {
				match++
			}
		}
	} else {
		dst.DropRecordWhereValueEqDropRecordWhereValueEq = nil
	}

	// try to unmarshal data into DuplicateKeyValueToKeyDuplicateKeyValueToKey
	err = newStrictDecoder(data).Decode(&dst.DuplicateKeyValueToKeyDuplicateKeyValueToKey)
	if err == nil {
		jsonDuplicateKeyValueToKeyDuplicateKeyValueToKey, _ := json.Marshal(dst.DuplicateKeyValueToKeyDuplicateKeyValueToKey)
		if string(jsonDuplicateKeyValueToKeyDuplicateKeyValueToKey) == "{}" { // empty struct
			dst.DuplicateKeyValueToKeyDuplicateKeyValueToKey = nil
		} else {
			if err = validator.Validate(dst.DuplicateKeyValueToKeyDuplicateKeyValueToKey); err != nil {
				dst.DuplicateKeyValueToKeyDuplicateKeyValueToKey = nil
			} else {
				match++
			}
		}
	} else {
		dst.DuplicateKeyValueToKeyDuplicateKeyValueToKey = nil
	}

	// try to unmarshal data into FlattenFlatten
	err = newStrictDecoder(data).Decode(&dst.FlattenFlatten)
	if err == nil {
		jsonFlattenFlatten, _ := json.Marshal(dst.FlattenFlatten)
		if string(jsonFlattenFlatten) == "{}" { // empty struct
			dst.FlattenFlatten = nil
		} else {
			if err = validator.Validate(dst.FlattenFlatten); err != nil {
				dst.FlattenFlatten = nil
			} else {
				match++
			}
		}
	} else {
		dst.FlattenFlatten = nil
	}

	// try to unmarshal data into FlattenallFlattenAll
	err = newStrictDecoder(data).Decode(&dst.FlattenallFlattenAll)
	if err == nil {
		jsonFlattenallFlattenAll, _ := json.Marshal(dst.FlattenallFlattenAll)
		if string(jsonFlattenallFlattenAll) == "{}" { // empty struct
			dst.FlattenallFlattenAll = nil
		} else {
			if err = validator.Validate(dst.FlattenallFlattenAll); err != nil {
				dst.FlattenallFlattenAll = nil
			} else {
				match++
			}
		}
	} else {
		dst.FlattenallFlattenAll = nil
	}

	// try to unmarshal data into JqJQ
	err = newStrictDecoder(data).Decode(&dst.JqJQ)
	if err == nil {
		jsonJqJQ, _ := json.Marshal(dst.JqJQ)
		if string(jsonJqJQ) == "{}" { // empty struct
			dst.JqJQ = nil
		} else {
			if err = validator.Validate(dst.JqJQ); err != nil {
				dst.JqJQ = nil
			} else {
				match++
			}
		}
	} else {
		dst.JqJQ = nil
	}

	// try to unmarshal data into MathMultiplyWithValueMathMultiplyWithValue
	err = newStrictDecoder(data).Decode(&dst.MathMultiplyWithValueMathMultiplyWithValue)
	if err == nil {
		jsonMathMultiplyWithValueMathMultiplyWithValue, _ := json.Marshal(dst.MathMultiplyWithValueMathMultiplyWithValue)
		if string(jsonMathMultiplyWithValueMathMultiplyWithValue) == "{}" { // empty struct
			dst.MathMultiplyWithValueMathMultiplyWithValue = nil
		} else {
			if err = validator.Validate(dst.MathMultiplyWithValueMathMultiplyWithValue); err != nil {
				dst.MathMultiplyWithValueMathMultiplyWithValue = nil
			} else {
				match++
			}
		}
	} else {
		dst.MathMultiplyWithValueMathMultiplyWithValue = nil
	}

	// try to unmarshal data into MutateTypeMutateType
	err = newStrictDecoder(data).Decode(&dst.MutateTypeMutateType)
	if err == nil {
		jsonMutateTypeMutateType, _ := json.Marshal(dst.MutateTypeMutateType)
		if string(jsonMutateTypeMutateType) == "{}" { // empty struct
			dst.MutateTypeMutateType = nil
		} else {
			if err = validator.Validate(dst.MutateTypeMutateType); err != nil {
				dst.MutateTypeMutateType = nil
			} else {
				match++
			}
		}
	} else {
		dst.MutateTypeMutateType = nil
	}

	// try to unmarshal data into MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
	err = newStrictDecoder(data).Decode(&dst.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq)
	if err == nil {
		jsonMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq, _ := json.Marshal(dst.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq)
		if string(jsonMutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq) == "{}" { // empty struct
			dst.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq = nil
		} else {
			if err = validator.Validate(dst.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq); err != nil {
				dst.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq = nil
			} else {
				match++
			}
		}
	} else {
		dst.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq = nil
	}

	// try to unmarshal data into MutateValueWhereKeyEqMutateValueWhereKeyEq
	err = newStrictDecoder(data).Decode(&dst.MutateValueWhereKeyEqMutateValueWhereKeyEq)
	if err == nil {
		jsonMutateValueWhereKeyEqMutateValueWhereKeyEq, _ := json.Marshal(dst.MutateValueWhereKeyEqMutateValueWhereKeyEq)
		if string(jsonMutateValueWhereKeyEqMutateValueWhereKeyEq) == "{}" { // empty struct
			dst.MutateValueWhereKeyEqMutateValueWhereKeyEq = nil
		} else {
			if err = validator.Validate(dst.MutateValueWhereKeyEqMutateValueWhereKeyEq); err != nil {
				dst.MutateValueWhereKeyEqMutateValueWhereKeyEq = nil
			} else {
				match++
			}
		}
	} else {
		dst.MutateValueWhereKeyEqMutateValueWhereKeyEq = nil
	}

	// try to unmarshal data into RenameKeyRenameKey
	err = newStrictDecoder(data).Decode(&dst.RenameKeyRenameKey)
	if err == nil {
		jsonRenameKeyRenameKey, _ := json.Marshal(dst.RenameKeyRenameKey)
		if string(jsonRenameKeyRenameKey) == "{}" { // empty struct
			dst.RenameKeyRenameKey = nil
		} else {
			if err = validator.Validate(dst.RenameKeyRenameKey); err != nil {
				dst.RenameKeyRenameKey = nil
			} else {
				match++
			}
		}
	} else {
		dst.RenameKeyRenameKey = nil
	}

	// try to unmarshal data into RenameKeyWhereValueEqRenameKeyWhereValueEq
	err = newStrictDecoder(data).Decode(&dst.RenameKeyWhereValueEqRenameKeyWhereValueEq)
	if err == nil {
		jsonRenameKeyWhereValueEqRenameKeyWhereValueEq, _ := json.Marshal(dst.RenameKeyWhereValueEqRenameKeyWhereValueEq)
		if string(jsonRenameKeyWhereValueEqRenameKeyWhereValueEq) == "{}" { // empty struct
			dst.RenameKeyWhereValueEqRenameKeyWhereValueEq = nil
		} else {
			if err = validator.Validate(dst.RenameKeyWhereValueEqRenameKeyWhereValueEq); err != nil {
				dst.RenameKeyWhereValueEqRenameKeyWhereValueEq = nil
			} else {
				match++
			}
		}
	} else {
		dst.RenameKeyWhereValueEqRenameKeyWhereValueEq = nil
	}

	// try to unmarshal data into UtcTimestampTimestamp
	err = newStrictDecoder(data).Decode(&dst.UtcTimestampTimestamp)
	if err == nil {
		jsonUtcTimestampTimestamp, _ := json.Marshal(dst.UtcTimestampTimestamp)
		if string(jsonUtcTimestampTimestamp) == "{}" { // empty struct
			dst.UtcTimestampTimestamp = nil
		} else {
			if err = validator.Validate(dst.UtcTimestampTimestamp); err != nil {
				dst.UtcTimestampTimestamp = nil
			} else {
				match++
			}
		}
	} else {
		dst.UtcTimestampTimestamp = nil
	}

	// try to unmarshal data into MapmapOfStringAny
	err = newStrictDecoder(data).Decode(&dst.MapmapOfStringAny)
	if err == nil {
		jsonMapmapOfStringAny, _ := json.Marshal(dst.MapmapOfStringAny)
		if string(jsonMapmapOfStringAny) == "{}" { // empty struct
			dst.MapmapOfStringAny = nil
		} else {
			if err = validator.Validate(dst.MapmapOfStringAny); err != nil {
				dst.MapmapOfStringAny = nil
			} else {
				match++
			}
		}
	} else {
		dst.MapmapOfStringAny = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.AddAdd = nil
		dst.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue = nil
		dst.DropKeyDropKey = nil
		dst.DropKeyWhereValueEqDropKeyWhereValueEq = nil
		dst.DropRecordWhereValueEqDropRecordWhereValueEq = nil
		dst.DuplicateKeyValueToKeyDuplicateKeyValueToKey = nil
		dst.FlattenFlatten = nil
		dst.FlattenallFlattenAll = nil
		dst.JqJQ = nil
		dst.MathMultiplyWithValueMathMultiplyWithValue = nil
		dst.MutateTypeMutateType = nil
		dst.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq = nil
		dst.MutateValueWhereKeyEqMutateValueWhereKeyEq = nil
		dst.RenameKeyRenameKey = nil
		dst.RenameKeyWhereValueEqRenameKeyWhereValueEq = nil
		dst.UtcTimestampTimestamp = nil
		dst.MapmapOfStringAny = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RoutesTransformOperationArguments)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RoutesTransformOperationArguments)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RoutesTransformOperationArguments) MarshalJSON() ([]byte, error) {
	if src.AddAdd != nil {
		return json.Marshal(&src.AddAdd)
	}

	if src.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue != nil {
		return json.Marshal(&src.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue)
	}

	if src.DropKeyDropKey != nil {
		return json.Marshal(&src.DropKeyDropKey)
	}

	if src.DropKeyWhereValueEqDropKeyWhereValueEq != nil {
		return json.Marshal(&src.DropKeyWhereValueEqDropKeyWhereValueEq)
	}

	if src.DropRecordWhereValueEqDropRecordWhereValueEq != nil {
		return json.Marshal(&src.DropRecordWhereValueEqDropRecordWhereValueEq)
	}

	if src.DuplicateKeyValueToKeyDuplicateKeyValueToKey != nil {
		return json.Marshal(&src.DuplicateKeyValueToKeyDuplicateKeyValueToKey)
	}

	if src.FlattenFlatten != nil {
		return json.Marshal(&src.FlattenFlatten)
	}

	if src.FlattenallFlattenAll != nil {
		return json.Marshal(&src.FlattenallFlattenAll)
	}

	if src.JqJQ != nil {
		return json.Marshal(&src.JqJQ)
	}

	if src.MathMultiplyWithValueMathMultiplyWithValue != nil {
		return json.Marshal(&src.MathMultiplyWithValueMathMultiplyWithValue)
	}

	if src.MutateTypeMutateType != nil {
		return json.Marshal(&src.MutateTypeMutateType)
	}

	if src.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq != nil {
		return json.Marshal(&src.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq)
	}

	if src.MutateValueWhereKeyEqMutateValueWhereKeyEq != nil {
		return json.Marshal(&src.MutateValueWhereKeyEqMutateValueWhereKeyEq)
	}

	if src.RenameKeyRenameKey != nil {
		return json.Marshal(&src.RenameKeyRenameKey)
	}

	if src.RenameKeyWhereValueEqRenameKeyWhereValueEq != nil {
		return json.Marshal(&src.RenameKeyWhereValueEqRenameKeyWhereValueEq)
	}

	if src.UtcTimestampTimestamp != nil {
		return json.Marshal(&src.UtcTimestampTimestamp)
	}

	if src.MapmapOfStringAny != nil {
		return json.Marshal(&src.MapmapOfStringAny)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RoutesTransformOperationArguments) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.AddAdd != nil {
		return obj.AddAdd
	}

	if obj.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue != nil {
		return obj.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
	}

	if obj.DropKeyDropKey != nil {
		return obj.DropKeyDropKey
	}

	if obj.DropKeyWhereValueEqDropKeyWhereValueEq != nil {
		return obj.DropKeyWhereValueEqDropKeyWhereValueEq
	}

	if obj.DropRecordWhereValueEqDropRecordWhereValueEq != nil {
		return obj.DropRecordWhereValueEqDropRecordWhereValueEq
	}

	if obj.DuplicateKeyValueToKeyDuplicateKeyValueToKey != nil {
		return obj.DuplicateKeyValueToKeyDuplicateKeyValueToKey
	}

	if obj.FlattenFlatten != nil {
		return obj.FlattenFlatten
	}

	if obj.FlattenallFlattenAll != nil {
		return obj.FlattenallFlattenAll
	}

	if obj.JqJQ != nil {
		return obj.JqJQ
	}

	if obj.MathMultiplyWithValueMathMultiplyWithValue != nil {
		return obj.MathMultiplyWithValueMathMultiplyWithValue
	}

	if obj.MutateTypeMutateType != nil {
		return obj.MutateTypeMutateType
	}

	if obj.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq != nil {
		return obj.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
	}

	if obj.MutateValueWhereKeyEqMutateValueWhereKeyEq != nil {
		return obj.MutateValueWhereKeyEqMutateValueWhereKeyEq
	}

	if obj.RenameKeyRenameKey != nil {
		return obj.RenameKeyRenameKey
	}

	if obj.RenameKeyWhereValueEqRenameKeyWhereValueEq != nil {
		return obj.RenameKeyWhereValueEqRenameKeyWhereValueEq
	}

	if obj.UtcTimestampTimestamp != nil {
		return obj.UtcTimestampTimestamp
	}

	if obj.MapmapOfStringAny != nil {
		return obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

// Get the actual instance value
func (obj RoutesTransformOperationArguments) GetActualInstanceValue() (interface{}) {
	if obj.AddAdd != nil {
		return *obj.AddAdd
	}

	if obj.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue != nil {
		return *obj.CreateKeyValueIfKeyValueCreateKeyValueIfKeyValue
	}

	if obj.DropKeyDropKey != nil {
		return *obj.DropKeyDropKey
	}

	if obj.DropKeyWhereValueEqDropKeyWhereValueEq != nil {
		return *obj.DropKeyWhereValueEqDropKeyWhereValueEq
	}

	if obj.DropRecordWhereValueEqDropRecordWhereValueEq != nil {
		return *obj.DropRecordWhereValueEqDropRecordWhereValueEq
	}

	if obj.DuplicateKeyValueToKeyDuplicateKeyValueToKey != nil {
		return *obj.DuplicateKeyValueToKeyDuplicateKeyValueToKey
	}

	if obj.FlattenFlatten != nil {
		return *obj.FlattenFlatten
	}

	if obj.FlattenallFlattenAll != nil {
		return *obj.FlattenallFlattenAll
	}

	if obj.JqJQ != nil {
		return *obj.JqJQ
	}

	if obj.MathMultiplyWithValueMathMultiplyWithValue != nil {
		return *obj.MathMultiplyWithValueMathMultiplyWithValue
	}

	if obj.MutateTypeMutateType != nil {
		return *obj.MutateTypeMutateType
	}

	if obj.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq != nil {
		return *obj.MutateValueWhereKeyEqAndValueEqMutateValueWhereKeyEqAndValueEq
	}

	if obj.MutateValueWhereKeyEqMutateValueWhereKeyEq != nil {
		return *obj.MutateValueWhereKeyEqMutateValueWhereKeyEq
	}

	if obj.RenameKeyRenameKey != nil {
		return *obj.RenameKeyRenameKey
	}

	if obj.RenameKeyWhereValueEqRenameKeyWhereValueEq != nil {
		return *obj.RenameKeyWhereValueEqRenameKeyWhereValueEq
	}

	if obj.UtcTimestampTimestamp != nil {
		return *obj.UtcTimestampTimestamp
	}

	if obj.MapmapOfStringAny != nil {
		return *obj.MapmapOfStringAny
	}

	// all schemas are nil
	return nil
}

type NullableRoutesTransformOperationArguments struct {
	value *RoutesTransformOperationArguments
	isSet bool
}

func (v NullableRoutesTransformOperationArguments) Get() *RoutesTransformOperationArguments {
	return v.value
}

func (v *NullableRoutesTransformOperationArguments) Set(val *RoutesTransformOperationArguments) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutesTransformOperationArguments) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutesTransformOperationArguments) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutesTransformOperationArguments(val *RoutesTransformOperationArguments) *NullableRoutesTransformOperationArguments {
	return &NullableRoutesTransformOperationArguments{value: val, isSet: true}
}

func (v NullableRoutesTransformOperationArguments) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutesTransformOperationArguments) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


