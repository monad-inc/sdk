/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ElasticsearchSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ElasticsearchSettingsConfig{}

// ElasticsearchSettingsConfig Elasticsearch Output Settings
type ElasticsearchSettingsConfig struct {
	// The method of authentication to use with the Elasticsearch cluster. Choose between 'api_key' or 'password'.
	AuthType *string `json:"auth_type,omitempty"`
	// The Cloud ID for connecting to an Elastic Cloud deployment. Required when connection_type is set to 'cloud_id'.
	CloudId *string `json:"cloud_id,omitempty"`
	// The type of connection to use with Elasticsearch. Choose between 'cloud_id' for Elastic Cloud or 'url' for direct connection.
	ConnectionType *string `json:"connection_type,omitempty"`
	// The name of the Elasticsearch index to write data to. If the index doesn't exist, it will be created automatically.
	Index *string `json:"index,omitempty"`
	// If set to true, it skips verification of the server's TLS certificate. This is insecure and should only be used for testing purposes.
	InsecureSkipVerify *bool `json:"insecure_skip_verify,omitempty"`
	// The URL of the Elasticsearch cluster. Required when connection type is set to 'url'.
	Url *string `json:"url,omitempty"`
	// Username for authenticating with the Elasticsearch cluster.
	Username *string `json:"username,omitempty"`
}

// NewElasticsearchSettingsConfig instantiates a new ElasticsearchSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewElasticsearchSettingsConfig() *ElasticsearchSettingsConfig {
	this := ElasticsearchSettingsConfig{}
	return &this
}

// NewElasticsearchSettingsConfigWithDefaults instantiates a new ElasticsearchSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewElasticsearchSettingsConfigWithDefaults() *ElasticsearchSettingsConfig {
	this := ElasticsearchSettingsConfig{}
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *ElasticsearchSettingsConfig) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSettingsConfig) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *ElasticsearchSettingsConfig) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *ElasticsearchSettingsConfig) SetAuthType(v string) {
	o.AuthType = &v
}

// GetCloudId returns the CloudId field value if set, zero value otherwise.
func (o *ElasticsearchSettingsConfig) GetCloudId() string {
	if o == nil || IsNil(o.CloudId) {
		var ret string
		return ret
	}
	return *o.CloudId
}

// GetCloudIdOk returns a tuple with the CloudId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSettingsConfig) GetCloudIdOk() (*string, bool) {
	if o == nil || IsNil(o.CloudId) {
		return nil, false
	}
	return o.CloudId, true
}

// HasCloudId returns a boolean if a field has been set.
func (o *ElasticsearchSettingsConfig) HasCloudId() bool {
	if o != nil && !IsNil(o.CloudId) {
		return true
	}

	return false
}

// SetCloudId gets a reference to the given string and assigns it to the CloudId field.
func (o *ElasticsearchSettingsConfig) SetCloudId(v string) {
	o.CloudId = &v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise.
func (o *ElasticsearchSettingsConfig) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType) {
		var ret string
		return ret
	}
	return *o.ConnectionType
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSettingsConfig) GetConnectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectionType) {
		return nil, false
	}
	return o.ConnectionType, true
}

// HasConnectionType returns a boolean if a field has been set.
func (o *ElasticsearchSettingsConfig) HasConnectionType() bool {
	if o != nil && !IsNil(o.ConnectionType) {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given string and assigns it to the ConnectionType field.
func (o *ElasticsearchSettingsConfig) SetConnectionType(v string) {
	o.ConnectionType = &v
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *ElasticsearchSettingsConfig) GetIndex() string {
	if o == nil || IsNil(o.Index) {
		var ret string
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSettingsConfig) GetIndexOk() (*string, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *ElasticsearchSettingsConfig) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given string and assigns it to the Index field.
func (o *ElasticsearchSettingsConfig) SetIndex(v string) {
	o.Index = &v
}

// GetInsecureSkipVerify returns the InsecureSkipVerify field value if set, zero value otherwise.
func (o *ElasticsearchSettingsConfig) GetInsecureSkipVerify() bool {
	if o == nil || IsNil(o.InsecureSkipVerify) {
		var ret bool
		return ret
	}
	return *o.InsecureSkipVerify
}

// GetInsecureSkipVerifyOk returns a tuple with the InsecureSkipVerify field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSettingsConfig) GetInsecureSkipVerifyOk() (*bool, bool) {
	if o == nil || IsNil(o.InsecureSkipVerify) {
		return nil, false
	}
	return o.InsecureSkipVerify, true
}

// HasInsecureSkipVerify returns a boolean if a field has been set.
func (o *ElasticsearchSettingsConfig) HasInsecureSkipVerify() bool {
	if o != nil && !IsNil(o.InsecureSkipVerify) {
		return true
	}

	return false
}

// SetInsecureSkipVerify gets a reference to the given bool and assigns it to the InsecureSkipVerify field.
func (o *ElasticsearchSettingsConfig) SetInsecureSkipVerify(v bool) {
	o.InsecureSkipVerify = &v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ElasticsearchSettingsConfig) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSettingsConfig) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ElasticsearchSettingsConfig) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ElasticsearchSettingsConfig) SetUrl(v string) {
	o.Url = &v
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *ElasticsearchSettingsConfig) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ElasticsearchSettingsConfig) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *ElasticsearchSettingsConfig) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *ElasticsearchSettingsConfig) SetUsername(v string) {
	o.Username = &v
}

func (o ElasticsearchSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ElasticsearchSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.CloudId) {
		toSerialize["cloud_id"] = o.CloudId
	}
	if !IsNil(o.ConnectionType) {
		toSerialize["connection_type"] = o.ConnectionType
	}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.InsecureSkipVerify) {
		toSerialize["insecure_skip_verify"] = o.InsecureSkipVerify
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableElasticsearchSettingsConfig struct {
	value *ElasticsearchSettingsConfig
	isSet bool
}

func (v NullableElasticsearchSettingsConfig) Get() *ElasticsearchSettingsConfig {
	return v.value
}

func (v *NullableElasticsearchSettingsConfig) Set(val *ElasticsearchSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableElasticsearchSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableElasticsearchSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableElasticsearchSettingsConfig(val *ElasticsearchSettingsConfig) *NullableElasticsearchSettingsConfig {
	return &NullableElasticsearchSettingsConfig{value: val, isSet: true}
}

func (v NullableElasticsearchSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableElasticsearchSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


