/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsRoleWithPermissionsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsRoleWithPermissionsList{}

// ModelsRoleWithPermissionsList struct for ModelsRoleWithPermissionsList
type ModelsRoleWithPermissionsList struct {
	Pagination *ModelsPagination `json:"pagination,omitempty"`
	Roles []ModelsRoleWithPermissions `json:"roles,omitempty"`
}

// NewModelsRoleWithPermissionsList instantiates a new ModelsRoleWithPermissionsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsRoleWithPermissionsList() *ModelsRoleWithPermissionsList {
	this := ModelsRoleWithPermissionsList{}
	return &this
}

// NewModelsRoleWithPermissionsListWithDefaults instantiates a new ModelsRoleWithPermissionsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsRoleWithPermissionsListWithDefaults() *ModelsRoleWithPermissionsList {
	this := ModelsRoleWithPermissionsList{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ModelsRoleWithPermissionsList) GetPagination() ModelsPagination {
	if o == nil || IsNil(o.Pagination) {
		var ret ModelsPagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRoleWithPermissionsList) GetPaginationOk() (*ModelsPagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ModelsRoleWithPermissionsList) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given ModelsPagination and assigns it to the Pagination field.
func (o *ModelsRoleWithPermissionsList) SetPagination(v ModelsPagination) {
	o.Pagination = &v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *ModelsRoleWithPermissionsList) GetRoles() []ModelsRoleWithPermissions {
	if o == nil || IsNil(o.Roles) {
		var ret []ModelsRoleWithPermissions
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsRoleWithPermissionsList) GetRolesOk() ([]ModelsRoleWithPermissions, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *ModelsRoleWithPermissionsList) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []ModelsRoleWithPermissions and assigns it to the Roles field.
func (o *ModelsRoleWithPermissionsList) SetRoles(v []ModelsRoleWithPermissions) {
	o.Roles = v
}

func (o ModelsRoleWithPermissionsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsRoleWithPermissionsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableModelsRoleWithPermissionsList struct {
	value *ModelsRoleWithPermissionsList
	isSet bool
}

func (v NullableModelsRoleWithPermissionsList) Get() *ModelsRoleWithPermissionsList {
	return v.value
}

func (v *NullableModelsRoleWithPermissionsList) Set(val *ModelsRoleWithPermissionsList) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsRoleWithPermissionsList) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsRoleWithPermissionsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsRoleWithPermissionsList(val *ModelsRoleWithPermissionsList) *NullableModelsRoleWithPermissionsList {
	return &NullableModelsRoleWithPermissionsList{value: val, isSet: true}
}

func (v NullableModelsRoleWithPermissionsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsRoleWithPermissionsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


