/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the GoogleCloudStorageOutputSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GoogleCloudStorageOutputSettingsConfig{}

// GoogleCloudStorageOutputSettingsConfig struct for GoogleCloudStorageOutputSettingsConfig
type GoogleCloudStorageOutputSettingsConfig struct {
	BatchConfig *BatchConfigBatchConfig `json:"batch_config,omitempty"`
	// The name of the bucket where data will be stored
	Bucket *string `json:"bucket,omitempty"`
	// The compression method to be applied to the data before storing
	Compression *string `json:"compression,omitempty"`
	Format *FormatterFormatConfig `json:"format,omitempty"`
	// Specifies the format for organizing data into partitions within your bucket. This determines the directory structure and naming convention for stored objects, affecting data organization and query efficiency. Examples include Hive-style partitioning (e.g., 'year=2024/month=01/day=01') and simple date-based formats (e.g., '2024/01/01').
	PartitionFormat *string `json:"partition_format,omitempty"`
	// An optional prefix for object keys to organize data within the bucket
	Prefix *string `json:"prefix,omitempty"`
}

// NewGoogleCloudStorageOutputSettingsConfig instantiates a new GoogleCloudStorageOutputSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGoogleCloudStorageOutputSettingsConfig() *GoogleCloudStorageOutputSettingsConfig {
	this := GoogleCloudStorageOutputSettingsConfig{}
	return &this
}

// NewGoogleCloudStorageOutputSettingsConfigWithDefaults instantiates a new GoogleCloudStorageOutputSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGoogleCloudStorageOutputSettingsConfigWithDefaults() *GoogleCloudStorageOutputSettingsConfig {
	this := GoogleCloudStorageOutputSettingsConfig{}
	return &this
}

// GetBatchConfig returns the BatchConfig field value if set, zero value otherwise.
func (o *GoogleCloudStorageOutputSettingsConfig) GetBatchConfig() BatchConfigBatchConfig {
	if o == nil || IsNil(o.BatchConfig) {
		var ret BatchConfigBatchConfig
		return ret
	}
	return *o.BatchConfig
}

// GetBatchConfigOk returns a tuple with the BatchConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) GetBatchConfigOk() (*BatchConfigBatchConfig, bool) {
	if o == nil || IsNil(o.BatchConfig) {
		return nil, false
	}
	return o.BatchConfig, true
}

// HasBatchConfig returns a boolean if a field has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) HasBatchConfig() bool {
	if o != nil && !IsNil(o.BatchConfig) {
		return true
	}

	return false
}

// SetBatchConfig gets a reference to the given BatchConfigBatchConfig and assigns it to the BatchConfig field.
func (o *GoogleCloudStorageOutputSettingsConfig) SetBatchConfig(v BatchConfigBatchConfig) {
	o.BatchConfig = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *GoogleCloudStorageOutputSettingsConfig) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *GoogleCloudStorageOutputSettingsConfig) SetBucket(v string) {
	o.Bucket = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *GoogleCloudStorageOutputSettingsConfig) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *GoogleCloudStorageOutputSettingsConfig) SetCompression(v string) {
	o.Compression = &v
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *GoogleCloudStorageOutputSettingsConfig) GetFormat() FormatterFormatConfig {
	if o == nil || IsNil(o.Format) {
		var ret FormatterFormatConfig
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) GetFormatOk() (*FormatterFormatConfig, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given FormatterFormatConfig and assigns it to the Format field.
func (o *GoogleCloudStorageOutputSettingsConfig) SetFormat(v FormatterFormatConfig) {
	o.Format = &v
}

// GetPartitionFormat returns the PartitionFormat field value if set, zero value otherwise.
func (o *GoogleCloudStorageOutputSettingsConfig) GetPartitionFormat() string {
	if o == nil || IsNil(o.PartitionFormat) {
		var ret string
		return ret
	}
	return *o.PartitionFormat
}

// GetPartitionFormatOk returns a tuple with the PartitionFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) GetPartitionFormatOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionFormat) {
		return nil, false
	}
	return o.PartitionFormat, true
}

// HasPartitionFormat returns a boolean if a field has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) HasPartitionFormat() bool {
	if o != nil && !IsNil(o.PartitionFormat) {
		return true
	}

	return false
}

// SetPartitionFormat gets a reference to the given string and assigns it to the PartitionFormat field.
func (o *GoogleCloudStorageOutputSettingsConfig) SetPartitionFormat(v string) {
	o.PartitionFormat = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *GoogleCloudStorageOutputSettingsConfig) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *GoogleCloudStorageOutputSettingsConfig) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *GoogleCloudStorageOutputSettingsConfig) SetPrefix(v string) {
	o.Prefix = &v
}

func (o GoogleCloudStorageOutputSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GoogleCloudStorageOutputSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchConfig) {
		toSerialize["batch_config"] = o.BatchConfig
	}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.PartitionFormat) {
		toSerialize["partition_format"] = o.PartitionFormat
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	return toSerialize, nil
}

type NullableGoogleCloudStorageOutputSettingsConfig struct {
	value *GoogleCloudStorageOutputSettingsConfig
	isSet bool
}

func (v NullableGoogleCloudStorageOutputSettingsConfig) Get() *GoogleCloudStorageOutputSettingsConfig {
	return v.value
}

func (v *NullableGoogleCloudStorageOutputSettingsConfig) Set(val *GoogleCloudStorageOutputSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGoogleCloudStorageOutputSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGoogleCloudStorageOutputSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGoogleCloudStorageOutputSettingsConfig(val *GoogleCloudStorageOutputSettingsConfig) *NullableGoogleCloudStorageOutputSettingsConfig {
	return &NullableGoogleCloudStorageOutputSettingsConfig{value: val, isSet: true}
}

func (v NullableGoogleCloudStorageOutputSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGoogleCloudStorageOutputSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


