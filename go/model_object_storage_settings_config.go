/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ObjectStorageSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStorageSettingsConfig{}

// ObjectStorageSettingsConfig Object Storage Output Settings
type ObjectStorageSettingsConfig struct {
	BatchConfig *BatchConfigBatchConfig `json:"batch_config,omitempty"`
	// The name of the object storage bucket where data will be stored
	Bucket *string `json:"bucket,omitempty"`
	// The compression method to be applied to the data before storing
	Compression *string `json:"compression,omitempty"`
	// The endpoint URL for the object storage service (e.g., https://fly.storage.tigris.dev, https://minio.example.com)
	Endpoint *string `json:"endpoint,omitempty"`
	FormatConfig *FormatterFormatConfig `json:"format_config,omitempty"`
	// Specifies the format for organizing data into partitions within your bucket. This determines the directory structure and naming convention for stored objects, affecting data organization and query efficiency. Examples include Hive-style partitioning (e.g., 'year=2024/month=01/day=01') and simple date-based formats (e.g., '2024/01/01').
	PartitionFormat *string `json:"partition_format,omitempty"`
	// An optional prefix for object keys to organize data within the bucket
	Prefix *string `json:"prefix,omitempty"`
	// The region for the object storage service (optional for some providers)
	Region *string `json:"region,omitempty"`
	// Whether to skip SSL certificate verification (useful for self-signed certificates or development environments)
	SkipSslVerification *bool `json:"skip_ssl_verification,omitempty"`
	// Whether to use path-style URLs (bucket.endpoint.com/object vs endpoint.com/bucket/object). Most S3-compatible services require this to be true.
	UsePathStyle *bool `json:"use_path_style,omitempty"`
}

// NewObjectStorageSettingsConfig instantiates a new ObjectStorageSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStorageSettingsConfig() *ObjectStorageSettingsConfig {
	this := ObjectStorageSettingsConfig{}
	return &this
}

// NewObjectStorageSettingsConfigWithDefaults instantiates a new ObjectStorageSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStorageSettingsConfigWithDefaults() *ObjectStorageSettingsConfig {
	this := ObjectStorageSettingsConfig{}
	return &this
}

// GetBatchConfig returns the BatchConfig field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetBatchConfig() BatchConfigBatchConfig {
	if o == nil || IsNil(o.BatchConfig) {
		var ret BatchConfigBatchConfig
		return ret
	}
	return *o.BatchConfig
}

// GetBatchConfigOk returns a tuple with the BatchConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetBatchConfigOk() (*BatchConfigBatchConfig, bool) {
	if o == nil || IsNil(o.BatchConfig) {
		return nil, false
	}
	return o.BatchConfig, true
}

// HasBatchConfig returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasBatchConfig() bool {
	if o != nil && !IsNil(o.BatchConfig) {
		return true
	}

	return false
}

// SetBatchConfig gets a reference to the given BatchConfigBatchConfig and assigns it to the BatchConfig field.
func (o *ObjectStorageSettingsConfig) SetBatchConfig(v BatchConfigBatchConfig) {
	o.BatchConfig = &v
}

// GetBucket returns the Bucket field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetBucket() string {
	if o == nil || IsNil(o.Bucket) {
		var ret string
		return ret
	}
	return *o.Bucket
}

// GetBucketOk returns a tuple with the Bucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetBucketOk() (*string, bool) {
	if o == nil || IsNil(o.Bucket) {
		return nil, false
	}
	return o.Bucket, true
}

// HasBucket returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasBucket() bool {
	if o != nil && !IsNil(o.Bucket) {
		return true
	}

	return false
}

// SetBucket gets a reference to the given string and assigns it to the Bucket field.
func (o *ObjectStorageSettingsConfig) SetBucket(v string) {
	o.Bucket = &v
}

// GetCompression returns the Compression field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetCompression() string {
	if o == nil || IsNil(o.Compression) {
		var ret string
		return ret
	}
	return *o.Compression
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetCompressionOk() (*string, bool) {
	if o == nil || IsNil(o.Compression) {
		return nil, false
	}
	return o.Compression, true
}

// HasCompression returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasCompression() bool {
	if o != nil && !IsNil(o.Compression) {
		return true
	}

	return false
}

// SetCompression gets a reference to the given string and assigns it to the Compression field.
func (o *ObjectStorageSettingsConfig) SetCompression(v string) {
	o.Compression = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *ObjectStorageSettingsConfig) SetEndpoint(v string) {
	o.Endpoint = &v
}

// GetFormatConfig returns the FormatConfig field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetFormatConfig() FormatterFormatConfig {
	if o == nil || IsNil(o.FormatConfig) {
		var ret FormatterFormatConfig
		return ret
	}
	return *o.FormatConfig
}

// GetFormatConfigOk returns a tuple with the FormatConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetFormatConfigOk() (*FormatterFormatConfig, bool) {
	if o == nil || IsNil(o.FormatConfig) {
		return nil, false
	}
	return o.FormatConfig, true
}

// HasFormatConfig returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasFormatConfig() bool {
	if o != nil && !IsNil(o.FormatConfig) {
		return true
	}

	return false
}

// SetFormatConfig gets a reference to the given FormatterFormatConfig and assigns it to the FormatConfig field.
func (o *ObjectStorageSettingsConfig) SetFormatConfig(v FormatterFormatConfig) {
	o.FormatConfig = &v
}

// GetPartitionFormat returns the PartitionFormat field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetPartitionFormat() string {
	if o == nil || IsNil(o.PartitionFormat) {
		var ret string
		return ret
	}
	return *o.PartitionFormat
}

// GetPartitionFormatOk returns a tuple with the PartitionFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetPartitionFormatOk() (*string, bool) {
	if o == nil || IsNil(o.PartitionFormat) {
		return nil, false
	}
	return o.PartitionFormat, true
}

// HasPartitionFormat returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasPartitionFormat() bool {
	if o != nil && !IsNil(o.PartitionFormat) {
		return true
	}

	return false
}

// SetPartitionFormat gets a reference to the given string and assigns it to the PartitionFormat field.
func (o *ObjectStorageSettingsConfig) SetPartitionFormat(v string) {
	o.PartitionFormat = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetPrefix() string {
	if o == nil || IsNil(o.Prefix) {
		var ret string
		return ret
	}
	return *o.Prefix
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetPrefixOk() (*string, bool) {
	if o == nil || IsNil(o.Prefix) {
		return nil, false
	}
	return o.Prefix, true
}

// HasPrefix returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasPrefix() bool {
	if o != nil && !IsNil(o.Prefix) {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given string and assigns it to the Prefix field.
func (o *ObjectStorageSettingsConfig) SetPrefix(v string) {
	o.Prefix = &v
}

// GetRegion returns the Region field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetRegion() string {
	if o == nil || IsNil(o.Region) {
		var ret string
		return ret
	}
	return *o.Region
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetRegionOk() (*string, bool) {
	if o == nil || IsNil(o.Region) {
		return nil, false
	}
	return o.Region, true
}

// HasRegion returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasRegion() bool {
	if o != nil && !IsNil(o.Region) {
		return true
	}

	return false
}

// SetRegion gets a reference to the given string and assigns it to the Region field.
func (o *ObjectStorageSettingsConfig) SetRegion(v string) {
	o.Region = &v
}

// GetSkipSslVerification returns the SkipSslVerification field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetSkipSslVerification() bool {
	if o == nil || IsNil(o.SkipSslVerification) {
		var ret bool
		return ret
	}
	return *o.SkipSslVerification
}

// GetSkipSslVerificationOk returns a tuple with the SkipSslVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetSkipSslVerificationOk() (*bool, bool) {
	if o == nil || IsNil(o.SkipSslVerification) {
		return nil, false
	}
	return o.SkipSslVerification, true
}

// HasSkipSslVerification returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasSkipSslVerification() bool {
	if o != nil && !IsNil(o.SkipSslVerification) {
		return true
	}

	return false
}

// SetSkipSslVerification gets a reference to the given bool and assigns it to the SkipSslVerification field.
func (o *ObjectStorageSettingsConfig) SetSkipSslVerification(v bool) {
	o.SkipSslVerification = &v
}

// GetUsePathStyle returns the UsePathStyle field value if set, zero value otherwise.
func (o *ObjectStorageSettingsConfig) GetUsePathStyle() bool {
	if o == nil || IsNil(o.UsePathStyle) {
		var ret bool
		return ret
	}
	return *o.UsePathStyle
}

// GetUsePathStyleOk returns a tuple with the UsePathStyle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStorageSettingsConfig) GetUsePathStyleOk() (*bool, bool) {
	if o == nil || IsNil(o.UsePathStyle) {
		return nil, false
	}
	return o.UsePathStyle, true
}

// HasUsePathStyle returns a boolean if a field has been set.
func (o *ObjectStorageSettingsConfig) HasUsePathStyle() bool {
	if o != nil && !IsNil(o.UsePathStyle) {
		return true
	}

	return false
}

// SetUsePathStyle gets a reference to the given bool and assigns it to the UsePathStyle field.
func (o *ObjectStorageSettingsConfig) SetUsePathStyle(v bool) {
	o.UsePathStyle = &v
}

func (o ObjectStorageSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStorageSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BatchConfig) {
		toSerialize["batch_config"] = o.BatchConfig
	}
	if !IsNil(o.Bucket) {
		toSerialize["bucket"] = o.Bucket
	}
	if !IsNil(o.Compression) {
		toSerialize["compression"] = o.Compression
	}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	if !IsNil(o.FormatConfig) {
		toSerialize["format_config"] = o.FormatConfig
	}
	if !IsNil(o.PartitionFormat) {
		toSerialize["partition_format"] = o.PartitionFormat
	}
	if !IsNil(o.Prefix) {
		toSerialize["prefix"] = o.Prefix
	}
	if !IsNil(o.Region) {
		toSerialize["region"] = o.Region
	}
	if !IsNil(o.SkipSslVerification) {
		toSerialize["skip_ssl_verification"] = o.SkipSslVerification
	}
	if !IsNil(o.UsePathStyle) {
		toSerialize["use_path_style"] = o.UsePathStyle
	}
	return toSerialize, nil
}

type NullableObjectStorageSettingsConfig struct {
	value *ObjectStorageSettingsConfig
	isSet bool
}

func (v NullableObjectStorageSettingsConfig) Get() *ObjectStorageSettingsConfig {
	return v.value
}

func (v *NullableObjectStorageSettingsConfig) Set(val *ObjectStorageSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStorageSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStorageSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStorageSettingsConfig(val *ObjectStorageSettingsConfig) *NullableObjectStorageSettingsConfig {
	return &NullableObjectStorageSettingsConfig{value: val, isSet: true}
}

func (v NullableObjectStorageSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStorageSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


