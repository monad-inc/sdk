/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the SnowflakeSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeSettingsConfig{}

// SnowflakeSettingsConfig Snowflake Input Settings
type SnowflakeSettingsConfig struct {
	// The unique identifier for your Snowflake account, typically in the form of 'organization-account_name'.
	Account *string `json:"account,omitempty"`
	// AuthType specifies the authentication method to use when connecting to Snowflake. Supported values are: - Password: Uses username and password authentication - Private Key: Uses key pair authentication with private/public key pair
	AuthType *string `json:"auth_type,omitempty"`
	// Cron expression for scheduling the input
	Cron *string `json:"cron,omitempty"`
	// The name of the Role your service account was granted which can access your resources.
	Role *string `json:"role,omitempty"`
	// User specifies the username for authentication to Snowflake.
	User *string `json:"user,omitempty"`
}

// NewSnowflakeSettingsConfig instantiates a new SnowflakeSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeSettingsConfig() *SnowflakeSettingsConfig {
	this := SnowflakeSettingsConfig{}
	return &this
}

// NewSnowflakeSettingsConfigWithDefaults instantiates a new SnowflakeSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeSettingsConfigWithDefaults() *SnowflakeSettingsConfig {
	this := SnowflakeSettingsConfig{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *SnowflakeSettingsConfig) GetAccount() string {
	if o == nil || IsNil(o.Account) {
		var ret string
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeSettingsConfig) GetAccountOk() (*string, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *SnowflakeSettingsConfig) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given string and assigns it to the Account field.
func (o *SnowflakeSettingsConfig) SetAccount(v string) {
	o.Account = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise.
func (o *SnowflakeSettingsConfig) GetAuthType() string {
	if o == nil || IsNil(o.AuthType) {
		var ret string
		return ret
	}
	return *o.AuthType
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeSettingsConfig) GetAuthTypeOk() (*string, bool) {
	if o == nil || IsNil(o.AuthType) {
		return nil, false
	}
	return o.AuthType, true
}

// HasAuthType returns a boolean if a field has been set.
func (o *SnowflakeSettingsConfig) HasAuthType() bool {
	if o != nil && !IsNil(o.AuthType) {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given string and assigns it to the AuthType field.
func (o *SnowflakeSettingsConfig) SetAuthType(v string) {
	o.AuthType = &v
}

// GetCron returns the Cron field value if set, zero value otherwise.
func (o *SnowflakeSettingsConfig) GetCron() string {
	if o == nil || IsNil(o.Cron) {
		var ret string
		return ret
	}
	return *o.Cron
}

// GetCronOk returns a tuple with the Cron field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeSettingsConfig) GetCronOk() (*string, bool) {
	if o == nil || IsNil(o.Cron) {
		return nil, false
	}
	return o.Cron, true
}

// HasCron returns a boolean if a field has been set.
func (o *SnowflakeSettingsConfig) HasCron() bool {
	if o != nil && !IsNil(o.Cron) {
		return true
	}

	return false
}

// SetCron gets a reference to the given string and assigns it to the Cron field.
func (o *SnowflakeSettingsConfig) SetCron(v string) {
	o.Cron = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *SnowflakeSettingsConfig) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeSettingsConfig) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *SnowflakeSettingsConfig) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *SnowflakeSettingsConfig) SetRole(v string) {
	o.Role = &v
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *SnowflakeSettingsConfig) GetUser() string {
	if o == nil || IsNil(o.User) {
		var ret string
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeSettingsConfig) GetUserOk() (*string, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *SnowflakeSettingsConfig) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given string and assigns it to the User field.
func (o *SnowflakeSettingsConfig) SetUser(v string) {
	o.User = &v
}

func (o SnowflakeSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.AuthType) {
		toSerialize["auth_type"] = o.AuthType
	}
	if !IsNil(o.Cron) {
		toSerialize["cron"] = o.Cron
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	return toSerialize, nil
}

type NullableSnowflakeSettingsConfig struct {
	value *SnowflakeSettingsConfig
	isSet bool
}

func (v NullableSnowflakeSettingsConfig) Get() *SnowflakeSettingsConfig {
	return v.value
}

func (v *NullableSnowflakeSettingsConfig) Set(val *SnowflakeSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeSettingsConfig(val *SnowflakeSettingsConfig) *NullableSnowflakeSettingsConfig {
	return &NullableSnowflakeSettingsConfig{value: val, isSet: true}
}

func (v NullableSnowflakeSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


