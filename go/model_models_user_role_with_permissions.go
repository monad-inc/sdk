/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsUserRoleWithPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsUserRoleWithPermissions{}

// ModelsUserRoleWithPermissions struct for ModelsUserRoleWithPermissions
type ModelsUserRoleWithPermissions struct {
	OrganizationId *string `json:"organization_id,omitempty"`
	Permissions []ModelsPermission `json:"permissions,omitempty"`
	RoleId *string `json:"role_id,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
}

// NewModelsUserRoleWithPermissions instantiates a new ModelsUserRoleWithPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsUserRoleWithPermissions() *ModelsUserRoleWithPermissions {
	this := ModelsUserRoleWithPermissions{}
	return &this
}

// NewModelsUserRoleWithPermissionsWithDefaults instantiates a new ModelsUserRoleWithPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsUserRoleWithPermissionsWithDefaults() *ModelsUserRoleWithPermissions {
	this := ModelsUserRoleWithPermissions{}
	return &this
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ModelsUserRoleWithPermissions) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserRoleWithPermissions) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ModelsUserRoleWithPermissions) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *ModelsUserRoleWithPermissions) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise.
func (o *ModelsUserRoleWithPermissions) GetPermissions() []ModelsPermission {
	if o == nil || IsNil(o.Permissions) {
		var ret []ModelsPermission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserRoleWithPermissions) GetPermissionsOk() ([]ModelsPermission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ModelsUserRoleWithPermissions) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []ModelsPermission and assigns it to the Permissions field.
func (o *ModelsUserRoleWithPermissions) SetPermissions(v []ModelsPermission) {
	o.Permissions = v
}

// GetRoleId returns the RoleId field value if set, zero value otherwise.
func (o *ModelsUserRoleWithPermissions) GetRoleId() string {
	if o == nil || IsNil(o.RoleId) {
		var ret string
		return ret
	}
	return *o.RoleId
}

// GetRoleIdOk returns a tuple with the RoleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserRoleWithPermissions) GetRoleIdOk() (*string, bool) {
	if o == nil || IsNil(o.RoleId) {
		return nil, false
	}
	return o.RoleId, true
}

// HasRoleId returns a boolean if a field has been set.
func (o *ModelsUserRoleWithPermissions) HasRoleId() bool {
	if o != nil && !IsNil(o.RoleId) {
		return true
	}

	return false
}

// SetRoleId gets a reference to the given string and assigns it to the RoleId field.
func (o *ModelsUserRoleWithPermissions) SetRoleId(v string) {
	o.RoleId = &v
}

// GetRoleName returns the RoleName field value if set, zero value otherwise.
func (o *ModelsUserRoleWithPermissions) GetRoleName() string {
	if o == nil || IsNil(o.RoleName) {
		var ret string
		return ret
	}
	return *o.RoleName
}

// GetRoleNameOk returns a tuple with the RoleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserRoleWithPermissions) GetRoleNameOk() (*string, bool) {
	if o == nil || IsNil(o.RoleName) {
		return nil, false
	}
	return o.RoleName, true
}

// HasRoleName returns a boolean if a field has been set.
func (o *ModelsUserRoleWithPermissions) HasRoleName() bool {
	if o != nil && !IsNil(o.RoleName) {
		return true
	}

	return false
}

// SetRoleName gets a reference to the given string and assigns it to the RoleName field.
func (o *ModelsUserRoleWithPermissions) SetRoleName(v string) {
	o.RoleName = &v
}

func (o ModelsUserRoleWithPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsUserRoleWithPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.Permissions) {
		toSerialize["permissions"] = o.Permissions
	}
	if !IsNil(o.RoleId) {
		toSerialize["role_id"] = o.RoleId
	}
	if !IsNil(o.RoleName) {
		toSerialize["role_name"] = o.RoleName
	}
	return toSerialize, nil
}

type NullableModelsUserRoleWithPermissions struct {
	value *ModelsUserRoleWithPermissions
	isSet bool
}

func (v NullableModelsUserRoleWithPermissions) Get() *ModelsUserRoleWithPermissions {
	return v.value
}

func (v *NullableModelsUserRoleWithPermissions) Set(val *ModelsUserRoleWithPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsUserRoleWithPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsUserRoleWithPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsUserRoleWithPermissions(val *ModelsUserRoleWithPermissions) *NullableModelsUserRoleWithPermissions {
	return &NullableModelsUserRoleWithPermissions{value: val, isSet: true}
}

func (v NullableModelsUserRoleWithPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsUserRoleWithPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


