/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsTransformsRepositoryList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsTransformsRepositoryList{}

// ModelsTransformsRepositoryList struct for ModelsTransformsRepositoryList
type ModelsTransformsRepositoryList struct {
	Pagination *ModelsPagination `json:"pagination,omitempty"`
	Transforms []ModelsTransformsRepositoryTransform `json:"transforms,omitempty"`
}

// NewModelsTransformsRepositoryList instantiates a new ModelsTransformsRepositoryList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsTransformsRepositoryList() *ModelsTransformsRepositoryList {
	this := ModelsTransformsRepositoryList{}
	return &this
}

// NewModelsTransformsRepositoryListWithDefaults instantiates a new ModelsTransformsRepositoryList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsTransformsRepositoryListWithDefaults() *ModelsTransformsRepositoryList {
	this := ModelsTransformsRepositoryList{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ModelsTransformsRepositoryList) GetPagination() ModelsPagination {
	if o == nil || IsNil(o.Pagination) {
		var ret ModelsPagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransformsRepositoryList) GetPaginationOk() (*ModelsPagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ModelsTransformsRepositoryList) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given ModelsPagination and assigns it to the Pagination field.
func (o *ModelsTransformsRepositoryList) SetPagination(v ModelsPagination) {
	o.Pagination = &v
}

// GetTransforms returns the Transforms field value if set, zero value otherwise.
func (o *ModelsTransformsRepositoryList) GetTransforms() []ModelsTransformsRepositoryTransform {
	if o == nil || IsNil(o.Transforms) {
		var ret []ModelsTransformsRepositoryTransform
		return ret
	}
	return o.Transforms
}

// GetTransformsOk returns a tuple with the Transforms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsTransformsRepositoryList) GetTransformsOk() ([]ModelsTransformsRepositoryTransform, bool) {
	if o == nil || IsNil(o.Transforms) {
		return nil, false
	}
	return o.Transforms, true
}

// HasTransforms returns a boolean if a field has been set.
func (o *ModelsTransformsRepositoryList) HasTransforms() bool {
	if o != nil && !IsNil(o.Transforms) {
		return true
	}

	return false
}

// SetTransforms gets a reference to the given []ModelsTransformsRepositoryTransform and assigns it to the Transforms field.
func (o *ModelsTransformsRepositoryList) SetTransforms(v []ModelsTransformsRepositoryTransform) {
	o.Transforms = v
}

func (o ModelsTransformsRepositoryList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsTransformsRepositoryList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Transforms) {
		toSerialize["transforms"] = o.Transforms
	}
	return toSerialize, nil
}

type NullableModelsTransformsRepositoryList struct {
	value *ModelsTransformsRepositoryList
	isSet bool
}

func (v NullableModelsTransformsRepositoryList) Get() *ModelsTransformsRepositoryList {
	return v.value
}

func (v *NullableModelsTransformsRepositoryList) Set(val *ModelsTransformsRepositoryList) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsTransformsRepositoryList) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsTransformsRepositoryList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsTransformsRepositoryList(val *ModelsTransformsRepositoryList) *NullableModelsTransformsRepositoryList {
	return &NullableModelsTransformsRepositoryList{value: val, isSet: true}
}

func (v NullableModelsTransformsRepositoryList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsTransformsRepositoryList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


