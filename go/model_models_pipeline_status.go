/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsPipelineStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsPipelineStatus{}

// ModelsPipelineStatus struct for ModelsPipelineStatus
type ModelsPipelineStatus struct {
	Egress *ModelsDataUsage `json:"egress,omitempty"`
	Errors *int32 `json:"errors,omitempty"`
	Ingress *ModelsDataUsage `json:"ingress,omitempty"`
	Nodes []ModelsPipelineNodeStatus `json:"nodes,omitempty"`
	OrganizationId *string `json:"organization_id,omitempty"`
	PipelineId *string `json:"pipeline_id,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewModelsPipelineStatus instantiates a new ModelsPipelineStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsPipelineStatus() *ModelsPipelineStatus {
	this := ModelsPipelineStatus{}
	return &this
}

// NewModelsPipelineStatusWithDefaults instantiates a new ModelsPipelineStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsPipelineStatusWithDefaults() *ModelsPipelineStatus {
	this := ModelsPipelineStatus{}
	return &this
}

// GetEgress returns the Egress field value if set, zero value otherwise.
func (o *ModelsPipelineStatus) GetEgress() ModelsDataUsage {
	if o == nil || IsNil(o.Egress) {
		var ret ModelsDataUsage
		return ret
	}
	return *o.Egress
}

// GetEgressOk returns a tuple with the Egress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineStatus) GetEgressOk() (*ModelsDataUsage, bool) {
	if o == nil || IsNil(o.Egress) {
		return nil, false
	}
	return o.Egress, true
}

// HasEgress returns a boolean if a field has been set.
func (o *ModelsPipelineStatus) HasEgress() bool {
	if o != nil && !IsNil(o.Egress) {
		return true
	}

	return false
}

// SetEgress gets a reference to the given ModelsDataUsage and assigns it to the Egress field.
func (o *ModelsPipelineStatus) SetEgress(v ModelsDataUsage) {
	o.Egress = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ModelsPipelineStatus) GetErrors() int32 {
	if o == nil || IsNil(o.Errors) {
		var ret int32
		return ret
	}
	return *o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineStatus) GetErrorsOk() (*int32, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ModelsPipelineStatus) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given int32 and assigns it to the Errors field.
func (o *ModelsPipelineStatus) SetErrors(v int32) {
	o.Errors = &v
}

// GetIngress returns the Ingress field value if set, zero value otherwise.
func (o *ModelsPipelineStatus) GetIngress() ModelsDataUsage {
	if o == nil || IsNil(o.Ingress) {
		var ret ModelsDataUsage
		return ret
	}
	return *o.Ingress
}

// GetIngressOk returns a tuple with the Ingress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineStatus) GetIngressOk() (*ModelsDataUsage, bool) {
	if o == nil || IsNil(o.Ingress) {
		return nil, false
	}
	return o.Ingress, true
}

// HasIngress returns a boolean if a field has been set.
func (o *ModelsPipelineStatus) HasIngress() bool {
	if o != nil && !IsNil(o.Ingress) {
		return true
	}

	return false
}

// SetIngress gets a reference to the given ModelsDataUsage and assigns it to the Ingress field.
func (o *ModelsPipelineStatus) SetIngress(v ModelsDataUsage) {
	o.Ingress = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *ModelsPipelineStatus) GetNodes() []ModelsPipelineNodeStatus {
	if o == nil || IsNil(o.Nodes) {
		var ret []ModelsPipelineNodeStatus
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineStatus) GetNodesOk() ([]ModelsPipelineNodeStatus, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *ModelsPipelineStatus) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []ModelsPipelineNodeStatus and assigns it to the Nodes field.
func (o *ModelsPipelineStatus) SetNodes(v []ModelsPipelineNodeStatus) {
	o.Nodes = v
}

// GetOrganizationId returns the OrganizationId field value if set, zero value otherwise.
func (o *ModelsPipelineStatus) GetOrganizationId() string {
	if o == nil || IsNil(o.OrganizationId) {
		var ret string
		return ret
	}
	return *o.OrganizationId
}

// GetOrganizationIdOk returns a tuple with the OrganizationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineStatus) GetOrganizationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationId) {
		return nil, false
	}
	return o.OrganizationId, true
}

// HasOrganizationId returns a boolean if a field has been set.
func (o *ModelsPipelineStatus) HasOrganizationId() bool {
	if o != nil && !IsNil(o.OrganizationId) {
		return true
	}

	return false
}

// SetOrganizationId gets a reference to the given string and assigns it to the OrganizationId field.
func (o *ModelsPipelineStatus) SetOrganizationId(v string) {
	o.OrganizationId = &v
}

// GetPipelineId returns the PipelineId field value if set, zero value otherwise.
func (o *ModelsPipelineStatus) GetPipelineId() string {
	if o == nil || IsNil(o.PipelineId) {
		var ret string
		return ret
	}
	return *o.PipelineId
}

// GetPipelineIdOk returns a tuple with the PipelineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineStatus) GetPipelineIdOk() (*string, bool) {
	if o == nil || IsNil(o.PipelineId) {
		return nil, false
	}
	return o.PipelineId, true
}

// HasPipelineId returns a boolean if a field has been set.
func (o *ModelsPipelineStatus) HasPipelineId() bool {
	if o != nil && !IsNil(o.PipelineId) {
		return true
	}

	return false
}

// SetPipelineId gets a reference to the given string and assigns it to the PipelineId field.
func (o *ModelsPipelineStatus) SetPipelineId(v string) {
	o.PipelineId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ModelsPipelineStatus) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsPipelineStatus) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ModelsPipelineStatus) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ModelsPipelineStatus) SetStatus(v string) {
	o.Status = &v
}

func (o ModelsPipelineStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsPipelineStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Egress) {
		toSerialize["egress"] = o.Egress
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Ingress) {
		toSerialize["ingress"] = o.Ingress
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.OrganizationId) {
		toSerialize["organization_id"] = o.OrganizationId
	}
	if !IsNil(o.PipelineId) {
		toSerialize["pipeline_id"] = o.PipelineId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableModelsPipelineStatus struct {
	value *ModelsPipelineStatus
	isSet bool
}

func (v NullableModelsPipelineStatus) Get() *ModelsPipelineStatus {
	return v.value
}

func (v *NullableModelsPipelineStatus) Set(val *ModelsPipelineStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsPipelineStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsPipelineStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsPipelineStatus(val *ModelsPipelineStatus) *NullableModelsPipelineStatus {
	return &NullableModelsPipelineStatus{value: val, isSet: true}
}

func (v NullableModelsPipelineStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsPipelineStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


