/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the SnowflakeInputSecretsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnowflakeInputSecretsConfig{}

// SnowflakeInputSecretsConfig Snowflake Input Secrets
type SnowflakeInputSecretsConfig struct {
	Password *ModelsSecret `json:"password,omitempty"`
	PrivateKey *ModelsSecret `json:"private_key,omitempty"`
}

// NewSnowflakeInputSecretsConfig instantiates a new SnowflakeInputSecretsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnowflakeInputSecretsConfig() *SnowflakeInputSecretsConfig {
	this := SnowflakeInputSecretsConfig{}
	return &this
}

// NewSnowflakeInputSecretsConfigWithDefaults instantiates a new SnowflakeInputSecretsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnowflakeInputSecretsConfigWithDefaults() *SnowflakeInputSecretsConfig {
	this := SnowflakeInputSecretsConfig{}
	return &this
}

// GetPassword returns the Password field value if set, zero value otherwise.
func (o *SnowflakeInputSecretsConfig) GetPassword() ModelsSecret {
	if o == nil || IsNil(o.Password) {
		var ret ModelsSecret
		return ret
	}
	return *o.Password
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSecretsConfig) GetPasswordOk() (*ModelsSecret, bool) {
	if o == nil || IsNil(o.Password) {
		return nil, false
	}
	return o.Password, true
}

// HasPassword returns a boolean if a field has been set.
func (o *SnowflakeInputSecretsConfig) HasPassword() bool {
	if o != nil && !IsNil(o.Password) {
		return true
	}

	return false
}

// SetPassword gets a reference to the given ModelsSecret and assigns it to the Password field.
func (o *SnowflakeInputSecretsConfig) SetPassword(v ModelsSecret) {
	o.Password = &v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise.
func (o *SnowflakeInputSecretsConfig) GetPrivateKey() ModelsSecret {
	if o == nil || IsNil(o.PrivateKey) {
		var ret ModelsSecret
		return ret
	}
	return *o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnowflakeInputSecretsConfig) GetPrivateKeyOk() (*ModelsSecret, bool) {
	if o == nil || IsNil(o.PrivateKey) {
		return nil, false
	}
	return o.PrivateKey, true
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *SnowflakeInputSecretsConfig) HasPrivateKey() bool {
	if o != nil && !IsNil(o.PrivateKey) {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given ModelsSecret and assigns it to the PrivateKey field.
func (o *SnowflakeInputSecretsConfig) SetPrivateKey(v ModelsSecret) {
	o.PrivateKey = &v
}

func (o SnowflakeInputSecretsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnowflakeInputSecretsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Password) {
		toSerialize["password"] = o.Password
	}
	if !IsNil(o.PrivateKey) {
		toSerialize["private_key"] = o.PrivateKey
	}
	return toSerialize, nil
}

type NullableSnowflakeInputSecretsConfig struct {
	value *SnowflakeInputSecretsConfig
	isSet bool
}

func (v NullableSnowflakeInputSecretsConfig) Get() *SnowflakeInputSecretsConfig {
	return v.value
}

func (v *NullableSnowflakeInputSecretsConfig) Set(val *SnowflakeInputSecretsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnowflakeInputSecretsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnowflakeInputSecretsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnowflakeInputSecretsConfig(val *SnowflakeInputSecretsConfig) *NullableSnowflakeInputSecretsConfig {
	return &NullableSnowflakeInputSecretsConfig{value: val, isSet: true}
}

func (v NullableSnowflakeInputSecretsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnowflakeInputSecretsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


