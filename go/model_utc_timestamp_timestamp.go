/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the UtcTimestampTimestamp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UtcTimestampTimestamp{}

// UtcTimestampTimestamp struct for UtcTimestampTimestamp
type UtcTimestampTimestamp struct {
	// The format of the timestamp
	Format *string `json:"format,omitempty"`
	// The key to store the timestamp in
	Key *string `json:"key,omitempty"`
}

// NewUtcTimestampTimestamp instantiates a new UtcTimestampTimestamp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUtcTimestampTimestamp() *UtcTimestampTimestamp {
	this := UtcTimestampTimestamp{}
	return &this
}

// NewUtcTimestampTimestampWithDefaults instantiates a new UtcTimestampTimestamp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUtcTimestampTimestampWithDefaults() *UtcTimestampTimestamp {
	this := UtcTimestampTimestamp{}
	return &this
}

// GetFormat returns the Format field value if set, zero value otherwise.
func (o *UtcTimestampTimestamp) GetFormat() string {
	if o == nil || IsNil(o.Format) {
		var ret string
		return ret
	}
	return *o.Format
}

// GetFormatOk returns a tuple with the Format field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtcTimestampTimestamp) GetFormatOk() (*string, bool) {
	if o == nil || IsNil(o.Format) {
		return nil, false
	}
	return o.Format, true
}

// HasFormat returns a boolean if a field has been set.
func (o *UtcTimestampTimestamp) HasFormat() bool {
	if o != nil && !IsNil(o.Format) {
		return true
	}

	return false
}

// SetFormat gets a reference to the given string and assigns it to the Format field.
func (o *UtcTimestampTimestamp) SetFormat(v string) {
	o.Format = &v
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *UtcTimestampTimestamp) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UtcTimestampTimestamp) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *UtcTimestampTimestamp) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *UtcTimestampTimestamp) SetKey(v string) {
	o.Key = &v
}

func (o UtcTimestampTimestamp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UtcTimestampTimestamp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Format) {
		toSerialize["format"] = o.Format
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	return toSerialize, nil
}

type NullableUtcTimestampTimestamp struct {
	value *UtcTimestampTimestamp
	isSet bool
}

func (v NullableUtcTimestampTimestamp) Get() *UtcTimestampTimestamp {
	return v.value
}

func (v *NullableUtcTimestampTimestamp) Set(val *UtcTimestampTimestamp) {
	v.value = val
	v.isSet = true
}

func (v NullableUtcTimestampTimestamp) IsSet() bool {
	return v.isSet
}

func (v *NullableUtcTimestampTimestamp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUtcTimestampTimestamp(val *UtcTimestampTimestamp) *NullableUtcTimestampTimestamp {
	return &NullableUtcTimestampTimestamp{value: val, isSet: true}
}

func (v NullableUtcTimestampTimestamp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUtcTimestampTimestamp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


