/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// BillingAccountsAPIService BillingAccountsAPI service
type BillingAccountsAPIService service

type ApiV2BillingAccountsBillingAccountIdDeleteRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
}

func (r ApiV2BillingAccountsBillingAccountIdDeleteRequest) Execute() (*http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdDeleteExecute(r)
}

/*
V2BillingAccountsBillingAccountIdDelete Delete Billing Account

Delete Billing Account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @return ApiV2BillingAccountsBillingAccountIdDeleteRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdDelete(ctx context.Context, billingAccountId string) ApiV2BillingAccountsBillingAccountIdDeleteRequest {
	return ApiV2BillingAccountsBillingAccountIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
	}
}

// Execute executes the request
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdDeleteExecute(r ApiV2BillingAccountsBillingAccountIdDeleteRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdDelete")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdGetRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
}

func (r ApiV2BillingAccountsBillingAccountIdGetRequest) Execute() (*ModelsBillingAccount, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdGetExecute(r)
}

/*
V2BillingAccountsBillingAccountIdGet Get Billing Account

Get Billing Account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @return ApiV2BillingAccountsBillingAccountIdGetRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdGet(ctx context.Context, billingAccountId string) ApiV2BillingAccountsBillingAccountIdGetRequest {
	return ApiV2BillingAccountsBillingAccountIdGetRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
	}
}

// Execute executes the request
//  @return ModelsBillingAccount
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdGetExecute(r ApiV2BillingAccountsBillingAccountIdGetRequest) (*ModelsBillingAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsBillingAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdPatchRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
	routesV2UpdateBillingAccountRequest *RoutesV2UpdateBillingAccountRequest
}

// Request body for updating a billing account
func (r ApiV2BillingAccountsBillingAccountIdPatchRequest) RoutesV2UpdateBillingAccountRequest(routesV2UpdateBillingAccountRequest RoutesV2UpdateBillingAccountRequest) ApiV2BillingAccountsBillingAccountIdPatchRequest {
	r.routesV2UpdateBillingAccountRequest = &routesV2UpdateBillingAccountRequest
	return r
}

func (r ApiV2BillingAccountsBillingAccountIdPatchRequest) Execute() (*ModelsBillingAccount, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdPatchExecute(r)
}

/*
V2BillingAccountsBillingAccountIdPatch Update Billing Account

Update Billing Account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @return ApiV2BillingAccountsBillingAccountIdPatchRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdPatch(ctx context.Context, billingAccountId string) ApiV2BillingAccountsBillingAccountIdPatchRequest {
	return ApiV2BillingAccountsBillingAccountIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
	}
}

// Execute executes the request
//  @return ModelsBillingAccount
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdPatchExecute(r ApiV2BillingAccountsBillingAccountIdPatchRequest) (*ModelsBillingAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsBillingAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routesV2UpdateBillingAccountRequest == nil {
		return localVarReturnValue, nil, reportError("routesV2UpdateBillingAccountRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routesV2UpdateBillingAccountRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdRolesGetRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
}

func (r ApiV2BillingAccountsBillingAccountIdRolesGetRequest) Execute() ([]ModelsBillingAccountRole, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdRolesGetExecute(r)
}

/*
V2BillingAccountsBillingAccountIdRolesGet Get Billing Account Roles

Get Billing Account Roles

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @return ApiV2BillingAccountsBillingAccountIdRolesGetRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesGet(ctx context.Context, billingAccountId string) ApiV2BillingAccountsBillingAccountIdRolesGetRequest {
	return ApiV2BillingAccountsBillingAccountIdRolesGetRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
	}
}

// Execute executes the request
//  @return []ModelsBillingAccountRole
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesGetExecute(r ApiV2BillingAccountsBillingAccountIdRolesGetRequest) ([]ModelsBillingAccountRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsBillingAccountRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdRolesGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdRolesPostRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
	routesV2CreateBillingAccountRoleRequest *RoutesV2CreateBillingAccountRoleRequest
}

// Create Billing Account Role Request
func (r ApiV2BillingAccountsBillingAccountIdRolesPostRequest) RoutesV2CreateBillingAccountRoleRequest(routesV2CreateBillingAccountRoleRequest RoutesV2CreateBillingAccountRoleRequest) ApiV2BillingAccountsBillingAccountIdRolesPostRequest {
	r.routesV2CreateBillingAccountRoleRequest = &routesV2CreateBillingAccountRoleRequest
	return r
}

func (r ApiV2BillingAccountsBillingAccountIdRolesPostRequest) Execute() (*ModelsBillingAccountRole, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdRolesPostExecute(r)
}

/*
V2BillingAccountsBillingAccountIdRolesPost Create Billing Account Role

Create Billing Account Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @return ApiV2BillingAccountsBillingAccountIdRolesPostRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesPost(ctx context.Context, billingAccountId string) ApiV2BillingAccountsBillingAccountIdRolesPostRequest {
	return ApiV2BillingAccountsBillingAccountIdRolesPostRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
	}
}

// Execute executes the request
//  @return ModelsBillingAccountRole
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesPostExecute(r ApiV2BillingAccountsBillingAccountIdRolesPostRequest) (*ModelsBillingAccountRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsBillingAccountRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdRolesPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/roles"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routesV2CreateBillingAccountRoleRequest == nil {
		return localVarReturnValue, nil, reportError("routesV2CreateBillingAccountRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routesV2CreateBillingAccountRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdRolesRoleIdDeleteRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
	roleId string
}

func (r ApiV2BillingAccountsBillingAccountIdRolesRoleIdDeleteRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdRolesRoleIdDeleteExecute(r)
}

/*
V2BillingAccountsBillingAccountIdRolesRoleIdDelete Delete Billing Account Role

Delete Billing Account Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @param roleId Role ID
 @return ApiV2BillingAccountsBillingAccountIdRolesRoleIdDeleteRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdDelete(ctx context.Context, billingAccountId string, roleId string) ApiV2BillingAccountsBillingAccountIdRolesRoleIdDeleteRequest {
	return ApiV2BillingAccountsBillingAccountIdRolesRoleIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
		roleId: roleId,
	}
}

// Execute executes the request
//  @return string
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdDeleteExecute(r ApiV2BillingAccountsBillingAccountIdRolesRoleIdDeleteRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdRolesRoleIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/roles/{role_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role_id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdRolesRoleIdGetRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
	roleId string
}

func (r ApiV2BillingAccountsBillingAccountIdRolesRoleIdGetRequest) Execute() (*ModelsBillingAccountRole, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdRolesRoleIdGetExecute(r)
}

/*
V2BillingAccountsBillingAccountIdRolesRoleIdGet Get Billing Account Role

Get Billing Account Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @param roleId Role ID
 @return ApiV2BillingAccountsBillingAccountIdRolesRoleIdGetRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdGet(ctx context.Context, billingAccountId string, roleId string) ApiV2BillingAccountsBillingAccountIdRolesRoleIdGetRequest {
	return ApiV2BillingAccountsBillingAccountIdRolesRoleIdGetRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
		roleId: roleId,
	}
}

// Execute executes the request
//  @return ModelsBillingAccountRole
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdGetExecute(r ApiV2BillingAccountsBillingAccountIdRolesRoleIdGetRequest) (*ModelsBillingAccountRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsBillingAccountRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdRolesRoleIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/roles/{role_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role_id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdRolesRoleIdPatchRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
	roleId string
	routesV2UpdateBillingAccountRoleRequest *RoutesV2UpdateBillingAccountRoleRequest
}

// Update Billing Account Role Request
func (r ApiV2BillingAccountsBillingAccountIdRolesRoleIdPatchRequest) RoutesV2UpdateBillingAccountRoleRequest(routesV2UpdateBillingAccountRoleRequest RoutesV2UpdateBillingAccountRoleRequest) ApiV2BillingAccountsBillingAccountIdRolesRoleIdPatchRequest {
	r.routesV2UpdateBillingAccountRoleRequest = &routesV2UpdateBillingAccountRoleRequest
	return r
}

func (r ApiV2BillingAccountsBillingAccountIdRolesRoleIdPatchRequest) Execute() (*ModelsBillingAccountRole, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdRolesRoleIdPatchExecute(r)
}

/*
V2BillingAccountsBillingAccountIdRolesRoleIdPatch Update Billing Account Role

Update Billing Account Role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @param roleId Role ID
 @return ApiV2BillingAccountsBillingAccountIdRolesRoleIdPatchRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdPatch(ctx context.Context, billingAccountId string, roleId string) ApiV2BillingAccountsBillingAccountIdRolesRoleIdPatchRequest {
	return ApiV2BillingAccountsBillingAccountIdRolesRoleIdPatchRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
		roleId: roleId,
	}
}

// Execute executes the request
//  @return ModelsBillingAccountRole
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdPatchExecute(r ApiV2BillingAccountsBillingAccountIdRolesRoleIdPatchRequest) (*ModelsBillingAccountRole, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPatch
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsBillingAccountRole
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdRolesRoleIdPatch")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/roles/{role_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role_id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routesV2UpdateBillingAccountRoleRequest == nil {
		return localVarReturnValue, nil, reportError("routesV2UpdateBillingAccountRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routesV2UpdateBillingAccountRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersPostRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
	roleId string
	routesV2CreatebillingAccountUserRoleRequest *RoutesV2CreatebillingAccountUserRoleRequest
}

// Create Billing Account User Role Request
func (r ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersPostRequest) RoutesV2CreatebillingAccountUserRoleRequest(routesV2CreatebillingAccountUserRoleRequest RoutesV2CreatebillingAccountUserRoleRequest) ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersPostRequest {
	r.routesV2CreatebillingAccountUserRoleRequest = &routesV2CreatebillingAccountUserRoleRequest
	return r
}

func (r ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersPostRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdRolesRoleIdUsersPostExecute(r)
}

/*
V2BillingAccountsBillingAccountIdRolesRoleIdUsersPost Create Billing Account User Role

Add a user to a billing account role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @param roleId Role ID
 @return ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersPostRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdUsersPost(ctx context.Context, billingAccountId string, roleId string) ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersPostRequest {
	return ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersPostRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
		roleId: roleId,
	}
}

// Execute executes the request
//  @return string
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdUsersPostExecute(r ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersPostRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdRolesRoleIdUsersPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/roles/{role_id}/users"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role_id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routesV2CreatebillingAccountUserRoleRequest == nil {
		return localVarReturnValue, nil, reportError("routesV2CreatebillingAccountUserRoleRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routesV2CreatebillingAccountUserRoleRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	billingAccountId string
	roleId string
	userId string
}

func (r ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteRequest) Execute() (string, *http.Response, error) {
	return r.ApiService.V2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteExecute(r)
}

/*
V2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDelete Delete Billing Account User Role

Remove a user to a billing account role

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param billingAccountId Billing Account ID
 @param roleId Role ID
 @param userId User ID
 @return ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDelete(ctx context.Context, billingAccountId string, roleId string, userId string) ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteRequest {
	return ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteRequest{
		ApiService: a,
		ctx: ctx,
		billingAccountId: billingAccountId,
		roleId: roleId,
		userId: userId,
	}
}

// Execute executes the request
//  @return string
func (a *BillingAccountsAPIService) V2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteExecute(r ApiV2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDeleteRequest) (string, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  string
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsBillingAccountIdRolesRoleIdUsersUserIdDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts/{billing_account_id}/roles/{role_id}/users/{user_id}"
	localVarPath = strings.Replace(localVarPath, "{"+"billing_account_id"+"}", url.PathEscape(parameterValueToString(r.billingAccountId, "billingAccountId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"role_id"+"}", url.PathEscape(parameterValueToString(r.roleId, "roleId")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"user_id"+"}", url.PathEscape(parameterValueToString(r.userId, "userId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsGetRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	limit *int32
	offset *int32
}

// Limit
func (r ApiV2BillingAccountsGetRequest) Limit(limit int32) ApiV2BillingAccountsGetRequest {
	r.limit = &limit
	return r
}

// Offset
func (r ApiV2BillingAccountsGetRequest) Offset(offset int32) ApiV2BillingAccountsGetRequest {
	r.offset = &offset
	return r
}

func (r ApiV2BillingAccountsGetRequest) Execute() (*ModelsBillingAccountList, *http.Response, error) {
	return r.ApiService.V2BillingAccountsGetExecute(r)
}

/*
V2BillingAccountsGet List Billing Accounts

List Billing Accounts

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2BillingAccountsGetRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsGet(ctx context.Context) ApiV2BillingAccountsGetRequest {
	return ApiV2BillingAccountsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsBillingAccountList
func (a *BillingAccountsAPIService) V2BillingAccountsGetExecute(r ApiV2BillingAccountsGetRequest) (*ModelsBillingAccountList, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsBillingAccountList
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "form", "")
	}
	if r.offset != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "offset", r.offset, "form", "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingAccountsPostRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
	routesV2CreateBillingAccountRequest *RoutesV2CreateBillingAccountRequest
}

// Request body for creating a billing account
func (r ApiV2BillingAccountsPostRequest) RoutesV2CreateBillingAccountRequest(routesV2CreateBillingAccountRequest RoutesV2CreateBillingAccountRequest) ApiV2BillingAccountsPostRequest {
	r.routesV2CreateBillingAccountRequest = &routesV2CreateBillingAccountRequest
	return r
}

func (r ApiV2BillingAccountsPostRequest) Execute() (*ModelsBillingAccount, *http.Response, error) {
	return r.ApiService.V2BillingAccountsPostExecute(r)
}

/*
V2BillingAccountsPost Create Billing Account

Create Billing Account

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2BillingAccountsPostRequest
*/
func (a *BillingAccountsAPIService) V2BillingAccountsPost(ctx context.Context) ApiV2BillingAccountsPostRequest {
	return ApiV2BillingAccountsPostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ModelsBillingAccount
func (a *BillingAccountsAPIService) V2BillingAccountsPostExecute(r ApiV2BillingAccountsPostRequest) (*ModelsBillingAccount, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ModelsBillingAccount
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingAccountsPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/accounts"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.routesV2CreateBillingAccountRequest == nil {
		return localVarReturnValue, nil, reportError("routesV2CreateBillingAccountRequest is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.routesV2CreateBillingAccountRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiV2BillingPermissionsGetRequest struct {
	ctx context.Context
	ApiService *BillingAccountsAPIService
}

func (r ApiV2BillingPermissionsGetRequest) Execute() ([]ModelsBillingAccountPermission, *http.Response, error) {
	return r.ApiService.V2BillingPermissionsGetExecute(r)
}

/*
V2BillingPermissionsGet Get Billing Permissions

Get Billing Permissions

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiV2BillingPermissionsGetRequest
*/
func (a *BillingAccountsAPIService) V2BillingPermissionsGet(ctx context.Context) ApiV2BillingPermissionsGetRequest {
	return ApiV2BillingPermissionsGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []ModelsBillingAccountPermission
func (a *BillingAccountsAPIService) V2BillingPermissionsGetExecute(r ApiV2BillingPermissionsGetRequest) ([]ModelsBillingAccountPermission, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []ModelsBillingAccountPermission
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "BillingAccountsAPIService.V2BillingPermissionsGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/billing/permissions"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["Bearer"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 500 {
			var v string
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
