/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsDataUsage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsDataUsage{}

// ModelsDataUsage struct for ModelsDataUsage
type ModelsDataUsage struct {
	Bytes *int32 `json:"bytes,omitempty"`
	Records *int32 `json:"records,omitempty"`
}

// NewModelsDataUsage instantiates a new ModelsDataUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsDataUsage() *ModelsDataUsage {
	this := ModelsDataUsage{}
	return &this
}

// NewModelsDataUsageWithDefaults instantiates a new ModelsDataUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsDataUsageWithDefaults() *ModelsDataUsage {
	this := ModelsDataUsage{}
	return &this
}

// GetBytes returns the Bytes field value if set, zero value otherwise.
func (o *ModelsDataUsage) GetBytes() int32 {
	if o == nil || IsNil(o.Bytes) {
		var ret int32
		return ret
	}
	return *o.Bytes
}

// GetBytesOk returns a tuple with the Bytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDataUsage) GetBytesOk() (*int32, bool) {
	if o == nil || IsNil(o.Bytes) {
		return nil, false
	}
	return o.Bytes, true
}

// HasBytes returns a boolean if a field has been set.
func (o *ModelsDataUsage) HasBytes() bool {
	if o != nil && !IsNil(o.Bytes) {
		return true
	}

	return false
}

// SetBytes gets a reference to the given int32 and assigns it to the Bytes field.
func (o *ModelsDataUsage) SetBytes(v int32) {
	o.Bytes = &v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *ModelsDataUsage) GetRecords() int32 {
	if o == nil || IsNil(o.Records) {
		var ret int32
		return ret
	}
	return *o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsDataUsage) GetRecordsOk() (*int32, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *ModelsDataUsage) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given int32 and assigns it to the Records field.
func (o *ModelsDataUsage) SetRecords(v int32) {
	o.Records = &v
}

func (o ModelsDataUsage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsDataUsage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bytes) {
		toSerialize["bytes"] = o.Bytes
	}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	return toSerialize, nil
}

type NullableModelsDataUsage struct {
	value *ModelsDataUsage
	isSet bool
}

func (v NullableModelsDataUsage) Get() *ModelsDataUsage {
	return v.value
}

func (v *NullableModelsDataUsage) Set(val *ModelsDataUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsDataUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsDataUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsDataUsage(val *ModelsDataUsage) *NullableModelsDataUsage {
	return &NullableModelsDataUsage{value: val, isSet: true}
}

func (v NullableModelsDataUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsDataUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


