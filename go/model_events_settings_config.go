/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the EventsSettingsConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventsSettingsConfig{}

// EventsSettingsConfig Twilio Events settings
type EventsSettingsConfig struct {
	// Only includes events initiated by this Actor. Useful for auditing actions taken by specific users or API credentials.
	ActorSid *string `json:"actor_sid,omitempty"`
	// Only includes events of a specific event type: https://www.twilio.com/docs/usage/monitor-events#event-types
	EventType *string `json:"event_type,omitempty"`
	// Only include events after this time for the initial sync. If not specified, returns all events from the start. Must be a valid ISO 8601 formatted datetime string: yyyy-MM-dd'T'HH:mm:ss'Z'
	ReplicationStartTime *string `json:"replication_start_time,omitempty"`
	// Only include events that refer to this resource. Useful for discovering the history of a specific resource.
	ResourceSid *string `json:"resource_sid,omitempty"`
	// Generate synthetic demo data instead of connecting to the real data source.
	UseSyntheticData *bool `json:"use_synthetic_data,omitempty"`
}

// NewEventsSettingsConfig instantiates a new EventsSettingsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventsSettingsConfig() *EventsSettingsConfig {
	this := EventsSettingsConfig{}
	return &this
}

// NewEventsSettingsConfigWithDefaults instantiates a new EventsSettingsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventsSettingsConfigWithDefaults() *EventsSettingsConfig {
	this := EventsSettingsConfig{}
	return &this
}

// GetActorSid returns the ActorSid field value if set, zero value otherwise.
func (o *EventsSettingsConfig) GetActorSid() string {
	if o == nil || IsNil(o.ActorSid) {
		var ret string
		return ret
	}
	return *o.ActorSid
}

// GetActorSidOk returns a tuple with the ActorSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsSettingsConfig) GetActorSidOk() (*string, bool) {
	if o == nil || IsNil(o.ActorSid) {
		return nil, false
	}
	return o.ActorSid, true
}

// HasActorSid returns a boolean if a field has been set.
func (o *EventsSettingsConfig) HasActorSid() bool {
	if o != nil && !IsNil(o.ActorSid) {
		return true
	}

	return false
}

// SetActorSid gets a reference to the given string and assigns it to the ActorSid field.
func (o *EventsSettingsConfig) SetActorSid(v string) {
	o.ActorSid = &v
}

// GetEventType returns the EventType field value if set, zero value otherwise.
func (o *EventsSettingsConfig) GetEventType() string {
	if o == nil || IsNil(o.EventType) {
		var ret string
		return ret
	}
	return *o.EventType
}

// GetEventTypeOk returns a tuple with the EventType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsSettingsConfig) GetEventTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EventType) {
		return nil, false
	}
	return o.EventType, true
}

// HasEventType returns a boolean if a field has been set.
func (o *EventsSettingsConfig) HasEventType() bool {
	if o != nil && !IsNil(o.EventType) {
		return true
	}

	return false
}

// SetEventType gets a reference to the given string and assigns it to the EventType field.
func (o *EventsSettingsConfig) SetEventType(v string) {
	o.EventType = &v
}

// GetReplicationStartTime returns the ReplicationStartTime field value if set, zero value otherwise.
func (o *EventsSettingsConfig) GetReplicationStartTime() string {
	if o == nil || IsNil(o.ReplicationStartTime) {
		var ret string
		return ret
	}
	return *o.ReplicationStartTime
}

// GetReplicationStartTimeOk returns a tuple with the ReplicationStartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsSettingsConfig) GetReplicationStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.ReplicationStartTime) {
		return nil, false
	}
	return o.ReplicationStartTime, true
}

// HasReplicationStartTime returns a boolean if a field has been set.
func (o *EventsSettingsConfig) HasReplicationStartTime() bool {
	if o != nil && !IsNil(o.ReplicationStartTime) {
		return true
	}

	return false
}

// SetReplicationStartTime gets a reference to the given string and assigns it to the ReplicationStartTime field.
func (o *EventsSettingsConfig) SetReplicationStartTime(v string) {
	o.ReplicationStartTime = &v
}

// GetResourceSid returns the ResourceSid field value if set, zero value otherwise.
func (o *EventsSettingsConfig) GetResourceSid() string {
	if o == nil || IsNil(o.ResourceSid) {
		var ret string
		return ret
	}
	return *o.ResourceSid
}

// GetResourceSidOk returns a tuple with the ResourceSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsSettingsConfig) GetResourceSidOk() (*string, bool) {
	if o == nil || IsNil(o.ResourceSid) {
		return nil, false
	}
	return o.ResourceSid, true
}

// HasResourceSid returns a boolean if a field has been set.
func (o *EventsSettingsConfig) HasResourceSid() bool {
	if o != nil && !IsNil(o.ResourceSid) {
		return true
	}

	return false
}

// SetResourceSid gets a reference to the given string and assigns it to the ResourceSid field.
func (o *EventsSettingsConfig) SetResourceSid(v string) {
	o.ResourceSid = &v
}

// GetUseSyntheticData returns the UseSyntheticData field value if set, zero value otherwise.
func (o *EventsSettingsConfig) GetUseSyntheticData() bool {
	if o == nil || IsNil(o.UseSyntheticData) {
		var ret bool
		return ret
	}
	return *o.UseSyntheticData
}

// GetUseSyntheticDataOk returns a tuple with the UseSyntheticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventsSettingsConfig) GetUseSyntheticDataOk() (*bool, bool) {
	if o == nil || IsNil(o.UseSyntheticData) {
		return nil, false
	}
	return o.UseSyntheticData, true
}

// HasUseSyntheticData returns a boolean if a field has been set.
func (o *EventsSettingsConfig) HasUseSyntheticData() bool {
	if o != nil && !IsNil(o.UseSyntheticData) {
		return true
	}

	return false
}

// SetUseSyntheticData gets a reference to the given bool and assigns it to the UseSyntheticData field.
func (o *EventsSettingsConfig) SetUseSyntheticData(v bool) {
	o.UseSyntheticData = &v
}

func (o EventsSettingsConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventsSettingsConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActorSid) {
		toSerialize["actor_sid"] = o.ActorSid
	}
	if !IsNil(o.EventType) {
		toSerialize["event_type"] = o.EventType
	}
	if !IsNil(o.ReplicationStartTime) {
		toSerialize["replication_start_time"] = o.ReplicationStartTime
	}
	if !IsNil(o.ResourceSid) {
		toSerialize["resource_sid"] = o.ResourceSid
	}
	if !IsNil(o.UseSyntheticData) {
		toSerialize["use_synthetic_data"] = o.UseSyntheticData
	}
	return toSerialize, nil
}

type NullableEventsSettingsConfig struct {
	value *EventsSettingsConfig
	isSet bool
}

func (v NullableEventsSettingsConfig) Get() *EventsSettingsConfig {
	return v.value
}

func (v *NullableEventsSettingsConfig) Set(val *EventsSettingsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEventsSettingsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEventsSettingsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventsSettingsConfig(val *EventsSettingsConfig) *NullableEventsSettingsConfig {
	return &NullableEventsSettingsConfig{value: val, isSet: true}
}

func (v NullableEventsSettingsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventsSettingsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


