/*
Monad API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
	"fmt"
)

// TypesFilterNameStringType The following are keys you can use:    - description: Prefix match, not case-sensitive.    - name: Prefix match, case-sensitive.    - tag-key: Prefix match, case-sensitive.    - tag-value: Prefix match, case-sensitive.    - primary-region: Prefix match, case-sensitive.    - owning-service: Prefix match, case-sensitive.    - all: Breaks the filter value string into words and then searches all   attributes for matches. Not case-sensitive.
type TypesFilterNameStringType string

// List of types.FilterNameStringType
const (
	FilterNameStringTypeDescription TypesFilterNameStringType = "description"
	FilterNameStringTypeName TypesFilterNameStringType = "name"
	FilterNameStringTypeTagKey TypesFilterNameStringType = "tag-key"
	FilterNameStringTypeTagValue TypesFilterNameStringType = "tag-value"
	FilterNameStringTypePrimaryRegion TypesFilterNameStringType = "primary-region"
	FilterNameStringTypeOwningService TypesFilterNameStringType = "owning-service"
	FilterNameStringTypeAll TypesFilterNameStringType = "all"
)

// All allowed values of TypesFilterNameStringType enum
var AllowedTypesFilterNameStringTypeEnumValues = []TypesFilterNameStringType{
	"description",
	"name",
	"tag-key",
	"tag-value",
	"primary-region",
	"owning-service",
	"all",
}

func (v *TypesFilterNameStringType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TypesFilterNameStringType(value)
	for _, existing := range AllowedTypesFilterNameStringTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TypesFilterNameStringType", value)
}

// NewTypesFilterNameStringTypeFromValue returns a pointer to a valid TypesFilterNameStringType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTypesFilterNameStringTypeFromValue(v string) (*TypesFilterNameStringType, error) {
	ev := TypesFilterNameStringType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TypesFilterNameStringType: valid values are %v", v, AllowedTypesFilterNameStringTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TypesFilterNameStringType) IsValid() bool {
	for _, existing := range AllowedTypesFilterNameStringTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to types.FilterNameStringType value
func (v TypesFilterNameStringType) Ptr() *TypesFilterNameStringType {
	return &v
}

type NullableTypesFilterNameStringType struct {
	value *TypesFilterNameStringType
	isSet bool
}

func (v NullableTypesFilterNameStringType) Get() *TypesFilterNameStringType {
	return v.value
}

func (v *NullableTypesFilterNameStringType) Set(val *TypesFilterNameStringType) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesFilterNameStringType) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesFilterNameStringType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesFilterNameStringType(val *TypesFilterNameStringType) *NullableTypesFilterNameStringType {
	return &NullableTypesFilterNameStringType{value: val, isSet: true}
}

func (v NullableTypesFilterNameStringType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesFilterNameStringType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

