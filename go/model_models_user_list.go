/*
Monad Swagger API

This is the monad API

API version: 1.0
Contact: support@swagger.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package monad

import (
	"encoding/json"
)

// checks if the ModelsUserList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelsUserList{}

// ModelsUserList struct for ModelsUserList
type ModelsUserList struct {
	Pagination *ModelsPagination `json:"pagination,omitempty"`
	Users []ModelsUser `json:"users,omitempty"`
}

// NewModelsUserList instantiates a new ModelsUserList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelsUserList() *ModelsUserList {
	this := ModelsUserList{}
	return &this
}

// NewModelsUserListWithDefaults instantiates a new ModelsUserList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelsUserListWithDefaults() *ModelsUserList {
	this := ModelsUserList{}
	return &this
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ModelsUserList) GetPagination() ModelsPagination {
	if o == nil || IsNil(o.Pagination) {
		var ret ModelsPagination
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserList) GetPaginationOk() (*ModelsPagination, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ModelsUserList) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given ModelsPagination and assigns it to the Pagination field.
func (o *ModelsUserList) SetPagination(v ModelsPagination) {
	o.Pagination = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *ModelsUserList) GetUsers() []ModelsUser {
	if o == nil || IsNil(o.Users) {
		var ret []ModelsUser
		return ret
	}
	return o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelsUserList) GetUsersOk() ([]ModelsUser, bool) {
	if o == nil || IsNil(o.Users) {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *ModelsUserList) HasUsers() bool {
	if o != nil && !IsNil(o.Users) {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []ModelsUser and assigns it to the Users field.
func (o *ModelsUserList) SetUsers(v []ModelsUser) {
	o.Users = v
}

func (o ModelsUserList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelsUserList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	if !IsNil(o.Users) {
		toSerialize["users"] = o.Users
	}
	return toSerialize, nil
}

type NullableModelsUserList struct {
	value *ModelsUserList
	isSet bool
}

func (v NullableModelsUserList) Get() *ModelsUserList {
	return v.value
}

func (v *NullableModelsUserList) Set(val *ModelsUserList) {
	v.value = val
	v.isSet = true
}

func (v NullableModelsUserList) IsSet() bool {
	return v.isSet
}

func (v *NullableModelsUserList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelsUserList(val *ModelsUserList) *NullableModelsUserList {
	return &NullableModelsUserList{value: val, isSet: true}
}

func (v NullableModelsUserList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelsUserList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


