/**
 * Monad API
 * This is the monad API
 *
 * OpenAPI spec version: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* Aws Certificate Manager settings
*/
export class CertificateManagerSettingsConfig {
    'certificateStatuses'?: Array<CertificateManagerSettingsConfigCertificateStatusesEnum>;
    /**
    * Cron expression for scheduling the input
    */
    'cron'?: string;
    /**
    * includes struct
    */
    'extendedKeyUsage'?: Array<CertificateManagerSettingsConfigExtendedKeyUsageEnum>;
    'keyTypes'?: Array<CertificateManagerSettingsConfigKeyTypesEnum>;
    'keyUsage'?: Array<CertificateManagerSettingsConfigKeyUsageEnum>;
    'managedBy'?: CertificateManagerSettingsConfigManagedByEnum;
    'regions'?: Array<CertificateManagerSettingsConfigRegionsEnum>;
    /**
    * The ARN of the role to assume to access the bucket
    */
    'roleArn'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "certificateStatuses",
            "baseName": "certificate_statuses",
            "type": "Array<CertificateManagerSettingsConfigCertificateStatusesEnum>",
            "format": ""
        },
        {
            "name": "cron",
            "baseName": "cron",
            "type": "string",
            "format": ""
        },
        {
            "name": "extendedKeyUsage",
            "baseName": "extended_key_usage",
            "type": "Array<CertificateManagerSettingsConfigExtendedKeyUsageEnum>",
            "format": ""
        },
        {
            "name": "keyTypes",
            "baseName": "key_types",
            "type": "Array<CertificateManagerSettingsConfigKeyTypesEnum>",
            "format": ""
        },
        {
            "name": "keyUsage",
            "baseName": "key_usage",
            "type": "Array<CertificateManagerSettingsConfigKeyUsageEnum>",
            "format": ""
        },
        {
            "name": "managedBy",
            "baseName": "managed_by",
            "type": "CertificateManagerSettingsConfigManagedByEnum",
            "format": ""
        },
        {
            "name": "regions",
            "baseName": "regions",
            "type": "Array<CertificateManagerSettingsConfigRegionsEnum>",
            "format": ""
        },
        {
            "name": "roleArn",
            "baseName": "role_arn",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return CertificateManagerSettingsConfig.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum CertificateManagerSettingsConfigCertificateStatusesEnum {
    PendingValidation = 'PENDING_VALIDATION',
    Issued = 'ISSUED',
    Inactive = 'INACTIVE',
    Expired = 'EXPIRED',
    ValidationTimedOut = 'VALIDATION_TIMED_OUT',
    Revoked = 'REVOKED',
    Failed = 'FAILED'
}
export enum CertificateManagerSettingsConfigExtendedKeyUsageEnum {
    TlsWebServerAuthentication = 'TLS_WEB_SERVER_AUTHENTICATION',
    TlsWebClientAuthentication = 'TLS_WEB_CLIENT_AUTHENTICATION',
    CodeSigning = 'CODE_SIGNING',
    EmailProtection = 'EMAIL_PROTECTION',
    TimeStamping = 'TIME_STAMPING',
    OcspSigning = 'OCSP_SIGNING',
    IpsecEndSystem = 'IPSEC_END_SYSTEM',
    IpsecTunnel = 'IPSEC_TUNNEL',
    IpsecUser = 'IPSEC_USER',
    Any = 'ANY',
    None = 'NONE',
    Custom = 'CUSTOM'
}
export enum CertificateManagerSettingsConfigKeyTypesEnum {
    Rsa1024 = 'RSA_1024',
    Rsa2048 = 'RSA_2048',
    Rsa3072 = 'RSA_3072',
    Rsa4096 = 'RSA_4096',
    EcPrime256v1 = 'EC_prime256v1',
    EcSecp384r1 = 'EC_secp384r1',
    EcSecp521r1 = 'EC_secp521r1'
}
export enum CertificateManagerSettingsConfigKeyUsageEnum {
    DigitalSignature = 'DIGITAL_SIGNATURE',
    NonRepudiation = 'NON_REPUDIATION',
    KeyEncipherment = 'KEY_ENCIPHERMENT',
    DataEncipherment = 'DATA_ENCIPHERMENT',
    KeyAgreement = 'KEY_AGREEMENT',
    CertificateSigning = 'CERTIFICATE_SIGNING',
    CrlSigning = 'CRL_SIGNING',
    EncipherOnly = 'ENCIPHER_ONLY',
    DecipherOnly = 'DECIPHER_ONLY',
    Any = 'ANY',
    Custom = 'CUSTOM'
}
export enum CertificateManagerSettingsConfigManagedByEnum {
    Cloudfront = 'CLOUDFRONT'
}
export enum CertificateManagerSettingsConfigRegionsEnum {
    UsEast1 = 'us-east-1',
    UsEast2 = 'us-east-2',
    UsWest1 = 'us-west-1',
    UsWest2 = 'us-west-2',
    AfSouth1 = 'af-south-1',
    ApEast1 = 'ap-east-1',
    ApSouth1 = 'ap-south-1',
    ApNortheast1 = 'ap-northeast-1',
    ApNortheast2 = 'ap-northeast-2',
    ApNortheast3 = 'ap-northeast-3',
    ApSoutheast1 = 'ap-southeast-1',
    ApSoutheast2 = 'ap-southeast-2',
    CaCentral1 = 'ca-central-1',
    CnNorth1 = 'cn-north-1',
    CnNorthwest1 = 'cn-northwest-1',
    EuCentral1 = 'eu-central-1',
    EuWest1 = 'eu-west-1',
    EuWest2 = 'eu-west-2',
    EuWest3 = 'eu-west-3',
    EuNorth1 = 'eu-north-1',
    EuSouth1 = 'eu-south-1',
    MeSouth1 = 'me-south-1',
    SaEast1 = 'sa-east-1',
    UsGovEast1 = 'us-gov-east-1',
    UsGovWest1 = 'us-gov-west-1'
}

