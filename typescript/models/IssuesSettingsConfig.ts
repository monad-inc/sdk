/**
 * Monad Swagger API
 * This is the monad API
 *
 * OpenAPI spec version: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { HttpFile } from '../http/http';

/**
* Wiz Issues settings
*/
export class IssuesSettingsConfig {
    /**
    * @Description Filter Issues created by specific control IDs
    */
    'controlIds'?: Array<string>;
    /**
    * @Description Filter Issues with or without a note
    */
    'hasNote'?: string;
    /**
    * @Description Filter Issues with or without remediation
    */
    'hasRemediation'?: string;
    /**
    * @Description Filter Issues with or without related service ticket
    */
    'hasServiceTicket'?: string;
    /**
    * @Description Filter only Issues that match these specific IDs
    */
    'issueIds'?: Array<string>;
    /**
    * @Description Filter by Issue type
    */
    'issueTypes'?: Array<IssuesSettingsConfigIssueTypesEnum>;
    /**
    * @Description Filter Issues associated with specific project IDs
    */
    'projectIds'?: Array<string>;
    /**
    * @Description Filter by related entity ids
    */
    'relatedEntityId'?: string;
    /**
    * @Description Filter Issues by resolution reason
    */
    'resolutionReasons'?: Array<IssuesSettingsConfigResolutionReasonsEnum>;
    /**
    * @Description Filters Issues by risk type according to Wiz-defined types of risk @Description Use the risk ID and not the risk name @Description All specified risks must be present
    */
    'riskEqualsAll'?: Array<string>;
    /**
    * @Description Filters Issues by risk type according to Wiz-defined types of risk @Description Use the risk ID and not the risk name
    */
    'riskEqualsAny'?: Array<string>;
    /**
    * @Description Free text search on Issue title or object name @Description Returns NULL if no match is found
    */
    'searchQuery'?: string;
    /**
    * @Description Filter by security scan source
    */
    'securityScan'?: string;
    /**
    * @Description Filter Issues according to Control severity
    */
    'severities'?: Array<IssuesSettingsConfigSeveritiesEnum>;
    /**
    * @Description Filter Issues from specific stack layers
    */
    'stackLayers'?: Array<IssuesSettingsConfigStackLayersEnum>;
    /**
    * @Description Filter by Issue handling status @Description Default: OPEN
    */
    'status'?: Array<IssuesSettingsConfigStatusEnum>;
    /**
    * DataCenter represents the tenant\'s data center location @Description Enter a tenant data center, e.g., \"us1\", \"us2\", \"us3\" @Description Find your tenant data center on the Tenant Info page in Wiz, or request it from your Wiz customer contact
    */
    'tenantDataCenter'?: string;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "controlIds",
            "baseName": "control_ids",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "hasNote",
            "baseName": "has_note",
            "type": "string",
            "format": ""
        },
        {
            "name": "hasRemediation",
            "baseName": "has_remediation",
            "type": "string",
            "format": ""
        },
        {
            "name": "hasServiceTicket",
            "baseName": "has_service_ticket",
            "type": "string",
            "format": ""
        },
        {
            "name": "issueIds",
            "baseName": "issue_ids",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "issueTypes",
            "baseName": "issue_types",
            "type": "Array<IssuesSettingsConfigIssueTypesEnum>",
            "format": ""
        },
        {
            "name": "projectIds",
            "baseName": "project_ids",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "relatedEntityId",
            "baseName": "related_entity_id",
            "type": "string",
            "format": ""
        },
        {
            "name": "resolutionReasons",
            "baseName": "resolution_reasons",
            "type": "Array<IssuesSettingsConfigResolutionReasonsEnum>",
            "format": ""
        },
        {
            "name": "riskEqualsAll",
            "baseName": "risk_equals_all",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "riskEqualsAny",
            "baseName": "risk_equals_any",
            "type": "Array<string>",
            "format": ""
        },
        {
            "name": "searchQuery",
            "baseName": "search_query",
            "type": "string",
            "format": ""
        },
        {
            "name": "securityScan",
            "baseName": "security_scan",
            "type": "string",
            "format": ""
        },
        {
            "name": "severities",
            "baseName": "severities",
            "type": "Array<IssuesSettingsConfigSeveritiesEnum>",
            "format": ""
        },
        {
            "name": "stackLayers",
            "baseName": "stack_layers",
            "type": "Array<IssuesSettingsConfigStackLayersEnum>",
            "format": ""
        },
        {
            "name": "status",
            "baseName": "status",
            "type": "Array<IssuesSettingsConfigStatusEnum>",
            "format": ""
        },
        {
            "name": "tenantDataCenter",
            "baseName": "tenant_data_center",
            "type": "string",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return IssuesSettingsConfig.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum IssuesSettingsConfigIssueTypesEnum {
    ToxicCombination = 'TOXIC_COMBINATION',
    ThreatDetection = 'THREAT_DETECTION',
    CloudConfiguration = 'CLOUD_CONFIGURATION'
}
export enum IssuesSettingsConfigResolutionReasonsEnum {
    ControlChanged = 'CONTROL_CHANGED',
    ControlDisabled = 'CONTROL_DISABLED',
    ControlDeleted = 'CONTROL_DELETED',
    Exception = 'EXCEPTION',
    FalsePositive = 'FALSE_POSITIVE',
    WontFix = 'WONT_FIX',
    ObjectDeleted = 'OBJECT_DELETED',
    IssueFixed = 'ISSUE_FIXED'
}
export enum IssuesSettingsConfigSeveritiesEnum {
    Informational = 'INFORMATIONAL',
    Low = 'LOW',
    Medium = 'MEDIUM',
    High = 'HIGH',
    Critical = 'CRITICAL'
}
export enum IssuesSettingsConfigStackLayersEnum {
    ApplicationAndData = 'APPLICATION_AND_DATA',
    CiCd = 'CI_CD',
    SecurityAndIdentity = 'SECURITY_AND_IDENTITY',
    ComputePlatforms = 'COMPUTE_PLATFORMS',
    Code = 'CODE',
    CloudEntitlements = 'CLOUD_ENTITLEMENTS',
    DataStores = 'DATA_STORES'
}
export enum IssuesSettingsConfigStatusEnum {
    Open = 'OPEN',
    InProgress = 'IN_PROGRESS',
    Resolved = 'RESOLVED',
    Rejected = 'REJECTED'
}

